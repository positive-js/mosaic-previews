{"version":3,"file":"default-dist_mosaic_fesm2015_ptsecurity-mosaic-textarea_js-es2015.js","mappings":"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","sources":["./packages/mosaic/textarea/textarea.component.ts","./packages/mosaic/textarea/textarea.module.ts","./packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit,\n    AfterContentInit\n} from '@angular/core';\nimport { FormGroupDirective, NG_VALIDATORS, NgControl, NgForm, NgModel, Validator } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    setMosaicValidation,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState, AfterContentInit {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() @Self() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.ngControl) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["MC_TEXTAREA_VALUE_ACCESSOR","InjectionToken","nextUniqueId","McTextareaBase","constructor","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","elementRef","rawValidators","mcValidation","ngModel","inputValueAccessor","ngZone","Subject","valueAccessor","nativeElement","previousNativeValue","value","id","growObserver","fromEvent","growSubscription","subscribe","grow","bind","disabled","_disabled","coerceBooleanProperty","focused","stateChanges","next","_id","uid","required","_required","ngOnInit","setTimeout","lineHeight","parseInt","getComputedStyle","paddingTop","paddingBottom","minHeight","freeRowsHeight","ngOnChanges","ngOnDestroy","complete","unsubscribe","ngAfterContentInit","useValidation","setMosaicValidation","ngDoCheck","updateErrorState","dirtyCheckNativeValue","canGrow","runOutsideAngular","textarea","outerHeight","window","height","diff","clientHeight","style","Math","max","scrollHeight","focus","focusChanged","isFocused","empty","isBadInput","onContainerClick","newValue","validity","badInput","i0","NG_VALIDATORS","MC_VALIDATION","i1","provide","McFormFieldControl","useExisting","Directive","selector","exportAs","host","class","providers","Optional","Self","Inject","Input","errorStateMatcher","placeholder","McTextareaModule","CommonModule","A11yModule","McCommonModule","FormsModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}