{"version":3,"file":"default-dist_mosaic_fesm2020_ptsecurity-mosaic-radio_mjs.js","mappings":"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","sources":["./packages/mosaic/radio/radio.component.ts","./packages/mosaic/radio/radio.component.html","./packages/mosaic/radio/radio.module.ts","./packages/mosaic/radio/ptsecurity-mosaic-radio.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(elementRef: ElementRef, private readonly _changeDetector: ChangeDetectorRef) {\n        super(elementRef);\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nabstract class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    abstract disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor & HasTabIndexCtor & typeof McRadioButtonBase = mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-selected]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["nextUniqueId","McRadioChange","constructor","source","value","McRadioGroupBase","_elementRef","McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McRadioGroup","multi","elementRef","_changeDetector","EventEmitter","name","_name","updateRadioButtonNames","labelPosition","_labelPosition","v","markRadiosForCheck","_value","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","selected","_selected","disabled","_disabled","toBoolean","required","_required","checked","ngAfterContentInit","isInitialized","touch","onTouched","emitChangeEvent","change","emit","radios","forEach","radio","markForCheck","writeValue","registerOnChange","fn","controlValueAccessorChangeFn","registerOnTouched","setDisabledState","isDisabled","isAlreadySelected","i0","McRadioButton","Directive","selector","exportAs","host","role","class","providers","Input","Output","ContentChildren","descendants","McRadioButtonBase","McRadioButtonMixinBase","mixinColor","mixinTabIndex","radioGroup","focusMonitor","_radioDispatcher","id","uniqueId","removeUniqueSelectionListener","listen","_checked","newCheckedState","notify","newDisabledState","inputId","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","focus","inputElement","nativeElement","onInputClick","event","stopPropagation","onInputChange","groupValueChanged","Component","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","template","styles","decorators","Optional","ariaLabel","ariaLabelledby","ariaDescribedby","ViewChild","static","isFocused","McRadioModule","CommonModule","A11yModule","McCommonModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}