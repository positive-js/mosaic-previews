{"version":3,"file":"node_modules_ptsecurity_mosaic-examples_fesm2020_ptsecurity-mosaic-examples-mosaic-tree-select_mjs.js","mappings":"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AAD;AAZL;AAcqB;;AC1B/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAsC;AACS;AACX;AACuC;AACtC;AAC0C;AACjC;AACc;AACR;AACc;AACpB;AACS;AACN;AACQ;AACC;AACoB;AAC5B;AACS;AACb;AACkF;AAC3E;AACe;AACnC;AACa;;AAE9C;AACA,sFAAsF;AACtF,IAAI,4DAAiB;AACrB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,gEAAqB;AACzB;AACA,sFAAsF;AACtF,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,yDAAc;AAClB,IAAI,uDAAY;AAChB,IAAI,gEAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G;AAC7G,6DAA6D,+DAAoB,GAAG,2LAA2L;AAC/Q,QAAQ,yDAAc,CAAC,oEAAe;AACtC,MAAM;AACN;AACA,QAAQ,4DAAiB,MAAM,yDAAc;AAC7C,OAAO,+cAA+c;AACtd,QAAQ,4DAAiB;AACzB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,kIAAkI,uCAAuC;AAC9L,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,sEAAc,EAAE,wEAAe,EAAE,2DAAkB,EAAE,gEAAuB,EAAE,oEAAkB,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,2DAAS,EAAE,oEAAkB,EAAE,8EAA4B,iBAAiB;AAC7P,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,+dAA+d,iCAAiC,2GAA2G,2aAA2a,iCAAiC,yHAAyH;AACjsC,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,oDAAS;AAC3B,mBAAmB,oEAAe;AAClC,SAAS,GAAG,IAAI;;AAEhB;AACA,8EAA8E;AAC9E,IAAI,4DAAiB;AACrB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,gEAAqB;AACzB;AACA,8EAA8E;AAC9E,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,yDAAc;AAClB,IAAI,uDAAY;AAChB,IAAI,gEAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F,qDAAqD,+DAAoB,GAAG,4hBAA4hB;AACxmB,QAAQ,4DAAiB;AACzB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,sHAAsH,+BAA+B;AAC1K,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,QAAQ,uDAAY;AACpB,QAAQ,4DAAiB;AACzB,QAAQ,oDAAS;AACjB,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDA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E,iEAAe,EAAE,sEAAoB,EAAE,2DAAS,EAAE,oEAAkB,EAAE,8EAA4B,EAAE,iDAAO,EAAE,mFAAoB,EAAE,oEAAY,iBAAiB;AAC7R,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,gXAAgX,iCAAiC,0FAA0F,yaAAya,iCAAiC,+KAA+K;AACrnC,KAAK,iBAAiB,UAAU,2BAA2B,IAAI,UAAU;;AAEzE;AACA,gFAAgF;AAChF,IAAI,4DAAiB;AACrB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,gEAAqB;AACzB;AACA,gFAAgF;AAChF,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,yDAAc;AAClB,IAAI,uDAAY;AAChB,IAAI,gEAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA,iCAAiC,oEAAe;AAC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uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa,cAAc,yDAAc,wFAAwF,4DAAiB;AACtJ;AACA,+EAA+E;AAC/E,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,yDAAc;AAClB,IAAI,uDAAY;AAChB,IAAI,wDAAa,cAAc,yDAAc,wFAAwF,4DAAiB;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F,qDAAqD,+DAAoB,GAAG,qsBAAqsB;AACjxB,QAAQ,4DAAiB;AACzB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,sHAAsH,+BAA+B;AAC1K,QAAQ,4DAAiB;AACzB,QAAQ,uDAAY;AACpB,QAAQ,uDAAY;AACpB,QAAQ,uDAAY;AACpB,QAAQ,0DAAe;AACvB,QAAQ,4DAAiB;AACzB,QAAQ,oDAAS;AACjB,QAAQ,0DAAe;AACvB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,QAAQ,uDAAY;AACpB,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,sEAAc,EAAE,wEAAe,EAAE,2DAAkB,EAAE,mDAAU,EAAE,oFAA4B,EAAE,sEAAmB,EAAE,mEAAW,EAAE,2DAAS,EAAE,oEAAkB,EAAE,8DAAY,EAAE,gEAAuB,EAAE,gEAAuB,EAAE,oEAAY,EAAE,iFAA8B,EAAE,oEAAkB,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,8EAA4B,WAAW,qEAAkB,iBAAiB;AAC3b,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,88BAA88B,4hBAA4hB;AAC3/C,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E,8CAA8C,8DAAmB,GAAG,gCAAgC;AACpG,8CAA8C,8DAAmB,GAAG;AACpE,YAAY,yDAAY;AACxB,YAAY,uDAAW;AACvB,YAAY,+DAAmB;AAC/B,YAAY,4EAAiB;AAC7B,YAAY,iEAAY;AACxB,YAAY,sEAAc;AAC1B,YAAY,uEAAiB;AAC7B,YAAY,8EAAkB;AAC9B,YAAY,oEAAa;AACzB,YAAY,iEAAY;AACxB,YAAY,yFAAuB;AACnC,YAAY;AACZ,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,mDAAQ;AACtB;AACA;AACA,oBAAoB,yDAAY;AAChC,oBAAoB,uDAAW;AAC/B,oBAAoB,+DAAmB;AACvC,oBAAoB,4EAAiB;AACrC,oBAAoB,iEAAY;AAChC,oBAAoB,sEAAc;AAClC,oBAAoB,uEAAiB;AACrC,oBAAoB,8EAAkB;AACtC,oBAAoB,oEAAa;AACjC,oBAAoB,iEAAY;AAChC,oBAAoB,yFAAuB;AAC3C;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAqB,6BAA6B;AACpH;AACA;AACA;AACA;AACA,oDAAoD,yDAAY;AAChE,QAAQ,uDAAW;AACnB,QAAQ,+DAAmB;AAC3B,QAAQ,4EAAiB;AACzB,QAAQ,iEAAY;AACpB,QAAQ,sEAAc;AACtB,QAAQ,uEAAiB;AACzB,QAAQ,8EAAkB;AAC1B,QAAQ,oEAAa;AACrB,QAAQ,iEAAY;AACpB,QAAQ,yFAAuB;AAC/B;AACA;AACA;AACA;AACA,0CAA0C,IAAI;;AAE9C;AACA;AACA;;AAEwO","sources":["./packages/mosaic/tree-select/tree-select.component.ts","./packages/mosaic/tree-select/tree-select.html","./packages/mosaic/tree-select/tree-select.module.ts","./packages/mosaic/tree-select/ptsecurity-mosaic-tree-select.ts","./node_modules/@ptsecurity/mosaic-examples/fesm2020/ptsecurity-mosaic-examples-mosaic-tree-select.mjs"],"sourcesContent":["/* tslint:disable:no-empty */\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    CdkConnectedOverlay,\n    ConnectedPosition,\n    ViewportRuler\n} from '@angular/cdk/overlay';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControlName,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    NgModel,\n    Validator\n} from '@angular/forms';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A,\n    PAGE_UP,\n    PAGE_DOWN,\n    hasModifierKey\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n    MC_SELECT_SCROLL_STRATEGY,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MultipleMode,\n\n    MC_VALIDATION,\n    setMosaicValidation,\n    McValidationOptions\n} from '@ptsecurity/mosaic/core';\nimport { McCleaner, McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McSelectSearch } from '@ptsecurity/mosaic/select';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTree, McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged,\n    startWith\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeSelect, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n@Directive({ selector: 'mc-tree-select-footer' })\nexport class McTreeSelectFooter {}\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.scss'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.disabled]': 'disabled || null',\n\n        '(click)': 'toggle()',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: McTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<McTreeOption>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'select';\n\n    hiddenItems: number = 0;\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<any>;\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions: ConnectedPosition[] = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    options: QueryList<McTreeOption>;\n\n    @ViewChild('trigger', { static: false }) trigger: ElementRef;\n\n    @ViewChild('panel', { static: false }) panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, { static: false }) overlayDir: CdkConnectedOverlay;\n\n    @ViewChild('hiddenItemsCounter', { static: false }) hiddenItemsCounter: ElementRef;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ContentChild('mcSelectCleaner', { static: true }) cleaner: McCleaner;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger, { static: false }) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection, { static: false }) tree: McTreeSelection;\n\n    @ContentChild(McSelectSearch, { static: false }) search: McSelectSearch;\n\n    @Input() hiddenItemsText: string = '...ещё';\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    @Input() backdropClass: string = 'cdk-overlay-transparent-backdrop';\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McTreeOption, b: McTreeOption, options: McTreeOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return this.options.changes.pipe(\n                startWith(this.options),\n                switchMap(() => merge(...this.options.map((option) => option.onSelectionChange)))\n            );\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    get value(): any {\n        return this.multiple ? this.tree.getSelectedValues() : this.tree.getSelectedValues()[0];\n    }\n\n    private _value: any = null;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    @Input()\n    get hasBackdrop(): boolean {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    private _hasBackdrop: boolean = false;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.cleaner && this.selectionModel.hasValue();\n    }\n\n    isEmptySearchResult: boolean;\n\n    private closeSubscription = Subscription.EMPTY;\n\n    private _panelOpen = false;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string | string[] | null;\n\n    constructor(\n        elementRef: ElementRef,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly viewportRuler: ViewportRuler,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory,\n        @Optional() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Optional() @Self() ngControl: NgControl,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() @Self() public formControlName: FormControlName\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n\n                    if (this.search) { this.search.focus(); }\n\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n\n        this.tree.resetFocusedItemOnBlur = false;\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<any>(this.multiple);\n\n        this.selectionModel.changed\n            .subscribe(() => this.onChange(this.selectedValues));\n\n        this.tree.ngAfterContentInit();\n\n        this.initKeyManager();\n\n        this.options = this.tree.renderedOptions;\n        this.tree.autoSelect = this.autoSelect;\n\n        if (this.tree.multipleMode === null) {\n            this.tree.multipleMode = this.multiple ? MultipleMode.CHECKBOX : null;\n        }\n\n        if (this.multiple) {\n            this.tree.noUnselectLast = false;\n        }\n\n        if (this.tempValues) {\n            this.setSelectionByValue(this.tempValues);\n            this.tempValues = null;\n        }\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (!this.multiple && this.panelOpen && event.isUserInput) {\n                    this.close();\n                }\n            });\n\n        this.tree.selectionChange\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                this.onChange(this.selectedValues);\n\n                this.selectionChange.emit(new McTreeSelectChange(this, event.option));\n\n                if (this.search) {\n                    this.search.focus();\n                }\n            });\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (event.added.length) {\n                    this.tree.keyManager.setFocusOrigin('program');\n                    this.tree.keyManager.setActiveItem(\n                        this.options.find((option) => option.data === event.added[0]) as any\n                    );\n                }\n            });\n\n        this.updateIsEmptySearchResult();\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        setTimeout(() => this.calculateHiddenItems(), 0);\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n        this.closeSubscription.unsubscribe();\n    }\n\n    @Input()\n    hiddenItemsTextFormatter(hiddenItemsText: string, hiddenItems: number): string {\n        return `${hiddenItemsText} ${hiddenItems}`;\n    }\n\n    clearValue($event): void {\n        $event.stopPropagation();\n\n        this.selectionModel.clear();\n        this.tree.keyManager.setActiveItem(-1);\n\n        this.setSelectionByValue([]);\n\n        this.onChange(this.selectedValues);\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n\n        setTimeout(() => this.highlightCorrectOption());\n\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (!this._panelOpen) { return; }\n\n        this._panelOpen = false;\n\n        this.changeDetectorRef.markForCheck();\n        this.onTouched();\n\n        if (this.search) {\n            this.search.reset();\n        }\n\n        setTimeout(() => this.focus(), 0);\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.tree) {\n            this.setSelectionByValue(value);\n        } else {\n            this.tempValues = value;\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): any {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get selectedValues(): any {\n        const selectedValues = this.selectionModel.selected.map((value) => this.tree.treeControl.getValue(value));\n\n        return this.multiple ? selectedValues : selectedValues[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return this.tree.treeControl.getViewValue(this.selected);\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        return this.selectedValues\n            .map((value) => this.options.find((option) => option.value === value))\n            .filter((option) => option);\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n\n                this.tree.updateScrollSize();\n            });\n\n        this.closeSubscription = this.closingActions()\n            .subscribe(() => this.close());\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: any, $event) {\n        $event.stopPropagation();\n\n        this.selectionModel\n            .deselect(this.selected.find((value) => this.tree.treeControl.getValue(value) === selectedOption.value));\n\n        this.onChange(this.selectedValues);\n    }\n\n    calculateHiddenItems() {\n        if (this.customTrigger || this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += this.getItemWidth(tag.nativeElement);\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private closingActions() {\n        const backdrop = this.overlayDir.overlayRef!.backdropClick();\n        const outsidePointerEvents = this.overlayDir.overlayRef!.outsidePointerEvents();\n        const detachments = this.overlayDir.overlayRef!.detachments();\n\n        return merge(backdrop, outsidePointerEvents, detachments);\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += this.getItemWidth(item);\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private getItemWidth(element: HTMLElement): number {\n        const computedStyle = window.getComputedStyle(element);\n\n        const width: number = parseInt(computedStyle.width as string);\n        const marginLeft: number = parseInt(computedStyle.marginLeft as string);\n        const marginRight: number = parseInt(computedStyle.marginRight as string);\n\n        return width + marginLeft + marginRight;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            this.tree.keyManager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            this.tree.keyManager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            this.tree.keyManager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            this.tree.keyManager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            if (!this.autoSelect) {\n                this.selectionModel.toggle(this.tree.keyManager.activeItem.data);\n            } else {\n                this.close();\n            }\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.setFocusOrigin('keyboard');\n            this.tree.keyManager.onKeydown(event);\n\n            if (\n                this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex\n            ) {\n                this.tree.keyManager.activeItem.selectViaInteraction(event);\n            }\n\n            if (this.autoSelect && this.tree.keyManager.activeItem) {\n                this.tree.setSelectedOptionsByKey(\n                    this.tree.keyManager.activeItem, hasModifierKey(event, 'shiftKey'), hasModifierKey(event, 'ctrlKey')\n                );\n            }\n\n            if (this.search) {\n                this.search.focus();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.tree.setOptionsFromValues(value);\n\n            this.sortValues();\n        } else {\n            this.tree.setOptionsFromValues([value]);\n        }\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.empty || !this.tree.keyManager) { return; }\n\n        const firstSelectedValue = this.multiple ? this.selectedValues[0] : this.selectedValues;\n\n        const selectedOption = this.options.find((option) => option.value === firstSelectedValue);\n\n        if (selectedOption) {\n            this.tree.keyManager.setFocusOrigin('keyboard');\n            this.tree.keyManager.setActiveItem(selectedOption);\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.tree.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    private updateIsEmptySearchResult() {\n        if (this.search) {\n            this.search.input.ngControl.valueChanges?.subscribe((value) => {\n                this.isEmptySearchResult = !!value && this.tree.isEmpty;\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n}\n","<div cdk-overlay-origin\n     class=\"mc-tree-select__trigger\"\n     [class.mc-tree-select__trigger_multiple]=\"multiple\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n    <div class=\"mc-tree-select__matcher\" [ngSwitch]=\"empty\">\n        <span class=\"mc-tree-select__placeholder\" *ngSwitchCase=\"true\">{{ placeholder || '\\u00A0' }}</span>\n        <span *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n            <div *ngSwitchDefault [ngSwitch]=\"multiple\" class=\"mc-tree-select__match-container\">\n                <span *ngSwitchCase=\"false\" class=\"mc-tree-select__matcher-text\">{{ triggerValue }}</span>\n                <div *ngSwitchCase=\"true\" class=\"mc-tree-select__multiple-matcher\">\n                    <div class=\"mc-tree-select__match-list\">\n                        <mc-tag *ngFor=\"let option of triggerValues\"\n                            [selectable]=\"false\"\n                            [disabled]=\"option.disabled || disabled\"\n                            [class.mc-error]=\"errorState\">\n\n                            {{ option.viewValue }}\n                            <i mc-icon=\"mc-close-S_16\"\n                               *ngIf=\"!option.disabled && !disabled\"\n                               (click)=\"onRemoveSelectedOption(option, $event)\">\n                            </i>\n                        </mc-tag>\n                    </div>\n                    <div class=\"mc-tree-select__match-hidden-text\"\n                         [style.display]=\"hiddenItems > 0 ? 'block' : 'none'\"\n                         #hiddenItemsCounter>\n                        {{ hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) }}\n                    </div>\n                </div>\n            </div>\n            <ng-content select=\"mc-tree-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n        </span>\n    </div>\n\n    <div class=\"mc-select__cleaner\" *ngIf=\"canShowCleaner\" (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <div class=\"mc-tree-select__arrow-wrapper\">\n        <i class=\"mc-tree-select__arrow\" mc-icon=\"mc-angle-down-L_16\"></i>\n    </div>\n</div>\n\n<ng-template\n    cdk-connected-overlay\n    cdkConnectedOverlayLockPosition\n    [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n    [cdkConnectedOverlayBackdropClass]=\"backdropClass\"\n    [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"positions\"\n    [cdkConnectedOverlayMinWidth]=\"triggerRect?.width!\"\n    [cdkConnectedOverlayOffsetY]=\"offsetY\"\n    (backdropClick)=\"close()\"\n    (attach)=\"onAttached()\"\n    (detach)=\"close()\">\n\n    <div #panel\n         class=\"mc-tree-select__panel {{ getPanelTheme() }}\"\n         [ngClass]=\"panelClass\"\n         [style.transformOrigin]=\"transformOrigin\"\n         [style.font-size.px]=\"triggerFontSize\"\n         (keydown)=\"handleKeydown($event)\">\n         \n        <div *ngIf=\"search\" class=\"mc-select__search-container\">\n            <ng-content select=\"[mcSelectSearch]\"></ng-content>\n        </div>\n\n        <div *ngIf=\"isEmptySearchResult\" class=\"mc-select__no-options-message\">\n            <ng-content select=\"[mc-select-search-empty-result]\"></ng-content>\n        </div>\n\n        <div #optionsContainer\n            class=\"mc-tree-select__content\"\n            [@fadeInContent]=\"'showing'\"\n            (@fadeInContent.done)=\"panelDoneAnimatingStream.next($event.toState)\">\n            <ng-content select=\"mc-tree-selection\"></ng-content>\n        </div>\n\n        <ng-content select=\"[mc-tree-selection-footer]\"></ng-content>\n    </div>\n</ng-template>\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McSelectModule } from '@ptsecurity/mosaic/select';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectFooter, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule,\n        McSelectModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, McTreeSelectFooter, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger, McTreeSelectFooter],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewChild, Injectable, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i8 from '@ptsecurity/mosaic/core';\nimport { McHighlightModule } from '@ptsecurity/mosaic/core';\nimport * as i1 from '@ptsecurity/mosaic/form-field';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport * as i5 from '@ptsecurity/mosaic/icon';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport * as i6$1 from '@ptsecurity/mosaic/input';\nimport { McInputModule } from '@ptsecurity/mosaic/input';\nimport * as i7 from '@ptsecurity/mosaic/progress-spinner';\nimport { McProgressSpinnerModule } from '@ptsecurity/mosaic/progress-spinner';\nimport * as i4$1 from '@ptsecurity/mosaic/select';\nimport { McSelectModule } from '@ptsecurity/mosaic/select';\nimport * as i4 from '@ptsecurity/mosaic/tree';\nimport { McTreeFlattener, FlatTreeControl, McTreeFlatDataSource, McTreeSelection, McTreeModule } from '@ptsecurity/mosaic/tree';\nimport * as i2 from '@ptsecurity/mosaic/tree-select';\nimport { McTreeSelectModule } from '@ptsecurity/mosaic/tree-select';\nimport { isEqual } from 'lodash';\nimport { BehaviorSubject, timer } from 'rxjs';\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectChildSelectionOverviewExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r2), \" \");\n} }\nfunction TreeSelectChildSelectionOverviewExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"checkboxState\", ctx_r1.descendantsAllSelected(node_r3) ? \"checked\" : ctx_r1.descendantsPartiallySelected(node_r3) ? \"indeterminate\" : null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r3) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r3), \" \");\n} }\nclass FileNode$4 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$4 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$4(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$4();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$4(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$4 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic Select\n */\nclass TreeSelectChildSelectionOverviewExample {\n    constructor() {\n        this.control = new FormControl(['Downloads', 'rootNode_1']);\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$4();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n    onSelectionChange($event) {\n        this.toggleChildren($event);\n        this.toggleParents($event.value.data.parent);\n    }\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        return descendants.every((child) => this.selection?.selectionModel.isSelected(child));\n    }\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some((child) => this.selection?.selectionModel.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n    toggleChildren($event) {\n        const valuesToChange = this.treeControl.getDescendants($event.value.data);\n        if ($event.value.selected) {\n            this.selection.selectionModel.deselect(...valuesToChange);\n        }\n        else {\n            this.selection.selectionModel.select(...valuesToChange);\n        }\n        this.syncModel();\n    }\n    toggleParents(parent) {\n        if (!parent) {\n            return;\n        }\n        const descendants = this.treeControl.getDescendants(parent);\n        const isParentSelected = this.selection.selectionModel.selected.includes(parent);\n        if (!isParentSelected && descendants.every((d) => this.selection.selectionModel.selected.includes(d))) {\n            this.selection.selectionModel.select(parent);\n            this.toggleParents(parent.parent);\n        }\n        else if (isParentSelected) {\n            this.selection.selectionModel.deselect(parent);\n            this.toggleParents(parent.parent);\n        }\n        this.syncModel();\n    }\n    syncModel() {\n        this.control.setValue(this.selection.selectionModel.selected.map((o) => o.name));\n    }\n}\nTreeSelectChildSelectionOverviewExample.ɵfac = function TreeSelectChildSelectionOverviewExample_Factory(t) { return new (t || TreeSelectChildSelectionOverviewExample)(); };\nTreeSelectChildSelectionOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectChildSelectionOverviewExample, selectors: [[\"tree-select-child-selection-overview-example\"]], viewQuery: function TreeSelectChildSelectionOverviewExample_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(McTreeSelection, 5);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selection = _t.first);\n    } }, decls: 5, vars: 5, consts: [[3, \"multiple\", \"formControl\", \"selectionChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 3, \"checkboxState\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\"], [\"mcTreeNodePadding\", \"\", 3, \"checkboxState\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectChildSelectionOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"selectionChange\", function TreeSelectChildSelectionOverviewExample_Template_mc_tree_select_selectionChange_1_listener($event) { return ctx.onSelectionChange($event); });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectChildSelectionOverviewExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectChildSelectionOverviewExample_mc_tree_option_4_Template, 3, 4, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"multiple\", true)(\"formControl\", ctx.control);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.FormControlDirective, i4.McTreeSelection, i4.McTreeNodeDef, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectChildSelectionOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'tree-select-child-selection-overview-example', template: \"<mc-form-field>\\n    <mc-tree-select\\n        [multiple]=\\\"true\\\"\\n        [formControl]=\\\"control\\\"\\n        (selectionChange)=\\\"onSelectionChange($event)\\\"\\n    >\\n\\n        <mc-tree-selection\\n            [dataSource]=\\\"dataSource\\\"\\n            [treeControl]=\\\"treeControl\\\">\\n            <mc-tree-option\\n                *mcTreeNodeDef=\\\"let node\\\"\\n                mcTreeNodePadding>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n\\n            <mc-tree-option\\n                *mcTreeNodeDef=\\\"let node; when: hasChild\\\"\\n                mcTreeNodePadding\\n                [checkboxState]=\\\"descendantsAllSelected(node) ? 'checked' :\\n                                descendantsPartiallySelected(node) ? 'indeterminate' :\\n                                null\\\">\\n                <i mc-icon=\\\"mc-angle-down-S_16\\\" [style.transform]=\\\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\\\" mcTreeNodeToggle></i>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n        </mc-tree-selection>\\n    </mc-tree-select>\\n</mc-form-field>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, { selection: [{\n            type: ViewChild,\n            args: [McTreeSelection]\n        }] }); })();\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectFooterOverviewExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r3), \" \");\n} }\nfunction TreeSelectFooterOverviewExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"i\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r4), \" \");\n} }\nclass FileNode$3 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$3 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$3(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$3();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$3(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$3 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Tree select with footer\n */\nclass TreeSelectFooterOverviewExample {\n    constructor() {\n        this.selected = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$3();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectFooterOverviewExample.ɵfac = function TreeSelectFooterOverviewExample_Factory(t) { return new (t || TreeSelectFooterOverviewExample)(); };\nTreeSelectFooterOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectFooterOverviewExample, selectors: [[\"tree-select-footer-overview-example\"]], decls: 9, vars: 4, consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mc-tree-selection-footer\", \"\", 1, \"custom-footer\"], [\"mcTreeNodePadding\", \"\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectFooterOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectFooterOverviewExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectFooterOverviewExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectFooterOverviewExample_mc_tree_option_4_Template, 3, 3, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mc-cleaner\", null, 4);\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵtext(8, \"Custom footer\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i4.McTreeSelection, i4.McTreeNodeDef, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective, i1.McCleaner], styles: [\".custom-footer[_ngcontent-%COMP%]{padding:10px;text-align:center;border-top:1px solid #B3B3B3}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectFooterOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'tree-select-footer-overview-example', template: \"<mc-form-field>\\n    <mc-tree-select\\n        [(ngModel)]=\\\"selected\\\">\\n        <mc-tree-selection\\n            [dataSource]=\\\"dataSource\\\"\\n            [treeControl]=\\\"treeControl\\\">\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n                <i mc-icon=\\\"mc-angle-down-S_16\\\"\\n                   [style.transform]=\\\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\\\"\\n                   mcTreeNodeToggle>\\n                </i>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n        </mc-tree-selection>\\n\\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\\n\\n        <div mc-tree-selection-footer class=\\\"custom-footer\\\">Custom footer</div>\\n    </mc-tree-select>\\n</mc-form-field>\\n\", styles: [\".custom-footer{padding:10px;text-align:center;border-top:1px solid #B3B3B3}\\n\"] }]\n    }], function () { return []; }, null); })();\n\nfunction TreeSelectLazyloadExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r3), \" \");\n} }\nfunction TreeSelectLazyloadExample_mc_tree_option_4_mc_progress_spinner_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mc-progress-spinner\", 8);\n} }\nfunction TreeSelectLazyloadExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵtemplate(2, TreeSelectLazyloadExample_mc_tree_option_4_mc_progress_spinner_2_Template, 1, 0, \"mc-progress-spinner\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r4.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r4), \" \");\n} }\nclass FlatNode {\n}\nclass LazyLoadNode {\n    constructor(id, name, hasChildren = false, loading = false, loaded = false) {\n        this.id = id;\n        this.name = name;\n        this.hasChildren = hasChildren;\n        this.loading = loading;\n        this.loaded = loaded;\n        this.childrenChange = new BehaviorSubject([]);\n    }\n    get children() {\n        return this.childrenChange.value;\n    }\n}\nclass LazyLoadDataService {\n    constructor() {\n        this.dataChange = new BehaviorSubject([]);\n        this.nodeMap = new Map();\n    }\n    initialize() {\n        // example with http-request\n        /*this.http.get<INodeResponse[]>('/api/getTree').subscribe((data) => {\n            this.dataChange.next(\n                data.map((nodeResponse: INodeResponse) => {\n                        const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n                        this.nodeMap.set(nodeResponse.id, result);\n\n                        return result;\n                    }\n                )\n            );\n        });*/\n        this.dataChange.next(Array(10).fill({}).map((value, index) => {\n            const id = index.toString();\n            return {\n                ...value,\n                hasChildren: !(index % 2),\n                name: `node-${id}`,\n                id\n            };\n        }).map((nodeResponse) => {\n            const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n            this.nodeMap.set(nodeResponse.id, result);\n            return result;\n        }));\n    }\n    loadChildren(id) {\n        const parent = this.nodeMap.get(id);\n        if (parent.loading || (parent.hasChildren && parent.children.length)) {\n            return;\n        }\n        parent.loading = true;\n        this.nodeMap.set(parent.id, parent);\n        this.dataChange.next(this.dataChange.value);\n        // example with http-request\n        /* this.http.get<INodeResponse[]>(`/api/getChildren/${ id }`)\n            .pipe(\n                finalize(() => {\n                    parent.loading = false;\n                    this.nodeMap.set(parent.id, parent);\n                    this.dataChange.next(this.dataChange.value);\n                })\n            )\n            .subscribe((data) => {\n                const children = data.map((nodeResponse: INodeResponse) => {\n                        const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n                        this.nodeMap.set(nodeResponse.id, result);\n\n                        return result;\n                    }\n                );\n                parent.loaded = true;\n                parent.childrenChange.next(children);\n            });\n        */\n        timer(5000).subscribe(() => {\n            parent.childrenChange.next(Array(5).fill({}).map((value, index) => {\n                const childId = `${parent.id}-${index}`.toString();\n                return {\n                    ...value,\n                    hasChildren: !(index % 2),\n                    name: `node-${childId}`,\n                    id: childId\n                };\n            }).map((nodeResponse) => {\n                const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n                this.nodeMap.set(nodeResponse.id, result);\n                return result;\n            }));\n            parent.loading = false;\n            parent.loaded = true;\n            this.nodeMap.set(parent.id, parent);\n            this.dataChange.next(this.dataChange.value);\n        });\n    }\n}\nLazyLoadDataService.ɵfac = function LazyLoadDataService_Factory(t) { return new (t || LazyLoadDataService)(); };\nLazyLoadDataService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LazyLoadDataService, factory: LazyLoadDataService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LazyLoadDataService, [{\n        type: Injectable\n    }], null, null); })();\nclass LazyLoadDataSource extends McTreeFlatDataSource {\n    constructor(treeControl, treeFlattener, dataService) {\n        super(treeControl, treeFlattener, []);\n        this.dataService = dataService;\n    }\n    expansionHandler(change) {\n        if (change && change.added && change.added.length) {\n            // @ts-ignore\n            this.dataService.loadChildren(change.added[0].id);\n        }\n        return super.expansionHandler(change);\n    }\n}\n/**\n * @title Basic Select\n */\nclass TreeSelectLazyloadExample {\n    constructor(dataService) {\n        this.dataService = dataService;\n        this.selected = '';\n        this.nodeMap = new Map();\n        this.transformer = (node, level, parent) => {\n            const existingNode = this.nodeMap.get(node.id);\n            const flatNode = new FlatNode();\n            flatNode.id = node.id;\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.level = level;\n            flatNode.expandable = node.hasChildren;\n            flatNode.loading = node.loading;\n            if (existingNode && isEqual(existingNode, flatNode)) {\n                return existingNode;\n            }\n            this.nodeMap.set(node.id, flatNode);\n            if (node.loaded) {\n                this.treeControl.expand(flatNode);\n            }\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.childrenChange;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return node.name;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new LazyLoadDataSource(this.treeControl, this.treeFlattener, this.dataService);\n        this.dataSource.data = [];\n        this.dataService.dataChange.subscribe((data) => {\n            this.dataSource.data = data;\n        });\n        this.dataService.initialize();\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectLazyloadExample.ɵfac = function TreeSelectLazyloadExample_Factory(t) { return new (t || TreeSelectLazyloadExample)(i0.ɵɵdirectiveInject(LazyLoadDataService)); };\nTreeSelectLazyloadExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectLazyloadExample, selectors: [[\"tree-select-lazyload-example\"]], features: [i0.ɵɵProvidersFeature([LazyLoadDataService])], decls: 7, vars: 4, consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mcTreeNodePadding\", \"\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"], [\"mode\", \"indeterminate\", 4, \"ngIf\"], [\"mode\", \"indeterminate\"]], template: function TreeSelectLazyloadExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectLazyloadExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectLazyloadExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectLazyloadExample_mc_tree_option_4_Template, 4, 4, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mc-cleaner\", null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i4.McTreeSelection, i4.McTreeNodeDef, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective, i6.NgIf, i7.McProgressSpinner, i1.McCleaner], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectLazyloadExample, [{\n        type: Component,\n        args: [{ selector: 'tree-select-lazyload-example', providers: [LazyLoadDataService], template: \"<mc-form-field>\\n    <mc-tree-select\\n        [(ngModel)]=\\\"selected\\\">\\n        <mc-tree-selection\\n            [dataSource]=\\\"dataSource\\\"\\n            [treeControl]=\\\"treeControl\\\">\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n                <i mc-icon=\\\"mc-angle-down-S_16\\\"\\n                   [style.transform]=\\\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\\\"\\n                   mcTreeNodeToggle>\\n                </i>\\n                <mc-progress-spinner *ngIf=\\\"node.loading\\\"\\n                                     mode=\\\"indeterminate\\\">\\n                </mc-progress-spinner>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n        </mc-tree-selection>\\n\\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\\n    </mc-tree-select>\\n</mc-form-field>\\n\", styles: [\"\"] }]\n    }], function () { return [{ type: LazyLoadDataService }]; }, null); })();\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectMultipleOverviewExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r3), \" \");\n} }\nfunction TreeSelectMultipleOverviewExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r4), \" \");\n} }\nclass FileNode$2 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$2 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$2(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$2();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$2(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$2 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic Select\n */\nclass TreeSelectMultipleOverviewExample {\n    constructor() {\n        this.selected = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$2();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectMultipleOverviewExample.ɵfac = function TreeSelectMultipleOverviewExample_Factory(t) { return new (t || TreeSelectMultipleOverviewExample)(); };\nTreeSelectMultipleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectMultipleOverviewExample, selectors: [[\"tree-select-multiple-overview-example\"]], decls: 7, vars: 5, consts: [[3, \"multiple\", \"ngModel\", \"ngModelChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mcTreeNodePadding\", \"\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectMultipleOverviewExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectMultipleOverviewExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectMultipleOverviewExample_mc_tree_option_4_Template, 3, 3, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mc-cleaner\", null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"multiple\", true)(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i4.McTreeSelection, i4.McTreeNodeDef, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective, i1.McCleaner], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectMultipleOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'tree-select-multiple-overview-example', template: \"<mc-form-field>\\n    <mc-tree-select\\n        [multiple]=\\\"true\\\"\\n        [(ngModel)]=\\\"selected\\\">\\n        <mc-tree-selection\\n            [dataSource]=\\\"dataSource\\\"\\n            [treeControl]=\\\"treeControl\\\">\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n                <i mc-icon=\\\"mc-angle-down-S_16\\\"\\n                   [style.transform]=\\\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\\\"\\n                   mcTreeNodeToggle>\\n                </i>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n        </mc-tree-selection>\\n\\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\\n    </mc-tree-select>\\n</mc-form-field>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectOverviewExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r3), \" \");\n} }\nfunction TreeSelectOverviewExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r4), \" \");\n} }\nclass FileNode$1 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$1 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$1(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$1();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$1(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$1 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic Select\n */\nclass TreeSelectOverviewExample {\n    constructor() {\n        this.selected = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$1();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectOverviewExample.ɵfac = function TreeSelectOverviewExample_Factory(t) { return new (t || TreeSelectOverviewExample)(); };\nTreeSelectOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectOverviewExample, selectors: [[\"tree-select-overview-example\"]], decls: 7, vars: 4, consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mcTreeNodePadding\", \"\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectOverviewExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectOverviewExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectOverviewExample_mc_tree_option_4_Template, 3, 3, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mc-cleaner\", null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i4.McTreeSelection, i4.McTreeNodeDef, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective, i1.McCleaner], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'tree-select-overview-example', template: \"<mc-form-field>\\n    <mc-tree-select\\n        [(ngModel)]=\\\"selected\\\">\\n        <mc-tree-selection\\n            [dataSource]=\\\"dataSource\\\"\\n            [treeControl]=\\\"treeControl\\\">\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n                <i mc-icon=\\\"mc-angle-down-S_16\\\"\\n                   [style.transform]=\\\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\\\"\\n                   mcTreeNodeToggle>\\n                </i>\\n                {{ treeControl.getViewValue(node) }}\\n            </mc-tree-option>\\n        </mc-tree-selection>\\n\\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\\n    </mc-tree-select>\\n</mc-form-field>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectSearchOverviewExample_mc_tree_option_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 9);\n    i0.ɵɵelement(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 1, ctx_r0.treeControl.getViewValue(node_r3), ctx_r0.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeSelectSearchOverviewExample_mc_tree_option_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 9);\n    i0.ɵɵelement(1, \"i\", 11);\n    i0.ɵɵelement(2, \"span\", 10);\n    i0.ɵɵpipe(3, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(3, 3, ctx_r1.treeControl.getViewValue(node_r4), ctx_r1.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Tree select search\n */\nclass TreeSelectSearchOverviewExample {\n    constructor() {\n        this.selected = '';\n        this.searchControl = new FormControl();\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);\n    }\n    ngOnInit() {\n        this.searchControl.valueChanges.subscribe((value) => this.treeControl.filterNodes(value));\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectSearchOverviewExample.ɵfac = function TreeSelectSearchOverviewExample_Factory(t) { return new (t || TreeSelectSearchOverviewExample)(); };\nTreeSelectSearchOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectSearchOverviewExample, selectors: [[\"tree-select-search-overview-example\"]], decls: 13, vars: 6, consts: [[3, \"multiple\", \"ngModel\", \"ngModelChange\"], [\"mcFormFieldWithoutBorders\", \"\", \"mcSelectSearch\", \"\"], [\"mcPrefix\", \"\", \"mc-icon\", \"mc-search_16\"], [\"mcInput\", \"\", \"type\", \"text\", 3, \"formControl\"], [\"mc-select-search-empty-result\", \"\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mcTreeNodePadding\", \"\"], [3, \"innerHTML\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectSearchOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectSearchOverviewExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-form-field\", 1);\n        i0.ɵɵelement(3, \"i\", 2);\n        i0.ɵɵelement(4, \"input\", 3);\n        i0.ɵɵelement(5, \"mc-cleaner\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtext(7, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mc-tree-selection\", 5);\n        i0.ɵɵtemplate(9, TreeSelectSearchOverviewExample_mc_tree_option_9_Template, 3, 4, \"mc-tree-option\", 6);\n        i0.ɵɵtemplate(10, TreeSelectSearchOverviewExample_mc_tree_option_10_Template, 4, 6, \"mc-tree-option\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"mc-cleaner\", null, 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"multiple\", true)(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.searchControl);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i1.McFormFieldWithoutBorders, i4$1.McSelectSearch, i1.McPrefix, i5.McIcon, i5.McIconCSSStyler, i6$1.McInput, i3.DefaultValueAccessor, i3.FormControlDirective, i1.McCleaner, i4$1.McSelectSearchEmptyResult, i4.McTreeSelection, i4.McTreeNodeDef, i4.McTreeOption, i4.McTreeNodePadding, i4.McTreeNodeToggleDirective], pipes: [i8.McHighlightPipe], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectSearchOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'tree-select-search-overview-example', template: \"<mc-form-field>\\n    <mc-tree-select\\n        [multiple]=\\\"true\\\"\\n        [(ngModel)]=\\\"selected\\\">\\n\\n        <mc-form-field mcFormFieldWithoutBorders mcSelectSearch>\\n            <i mcPrefix mc-icon=\\\"mc-search_16\\\"></i>\\n            <input mcInput [formControl]=\\\"searchControl\\\" type=\\\"text\\\"/>\\n            <mc-cleaner></mc-cleaner>\\n        </mc-form-field>\\n\\n        <div mc-select-search-empty-result>\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E</div>\\n\\n        <mc-tree-selection\\n            [dataSource]=\\\"dataSource\\\"\\n            [treeControl]=\\\"treeControl\\\">\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding>\\n                <span [innerHTML]=\\\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\\\"></span>\\n            </mc-tree-option>\\n\\n            <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n                <i mc-icon=\\\"mc-angle-down-S_16\\\"\\n                   [style.transform]=\\\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\\\"\\n                   mcTreeNodeToggle>\\n                </i>\\n                <span [innerHTML]=\\\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\\\"></span>\\n            </mc-tree-option>\\n        </mc-tree-selection>\\n\\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\\n    </mc-tree-select>\\n</mc-form-field>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\nconst EXAMPLES = [\n    TreeSelectOverviewExample,\n    TreeSelectMultipleOverviewExample,\n    TreeSelectChildSelectionOverviewExample,\n    TreeSelectSearchOverviewExample,\n    TreeSelectLazyloadExample,\n    TreeSelectFooterOverviewExample\n];\nclass TreeSelectExamplesModule {\n}\nTreeSelectExamplesModule.ɵfac = function TreeSelectExamplesModule_Factory(t) { return new (t || TreeSelectExamplesModule)(); };\nTreeSelectExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeSelectExamplesModule });\nTreeSelectExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            McFormFieldModule,\n            McTreeModule,\n            McSelectModule,\n            McHighlightModule,\n            McTreeSelectModule,\n            McInputModule,\n            McIconModule,\n            McProgressSpinnerModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    ReactiveFormsModule,\n                    McFormFieldModule,\n                    McTreeModule,\n                    McSelectModule,\n                    McHighlightModule,\n                    McTreeSelectModule,\n                    McInputModule,\n                    McIconModule,\n                    McProgressSpinnerModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeSelectExamplesModule, { declarations: [TreeSelectOverviewExample,\n        TreeSelectMultipleOverviewExample,\n        TreeSelectChildSelectionOverviewExample,\n        TreeSelectSearchOverviewExample,\n        TreeSelectLazyloadExample,\n        TreeSelectFooterOverviewExample], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        McFormFieldModule,\n        McTreeModule,\n        McSelectModule,\n        McHighlightModule,\n        McTreeSelectModule,\n        McInputModule,\n        McIconModule,\n        McProgressSpinnerModule], exports: [TreeSelectOverviewExample,\n        TreeSelectMultipleOverviewExample,\n        TreeSelectChildSelectionOverviewExample,\n        TreeSelectSearchOverviewExample,\n        TreeSelectLazyloadExample,\n        TreeSelectFooterOverviewExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeSelectChildSelectionOverviewExample, TreeSelectExamplesModule, TreeSelectFooterOverviewExample, TreeSelectLazyloadExample, TreeSelectMultipleOverviewExample, TreeSelectOverviewExample, TreeSelectSearchOverviewExample };\n"],"names":["nextUniqueId","McTreeSelectChange","constructor","source","value","isUserInput","McTreeSelectTrigger","Directive","selector","McTreeSelectFooter","McTreeSelectBase","elementRef","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTreeSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McTreeSelect","changeDetectorRef","viewportRuler","ngZone","renderer","scrollStrategyFactory","rawValidators","mcValidation","dir","parentFormField","ngModel","formControlName","Subject","originX","originY","overlayX","overlayY","EventEmitter","openedChange","pipe","filter","o","map","defer","options","changes","startWith","switchMap","merge","option","onSelectionChange","onStable","asObservable","take","optionSelectionChanges","Subscription","EMPTY","o1","o2","valueAccessor","id","placeholder","_placeholder","stateChanges","next","required","_required","coerceBooleanProperty","multiple","_multiple","selectionModel","getMcSelectDynamicMultipleError","autoSelect","_autoSelect","compareWith","_compareWith","fn","getMcSelectNonFunctionValueError","initializeSelection","tree","getSelectedValues","_id","uid","hasBackdrop","_hasBackdrop","focused","_focused","_panelOpen","panelOpen","canShowCleaner","cleaner","hasValue","ngOnInit","panelDoneAnimatingStream","distinctUntilChanged","takeUntil","destroy","subscribe","scrollTop","search","focus","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","useValidation","setMosaicValidation","resetFocusedItemOnBlur","SelectionModel","changed","onChange","selectedValues","initKeyManager","renderedOptions","multipleMode","MultipleMode","CHECKBOX","noUnselectLast","tempValues","setSelectionByValue","event","close","selectionChange","added","length","keyManager","setFocusOrigin","setActiveItem","find","data","updateIsEmptySearchResult","ngAfterViewInit","tags","setTimeout","calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","closeSubscription","unsubscribe","hiddenItemsTextFormatter","hiddenItemsText","hiddenItems","clearValue","$event","stopPropagation","clear","toggle","open","triggerRect","trigger","nativeElement","getBoundingClientRect","triggerFontSize","parseInt","getComputedStyle","highlightCorrectOption","overlayRef","overlayElement","style","fontSize","onTouched","reset","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","treeControl","getValue","triggerValue","empty","getViewValue","triggerValues","isEmpty","isRtl","handleKeydown","handleOpenKeydown","handleClosedKeydown","onFocus","onBlur","onAttached","positionChange","detectChanges","calculateOverlayOffsetX","panel","updateScrollSize","closingActions","getPanelTheme","color","onContainerClick","onRemoveSelectedOption","selectedOption","deselect","customTrigger","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","forEach","tag","offsetTop","offsetHeight","getItemWidth","itemsCounter","querySelector","matcherList","itemsCounterShowed","itemsCounterWidth","matcherListWidth","width","matcherWidth","backdrop","backdropClick","outsidePointerEvents","detachments","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","element","computedStyle","window","marginLeft","marginRight","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","altKey","preventDefault","onKeydown","originalOnKeyDown","call","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","activeItem","A","ctrlKey","hasDeselectedOptions","some","select","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","setSelectedOptionsByKey","hasModifierKey","Promise","resolve","then","_value","Array","isArray","getMcSelectNonArrayValueError","setOptionsFromValues","sortValues","onKeyDown","tabOut","change","scrollActiveOptionIntoView","toArray","sort","a","b","sortComparator","indexOf","firstSelectedValue","activeOptionIndex","getOptionScrollPosition","getItemHeight","SELECT_PANEL_MAX_HEIGHT","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_PANEL_PADDING_X","leftOverflow","left","rightOverflow","right","SELECT_PANEL_VIEWPORT_PADDING","Math","round","updatePosition","input","valueChanges","isEmptySearchResult","i0","MC_SELECT_SCROLL_STRATEGY","NG_VALIDATORS","MC_VALIDATION","i3","McTreeSelection","McSelectSearch","CdkConnectedOverlay","McTag","provide","McFormFieldControl","useExisting","McTree","i6","mcSelectAnimations","transformPanel","fadeInContent","Component","exportAs","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","animations","providers","template","styles","Inject","Optional","Self","ViewChild","static","hiddenItemsCounter","ViewChildren","ContentChild","Input","Output","openedStream","closedStream","valueChange","panelClass","backdropClass","errorStateMatcher","McTreeSelectModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","CommonModule","OverlayModule","McTreeModule","McIconModule","McTagsModule","McPseudoCheckboxModule","McSelectModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}