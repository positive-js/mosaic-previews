{"version":3,"sources":["webpack:///dist/packages/mosaic/textarea/textarea.component.ts","webpack:///dist/packages/mosaic/textarea/textarea.module.ts","webpack:///dist/packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"names":["MC_TEXTAREA_VALUE_ACCESSOR","nextUniqueId","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","McTextarea","elementRef","inputValueAccessor","ngZone","canGrow","focused","stateChanges","controlType","uid","_disabled","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","nativeElement","previousNativeValue","value","id","growObserver","growSubscription","subscribe","grow","bind","disabled","next","_id","setTimeout","parseInt","getComputedStyle","paddingTop","paddingBottom","complete","unsubscribe","updateErrorState","dirtyCheckNativeValue","runOutsideAngular","textarea","outerHeight","window","height","diff","clientHeight","style","Math","max","scrollHeight","focus","isFocused","isBadInput","newValue","validity","badInput","McTextareaModule"],"mappings":"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","file":"5-es5.js","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}