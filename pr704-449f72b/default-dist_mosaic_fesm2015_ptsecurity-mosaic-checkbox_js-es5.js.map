{"version":3,"mappings":"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","names":["MC_CHECKBOX_CLICK_ACTION","_angular_core__WEBPACK_IMPORTED_MODULE_0__","nextUniqueId","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","_angular_forms__WEBPACK_IMPORTED_MODULE_1__","useExisting","McCheckbox","multi","TransitionCheckState","McCheckboxChange","McCheckboxBase","_elementRef","McCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_clickAction","Init","id","uniqueId","_required","value","_checked","checked","markForCheck","_disabled","disabled","_indeterminate","changed","transitionCheckState","Indeterminate","Checked","Unchecked","indeterminateChange","emit","monitor","inputElement","nativeElement","subscribe","onInputFocusChange","focusOrigin","stopMonitoring","fn","controlValueAccessorChangeFn","onTouched","isDisabled","indeterminate","event","stopPropagation","Promise","resolve","then","toggle","emitChangeEvent","focusVia","newState","oldState","currentCheckState","element","currentAnimationClass","length","classList","remove","add","source","change","selector","exportAs","templateUrl","styleUrls","host","providers","inputs","encapsulation","changeDetection","ariaLabel","ariaLabelledby","labelPosition","name","required","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","McCheckboxModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","Éµinj","imports","exports","declarations"],"sources":["webpack:///packages/mosaic/checkbox/checkbox-config.ts","webpack:///packages/mosaic/checkbox/checkbox.ts","webpack:///packages/mosaic/checkbox/checkbox.html","webpack:///packages/mosaic/checkbox/checkbox-required-validator.ts","webpack:///packages/mosaic/checkbox/checkbox-module.ts","webpack:///packages/mosaic/checkbox/ptsecurity-mosaic-checkbox.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase = mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    exportAs: 'mcCheckbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> = new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', { static: false }) inputElement: ElementRef;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    constructor(\n        elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n        private _clickAction: McCheckboxClickAction\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","<label [attr.for]=\"inputId\" class=\"mc-checkbox-layout\" #label>\n    <div class=\"mc-checkbox-inner-container\"\n         [class.mc-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n        <input #input\n               type=\"checkbox\"\n               class=\"mc-checkbox-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (change)=\"onInteractionEvent($event)\"\n               (click)=\"onInputClick($event)\">\n        <div class=\"mc-checkbox-frame\">\n            <i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n            <i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n        </div>\n    </div>\n\n    <span class=\"mc-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"onLabelTextChange()\">\n    <ng-content></ng-content>\n  </span>\n</label>\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}