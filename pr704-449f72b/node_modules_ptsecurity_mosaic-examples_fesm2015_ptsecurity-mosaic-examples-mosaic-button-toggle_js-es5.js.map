{"version":3,"mappings":"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","names":["MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","_angular_forms__WEBPACK_IMPORTED_MODULE_0__","useExisting","McButtonToggleGroup","multi","McButtonToggleChange","source","value","_changeDetector","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_vertical","selected","selectionModel","multiple","map","toggle","undefined","newValue","setSelectionByValue","valueChange","emit","_multiple","_disabled","buttonToggles","forEach","markForCheck","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__","select","filter","checked","disabled","fn","controlValueAccessorChangeFn","onTouched","isDisabled","Array","isArray","length","event","change","isUserInput","deselect","emitChangeEvent","isSelected","rawValue","some","Error","clearSelection","selectValue","currentValue","clear","correspondingOption","find","McButtonToggle","selector","providers","host","role","exportAs","vertical","buttonToggleGroup","changeDetectorRef","focusMonitor","element","_checked","syncButtonToggle","isSingleSelector","type","isPrechecked","monitor","nativeElement","group","stopMonitoring","Promise","resolve","then","focus","newChecked","_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__","template","styleUrls","encapsulation","changeDetection","decorators","mcButton","tabIndex","McButtonToggleModule","_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__","ɵinj","imports","exports","declarations","ButtonToggleMultipleOverviewExample","_angular_core__WEBPACK_IMPORTED_MODULE_0__","selectors","decls","vars","consts","_r0","directives","_ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__","styles","args","templateUrl","ButtonToggleOverviewExample","ButtonToggleExamplesModule","_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__"],"sources":["webpack:///packages/mosaic/button-toggle/button-toggle.component.ts","webpack:///packages/mosaic/button-toggle/button-toggle.module.ts","webpack:///packages/mosaic/button-toggle/ptsecurity-mosaic-button-toggle.ts","webpack:///node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-button-toggle.js"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any\n    ) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle_vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) { return; }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    exportAs: 'mcButtonToggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-button-toggle',\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, { static: false }) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) { return; }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i1 from '@ptsecurity/mosaic/button-toggle';\nimport { McButtonToggleModule } from '@ptsecurity/mosaic/button-toggle';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\n/**\n * @title Basic button-toggle\n */\nclass ButtonToggleMultipleOverviewExample {\n}\nButtonToggleMultipleOverviewExample.ɵfac = function ButtonToggleMultipleOverviewExample_Factory(t) { return new (t || ButtonToggleMultipleOverviewExample)(); };\nButtonToggleMultipleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ButtonToggleMultipleOverviewExample, selectors: [[\"button-toggle-multiple-overview-example\"]], decls: 13, vars: 1, consts: [[\"multiple\", \"\"], [\"multipleGroup\", \"mcButtonToggleGroup\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"]], template: function ButtonToggleMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", 0, 1);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 3);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 4);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleMultipleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-multiple-overview-example',\n                templateUrl: 'button-toggle-multiple-overview-example.html',\n                styleUrls: ['button-toggle-multiple-overview-example.css']\n            }]\n    }], null, null); })();\n\n/**\n * @title button-toggle\n */\nclass ButtonToggleOverviewExample {\n}\nButtonToggleOverviewExample.ɵfac = function ButtonToggleOverviewExample_Factory(t) { return new (t || ButtonToggleOverviewExample)(); };\nButtonToggleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ButtonToggleOverviewExample, selectors: [[\"button-toggle-overview-example\"]], decls: 15, vars: 1, consts: [[\"group1\", \"mcButtonToggleGroup\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"], [\"value\", \"4\"]], template: function ButtonToggleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", null, 0);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 3);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mc-button-toggle\", 4);\n        i0.ɵɵtext(9, \" button 4 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(14);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-overview-example',\n                templateUrl: 'button-toggle-overview-example.html',\n                styleUrls: ['button-toggle-overview-example.css']\n            }]\n    }], null, null); })();\n\nconst EXAMPLES = [\n    ButtonToggleOverviewExample,\n    ButtonToggleMultipleOverviewExample\n];\nclass ButtonToggleExamplesModule {\n}\nButtonToggleExamplesModule.ɵfac = function ButtonToggleExamplesModule_Factory(t) { return new (t || ButtonToggleExamplesModule)(); };\nButtonToggleExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ButtonToggleExamplesModule });\nButtonToggleExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            McButtonToggleModule,\n            McIconModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    McButtonToggleModule,\n                    McIconModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ButtonToggleExamplesModule, { declarations: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample], imports: [McButtonToggleModule,\n        McIconModule], exports: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonToggleExamplesModule, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample };\n"]}