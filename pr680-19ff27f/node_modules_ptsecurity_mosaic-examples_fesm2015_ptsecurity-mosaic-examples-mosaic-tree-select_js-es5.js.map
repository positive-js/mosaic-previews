{"version":3,"mappings":"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","names":["ctx_r2","ctx_r8","_r16","_r18","_r22","nextUniqueId","McTreeSelectChange","source","value","isUserInput","McTreeSelectTrigger","_angular_core__WEBPACK_IMPORTED_MODULE_0__","selector","McTreeSelectBase","elementRef","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTreeSelectMixinBase","McTreeSelect","changeDetectorRef","viewportRuler","ngZone","renderer","scrollStrategyFactory","rawValidators","mcValidation","dir","parentFormField","ngModel","formControlName","rxjs__WEBPACK_IMPORTED_MODULE_2__","originX","originY","overlayX","overlayY","openedChange","pipe","o","options","changes","map","option","onSelectionChange","onStable","asObservable","optionSelectionChanges","rxjs__WEBPACK_IMPORTED_MODULE_10__","o1","o2","valueAccessor","id","_placeholder","stateChanges","next","_required","_multiple","selectionModel","multiple","_autoSelect","_compareWith","fn","initializeSelection","tree","getSelectedValues","_id","uid","_hasBackdrop","_focused","_panelOpen","cleaner","hasValue","panelDoneAnimatingStream","destroy","subscribe","panelOpen","scrollTop","emit","overlayDir","offsetX","markForCheck","useValidation","resetFocusedItemOnBlur","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_14__","ngAfterContentInit","initKeyManager","renderedOptions","autoSelect","multipleMode","_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_1__","noUnselectLast","tempValues","setSelectionByValue","event","close","selectionChange","onChange","selectedValues","changed","added","length","keyManager","setFocusOrigin","setActiveItem","find","data","tags","setTimeout","calculateHiddenItems","updateErrorState","disabled","complete","closeSubscription","unsubscribe","hiddenItemsText","hiddenItems","$event","stopPropagation","clear","open","triggerRect","trigger","nativeElement","getBoundingClientRect","triggerFontSize","parseInt","getComputedStyle","highlightCorrectOption","overlayRef","overlayElement","style","fontSize","onTouched","focus","isDisabled","selected","treeControl","getValue","empty","getViewValue","filter","isEmpty","handleOpenKeydown","handleClosedKeydown","positionChange","detectChanges","calculateOverlayOffsetX","panel","updateScrollSize","closingActions","color","selectedOption","deselect","customTrigger","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","forEach","tag","offsetTop","offsetHeight","getItemWidth","itemsCounter","querySelector","matcherList","itemsCounterShowed","itemsCounterWidth","matcherListWidth","width","matcherWidth","backdrop","backdropClick","outsidePointerEvents","detachments","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","element","computedStyle","window","marginLeft","marginRight","keyCode","isArrowKey","_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__","isOpenKey","altKey","preventDefault","onKeydown","originalOnKeyDown","call","setFirstItemActive","setLastItemActive","setPreviousPageItemActive","setNextPageItemActive","activeItem","toggle","ctrlKey","hasDeselectedOptions","some","select","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","setSelectedOptionsByKey","Promise","resolve","then","_value","Array","isArray","setOptionsFromValues","sortValues","onKeyDown","tabOut","change","scrollActiveOptionIntoView","toArray","sort","a","b","sortComparator","indexOf","firstSelectedValue","activeOptionIndex","getItemHeight","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","leftOverflow","left","rightOverflow","right","Math","round","updatePosition","_angular_forms__WEBPACK_IMPORTED_MODULE_17__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_18__","_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_20__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_21__","_ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_22__","ctx","provide","_ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_19__","useExisting","_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_23__","exportAs","templateUrl","styleUrls","inputs","encapsulation","changeDetection","host","animations","providers","hiddenItemsCounter","openedStream","closedStream","valueChange","panelClass","backdropClass","errorStateMatcher","placeholder","required","compareWith","hasBackdrop","hiddenItemsTextFormatter","McTreeSelectModule","_angular_common__WEBPACK_IMPORTED_MODULE_24__","_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_25__","ɵinj","imports","exports","declarations","ctx_r0","ctx_r1","FileNode$1","FileFlatNode$1","node","k","docs","src","cdk","a11ly","documentation","tools","mosaic","autocomplete","button","index","version","alert","badge","README","wallabyTest","scripts","deploy","tests","TreeSelectMultipleOverviewExample","flatNode","_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__","_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__","type","selectors","decls","vars","consts","template","TreeSelectMultipleOverviewExample_mc_tree_option_3_Template","TreeSelectMultipleOverviewExample_mc_tree_option_4_Template","directives","_ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_3__","_ptsecurity_mosaic_tree_select__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__","styles","args","FileNode","FileFlatNode","TreeSelectOverviewExample","TreeSelectOverviewExample_mc_tree_option_3_Template","TreeSelectOverviewExample_mc_tree_option_4_Template","TreeSelectExamplesModule","_angular_common__WEBPACK_IMPORTED_MODULE_7__","_ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__"],"sources":["webpack:///packages/mosaic/tree-select/tree-select.component.ts","webpack:///packages/mosaic/tree-select/tree-select.html","webpack:///packages/mosaic/tree-select/tree-select.module.ts","webpack:///packages/mosaic/tree-select/ptsecurity-mosaic-tree-select.ts","webpack:///node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-tree-select.js"],"sourcesContent":["/* tslint:disable:no-empty */\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@angular/cdk/overlay';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControlName,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    NgModel,\n    Validator\n} from '@angular/forms';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A,\n    PAGE_UP,\n    PAGE_DOWN,\n    hasModifierKey\n} from '@ptsecurity/cdk/keycodes';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n    MC_SELECT_SCROLL_STRATEGY,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MultipleMode,\n\n    MC_VALIDATION,\n    setMosaicValidation,\n    McValidationOptions\n} from '@ptsecurity/mosaic/core';\nimport { McCleaner, McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged,\n    startWith\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeSelect, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.scss'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.disabled]': 'disabled || null',\n\n        '(click)': 'toggle()',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<McTreeOption>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'select';\n\n    hiddenItems: number = 0;\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<any>;\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    options: QueryList<McTreeOption>;\n\n    @ViewChild('trigger', { static: false }) trigger: ElementRef;\n\n    @ViewChild('panel', { static: false }) panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, { static: false }) overlayDir: CdkConnectedOverlay;\n\n    @ViewChild('hiddenItemsCounter', { static: false }) hiddenItemsCounter: ElementRef;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ContentChild('mcSelectCleaner', { static: true }) cleaner: McCleaner;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger, { static: false }) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection, { static: false }) tree: McTreeSelection;\n\n    @Input() hiddenItemsText: string = '...ещё';\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    @Input() backdropClass: string = 'cdk-overlay-transparent-backdrop';\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McTreeOption, b: McTreeOption, options: McTreeOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return this.options.changes.pipe(\n                startWith(this.options),\n                switchMap(() => merge(...this.options.map((option) => option.onSelectionChange)))\n            );\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    get value(): any {\n        return this.multiple ? this.tree.getSelectedValues() : this.tree.getSelectedValues()[0];\n    }\n\n    private _value: any = null;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    @Input()\n    get hasBackdrop(): boolean {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    private _hasBackdrop: boolean = false;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.cleaner && this.selectionModel.hasValue();\n    }\n\n    private closeSubscription = Subscription.EMPTY;\n\n    private _panelOpen = false;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string | string[] | null;\n\n    constructor(\n        elementRef: ElementRef,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly viewportRuler: ViewportRuler,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory,\n        @Optional() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Optional() @Self() ngControl: NgControl,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() @Self() public formControlName: FormControlName\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n\n        this.tree.resetFocusedItemOnBlur = false;\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<any>(this.multiple);\n        this.tree.ngAfterContentInit();\n\n        this.initKeyManager();\n\n        this.options = this.tree.renderedOptions;\n        this.tree.autoSelect = this.autoSelect;\n\n        if (this.tree.multipleMode === null) {\n            this.tree.multipleMode = this.multiple ? MultipleMode.CHECKBOX : null;\n        }\n\n        if (this.multiple) {\n            this.tree.noUnselectLast = false;\n        }\n\n        if (this.tempValues) {\n            this.setSelectionByValue(this.tempValues);\n            this.tempValues = null;\n        }\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (!this.multiple && this.panelOpen && event.isUserInput) {\n                    this.close();\n                }\n            });\n\n        this.tree.selectionChange\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                this.onChange(this.selectedValues);\n\n                this.selectionChange.emit(new McTreeSelectChange(this, event.option));\n            });\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (event.added.length) {\n                    this.tree.keyManager.setFocusOrigin('program');\n                    this.tree.keyManager.setActiveItem(\n                        this.options.find((option) => option.data === event.added[0]) as any\n                    );\n                }\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        setTimeout(() => this.calculateHiddenItems(), 0);\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n        this.closeSubscription.unsubscribe();\n    }\n\n    @Input()\n    hiddenItemsTextFormatter(hiddenItemsText: string, hiddenItems: number): string {\n        return `${hiddenItemsText} ${hiddenItems}`;\n    }\n\n    clearValue($event): void {\n        $event.stopPropagation();\n\n        this.selectionModel.clear();\n        this.tree.keyManager.setActiveItem(-1);\n\n        this.setSelectionByValue([]);\n\n        this.onChange(this.selectedValues);\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n\n        setTimeout(() => this.highlightCorrectOption());\n\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (!this._panelOpen) { return; }\n\n        this._panelOpen = false;\n\n        this.changeDetectorRef.markForCheck();\n        this.onTouched();\n\n        setTimeout(() => this.focus(), 0);\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.tree) {\n            this.setSelectionByValue(value);\n        } else {\n            this.tempValues = value;\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): any {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get selectedValues(): any {\n        const selectedValues = this.selectionModel.selected.map((value) => this.tree.treeControl.getValue(value));\n\n        return this.multiple ? selectedValues : selectedValues[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return this.tree.treeControl.getViewValue(this.selected);\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        return this.selectedValues\n            .map((value) => this.tree.renderedOptions.find((option) => option.value === value))\n            .filter((option) => option);\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n\n                this.tree.updateScrollSize();\n            });\n\n        this.closeSubscription = this.closingActions()\n            .subscribe(() => this.close());\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: any, $event) {\n        $event.stopPropagation();\n\n        this.selectionModel\n            .deselect(this.selected.find((value) => this.tree.treeControl.getValue(value) === selectedOption.value));\n\n        this.onChange(this.selectedValues);\n    }\n\n    calculateHiddenItems() {\n        if (this.customTrigger || this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += this.getItemWidth(tag.nativeElement);\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private closingActions() {\n        const backdrop = this.overlayDir.overlayRef!.backdropClick();\n        const outsidePointerEvents = this.overlayDir.overlayRef!.outsidePointerEvents();\n        const detachments = this.overlayDir.overlayRef!.detachments();\n\n        return merge(backdrop, outsidePointerEvents, detachments);\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += this.getItemWidth(item);\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private getItemWidth(element: HTMLElement): number {\n        const computedStyle = window.getComputedStyle(element);\n\n        const width: number = parseInt(computedStyle.width as string);\n        const marginLeft: number = parseInt(computedStyle.marginLeft as string);\n        const marginRight: number = parseInt(computedStyle.marginRight as string);\n\n        return width + marginLeft + marginRight;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            this.tree.keyManager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            this.tree.keyManager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            this.tree.keyManager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            this.tree.keyManager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            if (!this.autoSelect) {\n                this.selectionModel.toggle(this.tree.keyManager.activeItem.data);\n            } else {\n                this.close();\n            }\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.setFocusOrigin('keyboard');\n            this.tree.keyManager.onKeydown(event);\n\n            if (\n                this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex\n            ) {\n                this.tree.keyManager.activeItem.selectViaInteraction(event);\n            }\n\n            if (this.autoSelect && this.tree.keyManager.activeItem) {\n                this.tree.setSelectedOptionsByKey(\n                    this.tree.keyManager.activeItem, hasModifierKey(event, 'shiftKey'), hasModifierKey(event, 'ctrlKey')\n                );\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.tree.setOptionsFromValues(value);\n\n            this.sortValues();\n        } else {\n            this.tree.setOptionsFromValues([value]);\n        }\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.empty || !this.tree.keyManager) { return; }\n\n        const firstSelectedValue = this.multiple ? this.selectedValues[0] : this.selectedValues;\n\n        const selectedOption = this.options.find((option) => option.value === firstSelectedValue);\n\n        if (selectedOption) {\n            this.tree.keyManager.setActiveItem(selectedOption);\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.tree.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","<div cdk-overlay-origin\n     class=\"mc-tree-select__trigger\"\n     [class.mc-tree-select__trigger_multiple]=\"multiple\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n    <div class=\"mc-tree-select__matcher\" [ngSwitch]=\"empty\">\n        <span class=\"mc-tree-select__placeholder\" *ngSwitchCase=\"true\">{{ placeholder || '\\u00A0' }}</span>\n        <span *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n            <div *ngSwitchDefault [ngSwitch]=\"multiple\" class=\"mc-tree-select__match-container\">\n                <span *ngSwitchCase=\"false\" class=\"mc-tree-select__matcher-text\">{{ triggerValue }}</span>\n                <div *ngSwitchCase=\"true\" class=\"mc-tree-select__multiple-matcher\">\n                    <div class=\"mc-tree-select__match-list\">\n                        <mc-tag *ngFor=\"let option of triggerValues\"\n                            [selectable]=\"false\"\n                            [disabled]=\"option.disabled || disabled\"\n                            [class.mc-error]=\"errorState\">\n\n                            {{ option.viewValue }}\n                            <i mc-icon=\"mc-close-S_16\"\n                               *ngIf=\"!option.disabled && !disabled\"\n                               (click)=\"onRemoveSelectedOption(option, $event)\">\n                            </i>\n                        </mc-tag>\n                    </div>\n                    <div class=\"mc-tree-select__match-hidden-text\"\n                         [style.display]=\"hiddenItems > 0 ? 'block' : 'none'\"\n                         #hiddenItemsCounter>\n                        {{ hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) }}\n                    </div>\n                </div>\n            </div>\n            <ng-content select=\"mc-tree-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n        </span>\n    </div>\n\n    <div class=\"mc-select__cleaner\" *ngIf=\"canShowCleaner\" (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <div class=\"mc-tree-select__arrow-wrapper\">\n        <i class=\"mc-tree-select__arrow\" mc-icon=\"mc-angle-down-L_16\"></i>\n    </div>\n</div>\n\n<ng-template\n    cdk-connected-overlay\n    cdkConnectedOverlayLockPosition\n    [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n    [cdkConnectedOverlayBackdropClass]=\"backdropClass\"\n    [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"positions\"\n    [cdkConnectedOverlayMinWidth]=\"triggerRect?.width\"\n    [cdkConnectedOverlayOffsetY]=\"offsetY\"\n    (backdropClick)=\"close()\"\n    (attach)=\"onAttached()\"\n    (detach)=\"close()\">\n\n    <div #panel\n         class=\"mc-tree-select__panel {{ getPanelTheme() }}\"\n         [ngClass]=\"panelClass\"\n         [style.transformOrigin]=\"transformOrigin\"\n         [style.font-size.px]=\"triggerFontSize\"\n         (keydown)=\"handleKeydown($event)\">\n\n        <div #optionsContainer\n             class=\"mc-tree-select__content\"\n             [@fadeInContent]=\"'showing'\"\n             (@fadeInContent.done)=\"panelDoneAnimatingStream.next($event.toState)\">\n            <ng-content select=\"mc-tree-selection\"></ng-content>\n        </div>\n    </div>\n</ng-template>\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlatTreeControl, CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport * as i1 from '@ptsecurity/mosaic/form-field';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport * as i5 from '@ptsecurity/mosaic/icon';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McInputModule } from '@ptsecurity/mosaic/input';\nimport * as i4 from '@ptsecurity/mosaic/tree';\nimport { McTreeFlattener, McTreeFlatDataSource, McTreeModule } from '@ptsecurity/mosaic/tree';\nimport * as i2 from '@ptsecurity/mosaic/tree-select';\nimport { McTreeSelectModule } from '@ptsecurity/mosaic/tree-select';\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectMultipleOverviewExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r3), \" \");\n} }\nfunction TreeSelectMultipleOverviewExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r4), \" \");\n} }\nclass FileNode$1 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$1 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$1(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$1();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$1(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$1 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic Select\n */\nclass TreeSelectMultipleOverviewExample {\n    constructor() {\n        this.selected = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$1();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectMultipleOverviewExample.ɵfac = function TreeSelectMultipleOverviewExample_Factory(t) { return new (t || TreeSelectMultipleOverviewExample)(); };\nTreeSelectMultipleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectMultipleOverviewExample, selectors: [[\"tree-select-multiple-overview-example\"]], decls: 7, vars: 5, consts: [[3, \"multiple\", \"ngModel\", \"ngModelChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mcTreeNodePadding\", \"\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectMultipleOverviewExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectMultipleOverviewExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectMultipleOverviewExample_mc_tree_option_4_Template, 3, 3, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mc-cleaner\", null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"multiple\", true)(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i4.McTreeSelection, i4.McTreeNodeDef, i1.McCleaner, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectMultipleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-select-multiple-overview-example',\n                templateUrl: 'tree-select-multiple-overview-example.html',\n                styleUrls: ['tree-select-multiple-overview-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords */\nfunction TreeSelectOverviewExample_mc_tree_option_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.treeControl.getViewValue(node_r3), \" \");\n} }\nfunction TreeSelectOverviewExample_mc_tree_option_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", ctx_r1.treeControl.isExpanded(node_r4) ? \"\" : \"rotate(-90deg)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.getViewValue(node_r4), \" \");\n} }\nclass FileNode {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic Select\n */\nclass TreeSelectOverviewExample {\n    constructor() {\n        this.selected = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return `${node.name} view`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n}\nTreeSelectOverviewExample.ɵfac = function TreeSelectOverviewExample_Factory(t) { return new (t || TreeSelectOverviewExample)(); };\nTreeSelectOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeSelectOverviewExample, selectors: [[\"tree-select-overview-example\"]], decls: 7, vars: 4, consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"dataSource\", \"treeControl\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcSelectCleaner\", \"\"], [\"mcTreeNodePadding\", \"\"], [\"mc-icon\", \"mc-angle-down-S_16\", \"mcTreeNodeToggle\", \"\"]], template: function TreeSelectOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"mc-tree-select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeSelectOverviewExample_Template_mc_tree_select_ngModelChange_1_listener($event) { return ctx.selected = $event; });\n        i0.ɵɵelementStart(2, \"mc-tree-selection\", 1);\n        i0.ɵɵtemplate(3, TreeSelectOverviewExample_mc_tree_option_3_Template, 2, 1, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(4, TreeSelectOverviewExample_mc_tree_option_4_Template, 3, 3, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mc-cleaner\", null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.selected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McTreeSelect, i3.NgControlStatus, i3.NgModel, i4.McTreeSelection, i4.McTreeNodeDef, i1.McCleaner, i4.McTreeOption, i4.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i4.McTreeNodeToggleDirective], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-select-overview-example',\n                templateUrl: 'tree-select-overview-example.html',\n                styleUrls: ['tree-select-overview-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\nconst EXAMPLES = [\n    TreeSelectOverviewExample,\n    TreeSelectMultipleOverviewExample\n];\nclass TreeSelectExamplesModule {\n}\nTreeSelectExamplesModule.ɵfac = function TreeSelectExamplesModule_Factory(t) { return new (t || TreeSelectExamplesModule)(); };\nTreeSelectExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeSelectExamplesModule });\nTreeSelectExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            CdkTreeModule,\n            FormsModule,\n            ReactiveFormsModule,\n            McFormFieldModule,\n            McTreeModule,\n            McTreeSelectModule,\n            McInputModule,\n            McIconModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeSelectExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    CdkTreeModule,\n                    FormsModule,\n                    ReactiveFormsModule,\n                    McFormFieldModule,\n                    McTreeModule,\n                    McTreeSelectModule,\n                    McInputModule,\n                    McIconModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeSelectExamplesModule, { declarations: [TreeSelectOverviewExample,\n        TreeSelectMultipleOverviewExample], imports: [CommonModule,\n        CdkTreeModule,\n        FormsModule,\n        ReactiveFormsModule,\n        McFormFieldModule,\n        McTreeModule,\n        McTreeSelectModule,\n        McInputModule,\n        McIconModule], exports: [TreeSelectOverviewExample,\n        TreeSelectMultipleOverviewExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeSelectExamplesModule, TreeSelectMultipleOverviewExample, TreeSelectOverviewExample };\n"]}