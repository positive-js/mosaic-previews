{"version":3,"file":"default-dist_mosaic_fesm2015_ptsecurity-mosaic-autocomplete_js-es2015.js","mappings":"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","sources":["./packages/mosaic/autocomplete/autocomplete.component.ts","./packages/mosaic/autocomplete/autocomplete.html","./packages/mosaic/autocomplete/autocomplete-origin.directive.ts","./packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","./packages/mosaic/autocomplete/autocomplete.module.ts","./packages/mosaic/autocomplete/ptsecurity-mosaic-autocomplete.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.scss'],\n    host: {\n        class: 'mc-autocomplete'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete\n    }]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    @Input('class')\n    get classList() {\n        return this._classList;\n    }\n\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    @Input()\n    get openOnFocus(): boolean {\n        return this._openOnFocus;\n    }\n\n    set openOnFocus(value: boolean) {\n        this._openOnFocus = value;\n    }\n\n    private _openOnFocus: boolean = true;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","<ng-template>\n    <div class=\"mc-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"classList\" #panel>\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedPosition,\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen() && this.autocomplete.openOnFocus) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ? this.formField._elementRef.nativeElement : null;\n                const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(\n            index,\n            this.autocomplete.options, this.autocomplete.optionGroups\n        );\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField.control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef<HTMLElement> {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        if (this.autocomplete.autoActiveFirstOption) {\n            this.autocomplete.keyManager.setFirstItemActive();\n        } else {\n            this.autocomplete.keyManager.setActiveItem(-1);\n        }\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["observableOf"],"sourceRoot":"webpack:///"}