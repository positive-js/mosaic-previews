{"version":3,"file":"node_modules_ptsecurity_mosaic-examples_fesm2020_ptsecurity-mosaic-examples-mosaic-tree_mjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyD;AACjB;AACO;AACX;AAC4B;AAC3B;AACQ;AACO;AACW;AACjB;AAC+C;AAC3C;AACa;AACT;AACY;AACpB;AACS;AACN;AACQ;AACG;AACkB;AAC7B;AACY;AACf;AACiE;AAC9E;AACa;AACY;;AAE1D;AACA,sEAAsE;AACtE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,gBAAgB,yDAAc;AAC9B,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB;AACA,sEAAsE;AACtE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,gBAAgB,yDAAc;AAC9B,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E,6CAA6C,+DAAoB,GAAG,4mBAA4mB;AAChrB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,iHAAiH,iCAAiC,8GAA8G,iCAAiC;AACtT,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,QAAQ,4DAAiB;AACzB,QAAQ,4DAAiB;AACzB,QAAQ,oDAAS;AACjB,QAAQ,0DAAe;AACvB,QAAQ,4DAAiB;AACzB,QAAQ,oDAAS;AACjB,QAAQ,0DAAe;AACvB,QAAQ,4DAAiB;AACzB,QAAQ,oDAAS;AACjB,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,oEAAkB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,2DAAS,EAAE,oEAAkB,EAAE,4EAA0B,EAAE,wEAAmB,EAAE,0EAAoB,EAAE,8EAA4B,EAAE,mEAAa,EAAE,uEAAiB,iBAAiB;AACxT,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,quBAAquB,oqBAAoqB;AAC15C,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA,mEAAmE;AACnE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,cAAc,yDAAc,wFAAwF,4DAAiB;AACtJ;AACA,mEAAmE;AACnE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,cAAc,yDAAc,wFAAwF,4DAAiB;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,uEAAuE;AACvE,0CAA0C,+DAAoB,GAAG,kgBAAkgB;AACnkB,QAAQ,4DAAiB;AACzB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,kGAAkG,oCAAoC,mGAAmG,kCAAkC;AAChS,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,QAAQ,uDAAY;AACpB,QAAQ,uDAAY;AACpB,QAAQ,uDAAY;AACpB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,8GAA8G,iCAAiC;AACpK,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,sEAAgB,EAAE,6DAAY,EAAE,gEAAuB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,oEAAkB,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,8EAA4B,WAAW,oEAAkB,iBAAiB;AACtQ,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,8mBAA8mB,8RAA8R;AAC75B,KAAK,iBAAiB,YAAY,UAAU;;AAE5C,kEAAkE;AAClE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA,wFAAwF;AACxF,IAAI,uDAAY;AAChB;AACA,kEAAkE;AAClE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kDAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,IAAI;AACnE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,4CAAK;AACb,uDAAuD;AACvD,mCAAmC,UAAU,GAAG,MAAM;AACtD;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qEAAqE;AACrE,0CAA0C,gEAAqB,GAAG,+DAA+D;AACjI,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,qDAAU;AACxB,KAAK,iBAAiB;AACtB,iCAAiC,yEAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sCAAsC,+DAAoB;AAC/H,yCAAyC,+DAAoB,GAAG,8EAA8E,gEAAqB,8ZAA8Z;AACjkB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,6GAA6G,iCAAiC;AACnK,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,oEAAkB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,8EAA4B,EAAE,kDAAS,EAAE,mFAAsB,iBAAiB;AACnN,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,sbAAsb,oYAAoY;AAC30B,KAAK,iBAAiB,UAAU,2BAA2B,IAAI,UAAU;;AAEzE;AACA,0EAA0E;AAC1E,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA,0EAA0E;AAC1E,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA,4BAA4B;AAC5B;AACA,qFAAqF;AACrF,iDAAiD,+DAAoB,GAAG,6gBAA6gB;AACrlB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,qHAAqH,iCAAiC;AAC3K,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,oEAAkB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,2DAAS,EAAE,oEAAkB,EAAE,8EAA4B,iBAAiB;AAC/M,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,gfAAgf,4RAA4R;AAC7xB,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA,2EAA2E;AAC3E,gBAAgB,8DAAmB;AACnC,IAAI,4DAAiB;AACrB,IAAI,4DAAiB;AACrB,IAAI,wDAAa,6GAA6G,oBAAoB,2DAAgB,OAAO,uCAAuC,eAAe,2DAAgB,IAAI,6CAA6C;AAChS,IAAI,0DAAe;AACnB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA,2EAA2E;AAC3E,gBAAgB,8DAAmB;AACnC,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,4DAAiB;AACrB,IAAI,wDAAa,6GAA6G,oBAAoB,2DAAgB,OAAO,uCAAuC,eAAe,2DAAgB,IAAI,6CAA6C;AAChS,IAAI,0DAAe;AACnB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qEAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF,kDAAkD,+DAAoB,GAAG,omBAAomB;AAC7qB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,sHAAsH,iCAAiC;AAC5K,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,oEAAkB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,oEAAe,EAAE,8EAA4B,uDAAuD,iBAAiB,IAAI;AAC5P,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,0pBAA0pB,khBAAkhB,iBAAiB,MAAM;AACptC,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA,0EAA0E;AAC1E,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA,0EAA0E;AAC1E,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA,4BAA4B;AAC5B;AACA,qFAAqF;AACrF,iDAAiD,+DAAoB,GAAG,gfAAgf;AACxjB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,qHAAqH,iCAAiC;AAC3K,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,oEAAkB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,8EAA4B,iBAAiB;AAChL,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,ocAAoc,gPAAgP;AACrsB,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA,kEAAkE;AAClE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA,kEAAkE;AAClE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,EAAE;AACF;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,oEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,yEAAoB;AAClD;AACA;AACA,4BAA4B;AAC5B;AACA,qEAAqE;AACrE,yCAAyC,+DAAoB,GAAG,+bAA+b;AAC/f,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,6GAA6G,iCAAiC;AACnK,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,MAAM;AACN,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,OAAO,eAAe,oEAAkB,EAAE,2DAAkB,EAAE,mDAAU,EAAE,kEAAgB,EAAE,iEAAe,EAAE,sEAAoB,EAAE,8EAA4B,iBAAiB;AAChL,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,oDAAS;AACvB,iBAAiB,gaAAga,gPAAgP;AACjqB,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,wCAAwC,8DAAmB,GAAG,0BAA0B;AACxF,wCAAwC,8DAAmB,GAAG;AAC9D,YAAY,0DAAY;AACxB,YAAY,uDAAW;AACvB,YAAY,4EAAiB;AAC7B,YAAY,mEAAa;AACzB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,sEAAiB;AAC7B,YAAY,0EAAgB;AAC5B,YAAY,yEAAgB;AAC5B,YAAY,uEAAe;AAC3B,YAAY,mEAAc;AAC1B,YAAY,yFAAuB;AACnC,YAAY,oEAAe;AAC3B,YAAY;AACZ,eAAe,mDAAmD,+DAAoB;AACtF,cAAc,mDAAQ;AACtB;AACA;AACA,oBAAoB,0DAAY;AAChC,oBAAoB,uDAAW;AAC/B,oBAAoB,4EAAiB;AACrC,oBAAoB,mEAAa;AACjC,oBAAoB,iEAAY;AAChC,oBAAoB,iEAAY;AAChC,oBAAoB,sEAAiB;AACrC,oBAAoB,0EAAgB;AACpC,oBAAoB,yEAAgB;AACpC,oBAAoB,uEAAe;AACnC,oBAAoB,mEAAc;AAClC,oBAAoB,yFAAuB;AAC3C,oBAAoB,oEAAe;AACnC;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAqB,uBAAuB;AAC9G;AACA;AACA;AACA;AACA;AACA,wCAAwC,0DAAY;AACpD,QAAQ,uDAAW;AACnB,QAAQ,4EAAiB;AACzB,QAAQ,mEAAa;AACrB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,sEAAiB;AACzB,QAAQ,0EAAgB;AACxB,QAAQ,yEAAgB;AACxB,QAAQ,uEAAe;AACvB,QAAQ,mEAAc;AACtB,QAAQ,yFAAuB;AAC/B,QAAQ,oEAAe;AACvB;AACA;AACA;AACA;AACA;AACA,8BAA8B,IAAI;;AAElC;AACA;AACA;;AAE+M","sources":["./node_modules/@ptsecurity/mosaic-examples/fesm2020/ptsecurity-mosaic-examples-mosaic-tree.mjs"],"sourcesContent":["import { ClipboardModule } from '@angular/cdk/clipboard';\nimport * as i3$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3$2 from '@ptsecurity/mosaic/checkbox';\nimport { McCheckboxModule } from '@ptsecurity/mosaic/checkbox';\nimport * as i4 from '@ptsecurity/mosaic/core';\nimport { PopUpPlacements, McHighlightModule, McOptionModule } from '@ptsecurity/mosaic/core';\nimport * as i6 from '@ptsecurity/mosaic/dropdown';\nimport { McDropdownModule } from '@ptsecurity/mosaic/dropdown';\nimport * as i1$1 from '@ptsecurity/mosaic/form-field';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport * as i3 from '@ptsecurity/mosaic/icon';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport * as i2$1 from '@ptsecurity/mosaic/input';\nimport { McInputModule } from '@ptsecurity/mosaic/input';\nimport * as i4$1 from '@ptsecurity/mosaic/progress-spinner';\nimport { McProgressSpinnerModule } from '@ptsecurity/mosaic/progress-spinner';\nimport * as i5 from '@ptsecurity/mosaic/tooltip';\nimport { McToolTipModule } from '@ptsecurity/mosaic/tooltip';\nimport * as i1 from '@ptsecurity/mosaic/tree';\nimport { McTreeFlattener, FlatTreeControl, McTreeFlatDataSource, McTreeModule } from '@ptsecurity/mosaic/tree';\nimport { isEqual } from 'lodash';\nimport { BehaviorSubject, timer } from 'rxjs';\nimport { SelectionModel } from '@angular/cdk/collections';\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeActionButtonExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵelement(2, \"span\", 7);\n    i0.ɵɵelement(3, \"mc-option-action\", 8);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"disabled\", node_r3.name === \"tests\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mcTooltip\", \"Tooltip text\")(\"mcPlacement\", ctx_r0.popUpPlacements.Right)(\"mcDropdownTriggerFor\", _r2);\n} }\nfunction TreeActionButtonExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 9);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵelement(2, \"mc-tree-node-toggle\", 10);\n    i0.ɵɵelement(3, \"span\", 7);\n    i0.ɵɵelement(4, \"mc-option-action\", 8);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"node\", node_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r4), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mcTooltip\", \"Tooltip text\")(\"mcPlacement\", ctx_r1.popUpPlacements.Right)(\"mcDropdownTriggerFor\", _r2);\n} }\nclass FileNode$5 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$5 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$5(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$5();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$5(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$5 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeActionButtonExample {\n    constructor() {\n        this.popUpPlacements = PopUpPlacements;\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$5();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$5(DATA_OBJECT$5, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    onSelectAll($event) {\n        // tslint:disable-next-line:no-console\n        console.log('All items selected', $event);\n    }\n}\nTreeActionButtonExample.ɵfac = function TreeActionButtonExample_Factory(t) { return new (t || TreeActionButtonExample)(); };\nTreeActionButtonExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeActionButtonExample, selectors: [[\"tree-action-button-example\"]], decls: 11, vars: 5, consts: [[3, \"ngModel\", \"autoSelect\", \"dataSource\", \"treeControl\", \"ngModelChange\", \"onSelectAll\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"dropdown\", \"\"], [\"mc-dropdown-item\", \"\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [\"mc-icon\", \"mc-info-o_16\"], [3, \"innerHTML\"], [3, \"mcTooltip\", \"mcPlacement\", \"mcDropdownTriggerFor\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeActionButtonExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeActionButtonExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; })(\"onSelectAll\", function TreeActionButtonExample_Template_mc_tree_selection_onSelectAll_0_listener($event) { return ctx.onSelectAll($event); });\n        i0.ɵɵtemplate(1, TreeActionButtonExample_mc_tree_option_1_Template, 4, 5, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeActionButtonExample_mc_tree_option_2_Template, 5, 5, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mc-dropdown\", null, 3);\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵtext(6, \"action 1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵtext(8, \"action 2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 4);\n        i0.ɵɵtext(10, \"action 3\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"autoSelect\", false)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i3.McIcon, i3.McIconCSSStyler, i4.McOptionActionComponent, i5.McTooltipTrigger, i6.McDropdownTrigger, i1.McTreeNodeToggleComponent, i6.McDropdown, i6.McDropdownItem], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeActionButtonExample, [{\n        type: Component,\n        args: [{ selector: 'tree-action-button-example', template: \"<mc-tree-selection\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [autoSelect]=\\\"false\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\"\\n    (onSelectAll)=\\\"onSelectAll($event)\\\">\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding [disabled]=\\\"node.name === 'tests'\\\">\\n        <i mc-icon=\\\"mc-info-o_16\\\"></i>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n\\n        <mc-option-action\\n            [mcTooltip]=\\\"'Tooltip text'\\\"\\n            [mcPlacement]=\\\"popUpPlacements.Right\\\"\\n            [mcDropdownTriggerFor]=\\\"dropdown\\\">\\n        </mc-option-action>\\n    </mc-tree-option>\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n        <i mc-icon=\\\"mc-info-o_16\\\"></i>\\n\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n\\n        <mc-option-action\\n            [mcTooltip]=\\\"'Tooltip text'\\\"\\n            [mcPlacement]=\\\"popUpPlacements.Right\\\"\\n            [mcDropdownTriggerFor]=\\\"dropdown\\\">\\n        </mc-option-action>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\\n<mc-dropdown #dropdown>\\n    <button mc-dropdown-item>action 1</button>\\n    <button mc-dropdown-item>action 2</button>\\n    <button mc-dropdown-item>action 3</button>\\n</mc-dropdown>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeFilteringExample_mc_tree_option_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 4);\n    i0.ɵɵelement(1, \"span\", 5);\n    i0.ɵɵpipe(2, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 2, ctx_r0.treeControl.getViewValue(node_r2), ctx_r0.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeFilteringExample_mc_tree_option_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵpipe(3, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(3, 2, ctx_r1.treeControl.getViewValue(node_r3), ctx_r1.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$4 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$4 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$4(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$4();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$4(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$4 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeFilteringExample {\n    constructor() {\n        this.modelValue = '';\n        this.filterValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$4();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);\n    }\n    onFilterChange(value) {\n        this.treeControl.filterNodes(value);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeFilteringExample.ɵfac = function TreeFilteringExample_Factory(t) { return new (t || TreeFilteringExample)(); };\nTreeFilteringExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeFilteringExample, selectors: [[\"tree-filtering-example\"]], decls: 8, vars: 5, consts: [[\"type\", \"text\", \"mcInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeFilteringExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.onFilterChange($event); })(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.filterValue = $event; });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"mc-tree-selection\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_mc_tree_selection_ngModelChange_5_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(6, TreeFilteringExample_mc_tree_option_6_Template, 3, 5, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(7, TreeFilteringExample_mc_tree_option_7_Template, 4, 5, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.filterValue);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McFormField, i2$1.McInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i1.McTreeSelection, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent], pipes: [i4.McHighlightPipe], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeFilteringExample, [{\n        type: Component,\n        args: [{ selector: 'tree-filtering-example', template: \"<mc-form-field>\\n    <input type=\\\"text\\\" mcInput (ngModelChange)=\\\"onFilterChange($event)\\\" [(ngModel)]=\\\"filterValue\\\">\\n</mc-form-field>\\n\\n<br><br><br>\\n\\n<mc-tree-selection\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\">\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding [disabled]=\\\"node.name === 'tests'\\\">\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\\\"></span>\\n    </mc-tree-option>\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\\\"></span>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\nfunction TreeLazyloadExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeLazyloadExample_mc_tree_option_2_mc_progress_spinner_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mc-progress-spinner\", 7);\n} }\nfunction TreeLazyloadExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 5);\n    i0.ɵɵtemplate(2, TreeLazyloadExample_mc_tree_option_2_mc_progress_spinner_2_Template, 1, 0, \"mc-progress-spinner\", 6);\n    i0.ɵɵelement(3, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r3.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass LazyLoadFlatNode {\n}\nclass LazyLoadNode {\n    constructor(id, name, hasChildren = false, loading = false, loaded = false) {\n        this.id = id;\n        this.name = name;\n        this.hasChildren = hasChildren;\n        this.loading = loading;\n        this.loaded = loaded;\n        this.childrenChange = new BehaviorSubject([]);\n    }\n    get children() {\n        return this.childrenChange.value;\n    }\n}\nclass LazyLoadDataService {\n    constructor() {\n        this.dataChange = new BehaviorSubject([]);\n        this.nodeMap = new Map();\n    }\n    initialize() {\n        // example with http-request\n        /*this.http.get<INodeResponse[]>('/api/getTree').subscribe((data) => {\n            this.dataChange.next(\n                data.map((nodeResponse: INodeResponse) => {\n                        const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n                        this.nodeMap.set(nodeResponse.id, result);\n\n                        return result;\n                    }\n                )\n            );\n        });*/\n        this.dataChange.next(Array(5).fill({}).map((value, index) => {\n            const id = index.toString();\n            return {\n                ...value,\n                hasChildren: !(index % 2),\n                name: `node-${id}`,\n                id\n            };\n        }).map((nodeResponse) => {\n            const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n            this.nodeMap.set(nodeResponse.id, result);\n            return result;\n        }));\n    }\n    loadChildren(id) {\n        const parent = this.nodeMap.get(id);\n        if (parent.loading || (parent.hasChildren && parent.children.length)) {\n            return;\n        }\n        parent.loading = true;\n        this.nodeMap.set(parent.id, parent);\n        this.dataChange.next(this.dataChange.value);\n        // example with http-request\n        /* this.http.get<INodeResponse[]>(`/api/getChildren/${ id }`)\n            .pipe(\n                finalize(() => {\n                    parent.loading = false;\n                    this.nodeMap.set(parent.id, parent);\n                    this.dataChange.next(this.dataChange.value);\n                })\n            )\n            .subscribe((data) => {\n                const children = data.map((nodeResponse: INodeResponse) => {\n                        const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n                        this.nodeMap.set(nodeResponse.id, result);\n\n                        return result;\n                    }\n                );\n                parent.loaded = true;\n                parent.childrenChange.next(children);\n            });\n        */\n        timer(5000).subscribe(() => {\n            parent.childrenChange.next(Array(5).fill({}).map((value, index) => {\n                const childId = `${parent.id}-${index}`.toString();\n                return {\n                    ...value,\n                    hasChildren: !(index % 2),\n                    name: `node-${childId}`,\n                    id: childId\n                };\n            }).map((nodeResponse) => {\n                const result = new LazyLoadNode(nodeResponse.id, nodeResponse.name, nodeResponse.hasChildren);\n                this.nodeMap.set(nodeResponse.id, result);\n                return result;\n            }));\n            parent.loading = false;\n            parent.loaded = true;\n            this.nodeMap.set(parent.id, parent);\n            this.dataChange.next(this.dataChange.value);\n        });\n    }\n}\nLazyLoadDataService.ɵfac = function LazyLoadDataService_Factory(t) { return new (t || LazyLoadDataService)(); };\nLazyLoadDataService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LazyLoadDataService, factory: LazyLoadDataService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LazyLoadDataService, [{\n        type: Injectable\n    }], null, null); })();\nclass LazyLoadDataSource extends McTreeFlatDataSource {\n    constructor(treeControl, treeFlattener, dataService) {\n        super(treeControl, treeFlattener, []);\n        this.dataService = dataService;\n    }\n    expansionHandler(change) {\n        if (change && change.added && change.added.length) {\n            // @ts-ignore\n            this.dataService.loadChildren(change.added[0].id);\n        }\n        return super.expansionHandler(change);\n    }\n}\n/**\n * @title Basic tree\n */\nclass TreeLazyloadExample {\n    constructor(dataService) {\n        this.dataService = dataService;\n        this.modelValue = '';\n        this.nodeMap = new Map();\n        this.transformer = (node, level, parent) => {\n            const existingNode = this.nodeMap.get(node.id);\n            const flatNode = new LazyLoadFlatNode();\n            flatNode.id = node.id;\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.level = level;\n            flatNode.expandable = node.hasChildren;\n            flatNode.loading = node.loading;\n            if (existingNode && isEqual(existingNode, flatNode)) {\n                return existingNode;\n            }\n            this.nodeMap.set(node.id, flatNode);\n            if (node.loaded) {\n                this.treeControl.expand(flatNode);\n            }\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.childrenChange;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            return node.name;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new LazyLoadDataSource(this.treeControl, this.treeFlattener, this.dataService);\n        this.dataSource.data = [];\n        this.dataService.dataChange.subscribe((data) => {\n            this.dataSource.data = data;\n        });\n        this.dataService.initialize();\n    }\n    hasChild(_, nodeData) {\n        return nodeData.expandable;\n    }\n    clickNode(node) {\n        this.dataService.loadChildren(node.id);\n    }\n}\nTreeLazyloadExample.ɵfac = function TreeLazyloadExample_Factory(t) { return new (t || TreeLazyloadExample)(i0.ɵɵdirectiveInject(LazyLoadDataService)); };\nTreeLazyloadExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeLazyloadExample, selectors: [[\"tree-lazyload-example\"]], features: [i0.ɵɵProvidersFeature([LazyLoadDataService])], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\"], [3, \"innerHTML\"], [3, \"node\"], [\"mode\", \"indeterminate\", 4, \"ngIf\"], [\"mode\", \"indeterminate\"]], template: function TreeLazyloadExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeLazyloadExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeLazyloadExample_mc_tree_option_1_Template, 2, 1, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeLazyloadExample_mc_tree_option_2_Template, 4, 3, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent, i3$1.NgIf, i4$1.McProgressSpinner], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeLazyloadExample, [{\n        type: Component,\n        args: [{ selector: 'tree-lazyload-example', providers: [LazyLoadDataService], template: \"<mc-tree-selection\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\">\\n    <mc-tree-option\\n        *mcTreeNodeDef=\\\"let node\\\"\\n        mcTreeNodePadding>\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n\\n    <mc-tree-option\\n        *mcTreeNodeDef=\\\"let node; when: hasChild\\\"\\n        mcTreeNodePadding>\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n        <mc-progress-spinner *ngIf=\\\"node.loading\\\"\\n                             mode=\\\"indeterminate\\\">\\n        </mc-progress-spinner>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\", styles: [\"\"] }]\n    }], function () { return [{ type: LazyLoadDataService }]; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleCheckboxExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleCheckboxExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelement(2, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$3 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$3 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$3(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$3();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$3(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$3 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleCheckboxExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$3();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleCheckboxExample.ɵfac = function TreeMultipleCheckboxExample_Factory(t) { return new (t || TreeMultipleCheckboxExample)(); };\nTreeMultipleCheckboxExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleCheckboxExample, selectors: [[\"tree-multiple-checkbox-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"checkbox\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [\"mc-icon\", \"mc-info-o_16\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleCheckboxExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleCheckboxExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleCheckboxExample_mc_tree_option_1_Template, 3, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleCheckboxExample_mc_tree_option_2_Template, 4, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i3.McIcon, i3.McIconCSSStyler, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleCheckboxExample, [{\n        type: Component,\n        args: [{ selector: 'tree-multiple-checkbox-example', template: \"<mc-tree-selection\\n    multiple=\\\"checkbox\\\"\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\">\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding [disabled]=\\\"node.name === 'tests'\\\">\\n        <i mc-icon=\\\"mc-info-o_16\\\"></i>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n        <i mc-icon=\\\"mc-info-o_16\\\"></i>\\n\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleChecklistExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelementStart(1, \"mc-checkbox\", 4);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_1_Template_mc_checkbox_change_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const node_r2 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.fileSelectionToggle(node_r2); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\")(\"checked\", ctx_r0.checklistSelection.isSelected(node_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleChecklistExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelementStart(2, \"mc-checkbox\", 8);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_2_Template_mc_checkbox_change_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const node_r5 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.fileSelectionToggle(node_r5); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r1.descendantsAllSelected(node_r5))(\"indeterminate\", ctx_r1.descendantsPartiallySelected(node_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r5), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$2 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$2 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$2(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$2();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$2(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$2 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Checklist tree\n */\nclass TreeMultipleChecklistExample {\n    constructor() {\n        this.modelValue = [];\n        /** The selection for checklist */\n        this.checklistSelection = new SelectionModel(true /* multiple */);\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$2();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        return descendants.every((child) => this.checklistSelection.isSelected(child));\n    }\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some((child) => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    fileSelectionToggle(node) {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n        // Force update for the parent\n        descendants.every((child) => this.checklistSelection.isSelected(child));\n        this.checkAllParentsSelection(node);\n    }\n    /* Checks all the parents when a leaf node is selected/unselected */\n    checkAllParentsSelection(node) {\n        let parent = this.getParentNode(node);\n        while (parent) {\n            this.checkRootNodeSelection(parent);\n            parent = this.getParentNode(parent);\n        }\n    }\n    /** Check root node checked state and change it accordingly */\n    checkRootNodeSelection(node) {\n        const nodeSelected = this.checklistSelection.isSelected(node);\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.every((child) => this.checklistSelection.isSelected(child));\n        if (nodeSelected && !descAllSelected) {\n            this.checklistSelection.deselect(node);\n        }\n        else if (!nodeSelected && descAllSelected) {\n            this.checklistSelection.select(node);\n        }\n    }\n    /* Get the parent node of a node */\n    getParentNode(node) {\n        const currentLevel = this.getLevel(node);\n        if (currentLevel < 1) {\n            return null;\n        }\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n        for (let i = startIndex; i >= 0; i--) {\n            const currentNode = this.treeControl.dataNodes[i];\n            if (this.getLevel(currentNode) < currentLevel) {\n                return currentNode;\n            }\n        }\n        return null;\n    }\n}\nTreeMultipleChecklistExample.ɵfac = function TreeMultipleChecklistExample_Factory(t) { return new (t || TreeMultipleChecklistExample)(); };\nTreeMultipleChecklistExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleChecklistExample, selectors: [[\"tree-multiple-checklist-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [1, \"tree-example-checkbox\", 3, \"disabled\", \"checked\", \"change\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"], [1, \"tree-example-checkbox\", 3, \"checked\", \"indeterminate\", \"change\"]], template: function TreeMultipleChecklistExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleChecklistExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleChecklistExample_mc_tree_option_1_Template, 3, 4, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleChecklistExample_mc_tree_option_2_Template, 4, 4, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i3$2.McCheckbox, i1.McTreeNodeToggleComponent], styles: [\".tree-example-checkbox[_ngcontent-%COMP%]{margin-right:8px}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleChecklistExample, [{\n        type: Component,\n        args: [{ selector: 'tree-multiple-checklist-example', template: \"<mc-tree-selection\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\">\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding [disabled]=\\\"node.name === 'tests'\\\">\\n        <mc-checkbox class= \\\"tree-example-checkbox\\\" [disabled]=\\\"node.name === 'tests'\\\"\\n                     [checked]=\\\"checklistSelection.isSelected(node)\\\"\\n                     (change)=\\\"fileSelectionToggle(node)\\\"></mc-checkbox>\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n        <mc-checkbox class= \\\"tree-example-checkbox\\\"\\n                     [checked]=\\\"descendantsAllSelected(node)\\\"\\n                     [indeterminate]=\\\"descendantsPartiallySelected(node)\\\"\\n                     (change)=\\\"fileSelectionToggle(node)\\\"></mc-checkbox>\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\", styles: [\".tree-example-checkbox{margin-right:8px}\\n\"] }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleKeyboardExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleKeyboardExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$1 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$1 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$1(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$1();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$1(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$1 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleKeyboardExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$1();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleKeyboardExample.ɵfac = function TreeMultipleKeyboardExample_Factory(t) { return new (t || TreeMultipleKeyboardExample)(); };\nTreeMultipleKeyboardExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleKeyboardExample, selectors: [[\"tree-multiple-keyboard-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"keyboard\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleKeyboardExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleKeyboardExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleKeyboardExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleKeyboardExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleKeyboardExample, [{\n        type: Component,\n        args: [{ selector: 'tree-multiple-keyboard-example', template: \"<mc-tree-selection\\n    multiple=\\\"keyboard\\\"\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\">\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding [disabled]=\\\"node.name === 'tests'\\\">\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeOverviewExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeOverviewExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeOverviewExample {\n    constructor() {\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeOverviewExample.ɵfac = function TreeOverviewExample_Factory(t) { return new (t || TreeOverviewExample)(); };\nTreeOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeOverviewExample, selectors: [[\"tree-overview-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeOverviewExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeOverviewExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeOverviewExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'tree-overview-example', template: \"<mc-tree-selection\\n    [(ngModel)]=\\\"modelValue\\\"\\n    [dataSource]=\\\"dataSource\\\"\\n    [treeControl]=\\\"treeControl\\\">\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node\\\" mcTreeNodePadding [disabled]=\\\"node.name === 'tests'\\\">\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n\\n    <mc-tree-option *mcTreeNodeDef=\\\"let node; when: hasChild\\\" mcTreeNodePadding>\\n        <mc-tree-node-toggle [node]=\\\"node\\\"></mc-tree-node-toggle>\\n\\n        <span [innerHTML]=\\\"treeControl.getViewValue(node)\\\"></span>\\n    </mc-tree-option>\\n</mc-tree-selection>\\n\", styles: [\"\"] }]\n    }], function () { return []; }, null); })();\n\nconst EXAMPLES = [\n    TreeActionButtonExample,\n    TreeOverviewExample,\n    TreeMultipleCheckboxExample,\n    TreeMultipleChecklistExample,\n    TreeMultipleKeyboardExample,\n    TreeFilteringExample,\n    TreeLazyloadExample\n];\nclass TreeExamplesModule {\n}\nTreeExamplesModule.ɵfac = function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); };\nTreeExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\nTreeExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            FormsModule,\n            McFormFieldModule,\n            McInputModule,\n            McTreeModule,\n            McIconModule,\n            McHighlightModule,\n            McCheckboxModule,\n            McDropdownModule,\n            McToolTipModule,\n            McOptionModule,\n            McProgressSpinnerModule,\n            ClipboardModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    McFormFieldModule,\n                    McInputModule,\n                    McTreeModule,\n                    McIconModule,\n                    McHighlightModule,\n                    McCheckboxModule,\n                    McDropdownModule,\n                    McToolTipModule,\n                    McOptionModule,\n                    McProgressSpinnerModule,\n                    ClipboardModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeActionButtonExample,\n        TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample,\n        TreeLazyloadExample], imports: [CommonModule,\n        FormsModule,\n        McFormFieldModule,\n        McInputModule,\n        McTreeModule,\n        McIconModule,\n        McHighlightModule,\n        McCheckboxModule,\n        McDropdownModule,\n        McToolTipModule,\n        McOptionModule,\n        McProgressSpinnerModule,\n        ClipboardModule], exports: [TreeActionButtonExample,\n        TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample,\n        TreeLazyloadExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeActionButtonExample, TreeExamplesModule, TreeFilteringExample, TreeLazyloadExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample };\n"],"names":[],"sourceRoot":"webpack:///"}