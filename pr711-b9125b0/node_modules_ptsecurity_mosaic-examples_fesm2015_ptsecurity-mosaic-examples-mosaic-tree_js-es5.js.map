{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UAEAA;AACA;AAAA;;AACA;;AACA;;AACA,sCAHA,CAIA;AACA;AACA;;AACAC;AACAA;AACAA;AACAC;AACAA;;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;;AACA;AAAc;AACd;AACA;AACAA;AACAA;AACAC;;AACA;AACAC;AACA;AACA;AACA,aAVA,CAWA,YACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACAF;AACA;;AACA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;UACAG;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;;;;AAEAD;AAAiD,qCAA4BE,uDAAgBC,qDAAhB,CAA5B;AAAoD,OAArG;;AACAH,yBAAkB,sEAAkB;AAAGI;AAAwC,gCAAqB,4DAASD,qDAAT,CAArB;AAA2C,SAAtF;AAAsFE,yBAAtF;AAAsFC;AAAtF,OAAlB,CAAlB;;AACAN;AAAA,gBACA;AAAMO,yBAAN;AAAMC;AAAgCD,kBAAML,iDAAtC;AAA4CO,mBAASN,qDAAT;AAA5C;AAAN,SADA;AAAA;;AAGA;AAAe,2DAAmDD,gEAAwBF,UAAxB,EAAwB;AAC1FO,gBAAcL,qDAD4E;AAE1FO;AAAiBH;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAUC,2BAAV;AAAUC;AAChCD,oBAAsBL,iDADU;AAEhCO,qBAAuBN,qDAAvB;AAFgC;AAAV;AAGF,SAN8C,EAM9C,IAN8C,CAAnD;AAMe,OAN9B;AAQA;AACA;AACA;AACA;AACA;AACA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","names":["PendingCopy","styles","textarea","successful","currentFocus","Clipboard","pendingCopy","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_1__","factory","token","providedIn","type","decorators","args","CdkCopyToClipboard","pending","attempt","clearTimeout","CKD_COPY_TO_CLIPBOARD_CONFIG","selectors","hostBindings","inputs","text","attempts","outputs","copied","selector","host","ClipboardModule","declarations","exports","node_r3","ctx_r0","_r2","node_r4","ctx_r1","FileNode$5","FileFlatNode$5","node","k","data","docs","src","cdk","a11ly","documentation","source","tools","mosaic","autocomplete","button","index","version","alert","badge","README","wallabyTest","scripts","deploy","tests","TreeActionButtonExample","flatNode","nodeType","_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__","console","_angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__","decls","vars","consts","template","TreeActionButtonExample_mc_tree_option_1_Template","TreeActionButtonExample_mc_tree_option_2_Template","ctx","directives","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","_ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__","_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__","_ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__","templateUrl","styleUrls","node_r2","FileNode$4","FileFlatNode$4","TreeFilteringExample","TreeFilteringExample_mc_tree_option_6_Template","TreeFilteringExample_mc_tree_option_7_Template","_ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__","_ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__","pipes","_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__","FileNode$3","FileFlatNode$3","TreeMultipleCheckboxExample","TreeMultipleCheckboxExample_mc_tree_option_1_Template","TreeMultipleCheckboxExample_mc_tree_option_2_Template","_r4","_r7","node_r5","FileNode$2","FileFlatNode$2","TreeMultipleChecklistExample","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__","descendants","parent","i","TreeMultipleChecklistExample_mc_tree_option_1_Template","TreeMultipleChecklistExample_mc_tree_option_2_Template","_ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_11__","FileNode$1","FileFlatNode$1","TreeMultipleKeyboardExample","TreeMultipleKeyboardExample_mc_tree_option_1_Template","TreeMultipleKeyboardExample_mc_tree_option_2_Template","FileNode","FileFlatNode","TreeOverviewExample","TreeOverviewExample_mc_tree_option_1_Template","TreeOverviewExample_mc_tree_option_2_Template","TreeExamplesModule","imports"],"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js","webpack:///node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-tree.js"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n","import * as i1 from '@angular/cdk/clipboard';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@ptsecurity/mosaic/checkbox';\nimport { McCheckboxModule } from '@ptsecurity/mosaic/checkbox';\nimport * as i5$1 from '@ptsecurity/mosaic/core';\nimport { McHighlightModule } from '@ptsecurity/mosaic/core';\nimport * as i4 from '@ptsecurity/mosaic/dropdown';\nimport { McDropdownModule } from '@ptsecurity/mosaic/dropdown';\nimport * as i1$2 from '@ptsecurity/mosaic/form-field';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport * as i5 from '@ptsecurity/mosaic/icon';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport * as i2$1 from '@ptsecurity/mosaic/input';\nimport { McInputModule } from '@ptsecurity/mosaic/input';\nimport * as i6 from '@ptsecurity/mosaic/tooltip';\nimport { McToolTipModule } from '@ptsecurity/mosaic/tooltip';\nimport * as i1$1 from '@ptsecurity/mosaic/tree';\nimport { McTreeFlattener, FlatTreeControl, McTreeFlatDataSource, McTreeModule } from '@ptsecurity/mosaic/tree';\nimport { SelectionModel } from '@angular/cdk/collections';\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeActionButtonExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵelement(2, \"span\", 7);\n    i0.ɵɵelement(3, \"mc-tree-node-action\", 8);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"disabled\", node_r3.name === \"tests\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mcPlacement\", \"right\")(\"mcDropdownTriggerFor\", _r2);\n} }\nfunction TreeActionButtonExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 9);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵelement(2, \"mc-tree-node-toggle\", 10);\n    i0.ɵɵelement(3, \"span\", 7);\n    i0.ɵɵelement(4, \"mc-tree-node-action\", 8);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"node\", node_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r4), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mcPlacement\", \"right\")(\"mcDropdownTriggerFor\", _r2);\n} }\nclass FileNode$5 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$5 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$5(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$5();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$5(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$5 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeActionButtonExample {\n    constructor(clipboard) {\n        this.clipboard = clipboard;\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$5();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$5(DATA_OBJECT$5, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    onCopy($event) {\n        this.clipboard.copy($event.option.viewValue);\n    }\n    onSelectAll($event) {\n        // tslint:disable-next-line:no-console\n        console.log('All items selected', $event);\n    }\n}\nTreeActionButtonExample.ɵfac = function TreeActionButtonExample_Factory(t) { return new (t || TreeActionButtonExample)(i0.ɵɵdirectiveInject(i1.Clipboard)); };\nTreeActionButtonExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeActionButtonExample, selectors: [[\"tree-action-button-example\"]], decls: 11, vars: 5, consts: [[\"multiple\", \"'checkbox'\", 3, \"ngModel\", \"autoSelect\", \"dataSource\", \"treeControl\", \"ngModelChange\", \"onSelectAll\", \"onCopy\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"dropdown\", \"\"], [\"mc-dropdown-item\", \"\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [\"mc-icon\", \"mc-info-o_16\"], [3, \"innerHTML\"], [\"mcTooltip\", \"Tooltip text\", 3, \"mcPlacement\", \"mcDropdownTriggerFor\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeActionButtonExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeActionButtonExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; })(\"onSelectAll\", function TreeActionButtonExample_Template_mc_tree_selection_onSelectAll_0_listener($event) { return ctx.onSelectAll($event); })(\"onCopy\", function TreeActionButtonExample_Template_mc_tree_selection_onCopy_0_listener($event) { return ctx.onCopy($event); });\n        i0.ɵɵtemplate(1, TreeActionButtonExample_mc_tree_option_1_Template, 4, 4, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeActionButtonExample_mc_tree_option_2_Template, 5, 4, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mc-dropdown\", null, 3);\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵtext(6, \"action 1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵtext(8, \"action 2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 4);\n        i0.ɵɵtext(10, \"action 3\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"autoSelect\", false)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1$1.McTreeNodeDef, i4.McDropdown, i4.McDropdownItem, i1$1.McTreeOption, i1$1.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i1$1.McTreeNodeActionComponent, i6.McTooltipTrigger, i4.McDropdownTrigger, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeActionButtonExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-action-button-example',\n                templateUrl: 'tree-action-button-example.html',\n                styleUrls: ['tree-action-button-example.css']\n            }]\n    }], function () { return [{ type: i1.Clipboard }]; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeFilteringExample_mc_tree_option_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 4);\n    i0.ɵɵelement(1, \"span\", 5);\n    i0.ɵɵpipe(2, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 2, ctx_r0.treeControl.getViewValue(node_r2), ctx_r0.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeFilteringExample_mc_tree_option_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵpipe(3, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(3, 2, ctx_r1.treeControl.getViewValue(node_r3), ctx_r1.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$4 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$4 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$4(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$4();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$4(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$4 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeFilteringExample {\n    constructor() {\n        this.modelValue = '';\n        this.filterValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$4();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);\n    }\n    onFilterChange(value) {\n        this.treeControl.filterNodes(value);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeFilteringExample.ɵfac = function TreeFilteringExample_Factory(t) { return new (t || TreeFilteringExample)(); };\nTreeFilteringExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeFilteringExample, selectors: [[\"tree-filtering-example\"]], decls: 8, vars: 5, consts: [[\"type\", \"text\", \"mcInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeFilteringExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.onFilterChange($event); })(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.filterValue = $event; });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"mc-tree-selection\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_mc_tree_selection_ngModelChange_5_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(6, TreeFilteringExample_mc_tree_option_6_Template, 3, 5, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(7, TreeFilteringExample_mc_tree_option_7_Template, 4, 5, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.filterValue);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$2.McFormField, i2$1.McInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i1$1.McTreeSelection, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], pipes: [i5$1.McHighlightPipe], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeFilteringExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-filtering-example',\n                templateUrl: 'tree-filtering-example.html',\n                styleUrls: ['tree-filtering-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleCheckboxExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleCheckboxExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelement(2, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$3 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$3 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$3(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$3();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$3(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$3 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleCheckboxExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$3();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleCheckboxExample.ɵfac = function TreeMultipleCheckboxExample_Factory(t) { return new (t || TreeMultipleCheckboxExample)(); };\nTreeMultipleCheckboxExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleCheckboxExample, selectors: [[\"tree-multiple-checkbox-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"checkbox\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [\"mc-icon\", \"mc-info-o_16\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleCheckboxExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleCheckboxExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleCheckboxExample_mc_tree_option_1_Template, 3, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleCheckboxExample_mc_tree_option_2_Template, 4, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i5.McIcon, i5.McIconCSSStyler, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleCheckboxExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-checkbox-example',\n                templateUrl: 'tree-multiple-checkbox-example.html',\n                styleUrls: ['tree-multiple-checkbox-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleChecklistExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelementStart(1, \"mc-checkbox\", 4);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_1_Template_mc_checkbox_change_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const node_r2 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.fileSelectionToggle(node_r2); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\")(\"checked\", ctx_r0.checklistSelection.isSelected(node_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleChecklistExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelementStart(2, \"mc-checkbox\", 8);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_2_Template_mc_checkbox_change_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const node_r5 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.fileSelectionToggle(node_r5); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r1.descendantsAllSelected(node_r5))(\"indeterminate\", ctx_r1.descendantsPartiallySelected(node_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r5), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$2 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$2 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$2(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$2();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$2(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$2 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Checklist tree\n */\nclass TreeMultipleChecklistExample {\n    constructor() {\n        this.modelValue = [];\n        /** The selection for checklist */\n        this.checklistSelection = new SelectionModel(true /* multiple */);\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$2();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        return descendants.every((child) => this.checklistSelection.isSelected(child));\n    }\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some((child) => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    fileSelectionToggle(node) {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n        // Force update for the parent\n        descendants.every((child) => this.checklistSelection.isSelected(child));\n        this.checkAllParentsSelection(node);\n    }\n    /* Checks all the parents when a leaf node is selected/unselected */\n    checkAllParentsSelection(node) {\n        let parent = this.getParentNode(node);\n        while (parent) {\n            this.checkRootNodeSelection(parent);\n            parent = this.getParentNode(parent);\n        }\n    }\n    /** Check root node checked state and change it accordingly */\n    checkRootNodeSelection(node) {\n        const nodeSelected = this.checklistSelection.isSelected(node);\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.every((child) => this.checklistSelection.isSelected(child));\n        if (nodeSelected && !descAllSelected) {\n            this.checklistSelection.deselect(node);\n        }\n        else if (!nodeSelected && descAllSelected) {\n            this.checklistSelection.select(node);\n        }\n    }\n    /* Get the parent node of a node */\n    getParentNode(node) {\n        const currentLevel = this.getLevel(node);\n        if (currentLevel < 1) {\n            return null;\n        }\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n        for (let i = startIndex; i >= 0; i--) {\n            const currentNode = this.treeControl.dataNodes[i];\n            if (this.getLevel(currentNode) < currentLevel) {\n                return currentNode;\n            }\n        }\n        return null;\n    }\n}\nTreeMultipleChecklistExample.ɵfac = function TreeMultipleChecklistExample_Factory(t) { return new (t || TreeMultipleChecklistExample)(); };\nTreeMultipleChecklistExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleChecklistExample, selectors: [[\"tree-multiple-checklist-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [1, \"tree-example-checkbox\", 3, \"disabled\", \"checked\", \"change\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"], [1, \"tree-example-checkbox\", 3, \"checked\", \"indeterminate\", \"change\"]], template: function TreeMultipleChecklistExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleChecklistExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleChecklistExample_mc_tree_option_1_Template, 3, 4, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleChecklistExample_mc_tree_option_2_Template, 4, 4, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i3.McCheckbox, i1$1.McTreeNodeToggleComponent], styles: [\".tree-example-checkbox[_ngcontent-%COMP%]{margin-right:8px}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleChecklistExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-checklist-example',\n                templateUrl: 'tree-multiple-checklist-example.html',\n                styleUrls: ['tree-multiple-checklist-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleKeyboardExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleKeyboardExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$1 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$1 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$1(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$1();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$1(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$1 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleKeyboardExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$1();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleKeyboardExample.ɵfac = function TreeMultipleKeyboardExample_Factory(t) { return new (t || TreeMultipleKeyboardExample)(); };\nTreeMultipleKeyboardExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleKeyboardExample, selectors: [[\"tree-multiple-keyboard-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"keyboard\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleKeyboardExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleKeyboardExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleKeyboardExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleKeyboardExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleKeyboardExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-keyboard-example',\n                templateUrl: 'tree-multiple-keyboard-example.html',\n                styleUrls: ['tree-multiple-keyboard-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeOverviewExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeOverviewExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeOverviewExample {\n    constructor() {\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeOverviewExample.ɵfac = function TreeOverviewExample_Factory(t) { return new (t || TreeOverviewExample)(); };\nTreeOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeOverviewExample, selectors: [[\"tree-overview-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeOverviewExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeOverviewExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeOverviewExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-overview-example',\n                templateUrl: 'tree-overview-example.html',\n                styleUrls: ['tree-overview-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\nconst EXAMPLES = [\n    TreeActionButtonExample,\n    TreeOverviewExample,\n    TreeMultipleCheckboxExample,\n    TreeMultipleChecklistExample,\n    TreeMultipleKeyboardExample,\n    TreeFilteringExample\n];\nclass TreeExamplesModule {\n}\nTreeExamplesModule.ɵfac = function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); };\nTreeExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\nTreeExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            FormsModule,\n            McFormFieldModule,\n            McInputModule,\n            McTreeModule,\n            McIconModule,\n            McHighlightModule,\n            McCheckboxModule,\n            McDropdownModule,\n            McToolTipModule,\n            ClipboardModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    FormsModule,\n                    McFormFieldModule,\n                    McInputModule,\n                    McTreeModule,\n                    McIconModule,\n                    McHighlightModule,\n                    McCheckboxModule,\n                    McDropdownModule,\n                    McToolTipModule,\n                    ClipboardModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeActionButtonExample,\n        TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample], imports: [FormsModule,\n        McFormFieldModule,\n        McInputModule,\n        McTreeModule,\n        McIconModule,\n        McHighlightModule,\n        McCheckboxModule,\n        McDropdownModule,\n        McToolTipModule,\n        ClipboardModule], exports: [TreeActionButtonExample,\n        TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeActionButtonExample, TreeExamplesModule, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample };\n"]}