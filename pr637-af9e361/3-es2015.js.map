{"version":3,"sources":["./dist/packages/mosaic/autocomplete/autocomplete.component.ts","./dist/packages/mosaic/autocomplete/autocomplete-origin.directive.ts","./dist/packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","./dist/packages/mosaic/autocomplete/autocomplete.module.ts","./dist/packages/mosaic/autocomplete/ptsecurity-mosaic-autocomplete.ts"],"names":["observableOf"],"mappings":"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","file":"3-es2015.js","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.scss'],\n    host: {\n        class: 'mc-autocomplete'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete\n    }]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    @Input('class')\n    get classList() {\n        return this._classList;\n    }\n\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    @Input()\n    get openOnFocus(): boolean {\n        return this._openOnFocus;\n    }\n\n    set openOnFocus(value: boolean) {\n        this._openOnFocus = value;\n    }\n\n    private _openOnFocus: boolean = true;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedPosition,\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen() && this.autocomplete.openOnFocus) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ? this.formField._elementRef.nativeElement : null;\n                const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(\n            index,\n            this.autocomplete.options, this.autocomplete.optionGroups\n        );\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField.control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef<HTMLElement> {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        if (this.autocomplete.autoActiveFirstOption) {\n            this.autocomplete.keyManager.setFirstItemActive();\n        } else {\n            this.autocomplete.keyManager.setActiveItem(-1);\n        }\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"sourceRoot":"webpack:///"}