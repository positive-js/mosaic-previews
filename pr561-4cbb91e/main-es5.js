(function () {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"], {
    /***/
    "+6St":
    /*!******************************************************!*\
      !*** ./dist/cdk/fesm2015/ptsecurity-cdk-keycodes.js ***!
      \******************************************************/

    /*! exports provided: A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PERIOD, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO, hasModifierKey, isControl, isCopy, isDigit, isFunctionKey, isHorizontalMovement, isInput, isLeftBracket, isLetterKey, isNumberKey, isRightBracket, isSelectAll, isVerticalMovement */

    /***/
    function St(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "A", function () {
        return A;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ALT", function () {
        return ALT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APOSTROPHE", function () {
        return APOSTROPHE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AT_SIGN", function () {
        return AT_SIGN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "B", function () {
        return B;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BACKSLASH", function () {
        return BACKSLASH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BACKSPACE", function () {
        return BACKSPACE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "C", function () {
        return C;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CAPS_LOCK", function () {
        return CAPS_LOCK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CLOSE_SQUARE_BRACKET", function () {
        return CLOSE_SQUARE_BRACKET;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "COMMA", function () {
        return COMMA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CONTEXT_MENU", function () {
        return CONTEXT_MENU;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CONTROL", function () {
        return CONTROL;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "D", function () {
        return D;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DASH", function () {
        return DASH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DELETE", function () {
        return DELETE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function () {
        return DOWN_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "E", function () {
        return E;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EIGHT", function () {
        return EIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "END", function () {
        return END;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ENTER", function () {
        return ENTER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EQUALS", function () {
        return EQUALS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ESCAPE", function () {
        return ESCAPE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F", function () {
        return F;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F1", function () {
        return F1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F10", function () {
        return F10;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F11", function () {
        return F11;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F12", function () {
        return F12;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F2", function () {
        return F2;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F3", function () {
        return F3;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F4", function () {
        return F4;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F5", function () {
        return F5;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F6", function () {
        return F6;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F7", function () {
        return F7;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F8", function () {
        return F8;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "F9", function () {
        return F9;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_EQUALS", function () {
        return FF_EQUALS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_MINUS", function () {
        return FF_MINUS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_MUTE", function () {
        return FF_MUTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_SEMICOLON", function () {
        return FF_SEMICOLON;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_VOLUME_DOWN", function () {
        return FF_VOLUME_DOWN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FF_VOLUME_UP", function () {
        return FF_VOLUME_UP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FIRST_MEDIA", function () {
        return FIRST_MEDIA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FIVE", function () {
        return FIVE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FOUR", function () {
        return FOUR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "G", function () {
        return G;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "H", function () {
        return H;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOME", function () {
        return HOME;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "I", function () {
        return I;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "INSERT", function () {
        return INSERT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "J", function () {
        return J;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "K", function () {
        return K;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "L", function () {
        return L;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LAST_MEDIA", function () {
        return LAST_MEDIA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function () {
        return LEFT_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "M", function () {
        return M;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_ENTER", function () {
        return MAC_ENTER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_META", function () {
        return MAC_META;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_LEFT", function () {
        return MAC_WK_CMD_LEFT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_RIGHT", function () {
        return MAC_WK_CMD_RIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "META", function () {
        return META;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MUTE", function () {
        return MUTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "N", function () {
        return N;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NINE", function () {
        return NINE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_DIVIDE", function () {
        return NUMPAD_DIVIDE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_EIGHT", function () {
        return NUMPAD_EIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_FIVE", function () {
        return NUMPAD_FIVE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_FOUR", function () {
        return NUMPAD_FOUR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_MINUS", function () {
        return NUMPAD_MINUS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_MULTIPLY", function () {
        return NUMPAD_MULTIPLY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_NINE", function () {
        return NUMPAD_NINE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_ONE", function () {
        return NUMPAD_ONE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_PERIOD", function () {
        return NUMPAD_PERIOD;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_PLUS", function () {
        return NUMPAD_PLUS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_SEVEN", function () {
        return NUMPAD_SEVEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_SIX", function () {
        return NUMPAD_SIX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_THREE", function () {
        return NUMPAD_THREE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_TWO", function () {
        return NUMPAD_TWO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMPAD_ZERO", function () {
        return NUMPAD_ZERO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUM_CENTER", function () {
        return NUM_CENTER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUM_LOCK", function () {
        return NUM_LOCK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "O", function () {
        return O;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ONE", function () {
        return ONE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "OPEN_SQUARE_BRACKET", function () {
        return OPEN_SQUARE_BRACKET;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "P", function () {
        return P;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function () {
        return PAGE_DOWN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PAGE_UP", function () {
        return PAGE_UP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PAUSE", function () {
        return PAUSE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PERIOD", function () {
        return PERIOD;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PLUS_SIGN", function () {
        return PLUS_SIGN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PRINT_SCREEN", function () {
        return PRINT_SCREEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Q", function () {
        return Q;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "QUESTION_MARK", function () {
        return QUESTION_MARK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "R", function () {
        return R;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function () {
        return RIGHT_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "S", function () {
        return S;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SCROLL_LOCK", function () {
        return SCROLL_LOCK;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SEMICOLON", function () {
        return SEMICOLON;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SEVEN", function () {
        return SEVEN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SHIFT", function () {
        return SHIFT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTE", function () {
        return SINGLE_QUOTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SIX", function () {
        return SIX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SLASH", function () {
        return SLASH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SPACE", function () {
        return SPACE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "T", function () {
        return T;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TAB", function () {
        return TAB;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "THREE", function () {
        return THREE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TILDE", function () {
        return TILDE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TWO", function () {
        return TWO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "U", function () {
        return U;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "UP_ARROW", function () {
        return UP_ARROW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "V", function () {
        return V;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VOLUME_DOWN", function () {
        return VOLUME_DOWN;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VOLUME_UP", function () {
        return VOLUME_UP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "W", function () {
        return W;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "X", function () {
        return X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Y", function () {
        return Y;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Z", function () {
        return Z;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ZERO", function () {
        return ZERO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hasModifierKey", function () {
        return hasModifierKey;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isControl", function () {
        return isControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isCopy", function () {
        return isCopy;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isDigit", function () {
        return isDigit;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFunctionKey", function () {
        return isFunctionKey;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isHorizontalMovement", function () {
        return isHorizontalMovement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isInput", function () {
        return isInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isLeftBracket", function () {
        return isLeftBracket;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isLetterKey", function () {
        return isLetterKey;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isNumberKey", function () {
        return isNumberKey;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isRightBracket", function () {
        return isRightBracket;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isSelectAll", function () {
        return isSelectAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isVerticalMovement", function () {
        return isVerticalMovement;
      });
      /**
       * @fileoverview added by tsickle
       * Generated from: keycodes.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /* tslint:disable:no-magic-numbers no-bitwise */

      /** @type {?} */


      var MAC_ENTER = 3;
      /** @type {?} */

      var BACKSPACE = 8;
      /** @type {?} */

      var TAB = 9;
      /** @type {?} */

      var NUM_CENTER = 12;
      /** @type {?} */

      var ENTER = 13;
      /** @type {?} */

      var SHIFT = 16;
      /** @type {?} */

      var CONTROL = 17;
      /** @type {?} */

      var ALT = 18;
      /** @type {?} */

      var PAUSE = 19;
      /** @type {?} */

      var CAPS_LOCK = 20;
      /** @type {?} */

      var ESCAPE = 27;
      /** @type {?} */

      var SPACE = 32;
      /** @type {?} */

      var PAGE_UP = 33;
      /** @type {?} */

      var PAGE_DOWN = 34;
      /** @type {?} */

      var END = 35;
      /** @type {?} */

      var HOME = 36;
      /** @type {?} */

      var LEFT_ARROW = 37;
      /** @type {?} */

      var UP_ARROW = 38;
      /** @type {?} */

      var RIGHT_ARROW = 39;
      /** @type {?} */

      var DOWN_ARROW = 40;
      /** @type {?} */

      var PLUS_SIGN = 43;
      /** @type {?} */

      var PRINT_SCREEN = 44;
      /** @type {?} */

      var INSERT = 45;
      /** @type {?} */

      var DELETE = 46;
      /** @type {?} */

      var ZERO = 48;
      /** @type {?} */

      var ONE = 49;
      /** @type {?} */

      var TWO = 50;
      /** @type {?} */

      var THREE = 51;
      /** @type {?} */

      var FOUR = 52;
      /** @type {?} */

      var FIVE = 53;
      /** @type {?} */

      var SIX = 54;
      /** @type {?} */

      var SEVEN = 55;
      /** @type {?} */

      var EIGHT = 56;
      /** @type {?} */

      var NINE = 57;
      /** @type {?} */

      var FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186

      /** @type {?} */

      var FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187

      /** @type {?} */

      var QUESTION_MARK = 63;
      /** @type {?} */

      var AT_SIGN = 64;
      /** @type {?} */

      var A = 65;
      /** @type {?} */

      var B = 66;
      /** @type {?} */

      var C = 67;
      /** @type {?} */

      var D = 68;
      /** @type {?} */

      var E = 69;
      /** @type {?} */

      var F = 70;
      /** @type {?} */

      var G = 71;
      /** @type {?} */

      var H = 72;
      /** @type {?} */

      var I = 73;
      /** @type {?} */

      var J = 74;
      /** @type {?} */

      var K = 75;
      /** @type {?} */

      var L = 76;
      /** @type {?} */

      var M = 77;
      /** @type {?} */

      var N = 78;
      /** @type {?} */

      var O = 79;
      /** @type {?} */

      var P = 80;
      /** @type {?} */

      var Q = 81;
      /** @type {?} */

      var R = 82;
      /** @type {?} */

      var S = 83;
      /** @type {?} */

      var T = 84;
      /** @type {?} */

      var U = 85;
      /** @type {?} */

      var V = 86;
      /** @type {?} */

      var W = 87;
      /** @type {?} */

      var X = 88;
      /** @type {?} */

      var Y = 89;
      /** @type {?} */

      var Z = 90;
      /** @type {?} */

      var META = 91; // WIN_KEY_LEFT

      /** @type {?} */

      var MAC_WK_CMD_LEFT = 91;
      /** @type {?} */

      var MAC_WK_CMD_RIGHT = 93;
      /** @type {?} */

      var CONTEXT_MENU = 93;
      /** @type {?} */

      var NUMPAD_ZERO = 96;
      /** @type {?} */

      var NUMPAD_ONE = 97;
      /** @type {?} */

      var NUMPAD_TWO = 98;
      /** @type {?} */

      var NUMPAD_THREE = 99;
      /** @type {?} */

      var NUMPAD_FOUR = 100;
      /** @type {?} */

      var NUMPAD_FIVE = 101;
      /** @type {?} */

      var NUMPAD_SIX = 102;
      /** @type {?} */

      var NUMPAD_SEVEN = 103;
      /** @type {?} */

      var NUMPAD_EIGHT = 104;
      /** @type {?} */

      var NUMPAD_NINE = 105;
      /** @type {?} */

      var NUMPAD_MULTIPLY = 106;
      /** @type {?} */

      var NUMPAD_PLUS = 107;
      /** @type {?} */

      var NUMPAD_MINUS = 109;
      /** @type {?} */

      var NUMPAD_PERIOD = 110;
      /** @type {?} */

      var NUMPAD_DIVIDE = 111;
      /** @type {?} */

      var F1 = 112;
      /** @type {?} */

      var F2 = 113;
      /** @type {?} */

      var F3 = 114;
      /** @type {?} */

      var F4 = 115;
      /** @type {?} */

      var F5 = 116;
      /** @type {?} */

      var F6 = 117;
      /** @type {?} */

      var F7 = 118;
      /** @type {?} */

      var F8 = 119;
      /** @type {?} */

      var F9 = 120;
      /** @type {?} */

      var F10 = 121;
      /** @type {?} */

      var F11 = 122;
      /** @type {?} */

      var F12 = 123;
      /** @type {?} */

      var NUM_LOCK = 144;
      /** @type {?} */

      var SCROLL_LOCK = 145;
      /** @type {?} */

      var FIRST_MEDIA = 166;
      /** @type {?} */

      var FF_MINUS = 173;
      /** @type {?} */

      var MUTE = 173; // Firefox (Gecko) fires 181 for MUTE

      /** @type {?} */

      var VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN

      /** @type {?} */

      var VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP

      /** @type {?} */

      var FF_MUTE = 181;
      /** @type {?} */

      var FF_VOLUME_DOWN = 182;
      /** @type {?} */

      var LAST_MEDIA = 183;
      /** @type {?} */

      var FF_VOLUME_UP = 183;
      /** @type {?} */

      var SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON

      /** @type {?} */

      var EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS

      /** @type {?} */

      var COMMA = 188;
      /** @type {?} */

      var DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS

      /** @type {?} */

      var PERIOD = 190;
      /** @type {?} */

      var SLASH = 191;
      /** @type {?} */

      var APOSTROPHE = 192;
      /** @type {?} */

      var TILDE = 192;
      /** @type {?} */

      var OPEN_SQUARE_BRACKET = 219;
      /** @type {?} */

      var BACKSLASH = 220;
      /** @type {?} */

      var CLOSE_SQUARE_BRACKET = 221;
      /** @type {?} */

      var SINGLE_QUOTE = 222;
      /** @type {?} */

      var MAC_META = 224;
      /**
       * @param {?} event
       * @param {...?} modifiers
       * @return {?}
       */

      function hasModifierKey(event) {
        for (var _len = arguments.length, modifiers = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          modifiers[_key - 1] = arguments[_key];
        }

        if (modifiers.length) {
          return modifiers.some(
          /**
          * @param {?} modifier
          * @return {?}
          */
          function (modifier) {
            return event[modifier];
          });
        }

        return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isControl(event) {
        /** @type {?} */
        var keyCode = event.which;

        switch (keyCode) {
          case SHIFT:
          case CONTROL:
          case ALT:
            return true;

          default:
            return !!event.metaKey;
        }
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isNumberKey(event) {
        /** @type {?} */
        var keyCode = event.which ? event.which : event;
        return keyCode >= 49 && keyCode <= 57;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isLetterKey(event) {
        /** @type {?} */
        var keyCode = event.which ? event.which : event;
        return keyCode >= 65 && keyCode <= 90;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isFunctionKey(event) {
        /** @type {?} */
        var keyCode = event.which ? event.which : event;
        return keyCode >= 112 && keyCode <= 123;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isVerticalMovement(event) {
        return ~[UP_ARROW, DOWN_ARROW, PAGE_DOWN, PAGE_UP, HOME, END].indexOf(event);
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isHorizontalMovement(event) {
        return ~[LEFT_ARROW, RIGHT_ARROW, BACKSPACE, DELETE].indexOf(event);
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isSelectAll(event) {
        return event.ctrlKey && event.keyCode === 65;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isCopy(event) {
        return event.ctrlKey && event.keyCode === 67;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isInput(event) {
        return event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA';
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isLeftBracket(event) {
        return event.code === 'BracketLeft';
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isRightBracket(event) {
        return event.code === 'BracketRight';
      }
      /**
       * @param {?} event
       * @return {?}
       */


      function isDigit(event) {
        return [48, 49, 50, 51, 52, 53, 54, 55, 56, 57].indexOf(event.which) !== -1;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-cdk-keycodes.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-cdk-keycodes.js.map

      /***/

    },

    /***/
    "/Qfj":
    /*!***********************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/main-layout/main-layout.component.html ***!
      \***********************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function Qfj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<navbar></navbar>\n\n<main role=\"main\" class=\"site__main main\">\n    <app-sidenav></app-sidenav>\n    <article class=\"main__content content\">\n        <div class=\"content__wrapper\">\n            <router-outlet></router-outlet>\n        </div>\n    </article>\n</main>\n\n<footer></footer>\n";
      /***/
    },

    /***/
    "/Wkg":
    /*!*********************************************************!*\
      !*** ./packages/docs/src/unregister-service-workers.ts ***!
      \*********************************************************/

    /*! exports provided: unregisterServiceWorkers */

    /***/
    function Wkg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unregisterServiceWorkers", function () {
        return unregisterServiceWorkers;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /**
       * Unregisters all currently registered service workers and returns a boolean that indicates
       * whether there were service workers registered or not.
       */


      function unregisterServiceWorkers() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var registrations;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (navigator.serviceWorker) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return", false);

                case 2:
                  _context.next = 4;
                  return navigator.serviceWorker.getRegistrations();

                case 4:
                  registrations = _context.sent;
                  // Walk through every currently registered Service Worker and unregister it.
                  registrations.forEach(function (registration) {
                    return registration.unregister();
                  });
                  return _context.abrupt("return", registrations.length > 0);

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
      }
      /***/

    },

    /***/
    0:
    /*!*****************************************!*\
      !*** multi ./packages/docs/src/main.ts ***!
      \*****************************************/

    /*! no static exports found */

    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(
      /*! /home/circleci/mosaic/packages/docs/src/main.ts */
      "o9p/");
      /***/
    },

    /***/
    "0PwA":
    /*!*******************************************************************************!*\
      !*** ./packages/docs/src/app/components/main-layout/main-layout.component.ts ***!
      \*******************************************************************************/

    /*! exports provided: MainLayoutComponent */

    /***/
    function PwA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MainLayoutComponent", function () {
        return MainLayoutComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_main_layout_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./main-layout.component.html */
      "/Qfj");
      /* harmony import */


      var _main_layout_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./main-layout.component.scss */
      "9Bz7");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/router */
      "iInd");

      var MainLayoutComponent = /*#__PURE__*/function () {
        function MainLayoutComponent(router, route) {
          _classCallCheck(this, MainLayoutComponent);

          this.router = router;
          this.route = route;
          this.nextRoute = '';
          this.extras = {
            preserveFragment: true,
            queryParamsHandling: 'preserve'
          };
          var href = location.href;

          if (href.match('github')) {
            this.setNextRoute();
          } else {
            this.setDefaultRoute();
          }
        }

        _createClass(MainLayoutComponent, [{
          key: "setDefaultRoute",
          value: function setDefaultRoute() {
            if (location.pathname === '/') {
              this.router.navigate(['button/overview'], this.extras);
            }
          }
        }, {
          key: "setNextRoute",
          value: function setNextRoute() {
            this.nextRoute = localStorage.getItem('PT_nextRoute');

            if (this.nextRoute) {
              this.router.navigate([this.nextRoute], this.extras);
            } else {
              this.router.navigate(['button/overview'], this.extras);
            }

            localStorage.removeItem('PT_nextRoute');
          }
        }]);

        return MainLayoutComponent;
      }();

      MainLayoutComponent.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]
        }];
      };

      MainLayoutComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        template: _raw_loader_main_layout_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_main_layout_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]])], MainLayoutComponent);
      /***/
    },

    /***/
    "2nOP":
    /*!**********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-select.js ***!
      \**********************************************************/

    /*! exports provided: McSelect, McSelectBase, McSelectChange, McSelectModule, McSelectSearch, McSelectSearchEmptyResult, McSelectTrigger */

    /***/
    function nOP(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelect", function () {
        return McSelect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelectBase", function () {
        return McSelectBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelectChange", function () {
        return McSelectChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelectModule", function () {
        return McSelectModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelectSearch", function () {
        return McSelectSearch;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelectSearchEmptyResult", function () {
        return McSelectSearchEmptyResult;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSelectTrigger", function () {
        return McSelectTrigger;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tags */
      "9hGJ");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ptsecurity/mosaic/input */
      "qvb6");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: select.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var nextUniqueId = 0;
      /**
       * Change event object that is emitted when the select value has changed.
       */

      var McSelectChange =
      /**
       * @param {?} source
       * @param {?} value
       */
      function McSelectChange(source, value) {
        _classCallCheck(this, McSelectChange);

        this.source = source;
        this.value = value;
      };

      if (false) {}

      var McSelectSearch = /*#__PURE__*/function () {
        /**
         * @param {?} formField
         */
        function McSelectSearch(formField) {
          _classCallCheck(this, McSelectSearch);

          this.searchChangesSubscription = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"]();
          this.isSearchChanged = false;
          formField.canCleanerClearByEsc = false;
        }
        /**
         * @return {?}
         */


        _createClass(McSelectSearch, [{
          key: "focus",
          value: function focus() {
            this.input.focus();
          }
          /**
           * @return {?}
           */

        }, {
          key: "reset",
          value: function reset() {
            this.input.ngControl.reset();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this = this;

            if (!this.input) {
              throw Error('McSelectSearch does not work without mcInput');
            }

            if (!this.input.ngControl) {
              throw Error('McSelectSearch does not work without ngControl');
            }

            Promise.resolve().then(
            /**
            * @return {?}
            */
            function () {
              _this.searchChangesSubscription =
              /** @type {?} */
              _this.input.ngControl.valueChanges.subscribe(
              /**
              * @return {?}
              */
              function () {
                _this.isSearchChanged = true;
              });
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.searchChangesSubscription.unsubscribe();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            // tslint:disable-next-line:deprecation
            if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ESCAPE"]) {
              if (this.input.value) {
                this.reset();
                event.stopPropagation();
              }
            } // tslint:disable-next-line:deprecation


            if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]].includes(event.keyCode)) {
              event.stopPropagation();
            }
          }
        }]);

        return McSelectSearch;
      }();

      McSelectSearch.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: '[mcSelectSearch]',
          exportAs: 'mcSelectSearch',
          host: {
            '(keydown)': 'handleKeydown($event)'
          }
        }]
      }];
      /** @nocollapse */

      McSelectSearch.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormField"]
        }];
      };

      McSelectSearch.propDecorators = {
        input: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [_ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_13__["McInput"], {
            "static": false
          }]
        }]
      };

      if (false) {}

      var McSelectSearchEmptyResult = function McSelectSearchEmptyResult() {
        _classCallCheck(this, McSelectSearchEmptyResult);
      };

      McSelectSearchEmptyResult.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: '[mc-select-search-empty-result]',
          exportAs: 'mcSelectSearchEmptyResult'
        }]
      }];

      var McSelectTrigger = function McSelectTrigger() {
        _classCallCheck(this, McSelectTrigger);
      };

      McSelectTrigger.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'mc-select-trigger'
        }]
      }];

      var McSelectBase =
      /**
       * @param {?} elementRef
       * @param {?} defaultErrorStateMatcher
       * @param {?} parentForm
       * @param {?} parentFormGroup
       * @param {?} ngControl
       */
      function McSelectBase(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        _classCallCheck(this, McSelectBase);

        this.elementRef = elementRef;
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McSelectMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinErrorState"])(McSelectBase)));

      var McSelect = /*#__PURE__*/function (_McSelectMixinBase) {
        _inherits(McSelect, _McSelectMixinBase);

        var _super = _createSuper(McSelect);

        /**
         * @param {?} _changeDetectorRef
         * @param {?} _ngZone
         * @param {?} _renderer
         * @param {?} defaultErrorStateMatcher
         * @param {?} elementRef
         * @param {?} rawValidators
         * @param {?} _dir
         * @param {?} parentForm
         * @param {?} parentFormGroup
         * @param {?} _parentFormField
         * @param {?} ngControl
         * @param {?} ngModel
         * @param {?} formControlName
         * @param {?} _scrollStrategyFactory
         * @param {?} mcValidation
         */
        function McSelect(_changeDetectorRef, _ngZone, _renderer, defaultErrorStateMatcher, elementRef, rawValidators, _dir, parentForm, parentFormGroup, _parentFormField, ngControl, ngModel, formControlName, _scrollStrategyFactory, mcValidation) {
          var _this2;

          _classCallCheck(this, McSelect);

          _this2 = _super.call(this, elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
          _this2._changeDetectorRef = _changeDetectorRef;
          _this2._ngZone = _ngZone;
          _this2._renderer = _renderer;
          _this2.rawValidators = rawValidators;
          _this2._dir = _dir;
          _this2._parentFormField = _parentFormField;
          _this2.ngModel = ngModel;
          _this2.formControlName = formControlName;
          _this2._scrollStrategyFactory = _scrollStrategyFactory;
          _this2.mcValidation = mcValidation;
          /**
           * A name for this control that can be used by `mc-form-field`.
           */

          _this2.controlType = 'mc-select';
          _this2.hiddenItems = 0;
          /**
           * The cached font-size of the trigger element.
           */

          _this2.triggerFontSize = 0;
          _this2.previousSelectionModelSelected = [];
          /**
           * The value of the select panel's transform-origin property.
           */

          _this2.transformOrigin = 'top';
          /**
           * Emits when the panel element is finished transforming in.
           */

          _this2.panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
          /**
           * Strategy that will be used to handle scrolling while the select panel is open.
           */

          _this2.scrollStrategy = _this2._scrollStrategyFactory();
          /**
           * The y-offset of the overlay panel in relation to the trigger's top start corner.
           * This must be adjusted to align the selected option text over the trigger text.
           * when the panel opens. Will change based on the y-position of the selected option.
           */

          _this2.offsetY = 0;
          /**
           * This position config ensures that the top "start" corner of the overlay
           * is aligned with with the top "start" of the origin by default (overlapping
           * the trigger completely). If the panel cannot fit below the trigger, it
           * will fall back to a position above the trigger.
           */

          _this2.positions = [{
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top'
          }, {
            originX: 'start',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'bottom'
          }];
          _this2.hiddenItemsText = '...ещё';
          _this2.backdropClass = 'cdk-overlay-transparent-backdrop';
          /**
           * Combined stream of all of the child options' change events.
           */

          _this2.optionSelectionChanges =
          /** @type {?} */
          Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["defer"])(
          /**
          * @return {?}
          */
          function () {
            if (_this2.options) {
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"]).apply(void 0, _toConsumableArray(_this2.options.map(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.onSelectionChange;
              })).concat(_toConsumableArray(_this2.selectionModel.selected.map(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.onSelectionChange;
              }))));
            }

            return _this2._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["switchMap"])(
            /**
            * @return {?}
            */
            function () {
              return _this2.optionSelectionChanges;
            }));
          });
          /**
           * Event emitted when the select panel has been toggled.
           */

          _this2.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Event emitted when the select has been opened.
           */

          _this2.openedStream = _this2.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])(
          /**
          * @param {?} o
          * @return {?}
          */
          function (o) {
            return o;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(
          /**
          * @return {?}
          */
          function () {}));
          /**
           * Event emitted when the select has been closed.
           */

          _this2.closedStream = _this2.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])(
          /**
          * @param {?} o
          * @return {?}
          */
          function (o) {
            return !o;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(
          /**
          * @return {?}
          */
          function () {}));
          /**
           * Event emitted when the selected value has been changed by the user.
           */

          _this2.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Event that emits whenever the raw value of the select changes. This is here primarily
           * to facilitate the two-way binding for the `value` input.
           * \@docs-private
           */

          _this2.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this2._hasBackdrop = false;
          _this2._required = false;
          _this2._multiple = false;
          _this2._focused = false;
          _this2._panelOpen = false;
          _this2.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
          /**
           * The scroll position of the overlay panel, calculated to center the selected option.
           */

          _this2.scrollTop = 0;
          /**
           * Unique id for this input.
           */

          _this2.uid = "mc-select-".concat(nextUniqueId++);
          /**
           * Emits whenever the component is destroyed.
           */

          _this2.destroy = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
          /**
           * `View -> model callback called when value changes`
           */

          _this2.onChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * `View -> model callback called when select has been touched`
           */


          _this2.onTouched =
          /**
          * @return {?}
          */
          function () {};
          /**
           * Comparison function to specify which option is displayed. Defaults to object equality.
           */


          _this2._compareWith =
          /**
          * @param {?} o1
          * @param {?} o2
          * @return {?}
          */
          function (o1, o2) {
            return o1 === o2;
          };

          if (_this2.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            _this2.ngControl.valueAccessor = _assertThisInitialized(_this2);
          } // Force setter to be called in case id was not specified.


          _this2.id = _this2.id;
          return _this2;
        }
        /**
         * @return {?}
         */


        _createClass(McSelect, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            var _this3 = this;

            this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__["SelectionModel"](this.multiple);
            this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will
            // fire the animation end event twice for the same animation. See:
            // https://github.com/angular/angular/issues/24084

            this.panelDoneAnimatingStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this3.panelOpen) {
                _this3.scrollTop = 0;

                if (_this3.search) {
                  _this3.search.focus();
                }

                _this3.openedChange.emit(true);
              } else {
                _this3.openedChange.emit(false);

                _this3._changeDetectorRef.markForCheck();
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this4 = this;

            if (this.mcValidation.useValidation) {
              Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["setMosaicValidation"])(this);
            }

            this.initKeyManager();
            this.selectionModel.changed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              event.added.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.select();
              });
              event.removed.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.deselect();
              });
            });
            this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this4.resetOptions();

              _this4.initializeSelection();
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this5 = this;

            this.tags.changes.subscribe(
            /**
            * @return {?}
            */
            function () {
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                return _this5.calculateHiddenItems();
              }, 0);
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.ngControl) {
              this.updateErrorState();
            }
          }
          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
            // the parent form field know to run change detection when the disabled state changes.
            if (changes.disabled) {
              this.stateChanges.next();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroy.next();
            this.destroy.complete();
            this.stateChanges.complete();
            this.closeSubscription.unsubscribe();
          }
          /**
           * @param {?} hiddenItemsText
           * @param {?} hiddenItems
           * @return {?}
           */

        }, {
          key: "hiddenItemsTextFormatter",
          value: function hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) {
            return "".concat(hiddenItemsText, " ").concat(hiddenItems);
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "clearValue",
          value: function clearValue($event) {
            $event.stopPropagation();
            this.selectionModel.clear();
            this.keyManager.setActiveItem(-1);
            this.propagateChanges();
          }
          /**
           * @return {?}
           */

        }, {
          key: "resetSearch",
          value: function resetSearch() {
            if (!this.search) {
              return;
            }

            this.search.reset();
            /*
            todo the incorrect behaviour of keyManager is possible here
            to avoid first item selection (to provide correct options flipping on closed select)
            we should process options update like it is the first options appearance
            */

            this.search.isSearchChanged = false;
          }
          /**
           * Toggles the overlay panel open or closed.
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            if (this.panelOpen) {
              this.close();
            } else {
              this.open();
            }
          }
          /**
           * Opens the overlay panel.
           * @return {?}
           */

        }, {
          key: "open",
          value: function open() {
            var _this6 = this;

            if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
              return;
            }

            this.triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. "16px").
            // `parseInt` ignores the trailing 'px' and converts this to a number.

            this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);
            this._panelOpen = true;
            this.keyManager.withHorizontalOrientation(null);
            this.highlightCorrectOption();

            this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.


            this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this6.scrollActiveOptionIntoView();

              if (_this6.triggerFontSize && _this6.overlayDir.overlayRef && _this6.overlayDir.overlayRef.overlayElement) {
                _this6.overlayDir.overlayRef.overlayElement.style.fontSize = "".concat(_this6.triggerFontSize, "px");
              }
            });
          }
          /**
           * Closes the overlay panel and focuses the host element.
           * @return {?}
           */

        }, {
          key: "close",
          value: function close() {
            if (!this._panelOpen) {
              return;
            } // the order of calls is important


            this.resetSearch();
            this._panelOpen = false;
            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');

            this._changeDetectorRef.markForCheck();

            this.onTouched();
          }
          /**
           * Sets the select's value. Part of the ControlValueAccessor interface
           * required to integrate with Angular's core forms API.
           *
           * @param {?} value New value to be written to the model.
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            if (this.options) {
              this.setSelectionByValue(value);
            }
          }
          /**
           * Saves a callback function to be invoked when the select's value
           * changes from user input. Part of the ControlValueAccessor interface
           * required to integrate with Angular's core forms API.
           *
           * @param {?} fn Callback to be triggered when the value changes.
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * Saves a callback function to be invoked when the select is blurred
           * by the user. Part of the ControlValueAccessor interface required
           * to integrate with Angular's core forms API.
           *
           * @param {?} fn Callback to be triggered when the component has been touched.
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Disables the select. Part of the ControlValueAccessor interface required
           * to integrate with Angular's core forms API.
           *
           * @param {?} isDisabled Sets whether the component is disabled.
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;

            this._changeDetectorRef.markForCheck();

            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "isRtl",
          value: function isRtl() {
            return this._dir ? this._dir.value === 'rtl' : false;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            if (this.disabled) {
              return;
            }

            if (this.panelOpen) {
              this.handleOpenKeydown(event);
            } else {
              this.handleClosedKeydown(event);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onFocus",
          value: function onFocus() {
            if (!this.disabled) {
              this._focused = true;
              this.stateChanges.next();
            }
          }
          /**
           * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
           * "blur" to the panel when it opens, causing a false positive.
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            this._focused = false;

            if (!this.disabled && !this.panelOpen) {
              this.onTouched();

              this._changeDetectorRef.markForCheck();

              this.stateChanges.next();
            }
          }
          /**
           * Callback that is invoked when the overlay panel has been attached.
           * @return {?}
           */

        }, {
          key: "onAttached",
          value: function onAttached() {
            var _this7 = this;

            this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this7._changeDetectorRef.detectChanges();

              _this7.setOverlayPosition();

              _this7.optionsContainer.nativeElement.scrollTop = _this7.scrollTop;

              _this7.updateScrollSize();
            });
            this.closeSubscription = this.closingActions().subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this7.close();
            });
          }
          /**
           * Returns the theme to be used on the panel.
           * @return {?}
           */

        }, {
          key: "getPanelTheme",
          value: function getPanelTheme() {
            return this._parentFormField ? "mc-".concat(this._parentFormField.color) : '';
          }
          /**
           * Focuses the select element.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "onContainerClick",
          value: function onContainerClick() {
            this.focus();
            this.open();
          }
          /**
           * Invoked when an option is clicked.
           * @param {?} option
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onRemoveMatcherItem",
          value: function onRemoveMatcherItem(option, $event) {
            $event.stopPropagation();
            option.deselect();
          }
          /**
           * @return {?}
           */

        }, {
          key: "calculateHiddenItems",
          value: function calculateHiddenItems() {
            var _this8 = this;

            if (this.customTrigger || this.empty || !this.multiple) {
              return;
            }
            /** @type {?} */


            var visibleItems = 0;
            /** @type {?} */

            var totalItemsWidth = this.getTotalItemsWidthInMatcher();
            /** @type {?} */

            var totalVisibleItemsWidth = 0;
            this.tags.forEach(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {
                totalVisibleItemsWidth += _this8.getItemWidth(tag.nativeElement);
                visibleItems++;
              }
            });
            this.hiddenItems =
            /** @type {?} */
            this.selected.length - visibleItems;

            if (this.hiddenItems) {
              /** @type {?} */
              var itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');
              /** @type {?} */

              var matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');
              /** @type {?} */

              var itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight; // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;

              /** @type {?} */

              var itemsCounterWidth = 86;
              /** @type {?} */

              var matcherListWidth = matcherList.getBoundingClientRect().width;
              /** @type {?} */

              var matcherWidth = matcherListWidth + itemsCounterWidth;

              if (itemsCounterShowed && totalItemsWidth < matcherWidth) {
                this.hiddenItems = 0;
              }

              if (totalVisibleItemsWidth === matcherListWidth || totalVisibleItemsWidth + itemsCounterWidth < matcherListWidth) {
                this._changeDetectorRef.markForCheck();

                return;
              } else if (!itemsCounterShowed && totalItemsWidth + itemsCounterWidth > matcherWidth) {
                this.hiddenItems++;
              }
            }

            this._changeDetectorRef.markForCheck();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getItemHeight",
          value: function getItemHeight() {
            return this.options.first ? this.options.first.getHeight() : 0;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "closingActions",
          value: function closingActions() {
            /** @type {?} */
            var backdrop =
            /** @type {?} */
            this.overlayDir.overlayRef.backdropClick();
            /** @type {?} */

            var outsidePointerEvents =
            /** @type {?} */
            this.overlayDir.overlayRef.outsidePointerEvents();
            /** @type {?} */

            var detachments =
            /** @type {?} */
            this.overlayDir.overlayRef.detachments();
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(backdrop, outsidePointerEvents, detachments);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getHeightOfOptionsContainer",
          value: function getHeightOfOptionsContainer() {
            return this.optionsContainer.nativeElement.getClientRects()[0].height;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateScrollSize",
          value: function updateScrollSize() {
            if (!this.options.first) {
              return;
            }

            this.keyManager.withScrollSize(Math.floor(this.getHeightOfOptionsContainer() / this.options.first.getHeight()));
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getTotalItemsWidthInMatcher",
          value: function getTotalItemsWidthInMatcher() {
            var _this9 = this;

            /** @type {?} */
            var triggerClone = this.trigger.nativeElement.cloneNode(true);
            triggerClone.querySelector('.mc-select__match-hidden-text').remove();

            this._renderer.setStyle(triggerClone, 'position', 'absolute');

            this._renderer.setStyle(triggerClone, 'visibility', 'hidden');

            this._renderer.setStyle(triggerClone, 'top', '-100%');

            this._renderer.setStyle(triggerClone, 'left', '0');

            this._renderer.appendChild(this.trigger.nativeElement, triggerClone);
            /** @type {?} */


            var totalItemsWidth = 0;
            triggerClone.querySelectorAll('mc-tag').forEach(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              totalItemsWidth += _this9.getItemWidth(item);
            });
            triggerClone.remove();
            return totalItemsWidth;
          }
          /**
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "getItemWidth",
          value: function getItemWidth(element) {
            /** @type {?} */
            var computedStyle = window.getComputedStyle(element);
            /** @type {?} */

            var width = parseInt(
            /** @type {?} */
            computedStyle.width);
            /** @type {?} */

            var marginLeft = parseInt(
            /** @type {?} */
            computedStyle.marginLeft);
            /** @type {?} */

            var marginRight = parseInt(
            /** @type {?} */
            computedStyle.marginRight);
            return width + marginLeft + marginRight;
          }
          /**
           * Handles keyboard events while the select is closed.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleClosedKeydown",
          value: function handleClosedKeydown(event) {
            /* tslint:disable-next-line */

            /** @type {?} */
            var keyCode = event.keyCode;
            /** @type {?} */

            var isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["LEFT_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["RIGHT_ARROW"];
            /** @type {?} */

            var isOpenKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]; // Open the select on ALT + arrow key to match the native <select>

            if (isOpenKey || (this.multiple || event.altKey) && isArrowKey) {
              event.preventDefault(); // prevents the page from scrolling down when pressing space

              this.open();
            } else if (!this.multiple) {
              this.keyManager.onKeydown(event);
            }
          }
          /**
           * Handles keyboard events when the selected is open.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleOpenKeydown",
          value: function handleOpenKeydown(event) {
            /* tslint:disable-next-line */

            /** @type {?} */
            var keyCode = event.keyCode;
            /** @type {?} */

            var isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"];

            if (isArrowKey && event.altKey) {
              // Close the select on ALT + arrow key to match the native <select>
              event.preventDefault();
              this.close();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"]) {
              event.preventDefault();
              this.keyManager.setFirstItemActive();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]) {
              event.preventDefault();
              this.keyManager.setLastItemActive();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_UP"]) {
              event.preventDefault();
              this.keyManager.setPreviousPageItemActive();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_DOWN"]) {
              event.preventDefault();
              this.keyManager.setNextPageItemActive();
            } else if ((keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]) && this.keyManager.activeItem) {
              event.preventDefault();
              this.keyManager.activeItem.selectViaInteraction();
            } else if (this._multiple && keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["A"] && event.ctrlKey) {
              event.preventDefault();
              /** @type {?} */

              var hasDeselectedOptions = this.options.some(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return !option.selected;
              });
              this.options.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                if (hasDeselectedOptions && !option.disabled) {
                  option.select();
                } else {
                  option.deselect();
                }
              });
            } else {
              /** @type {?} */
              var previouslyFocusedIndex = this.keyManager.activeItemIndex;
              this.keyManager.onKeydown(event);

              if (this._multiple && isArrowKey && event.shiftKey && this.keyManager.activeItem && this.keyManager.activeItemIndex !== previouslyFocusedIndex) {
                this.keyManager.activeItem.selectViaInteraction();
              }

              if (this.search) {
                this.search.focus();
              }
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "initializeSelection",
          value: function initializeSelection() {
            var _this10 = this;

            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(
            /**
            * @return {?}
            */
            function () {
              _this10.setSelectionByValue(_this10.ngControl ? _this10.ngControl.value : _this10._value);
            });
          }
          /**
           * Sets the selected option based on a value. If no option can be
           * found with the designated value, the select trigger is cleared.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setSelectionByValue",
          value: function setSelectionByValue(value) {
            var _this11 = this;

            this.previousSelectionModelSelected = this.selectionModel.selected;

            if (this.multiple && value) {
              if (!Array.isArray(value)) {
                throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectNonArrayValueError"])();
              }

              this.selectionModel.clear();
              value.forEach(
              /**
              * @param {?} currentValue
              * @return {?}
              */
              function (currentValue) {
                return _this11.selectValue(currentValue);
              });
              this.sortValues();
            } else {
              this.selectionModel.clear();
              /** @type {?} */

              var correspondingOption = this.selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple
              // mode, because we don't know what option the user interacted with last.

              if (correspondingOption) {
                this.keyManager.setActiveItem(correspondingOption);
              }
            }

            this._changeDetectorRef.markForCheck();
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "getCorrespondOption",
          value: function getCorrespondOption(value) {
            var _this12 = this;

            return [].concat(_toConsumableArray(this.options.toArray()), _toConsumableArray(this.previousSelectionModelSelected)).find(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              try {
                // Treat null as a special reset value.
                return option.value != null && _this12.compareWith(option.value, value);
              } catch (error) {
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["isDevMode"])()) {
                  // Notify developers of errors in their comparator.
                  console.warn(error);
                }

                return false;
              }
            });
          }
          /**
           * Finds and selects and option based on its value.
           * @private
           * @param {?} value
           * @return {?} Option that has the corresponding value.
           */

        }, {
          key: "selectValue",
          value: function selectValue(value) {
            /** @type {?} */
            var correspondingOption = this.getCorrespondOption(value);

            if (correspondingOption) {
              this.selectionModel.select(correspondingOption);
            }

            return correspondingOption;
          }
          /**
           * Sets up a key manager to listen to keyboard events on the overlay panel.
           * @private
           * @return {?}
           */

        }, {
          key: "initKeyManager",
          value: function initKeyManager() {
            var _this13 = this;

            /** @type {?} */
            var typeAheadDebounce = 200;
            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__["ActiveDescendantKeyManager"](this.options).withTypeAhead(typeAheadDebounce, this.search ? -1 : 0).withVerticalOrientation().withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');
            this.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              // Restore focus to the trigger before closing. Ensures that the focus
              // position won't be lost if the user got focus into the overlay.
              _this13.focus();

              _this13.close();
            });
            this.keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this13._panelOpen && _this13.panel) {
                _this13.scrollActiveOptionIntoView();
              } else if (!_this13._panelOpen && !_this13.multiple && _this13.keyManager.activeItem) {
                _this13.keyManager.activeItem.selectViaInteraction();
              }
            });
          }
          /**
           * Drops current option subscriptions and IDs and resets from scratch.
           * @private
           * @return {?}
           */

        }, {
          key: "resetOptions",
          value: function resetOptions() {
            var _this14 = this;

            /** @type {?} */
            var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(this.options.changes, this.destroy);
            this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(changedOrDestroyed)).subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              _this14.onSelect(event.source, event.isUserInput);

              if (_this14.search && _this14.search.isSearchChanged) {
                Promise.resolve().then(
                /**
                * @return {?}
                */
                function () {
                  return _this14.keyManager.updateActiveItem(0);
                });
                _this14.search.isSearchChanged = false;
              }

              if (event.isUserInput && !_this14.multiple && _this14._panelOpen) {
                _this14.close();

                _this14.focus();
              }
            }); // Listen to changes in the internal state of the options and react accordingly.
            // Handles cases like the labels of the selected options changing.

            Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"]).apply(void 0, _toConsumableArray(this.options.map(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.stateChanges;
            }))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(changedOrDestroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this14._changeDetectorRef.markForCheck();

              _this14.stateChanges.next();
            });
          }
          /**
           * Invoked when an option is clicked.
           * @private
           * @param {?} option
           * @param {?} isUserInput
           * @return {?}
           */

        }, {
          key: "onSelect",
          value: function onSelect(option, isUserInput) {
            /** @type {?} */
            var wasSelected = this.selectionModel.isSelected(option);

            if (option.value == null && !this._multiple) {
              option.deselect();
              this.selectionModel.clear();
              this.propagateChanges(option.value);
            } else {
              if (option.selected) {
                this.selectionModel.select(option);
              } else {
                this.selectionModel.deselect(option);
              }

              if (isUserInput) {
                this.keyManager.setActiveItem(option);
              }

              if (this.multiple) {
                this.sortValues();

                if (isUserInput) {
                  // In case the user selected the option with their mouse, we
                  // want to restore focus back to the trigger, in order to
                  // prevent the select keyboard controls from clashing with
                  // the ones from `mc-option`.
                  // If search is avaliable then we focus search again.
                  if (this.search) {
                    this.search.focus();
                  } else {
                    this.focus();
                  }
                }
              }
            }

            if (wasSelected !== this.selectionModel.isSelected(option)) {
              this.propagateChanges();
            }

            this.stateChanges.next();
          }
          /**
           * Sorts the selected values in the selected based on their order in the panel.
           * @private
           * @return {?}
           */

        }, {
          key: "sortValues",
          value: function sortValues() {
            var _this15 = this;

            if (this.multiple) {
              /** @type {?} */
              var options = this.options.toArray();
              this.selectionModel.sort(
              /**
              * @param {?} a
              * @param {?} b
              * @return {?}
              */
              function (a, b) {
                return _this15.sortComparator ? _this15.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);
              });
              this.stateChanges.next();
            }
          }
          /**
           * Emits change event to set the model value.
           * @private
           * @param {?=} fallbackValue
           * @return {?}
           */

        }, {
          key: "propagateChanges",
          value: function propagateChanges(fallbackValue) {
            /** @type {?} */
            var valueToEmit = null;

            if (this.multiple) {
              valueToEmit =
              /** @type {?} */
              this.selected.map(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.value;
              });
            } else {
              valueToEmit = this.selected ?
              /** @type {?} */
              this.selected.value : fallbackValue;
            }

            this._value = valueToEmit;
            this.valueChange.emit(valueToEmit);
            this.onChange(valueToEmit);
            this.selectionChange.emit(new McSelectChange(this, valueToEmit));

            this._changeDetectorRef.markForCheck();
          }
          /**
           * Highlights the selected item. If no option is selected, it will highlight
           * the first item instead.
           * @private
           * @return {?}
           */

        }, {
          key: "highlightCorrectOption",
          value: function highlightCorrectOption() {
            if (this.keyManager) {
              if (this.empty) {
                this.keyManager.setFirstItemActive();
              } else {
                this.keyManager.setActiveItem(this.selectionModel.selected[0]);
              }
            }
          }
          /**
           * Scrolls the active option into view.
           * @private
           * @return {?}
           */

        }, {
          key: "scrollActiveOptionIntoView",
          value: function scrollActiveOptionIntoView() {
            if (!this.keyManager.activeItem) {
              return;
            }

            this.keyManager.activeItem.focus();
          }
          /**
           * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.
           * This must be adjusted to align the selected option text over the trigger text when
           * the panel opens. Will change based on LTR or RTL text direction. Note that the offset
           * can't be calculated until the panel has been attached, because we need to know the
           * content width in order to constrain the panel within the viewport.
           * @private
           * @return {?}
           */

        }, {
          key: "setOverlayPosition",
          value: function setOverlayPosition() {
            this.resetOverlay();
            /** @type {?} */

            var overlayRect = this.getOverlayRect(); // Window width without scrollbar

            /** @type {?} */

            var windowWidth = this.getOverlayWidth();
            /** @type {?} */

            var isRtl = this.isRtl();
            /* tslint:disable-next-line:no-magic-numbers */

            /** @type {?} */

            var paddingWidth = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_PADDING_X"] * 2;
            /** @type {?} */

            var offsetX;
            /** @type {?} */

            var overlayMaxWidth;
            /** @type {?} */

            var selected = this.selectionModel.selected[0] || this.options.first;
            offsetX = selected && selected.group ? _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_INDENT_PADDING_X"] : _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_PADDING_X"]; // Invert the offset in LTR.

            if (!isRtl) {
              offsetX *= -1;
            } // Determine if select overflows on either side.

            /** @type {?} */


            var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));
            /** @type {?} */

            var rightOverflow = overlayRect.right + offsetX - windowWidth + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.

            if (leftOverflow > 0 || rightOverflow > 0) {
              var _this$calculateOverla = this.calculateOverlayXPosition(overlayRect, windowWidth, offsetX);

              var _this$calculateOverla2 = _slicedToArray(_this$calculateOverla, 2);

              offsetX = _this$calculateOverla2[0];
              overlayMaxWidth = _this$calculateOverla2[1];
              this.overlayDir.overlayRef.overlayElement.style.maxWidth = "".concat(overlayMaxWidth, "px");
            } // Set the offset directly in order to avoid having to go through change detection and
            // potentially triggering "changed after it was checked" errors. Round the value to avoid
            // blurry content in some browsers.


            this.overlayDir.offsetX = Math.round(offsetX);
            this.overlayDir.overlayRef.updatePosition();
          }
          /**
           * @private
           * @param {?} overlayRect
           * @param {?} windowWidth
           * @param {?} basicOffsetX
           * @return {?}
           */

        }, {
          key: "calculateOverlayXPosition",
          value: function calculateOverlayXPosition(overlayRect, windowWidth, basicOffsetX) {
            /** @type {?} */
            var offsetX = basicOffsetX;
            /** @type {?} */

            var leftIndent = this.triggerRect.left;
            /** @type {?} */

            var rightIndent = windowWidth - this.triggerRect.right; // Setting direction of dropdown expansion

            /** @type {?} */

            var isRightDirection = leftIndent <= rightIndent;
            /** @type {?} */

            var maxDropdownWidth;
            /** @type {?} */

            var overlayMaxWidth;
            /** @type {?} */

            var triggerWidth = this.triggerRect.width + _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_INDENT_PADDING_X"];

            if (isRightDirection) {
              maxDropdownWidth = rightIndent + triggerWidth - _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_VIEWPORT_PADDING"];
              overlayMaxWidth = overlayRect.width < maxDropdownWidth ? overlayRect.width : maxDropdownWidth;
            } else {
              /** @type {?} */
              var leftOffset;
              maxDropdownWidth = leftIndent + triggerWidth - _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_VIEWPORT_PADDING"];

              if (overlayRect.width < maxDropdownWidth) {
                overlayMaxWidth = overlayRect.width;
                leftOffset = this.triggerRect.right - overlayMaxWidth;
              } else {
                overlayMaxWidth = maxDropdownWidth;
                leftOffset = this.triggerRect.right - (overlayMaxWidth - _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_INDENT_PADDING_X"]);
              }

              offsetX -= this.triggerRect.left - leftOffset;
            }

            return [offsetX, overlayMaxWidth];
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "resetOverlay",
          value: function resetOverlay() {
            this.overlayDir.offsetX = 0;
            this.overlayDir.overlayRef.overlayElement.style.maxWidth = 'unset';
            this.overlayDir.overlayRef.updatePosition();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getOverlayRect",
          value: function getOverlayRect() {
            return this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getOverlayWidth",
          value: function getOverlayWidth() {
            return this.scrollStrategy._overlayRef.hostElement.clientWidth;
          }
        }, {
          key: "hasBackdrop",
          get: function get() {
            return this._hasBackdrop;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "placeholder",
          get: function get() {
            return this._placeholder;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._placeholder = value;
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return this._multiple;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (this.selectionModel) {
              throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectDynamicMultipleError"])();
            }

            this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
          }
          /**
           * Function to compare the option values with the selected values. The first argument
           * is a value from an option. The second is a value from the selection. A boolean
           * should be returned.
           * @return {?}
           */

        }, {
          key: "compareWith",
          get: function get() {
            return this._compareWith;
          }
          /**
           * @param {?} fn
           * @return {?}
           */
          ,
          set: function set(fn) {
            /* tslint:disable-next-line:strict-type-predicates */
            if (typeof fn !== 'function') {
              throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectNonFunctionValueError"])();
            }

            this._compareWith = fn;

            if (this.selectionModel) {
              // A different comparator means the selection could change.
              this.initializeSelection();
            }
          }
          /**
           * Value of the select control.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} newValue
           * @return {?}
           */
          ,
          set: function set(newValue) {
            if (newValue !== this._value) {
              this.writeValue(newValue);
              this._value = newValue;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._id = value || this.uid;
            this.stateChanges.next();
          }
          /**
           * Whether the select is focused.
           * @return {?}
           */

        }, {
          key: "focused",
          get: function get() {
            return this._focused || this._panelOpen;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._focused = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "panelOpen",
          get: function get() {
            return this._panelOpen;
          }
          /**
           * @return {?}
           */

        }, {
          key: "isEmptySearchResult",
          get: function get() {
            return this.search && this.options.length === 0 && !!this.search.input.value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "canShowCleaner",
          get: function get() {
            return this.cleaner && this.selectionModel.hasValue();
          }
          /**
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerValue",
          get: function get() {
            if (this.empty) {
              return '';
            }

            return this.selectionModel.selected[0].viewValue;
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerValues",
          get: function get() {
            if (this.empty) {
              return [];
            }
            /** @type {?} */


            var selectedOptions = this.selectionModel.selected;

            if (this.isRtl()) {
              selectedOptions.reverse();
            }

            return selectedOptions;
          }
          /**
           * @return {?}
           */

        }, {
          key: "empty",
          get: function get() {
            return !this.selectionModel || this.selectionModel.isEmpty();
          }
        }]);

        return McSelect;
      }(McSelectMixinBase);

      McSelect.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-select',
          exportAs: 'mcSelect',
          template: "<div cdk-overlay-origin\n     class=\"mc-select__trigger\"\n     (click)=\"toggle()\"\n     [class.mc-select__trigger_multiple]=\"multiple\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n    <div class=\"mc-select__matcher\" [ngSwitch]=\"empty\">\n        <span class=\"mc-select__placeholder\" *ngSwitchCase=\"true\">{{ placeholder || '\\u00A0' }}</span>\n        <span *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n            <div *ngSwitchDefault [ngSwitch]=\"multiple\" class=\"mc-select__match-container\">\n                <span *ngSwitchCase=\"false\" class=\"mc-select__matcher-text\">{{ triggerValue }}</span>\n                <div *ngSwitchCase=\"true\" class=\"mc-select__match-list\">\n                    <mc-tag *ngFor=\"let option of triggerValues\"\n                            [disabled]=\"option.disabled || disabled\"\n                            [selectable]=\"false\"\n                            [class.mc-error]=\"errorState\">\n                        {{ option.viewValue }}\n                        <i mc-icon=\"mc-close-S_16\"\n                           *ngIf=\"!option.disabled && !disabled\"\n                           (click)=\"onRemoveMatcherItem(option, $event)\">\n                        </i>\n                    </mc-tag>\n                </div>\n                <div class=\"mc-select__match-hidden-text\" [style.display]=\"hiddenItems > 0 ? 'block' : 'none'\">\n                    {{ hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) }}\n                </div>\n            </div>\n            <ng-content select=\"mc-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n        </span>\n    </div>\n\n    <div class=\"mc-select__cleaner\" *ngIf=\"canShowCleaner\" (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <div class=\"mc-select__arrow-wrapper\">\n        <i class=\"mc-select__arrow\" mc-icon=\"mc-angle-down-L_16\"></i>\n    </div>\n</div>\n\n<ng-template\n    cdk-connected-overlay\n    cdkConnectedOverlayLockPosition\n    [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n    [cdkConnectedOverlayBackdropClass]=\"backdropClass\"\n    [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"positions\"\n    [cdkConnectedOverlayMinWidth]=\"triggerRect?.width\"\n    [cdkConnectedOverlayOffsetY]=\"offsetY\"\n    (backdropClick)=\"close()\"\n    (attach)=\"onAttached()\"\n    (detach)=\"close()\">\n    <div\n        #panel\n        class=\"mc-select__panel {{ getPanelTheme() }}\"\n        [ngClass]=\"panelClass\"\n        [style.transformOrigin]=\"transformOrigin\"\n        [style.font-size.px]=\"triggerFontSize\"\n        (keydown)=\"handleKeydown($event)\">\n\n        <div *ngIf=\"search\" class=\"mc-select__search-container\">\n            <ng-content select=\"[mcSelectSearch]\"></ng-content>\n        </div>\n\n        <div #optionsContainer\n             class=\"mc-select__content\"\n             [@fadeInContent]=\"'showing'\"\n             (@fadeInContent.done)=\"panelDoneAnimatingStream.next($event.toState)\">\n\n            <div *ngIf=\"isEmptySearchResult\" class=\"mc-select__no-options-message\">\n                <ng-content select=\"[mc-select-search-empty-result]\"></ng-content>\n            </div>\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n",
          inputs: ['disabled', 'tabIndex'],
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          host: {
            '[attr.id]': 'id',
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null',
            "class": 'mc-select',
            '[class.mc-disabled]': 'disabled',
            '[class.mc-invalid]': 'errorState',
            '(keydown)': 'handleKeydown($event)',
            '(focus)': 'onFocus()',
            '(blur)': 'onBlur()',
            '(window:resize)': 'calculateHiddenItems()'
          },
          animations: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mcSelectAnimations"].transformPanel, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mcSelectAnimations"].fadeInContent],
          providers: [{
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormFieldControl"],
            useExisting: McSelect
          }, {
            provide: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_OPTION_PARENT_COMPONENT"],
            useExisting: McSelect
          }],
          styles: [".mc-divider{border-top-style:solid;border-top-width:1px;display:block;margin:0}.mc-divider.mc-divider_vertical{border-right-style:solid;border-right-width:1px;border-top:0}.mc-divider.mc-divider_inset{margin-left:80px}[dir=rtl] .mc-divider.mc-divider_inset{margin-left:auto;margin-right:80px}.mc-select{box-sizing:border-box;display:inline-block;outline:none;vertical-align:top;width:100%}.mc-select .mc-select__trigger{box-sizing:border-box;cursor:pointer;display:flex;height:30px;padding-left:15px;padding-right:7px;position:relative}.mc-select .mc-select__trigger.mc-select__trigger_multiple{padding-left:7px}.mc-select .mc-select__trigger.mc-select__trigger_multiple .mc-tag.mc-disabled .mc-tag__text{margin-right:7px}.mc-select.mc-disabled .mc-select__trigger{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:default;user-select:none}.mc-select__no-options-message{align-items:center;box-sizing:border-box;cursor:default;display:flex;flex-direction:row;height:32px;max-width:100%;outline:none;padding:0 16px;position:relative}.mc-select__matcher{align-items:center;display:flex;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}.mc-select__matcher>span{width:100%}.mc-select__match-list{display:flex;flex-wrap:wrap;margin:0;max-height:28px;overflow:hidden;padding-left:0}.mc-select__match-list .mc-tag{margin-right:4px}.mc-select__match-container{display:flex;flex-direction:row;justify-content:space-between;width:100%}.mc-select__match-container .mc-select__match-hidden-text{-ms-grid-row-align:center;align-self:center;flex:0 0 70px;padding:0 8px;text-align:right}.mc-select__match-item{border:1px solid transparent;border-radius:3px;display:flex;margin-right:4px;max-width:100%;padding-left:7px}.mc-select__arrow-wrapper{-ms-grid-row-align:center;align-self:center}.mc-form-field-appearance-fill .mc-select__arrow-wrapper,.mc-form-field-appearance-standard .mc-select__arrow-wrapper{transform:translateY(-50%)}.mc-form-field-appearance-outline .mc-select__arrow-wrapper{transform:translateY(-25%)}.mc-select__panel{border-bottom-left-radius:3px;border-bottom-right-radius:3px;border-style:solid;border-width:1px;max-width:640px;min-width:100%;overflow:hidden}.mc-select__panel .mc-optgroup-label,.mc-select__panel .mc-option{font-size:inherit;height:32px;line-height:32px}.mc-select__content{max-height:232px;overflow:auto;padding:4px 0}.mc-select__content .cdk-virtual-scroll-viewport{max-height:224px;min-height:224px}.mc-form-field-type-mc-select:not(.mc-disabled) .mc-form-field-flex{cursor:pointer}.mc-form-field-type-mc-select .mc-form-field-label{width:calc(100% - 18px)}.mc-select__search-container{border-bottom-style:solid;border-bottom-width:1px}"]
        }]
      }];
      /** @nocollapse */

      McSelect.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_forms__WEBPACK_IMPORTED_MODULE_10__["NG_VALIDATORS"]]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["NgForm"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["FormGroupDirective"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormField"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["NgModel"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["FormControlName"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_SELECT_SCROLL_STRATEGY"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_VALIDATION"]]
          }]
        }];
      };

      McSelect.propDecorators = {
        trigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['trigger', {
            "static": false
          }]
        }],
        panel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['panel', {
            "static": false
          }]
        }],
        optionsContainer: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['optionsContainer', {
            "static": false
          }]
        }],
        overlayDir: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"], {
            "static": false
          }]
        }],
        tags: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"],
          args: [_ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTag"]]
        }],
        customTrigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [McSelectTrigger, {
            "static": false
          }]
        }],
        cleaner: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: ['mcSelectCleaner', {
            "static": true
          }]
        }],
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOption"], {
            descendants: true
          }]
        }],
        optionGroups: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptgroup"]]
        }],
        search: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [McSelectSearch, {
            "static": false
          }]
        }],
        hiddenItemsText: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        panelClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        backdropClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        errorStateMatcher: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        sortComparator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        openedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        openedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['opened']
        }],
        closedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['closed']
        }],
        selectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        valueChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        hasBackdrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        multiple: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        hiddenItemsTextFormatter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: select.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McSelectModule = function McSelectModule() {
        _classCallCheck(this, McSelectModule);
      };

      McSelectModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"], _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTagsModule"]],
          exports: [_ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormFieldModule"], McSelect, McSelectSearch, McSelectSearchEmptyResult, McSelectTrigger, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
          declarations: [McSelect, McSelectSearch, McSelectSearchEmptyResult, McSelectTrigger],
          providers: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_SELECT_SCROLL_STRATEGY_PROVIDER"]]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-select.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-select.js.map

      /***/
    },

    /***/
    "2w20":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-card.js ***!
      \********************************************************/

    /*! exports provided: McCard, McCardBase, McCardBaseMixin, McCardModule */

    /***/
    function w20(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCard", function () {
        return McCard;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCardBase", function () {
        return McCardBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCardBaseMixin", function () {
        return McCardBaseMixin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCardModule", function () {
        return McCardModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /**
       * @fileoverview added by tsickle
       * Generated from: card.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McCardBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McCardBase(_elementRef) {
        _classCallCheck(this, McCardBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McCardBaseMixin = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_5__["mixinColor"])(McCardBase);

      var McCard = /*#__PURE__*/function (_McCardBaseMixin) {
        _inherits(McCard, _McCardBaseMixin);

        var _super2 = _createSuper(McCard);

        /**
         * @param {?} elementRef
         * @param {?} _focusMonitor
         */
        function McCard(elementRef, _focusMonitor) {
          var _this16;

          _classCallCheck(this, McCard);

          _this16 = _super2.call(this, elementRef);
          _this16._focusMonitor = _focusMonitor;
          _this16.readonly = false;
          _this16.selected = false;
          _this16.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          _this16._tabIndex = 0;

          _this16._focusMonitor.monitor(_this16._elementRef.nativeElement, false);

          return _this16;
        }
        /**
         * @return {?}
         */


        _createClass(McCard, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.hostElement.focus();
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onClick",
          value: function onClick($event) {
            if (!this.readonly) {
              $event.stopPropagation();
              this.selectedChange.emit(!this.selected);
            }
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown($event) {
            // tslint:disable-next-line:deprecation
            switch ($event.keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["SPACE"]:
                if (!this.readonly) {
                  $event.preventDefault();
                  this.selectedChange.emit(!this.selected);
                }

                break;

              default:
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "tabIndex",
          get: function get() {
            return this.readonly ? null : this._tabIndex;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._tabIndex = value;
          }
        }, {
          key: "hostElement",
          get: function get() {
            return this._elementRef.nativeElement;
          }
        }]);

        return McCard;
      }(McCardBaseMixin);

      McCard.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-card',
          template: "<ng-content></ng-content>\n<div class=\"mc-card__overlay\"></div>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          inputs: ['color'],
          host: {
            "class": 'mc-card',
            '[class.mc-card_readonly]': 'readonly',
            '[class.mc-selected]': 'selected',
            '[attr.tabindex]': 'tabIndex',
            '(keydown)': 'onKeyDown($event)',
            '(click)': 'onClick($event)'
          },
          styles: [".mc-card{border-left:4px solid transparent;box-sizing:border-box;cursor:pointer;display:flex;flex-direction:column;position:relative}.mc-card:focus{outline:none}.mc-card .mc-card__overlay{background:transparent;bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:0}.mc-card.mc-card_readonly{cursor:auto}"]
        }]
      }];
      /** @nocollapse */

      McCard.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }];
      };

      McCard.propDecorators = {
        readonly: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        selectedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: card.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McCardModule = function McCardModule() {
        _classCallCheck(this, McCardModule);
      };

      McCardModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]],
          exports: [McCard],
          declarations: [McCard]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-card.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-card.js.map

      /***/
    },

    /***/
    "3Xtq":
    /*!********************************************************************!*\
      !*** ./packages/docs/src/app/components/anchors/anchors.module.ts ***!
      \********************************************************************/

    /*! exports provided: AnchorsModule */

    /***/
    function Xtq(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnchorsModule", function () {
        return AnchorsModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _anchors_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./anchors.component */
      "Cb09");

      var AnchorsModule = function AnchorsModule() {
        _classCallCheck(this, AnchorsModule);
      };

      AnchorsModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]],
        exports: [_anchors_component__WEBPACK_IMPORTED_MODULE_4__["AnchorsComponent"]],
        declarations: [_anchors_component__WEBPACK_IMPORTED_MODULE_4__["AnchorsComponent"]]
      })], AnchorsModule);
      /***/
    },

    /***/
    "4KQ8":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-core.js ***!
      \********************************************************/

    /*! exports provided: AnimationCurves, BOTTOM_LEFT_POSITION_PRIORITY, BOTTOM_POSITION_PRIORITY, BOTTOM_RIGHT_POSITION_PRIORITY, DEFAULT_4_POSITIONS, DEFAULT_4_POSITIONS_TO_CSS_MAP, DEFAULT_MC_LOCALE_ID, EXTENDED_OVERLAY_POSITIONS, ErrorStateMatcher, LEFT_BOTTOM_POSITION_PRIORITY, LEFT_POSITION_PRIORITY, LEFT_TOP_POSITION_PRIORITY, MC_LABEL_GLOBAL_OPTIONS, MC_LOCALE_ID, MC_OPTION_PARENT_COMPONENT, MC_SANITY_CHECKS, MC_SELECT_SCROLL_STRATEGY, MC_SELECT_SCROLL_STRATEGY_PROVIDER, MC_VALIDATION, McCommonModule, McDecimalPipe, McFormattersModule, McHighlightModule, McHighlightPipe, McLine, McLineModule, McLineSetter, McMeasureScrollbarService, McOptgroup, McOptgroupBase, McOptgroupMixinBase, McOption, McOptionModule, McOptionSelectionChange, McPseudoCheckbox, McPseudoCheckboxModule, MultipleMode, NUMBER_FORMAT_REGEXP, POSITION_MAP, POSITION_PRIORITY_STRATEGY, POSITION_TO_CSS_MAP, RIGHT_BOTTOM_POSITION_PRIORITY, RIGHT_POSITION_PRIORITY, RIGHT_TOP_POSITION_PRIORITY, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, ShowOnDirtyErrorStateMatcher, TOP_LEFT_POSITION_PRIORITY, TOP_POSITION_PRIORITY, TOP_RIGHT_POSITION_PRIORITY, ThemePalette, countGroupLabelsBeforeOption, fadeAnimation, getMcSelectDynamicMultipleError, getMcSelectNonArrayValueError, getMcSelectNonFunctionValueError, getOptionScrollPosition, isBoolean, mcSelectAnimations, mcSelectScrollStrategyProviderFactory, mixinColor, mixinDisabled, mixinErrorState, mixinTabIndex, selectEvents, setMosaicValidation, setMosaicValidationForFormControl, setMosaicValidationForModelControl, toBoolean, ɵa */

    /***/
    function KQ8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnimationCurves", function () {
        return AnimationCurves;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BOTTOM_LEFT_POSITION_PRIORITY", function () {
        return BOTTOM_LEFT_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BOTTOM_POSITION_PRIORITY", function () {
        return BOTTOM_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BOTTOM_RIGHT_POSITION_PRIORITY", function () {
        return BOTTOM_RIGHT_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DEFAULT_4_POSITIONS", function () {
        return DEFAULT_4_POSITIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DEFAULT_4_POSITIONS_TO_CSS_MAP", function () {
        return DEFAULT_4_POSITIONS_TO_CSS_MAP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DEFAULT_MC_LOCALE_ID", function () {
        return DEFAULT_MC_LOCALE_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EXTENDED_OVERLAY_POSITIONS", function () {
        return EXTENDED_OVERLAY_POSITIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function () {
        return ErrorStateMatcher;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LEFT_BOTTOM_POSITION_PRIORITY", function () {
        return LEFT_BOTTOM_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LEFT_POSITION_PRIORITY", function () {
        return LEFT_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LEFT_TOP_POSITION_PRIORITY", function () {
        return LEFT_TOP_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_LABEL_GLOBAL_OPTIONS", function () {
        return MC_LABEL_GLOBAL_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_LOCALE_ID", function () {
        return MC_LOCALE_ID;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_OPTION_PARENT_COMPONENT", function () {
        return MC_OPTION_PARENT_COMPONENT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SANITY_CHECKS", function () {
        return MC_SANITY_CHECKS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SELECT_SCROLL_STRATEGY", function () {
        return MC_SELECT_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SELECT_SCROLL_STRATEGY_PROVIDER", function () {
        return MC_SELECT_SCROLL_STRATEGY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_VALIDATION", function () {
        return MC_VALIDATION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCommonModule", function () {
        return McCommonModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDecimalPipe", function () {
        return McDecimalPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormattersModule", function () {
        return McFormattersModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McHighlightModule", function () {
        return McHighlightModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McHighlightPipe", function () {
        return McHighlightPipe;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLine", function () {
        return McLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLineModule", function () {
        return McLineModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLineSetter", function () {
        return McLineSetter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McMeasureScrollbarService", function () {
        return McMeasureScrollbarService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McOptgroup", function () {
        return McOptgroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McOptgroupBase", function () {
        return McOptgroupBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McOptgroupMixinBase", function () {
        return McOptgroupMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McOption", function () {
        return McOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McOptionModule", function () {
        return McOptionModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McOptionSelectionChange", function () {
        return McOptionSelectionChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McPseudoCheckbox", function () {
        return McPseudoCheckbox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McPseudoCheckboxModule", function () {
        return McPseudoCheckboxModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MultipleMode", function () {
        return MultipleMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NUMBER_FORMAT_REGEXP", function () {
        return NUMBER_FORMAT_REGEXP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "POSITION_MAP", function () {
        return POSITION_MAP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "POSITION_PRIORITY_STRATEGY", function () {
        return POSITION_PRIORITY_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "POSITION_TO_CSS_MAP", function () {
        return POSITION_TO_CSS_MAP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RIGHT_BOTTOM_POSITION_PRIORITY", function () {
        return RIGHT_BOTTOM_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RIGHT_POSITION_PRIORITY", function () {
        return RIGHT_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RIGHT_TOP_POSITION_PRIORITY", function () {
        return RIGHT_TOP_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_INDENT_PADDING_X", function () {
        return SELECT_PANEL_INDENT_PADDING_X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function () {
        return SELECT_PANEL_MAX_HEIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_PADDING_X", function () {
        return SELECT_PANEL_PADDING_X;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_VIEWPORT_PADDING", function () {
        return SELECT_PANEL_VIEWPORT_PADDING;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ShowOnDirtyErrorStateMatcher", function () {
        return ShowOnDirtyErrorStateMatcher;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TOP_LEFT_POSITION_PRIORITY", function () {
        return TOP_LEFT_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TOP_POSITION_PRIORITY", function () {
        return TOP_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TOP_RIGHT_POSITION_PRIORITY", function () {
        return TOP_RIGHT_POSITION_PRIORITY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ThemePalette", function () {
        return ThemePalette;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "countGroupLabelsBeforeOption", function () {
        return countGroupLabelsBeforeOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fadeAnimation", function () {
        return fadeAnimation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcSelectDynamicMultipleError", function () {
        return getMcSelectDynamicMultipleError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcSelectNonArrayValueError", function () {
        return getMcSelectNonArrayValueError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcSelectNonFunctionValueError", function () {
        return getMcSelectNonFunctionValueError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getOptionScrollPosition", function () {
        return getOptionScrollPosition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isBoolean", function () {
        return isBoolean;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcSelectAnimations", function () {
        return mcSelectAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcSelectScrollStrategyProviderFactory", function () {
        return mcSelectScrollStrategyProviderFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinColor", function () {
        return mixinColor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinDisabled", function () {
        return mixinDisabled;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinErrorState", function () {
        return mixinErrorState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mixinTabIndex", function () {
        return mixinTabIndex;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectEvents", function () {
        return selectEvents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setMosaicValidation", function () {
        return setMosaicValidation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setMosaicValidationForFormControl", function () {
        return setMosaicValidationForFormControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setMosaicValidationForModelControl", function () {
        return setMosaicValidationForModelControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toBoolean", function () {
        return toBoolean;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return mcSanityChecksFactory;
      });
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /**
       * @fileoverview added by tsickle
       * Generated from: utils/utils.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @param {?} val
       * @return {?}
       */


      function isBoolean(val) {
        return typeof val === 'boolean';
      }
      /**
       * @param {?} value
       * @return {?}
       */


      function toBoolean(value) {
        return value != null && "".concat(value) !== 'false';
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: utils/public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: utils/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: common-behaviors/common-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Injection token that configures whether the Mosaic sanity checks are enabled.

      /** @type {?} */


      var MC_SANITY_CHECKS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-sanity-checks', {
        providedIn: 'root',
        factory: mcSanityChecksFactory
      });
      /**
       * @return {?}
       */

      function mcSanityChecksFactory() {
        return true;
      }
      /**
       * Module that captures anything that should be loaded and/or run for *all* Mosaic
       * components. This includes Bidi, etc.
       *
       * This module should be imported to each top-level component module (e.g., McTabsModule).
       */


      var McCommonModule = /*#__PURE__*/function () {
        /**
         * @param {?} _sanityChecksEnabled
         */
        function McCommonModule(_sanityChecksEnabled) {
          _classCallCheck(this, McCommonModule);

          this._sanityChecksEnabled = _sanityChecksEnabled; // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).

          this.hasDoneGlobalChecks = false; // Reference to the global `document` object.
          // tslint:disable-next-line: orthodox-getter-and-setter

          this._document = typeof document === 'object' && document ? document : null; // Reference to the global 'window' object.
          // tslint:disable-next-line: orthodox-getter-and-setter

          this._window = typeof window === 'object' && window ? window : null;

          if (this.areChecksEnabled() && !this.hasDoneGlobalChecks) {
            this.checkDoctypeIsDefined();
            this.checkThemeIsPresent();
            this.hasDoneGlobalChecks = true;
          }
        } // Whether any sanity checks are enabled

        /**
         * @private
         * @return {?}
         */


        _createClass(McCommonModule, [{
          key: "areChecksEnabled",
          value: function areChecksEnabled() {
            return this._sanityChecksEnabled && Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !this.isTestEnv();
          } // Whether the code is running in tests.

          /**
           * @private
           * @return {?}
           */

        }, {
          key: "isTestEnv",
          value: function isTestEnv() {
            // tslint:disable-next-line
            return this._window && (this._window['__karma__'] || this._window['jasmine']);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "checkDoctypeIsDefined",
          value: function checkDoctypeIsDefined() {
            if (this._document && !this._document.doctype) {
              console.warn('Current document does not have a doctype. This may cause ' + 'some Mosaic components not to behave as expected.');
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "checkThemeIsPresent",
          value: function checkThemeIsPresent() {
            if (this._document && typeof getComputedStyle === 'function') {
              /** @type {?} */
              var testElement = this._document.createElement('div');

              testElement.classList.add('mc-theme-loaded-marker');

              this._document.body.appendChild(testElement);
              /** @type {?} */


              var computedStyle = getComputedStyle(testElement); // In some situations, the computed style of the test element can be null. For example in
              // Firefox, the computed style is null if an application is running inside of a hidden iframe.
              // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397

              if (computedStyle && computedStyle.display !== 'none') {
                console.warn('Could not find Mosaic core theme. Most Mosaic ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: link there');
              }

              this._document.body.removeChild(testElement);
            }
          }
        }]);

        return McCommonModule;
      }();

      McCommonModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["BidiModule"]],
          exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["BidiModule"]]
        }]
      }];
      /** @nocollapse */

      McCommonModule.ctorParameters = function () {
        return [{
          type: Boolean,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_SANITY_CHECKS]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: common-behaviors/disabled.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function CanDisable() {}

      if (false) {}
      /**
       * @template T
       * @param {?} base
       * @return {?}
       */


      function mixinDisabled(base) {
        return /*#__PURE__*/function (_base) {
          _inherits(_class, _base);

          var _super3 = _createSuper(_class);

          /**
           * @param {...?} args
           */
          function _class() {
            var _this17;

            _classCallCheck(this, _class);

            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            // tslint:disable-next-line
            _this17 = _super3.call.apply(_super3, [this].concat(args));
            _this17._disabled = false;
            return _this17;
          }
          /**
           * @return {?}
           */


          _createClass(_class, [{
            key: "disabled",
            get: function get() {
              return this._disabled;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
            }
          }]);

          return _class;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: common-behaviors/color.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function CanColor() {}

      if (false) {}
      /**
       * @record
       */


      function HasElementRef() {}

      if (false) {}
      /** @enum {string} */


      var ThemePalette = {
        Primary: "primary",
        Second: "second",
        Error: "error",
        Default: "second",
        Empty: ""
      };
      /**
       * Mixin to augment a directive with a `color` property.
       * @template T
       * @param {?} base
       * @param {?=} defaultColor
       * @return {?}
       */

      function mixinColor(base) {
        var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ThemePalette.Default;
        return /*#__PURE__*/function (_base2) {
          _inherits(_class2, _base2);

          var _super4 = _createSuper(_class2);

          /**
           * @param {...?} args
           */
          function _class2() {
            var _this18;

            _classCallCheck(this, _class2);

            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            _this18 = _super4.call.apply(_super4, [this].concat(args));
            _this18.color = defaultColor;
            return _this18;
          }
          /**
           * @return {?}
           */


          _createClass(_class2, [{
            key: "color",
            get: function get() {
              return this._color;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              /** @type {?} */
              var colorPalette = value || defaultColor;

              if (colorPalette !== this._color) {
                if (this._color) {
                  this._elementRef.nativeElement.classList.remove("mc-".concat(this._color));
                }

                if (colorPalette) {
                  this._elementRef.nativeElement.classList.add("mc-".concat(colorPalette));
                }

                this._color = colorPalette;
              }
            }
          }]);

          return _class2;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: common-behaviors/tabindex.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function HasTabIndex() {}

      if (false) {} // Mixin to augment a directive with a `tabIndex` property.

      /**
       * @template T
       * @param {?} base
       * @param {?=} defaultTabIndex
       * @return {?}
       */


      function mixinTabIndex(base) {
        var defaultTabIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
        // but given we `extend` it from another class, we can assume a constructor being accessible.
        // tslint:disable-next-line:naming-convention

        /**
         * @abstract
         */
        var Mixin = /*#__PURE__*/function (_base3) {
          _inherits(Mixin, _base3);

          var _super5 = _createSuper(Mixin);

          /**
           * @param {...?} args
           */
          function Mixin() {
            var _this19;

            _classCallCheck(this, Mixin);

            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            _this19 = _super5.call.apply(_super5, [this].concat(args)); // tslint:disable-next-line:orthodox-getter-and-setter

            _this19._tabIndex = defaultTabIndex;
            _this19.defaultTabIndex = defaultTabIndex;
            return _this19;
          }
          /**
           * @return {?}
           */


          _createClass(Mixin, [{
            key: "tabIndex",
            get: function get() {
              return this.disabled ? -1 : this._tabIndex;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            ,
            set: function set(value) {
              // If the specified tabIndex value is null or undefined, fall back to the default value.
              this._tabIndex = value != null ? Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value) : this.defaultTabIndex;
            }
          }]);

          return Mixin;
        }(base);

        if (false) {} // Since we don't directly extend from `base` with it's original types, and we instruct
        // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
        // This is a limitation in TS as abstract classes cannot be typed properly dynamically.


        return (
          /** @type {?} */

          /** @type {?} */
          Mixin
        );
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: common-behaviors/error-state.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @record
       */


      function CanUpdateErrorState() {}

      if (false) {}
      /**
       * \@docs-private
       * @record
       */


      function HasErrorState() {}

      if (false) {}
      /**
       * Mixin to augment a directive with updateErrorState method.
       * For component with `errorState` and need to update `errorState`.
       * @template T
       * @param {?} base
       * @return {?}
       */


      function mixinErrorState(base) {
        return /*#__PURE__*/function (_base4) {
          _inherits(_class3, _base4);

          var _super6 = _createSuper(_class3);

          /**
           * @param {...?} args
           */
          function _class3() {
            var _this20;

            _classCallCheck(this, _class3);

            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            _this20 = _super6.call.apply(_super6, [this].concat(args));
            /**
             * Whether the component is in an error state.
             */

            _this20.errorState = false;
            /**
             * Stream that emits whenever the state of the input changes such that the wrapping
             * `MatFormField` needs to run change detection.
             */

            _this20.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
            return _this20;
          }
          /**
           * @return {?}
           */


          _createClass(_class3, [{
            key: "updateErrorState",
            value: function updateErrorState() {
              /** @type {?} */
              var oldState = this.errorState;
              /** @type {?} */

              var parent = this.parentFormGroup || this.parentForm;
              /** @type {?} */

              var matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;
              /** @type {?} */

              var control = this.ngControl ?
              /** @type {?} */
              this.ngControl.control : null;
              /** @type {?} */

              var newState = matcher.isErrorState(control, parent);

              if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
              }
            }
          }]);

          return _class3;
        }(base);
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: common-behaviors/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: line/line.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Shared directive to count lines inside a text area, such as a list item.
       * Line elements can be extracted with a \@ContentChildren(McLine) query, then
       * counted by checking the query list's length.
       */


      var McLine = function McLine() {
        _classCallCheck(this, McLine);
      };

      McLine.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mc-line], [mcLine]',
          host: {
            "class": 'mc-line'
          }
        }]
      }];
      /**
       * Helper that takes a query list of lines and sets the correct class on the host.
       * \@docs-private
       */

      var McLineSetter = /*#__PURE__*/function () {
        /**
         * @param {?} _lines
         * @param {?} _element
         */
        function McLineSetter(_lines, _element) {
          var _this21 = this;

          _classCallCheck(this, McLineSetter);

          this._lines = _lines;
          this._element = _element;
          this.setLineClass(this._lines.length);

          this._lines.changes.subscribe(
          /**
          * @return {?}
          */
          function () {
            _this21.setLineClass(_this21._lines.length);
          });
        }
        /**
         * @private
         * @param {?} count
         * @return {?}
         */


        _createClass(McLineSetter, [{
          key: "setLineClass",
          value: function setLineClass(count) {
            /** @type {?} */
            var minLineClassNumber = 2;
            /** @type {?} */

            var maxLineClassNumber = 3;
            this.resetClasses();

            if (count === minLineClassNumber || count === maxLineClassNumber) {
              this.setClass("mc-".concat(count, "-line"), true);
            } else if (count > maxLineClassNumber) {
              this.setClass("mc-multi-line", true);
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "resetClasses",
          value: function resetClasses() {
            this.setClass('mc-2-line', false);
            this.setClass('mc-3-line', false);
            this.setClass('mc-multi-line', false);
          }
          /**
           * @private
           * @param {?} className
           * @param {?} isAdd
           * @return {?}
           */

        }, {
          key: "setClass",
          value: function setClass(className, isAdd) {
            if (isAdd) {
              this._element.nativeElement.classList.add(className);
            } else {
              this._element.nativeElement.classList.remove(className);
            }
          }
        }]);

        return McLineSetter;
      }();

      if (false) {}

      var McLineModule = function McLineModule() {
        _classCallCheck(this, McLineModule);
      };

      McLineModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [],
          exports: [McLine],
          declarations: [McLine]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: error/error-options.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Error state matcher that matches when a control is invalid and dirty.
       */

      var ShowOnDirtyErrorStateMatcher = /*#__PURE__*/function () {
        function ShowOnDirtyErrorStateMatcher() {
          _classCallCheck(this, ShowOnDirtyErrorStateMatcher);
        }

        _createClass(ShowOnDirtyErrorStateMatcher, [{
          key: "isErrorState",

          /**
           * @param {?} control
           * @param {?} form
           * @return {?}
           */
          value: function isErrorState(control, form) {
            return !!(control && control.invalid && (control.dirty || form && form.submitted));
          }
        }]);

        return ShowOnDirtyErrorStateMatcher;
      }();

      ShowOnDirtyErrorStateMatcher.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
      }];
      /**
       * Provider that defines how form controls behave with regards to displaying error messages.
       */

      var ErrorStateMatcher = /*#__PURE__*/function () {
        function ErrorStateMatcher() {
          _classCallCheck(this, ErrorStateMatcher);
        }

        _createClass(ErrorStateMatcher, [{
          key: "isErrorState",

          /**
           * @param {?} control
           * @param {?} form
           * @return {?}
           */
          value: function isErrorState(control, form) {
            return !!(control && control.invalid && (control.touched || form && form.submitted));
          }
        }]);

        return ErrorStateMatcher;
      }();

      ErrorStateMatcher.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{
          providedIn: 'root'
        }]
      }];
      /** @nocollapse */

      ErrorStateMatcher.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function ErrorStateMatcher_Factory() {
          return new ErrorStateMatcher();
        },
        token: ErrorStateMatcher,
        providedIn: "root"
      });
      /**
       * @fileoverview added by tsickle
       * Generated from: formatters/number/formatter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var MC_LOCALE_ID = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('McLocaleId');
      /** @type {?} */

      var DEFAULT_MC_LOCALE_ID = 'ru';
      /**
       * @param {?} value
       * @return {?}
       */

      function isEmpty(value) {
        return value == null || value === '' || value !== value;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      function strToNumber(value) {
        if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
          return Number(value);
        }

        if (typeof value !== 'number') {
          throw new Error("".concat(value, " is not a number"));
        }

        return value;
      }
      /** @type {?} */


      var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
      /** @type {?} */

      var minIntGroupPosition = 1;
      /** @type {?} */

      var minFractionGroupPosition = 3;
      /** @type {?} */

      var maxFractionGroupPosition = 5;
      /**
       * @record
       */

      function NumberFormatOptions() {}

      if (false) {}

      var ParsedDigitsInfo = function ParsedDigitsInfo() {
        _classCallCheck(this, ParsedDigitsInfo);
      };

      if (false) {}
      /**
       * @param {?} digitsInfo
       * @return {?}
       */


      function parseDigitsInfo(digitsInfo) {
        /** @type {?} */
        var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);

        if (parts === null) {
          throw new Error("".concat(digitsInfo, " is not a valid digit info"));
        }
        /** @type {?} */


        var minIntPart = parts[minIntGroupPosition];
        /** @type {?} */

        var minFractionPart = parts[minFractionGroupPosition];
        /** @type {?} */

        var maxFractionPart = parts[maxFractionGroupPosition];
        /** @type {?} */

        var result = new ParsedDigitsInfo();

        if (minIntPart != null) {
          result.minimumIntegerDigits = parseInt(minIntPart);
        }

        if (minFractionPart != null) {
          result.minimumFractionDigits = parseInt(minFractionPart);
        }

        if (maxFractionPart != null) {
          result.maximumFractionDigits = parseInt(maxFractionPart);
        } else if (minFractionPart != null && result.minimumFractionDigits > result.maximumFractionDigits) {
          result.maximumFractionDigits = result.minimumFractionDigits;
        }

        return result;
      }

      var McDecimalPipe = /*#__PURE__*/function () {
        /**
         * @param {?} _locale
         */
        function McDecimalPipe(_locale) {
          _classCallCheck(this, McDecimalPipe);

          this._locale = _locale;
        }
        /**
         * @param {?} value The number to be formatted.
         * @param {?=} digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `3`.
         * @param {?=} locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `MC_LOCALE_ID`, which is `ru` by default.
         * @return {?}
         */


        _createClass(McDecimalPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (isEmpty(value)) {
              return null;
            }
            /** @type {?} */


            var currentLocale = locale || this._locale || DEFAULT_MC_LOCALE_ID;
            /** @type {?} */

            var parsedDigitsInfo;

            if (digitsInfo) {
              parsedDigitsInfo = parseDigitsInfo(digitsInfo);
            }
            /** @type {?} */


            var options = Object.assign({
              useGrouping: true,
              minimumIntegerDigits: 1,
              minimumFractionDigits: 0,
              maximumFractionDigits: 3
            }, parsedDigitsInfo);

            try {
              /** @type {?} */
              var num = strToNumber(value);
              return Intl.NumberFormat.call(this, currentLocale, options).format(num);
            } catch (error) {
              throw Error("InvalidPipeArgument: McDecimalPipe for pipe '".concat(JSON.stringify(error.message), "'"));
            }
          }
        }]);

        return McDecimalPipe;
      }();

      McDecimalPipe.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{
          providedIn: 'root'
        }]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"],
        args: [{
          name: 'mcNumber'
        }]
      }];
      /** @nocollapse */

      McDecimalPipe.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_LOCALE_ID]
          }]
        }];
      };
      /** @nocollapse */


      McDecimalPipe.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function McDecimalPipe_Factory() {
          return new McDecimalPipe(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MC_LOCALE_ID, 8));
        },
        token: McDecimalPipe,
        providedIn: "root"
      });

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: formatters/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McFormattersModule = function McFormattersModule() {
        _classCallCheck(this, McFormattersModule);
      };

      McFormattersModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          exports: [McDecimalPipe],
          declarations: [McDecimalPipe]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: validation/validation.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */

      function McValidationOptions() {}

      if (false) {}
      /** @type {?} */


      var MC_VALIDATION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('McUseValidation', {
        factory:
        /**
        * @return {?}
        */
        function factory() {
          return {
            useValidation: true
          };
        }
      });
      /**
       * @param {?} control
       * @param {?} validator
       * @return {?}
       */

      function setValidState(control, validator) {
        if (!control) {
          return;
        }

        control.clearValidators();
        control.updateValueAndValidity({
          emitEvent: false
        });
        control.setValidators(validator);
      }
      /**
       * This function do next:
       * - run validation on submitting parent form
       * - prevent validation in required validator if form doesn't submitted
       * - if control has focus validation will be prevented
       * @param {?} component
       * @return {?}
       */


      function setMosaicValidation(component) {
        /** @type {?} */
        var ngControl = component.ngControl;

        if (!ngControl) {
          return;
        }
        /** @type {?} */


        var parentForm = component.parentForm || component.parentFormGroup;

        if (parentForm) {
          parentForm.ngSubmit.subscribe(
          /**
          * @return {?}
          */
          function () {
            // tslint:disable-next-line: no-unnecessary-type-assertion

            /** @type {?} */
            ngControl.control.updateValueAndValidity({
              emitEvent: false
            });
          });
        }

        if (component.ngModel) {
          setMosaicValidationForModelControl(component, component.rawValidators, parentForm);
        } else if (component.formControlName || component.ngControl) {
          setMosaicValidationForFormControl(component, parentForm, ngControl);
        }
      }
      /**
       * @param {?} component
       * @param {?} validators
       * @param {?} parentForm
       * @return {?}
       */


      function setMosaicValidationForModelControl(component, validators, parentForm) {
        if (!validators) {
          return;
        }

        validators.forEach(
        /**
        * @param {?} validator
        * @return {?}
        */
        function (validator) {
          // tslint:disable-next-line: no-unbound-method

          /** @type {?} */
          var originalValidate = validator.validate;

          if (validator instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_4__["RequiredValidator"]) {
            // changed required validation logic
            validator.validate =
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              if (parentForm && !parentForm.submitted) {
                return null;
              }

              return originalValidate.call(validator, control);
            };
          } else {
            // changed all other validation logic
            validator.validate =
            /**
            * @param {?} control
            * @return {?}
            */
            function (control) {
              if (component.focused) {
                return null;
              }

              return originalValidate.call(validator, control);
            };
          }
        });
      }
      /**
       * @param {?} component
       * @param {?} parentForm
       * @param {?} ngControl
       * @return {?}
       */


      function setMosaicValidationForFormControl(component, parentForm, ngControl) {
        /** @type {?} */
        var originalValidator =
        /** @type {?} */
        ngControl.control.validator; // changed required validation logic after initialization

        if (ngControl.invalid &&
        /** @type {?} */
        ngControl.errors.required) {
          Promise.resolve().then(
          /**
          * @return {?}
          */
          function () {
            return setValidState(
            /** @type {?} */
            ngControl.control,
            /** @type {?} */
            originalValidator);
          });
        } // check dynamic updates


        /** @type {?} */
        ngControl.statusChanges.subscribe(
        /**
        * @return {?}
        */
        function () {
          // changed required validation logic
          if (ngControl.invalid && parentForm && !parentForm.submitted &&
          /** @type {?} */
          ngControl.errors.required) {
            setValidState(
            /** @type {?} */
            ngControl.control,
            /** @type {?} */
            originalValidator);
          } // changed all other validation logic


          if (ngControl.invalid && component.focused) {
            setValidState(
            /** @type {?} */
            ngControl.control,
            /** @type {?} */
            originalValidator);
          }
        });
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: validation/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: highlight/highlight.pipe.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McHighlightPipe = /*#__PURE__*/function () {
        function McHighlightPipe() {
          _classCallCheck(this, McHighlightPipe);
        }

        _createClass(McHighlightPipe, [{
          key: "transform",

          /**
           * @param {?} value
           * @param {?} args
           * @return {?}
           */
          value: function transform(value, args) {
            if (!args) {
              return value;
            }

            return value.replace(new RegExp("(".concat(args, ")"), 'gi'), '<mark class="mc-highlight">$1</mark>');
          }
        }]);

        return McHighlightPipe;
      }();

      McHighlightPipe.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"],
        args: [{
          name: 'mcHighlight'
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: highlight/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McHighlightModule = function McHighlightModule() {
        _classCallCheck(this, McHighlightModule);
      };

      McHighlightModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
          exports: [McHighlightPipe],
          declarations: [McHighlightPipe]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: select/events.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var selectEvents = 'selectEvents';
      /**
       * @fileoverview added by tsickle
       * Generated from: select/errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Returns an exception to be thrown when attempting to change a select's `multiple` option
       * after initialization.
       * \@docs-private
       * @return {?}
       */

      function getMcSelectDynamicMultipleError() {
        return Error('Cannot change `multiple` mode of select after initialization.');
      }
      /**
       * Returns an exception to be thrown when attempting to assign a non-array value to a select
       * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for
       * resetting the value.
       * \@docs-private
       * @return {?}
       */


      function getMcSelectNonArrayValueError() {
        return Error('Value must be an array in multiple-selection mode.');
      }
      /**
       * Returns an exception to be thrown when assigning a non-function value to the comparator
       * used to determine if a value corresponds to an option. Note that whether the function
       * actually takes two values and returns a boolean is not checked.
       * @return {?}
       */


      function getMcSelectNonFunctionValueError() {
        return Error('`compareWith` must be a function.');
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: select/constants.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The max height of the select's overlay panel
       * @type {?}
       */


      var SELECT_PANEL_MAX_HEIGHT = 224;
      /**
       * The panel's padding on the x-axis
       * @type {?}
       */

      var SELECT_PANEL_PADDING_X = 1;
      /* tslint:disable-next-line:no-magic-numbers */

      /**
       * The panel's x axis padding if it is indented (e.g. there is an option group).
       * @type {?}
       */

      var SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;
      /**
       * The select panel will only "fit" inside the viewport if it is positioned at
       * this value or more away from the viewport boundary.
       * @type {?}
       */

      var SELECT_PANEL_VIEWPORT_PADDING = 8;
      /**
       * Injection token that determines the scroll handling while a select is open.
       * @type {?}
       */

      var MC_SELECT_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-select-scroll-strategy');
      /**
       * \@docs-private
       * @param {?} overlay
       * @return {?}
       */

      function mcSelectScrollStrategyProviderFactory(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition();
          }
        );
      }
      /**
       * \@docs-private
       * @type {?}
       */


      var MC_SELECT_SCROLL_STRATEGY_PROVIDER = {
        provide: MC_SELECT_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]],
        useFactory: mcSelectScrollStrategyProviderFactory
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: select/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: overlay/overlay-position-map.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var POSITION_MAP = {
        top: {
          originX: 'center',
          originY: 'top',
          overlayX: 'center',
          overlayY: 'bottom'
        },
        topCenter: {
          originX: 'center',
          originY: 'top',
          overlayX: 'center',
          overlayY: 'bottom'
        },
        topLeft: {
          originX: 'start',
          originY: 'top',
          overlayX: 'start',
          overlayY: 'bottom'
        },
        topRight: {
          originX: 'end',
          originY: 'top',
          overlayX: 'end',
          overlayY: 'bottom'
        },
        right: {
          originX: 'end',
          originY: 'center',
          overlayX: 'start',
          overlayY: 'center'
        },
        rightTop: {
          originX: 'end',
          originY: 'top',
          overlayX: 'start',
          overlayY: 'top'
        },
        rightBottom: {
          originX: 'end',
          originY: 'bottom',
          overlayX: 'start',
          overlayY: 'bottom'
        },
        bottom: {
          originX: 'center',
          originY: 'bottom',
          overlayX: 'center',
          overlayY: 'top'
        },
        bottomCenter: {
          originX: 'center',
          originY: 'bottom',
          overlayX: 'center',
          overlayY: 'top'
        },
        bottomLeft: {
          originX: 'start',
          originY: 'bottom',
          overlayX: 'start',
          overlayY: 'top'
        },
        bottomRight: {
          originX: 'end',
          originY: 'bottom',
          overlayX: 'end',
          overlayY: 'top'
        },
        left: {
          originX: 'start',
          originY: 'center',
          overlayX: 'end',
          overlayY: 'center'
        },
        leftTop: {
          originX: 'start',
          originY: 'top',
          overlayX: 'end',
          overlayY: 'top'
        },
        leftBottom: {
          originX: 'start',
          originY: 'bottom',
          overlayX: 'end',
          overlayY: 'bottom'
        }
      };
      /** @type {?} */

      var DEFAULT_4_POSITIONS = objectValues([POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left]);
      /** @type {?} */

      var EXTENDED_OVERLAY_POSITIONS = objectValues([POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop, POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom]);
      /** @type {?} */

      var TOP_POSITION_PRIORITY = objectValues([POSITION_MAP.top, POSITION_MAP.bottom, POSITION_MAP.rightBottom, POSITION_MAP.leftBottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight]);
      /** @type {?} */

      var BOTTOM_POSITION_PRIORITY = objectValues([POSITION_MAP.bottom, POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.rightBottom, POSITION_MAP.leftBottom]);
      /** @type {?} */

      var RIGHT_POSITION_PRIORITY = objectValues([POSITION_MAP.right, POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom, POSITION_MAP.top, POSITION_MAP.bottom]);
      /** @type {?} */

      var LEFT_POSITION_PRIORITY = objectValues([POSITION_MAP.left, POSITION_MAP.right, POSITION_MAP.rightTop, POSITION_MAP.rightBottom, POSITION_MAP.top, POSITION_MAP.bottom]);
      /** @type {?} */

      var RIGHT_TOP_POSITION_PRIORITY = objectValues([POSITION_MAP.rightTop, POSITION_MAP.leftTop, POSITION_MAP.left, POSITION_MAP.leftBottom, POSITION_MAP.topLeft, POSITION_MAP.bottomLeft]);
      /** @type {?} */

      var RIGHT_BOTTOM_POSITION_PRIORITY = objectValues([POSITION_MAP.rightBottom, POSITION_MAP.leftBottom, POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.topLeft, POSITION_MAP.bottomLeft]);
      /** @type {?} */

      var LEFT_TOP_POSITION_PRIORITY = objectValues([POSITION_MAP.leftTop, POSITION_MAP.rightTop, POSITION_MAP.right, POSITION_MAP.rightBottom, POSITION_MAP.topRight, POSITION_MAP.bottomRight]);
      /** @type {?} */

      var LEFT_BOTTOM_POSITION_PRIORITY = objectValues([POSITION_MAP.leftBottom, POSITION_MAP.rightBottom, POSITION_MAP.right, POSITION_MAP.rightTop, POSITION_MAP.topRight, POSITION_MAP.bottomRight]);
      /** @type {?} */

      var TOP_LEFT_POSITION_PRIORITY = objectValues([POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.bottomLeft, POSITION_MAP.bottom, POSITION_MAP.bottomRight, POSITION_MAP.leftBottom, POSITION_MAP.rightBottom]);
      /** @type {?} */

      var TOP_RIGHT_POSITION_PRIORITY = objectValues([POSITION_MAP.topRight, POSITION_MAP.topLeft, POSITION_MAP.bottomRight, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.leftBottom, POSITION_MAP.rightBottom]);
      /** @type {?} */

      var BOTTOM_RIGHT_POSITION_PRIORITY = objectValues([POSITION_MAP.bottomRight, POSITION_MAP.bottomLeft, POSITION_MAP.topRight, POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.leftTop, POSITION_MAP.rightTop]);
      /** @type {?} */

      var BOTTOM_LEFT_POSITION_PRIORITY = objectValues([POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.topLeft, POSITION_MAP.top, POSITION_MAP.topRight, POSITION_MAP.rightTop, POSITION_MAP.leftTop]);
      /** @type {?} */

      var POSITION_PRIORITY_STRATEGY = {
        top: TOP_POSITION_PRIORITY,
        topLeft: TOP_LEFT_POSITION_PRIORITY,
        topRight: TOP_RIGHT_POSITION_PRIORITY,
        bottom: BOTTOM_POSITION_PRIORITY,
        bottomLeft: BOTTOM_LEFT_POSITION_PRIORITY,
        bottomRight: BOTTOM_RIGHT_POSITION_PRIORITY,
        left: LEFT_POSITION_PRIORITY,
        leftTop: LEFT_TOP_POSITION_PRIORITY,
        leftBottom: LEFT_BOTTOM_POSITION_PRIORITY,
        right: RIGHT_POSITION_PRIORITY,
        rightTop: RIGHT_TOP_POSITION_PRIORITY,
        rightBottom: RIGHT_BOTTOM_POSITION_PRIORITY
      };
      /** @type {?} */

      var POSITION_TO_CSS_MAP = {
        top: 'top',
        topLeft: 'top-left',
        topRight: 'top-right',
        right: 'right',
        rightTop: 'right-top',
        rightBottom: 'right-bottom',
        left: 'left',
        leftTop: 'left-top',
        leftBottom: 'left-bottom',
        bottom: 'bottom',
        bottomLeft: 'bottom-left',
        bottomRight: 'bottom-right'
      };
      /** @type {?} */

      var DEFAULT_4_POSITIONS_TO_CSS_MAP = {
        top: 'top',
        bottom: 'bottom',
        right: 'right',
        left: 'left'
      };
      /**
       * @template T, S
       * @param {?} array
       * @param {?} iteratee
       * @return {?}
       */

      function arrayMap(array, iteratee) {
        /** @type {?} */
        var index = -1;
        /** @type {?} */

        var length = array == null ? 0 : array.length;
        /** @type {?} */

        var result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }

        return result;
      }
      /**
       * @template T
       * @param {?} object
       * @param {?} props
       * @return {?}
       */


      function baseValues(object, props) {
        return arrayMap(props,
        /**
        * @param {?} key
        * @return {?}
        */
        function (key) {
          return object[key];
        });
      }
      /**
       * @template T
       * @param {?} object
       * @return {?}
       */


      function objectValues(object) {
        return object == null ? [] : baseValues(object, Object.keys(object));
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: animation/fade-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var fadeAnimation = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('fadeAnimation', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
        opacity: 0
      })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
        opacity: 1
      })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
        opacity: 0
      })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('* => true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('150ms cubic-bezier(0.4, 0.0, 1, 1)'))]);
      /**
       * @fileoverview added by tsickle
       * Generated from: animation/animation.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {string} */

      var AnimationCurves = {
        StandardCurve: "cubic-bezier(0.4,0.0,0.2,1)",
        DecelerationCurve: "cubic-bezier(0.0,0.0,0.2,1)",
        AccelerationCurve: "cubic-bezier(0.4,0.0,1,1)",
        SharpCurve: "cubic-bezier(0.4,0.0,0.6,1)"
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: animation/select-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The following are all the animations for the mc-select component, with each
       * const containing the metadata for one animation.
       *
       * @type {?}
       */

      var mcSelectAnimations = {
        /**
         * This animation transforms the select's overlay panel on and off the page.
         *
         * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it
         * up to 100% on the Y axis, fades in its border, and translates slightly up and to the
         * side to ensure the option text correctly overlaps the trigger text.
         *
         * When the panel is removed from the DOM, it simply fades out linearly.
         */
        transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('transformPanel', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
          transform: 'scaleY(0)',
          minWidth: '100%',
          opacity: 0
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["group"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')])), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('* => void', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('250ms 100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
          opacity: 0
        }))])]),

        /**
         * This animation fades in the background color and text content of the
         * select's options. It is time delayed to occur 100ms after the overlay
         * panel has transformed in.
         */
        fadeInContent: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('fadeInContent', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
          opacity: 1
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('void => showing', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
          opacity: 0
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])
      };
      /** @type {?} */

      var transformPanel = mcSelectAnimations.transformPanel;
      /** @type {?} */

      var fadeInContent = mcSelectAnimations.fadeInContent;
      /**
       * @fileoverview added by tsickle
       * Generated from: animation/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: label/label-options.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * InjectionToken that can be used to specify the global label options.
       * @type {?}
       */

      var MC_LABEL_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-label-global-options');
      /**
       * Configurable options for floating labels.
       * @record
       */

      function LabelOptions() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: selection/constants.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {string} */


      var MultipleMode = {
        CHECKBOX: "checkbox",
        KEYBOARD: "keyboard"
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: selection/pseudo-checkbox/pseudo-checkbox.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Component that shows a simplified checkbox without including any kind of "real" checkbox.
       * Meant to be used when the checkbox is purely decorative and a large number of them will be
       * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
       * Note that theming is meant to be handled by the parent element, e.g.
       * `mc-primary .mc-pseudo-checkbox`.
       *
       * Note that this component will be completely invisible to screen-reader users. This is *not*
       * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly
       * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
       * of more complex components that appropriately handle selected / checked state.
       * \@docs-private
       */

      var McPseudoCheckbox = function McPseudoCheckbox() {
        _classCallCheck(this, McPseudoCheckbox);

        this.state = 'unchecked';
        this.disabled = false;
      };

      McPseudoCheckbox.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-pseudo-checkbox',
          template: "<i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n<i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n",
          host: {
            "class": 'mc-pseudo-checkbox',
            '[class.mc-indeterminate]': 'state === "indeterminate"',
            '[class.mc-checked]': 'state === "checked"',
            '[class.mc-disabled]': 'disabled'
          },
          preserveWhitespaces: false,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          styles: [".mc-pseudo-checkbox{border-radius:3px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:pointer;display:inline-block;flex-shrink:0;height:16px;position:relative;vertical-align:middle;width:16px}.mc-pseudo-checkbox .mc-checkbox-checkmark,.mc-pseudo-checkbox .mc-checkbox-mixedmark{display:none;left:-1px;position:absolute;top:-1px}.mc-pseudo-checkbox.mc-pseudo-checkbox-checked,.mc-pseudo-checkbox.mc-pseudo-checkbox-indeterminate{border-color:transparent}.mc-pseudo-checkbox.mc-checked .mc-checkbox-checkmark,.mc-pseudo-checkbox.mc-indeterminate .mc-checkbox-mixedmark{display:inline-block}.mc-pseudo-checkbox.mc-disabled{cursor:default}"]
        }]
      }];
      McPseudoCheckbox.propDecorators = {
        state: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: selection/pseudo-checkbox/pseudo-checkbox.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McPseudoCheckboxModule = function McPseudoCheckboxModule() {
        _classCallCheck(this, McPseudoCheckboxModule);
      };

      McPseudoCheckboxModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
          exports: [McPseudoCheckbox],
          declarations: [McPseudoCheckbox]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: selection/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: services/measure-scrollbar.service.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McMeasureScrollbarService = /*#__PURE__*/function () {
        /**
         * @param {?} document
         */
        function McMeasureScrollbarService(document) {
          _classCallCheck(this, McMeasureScrollbarService);

          this.document = document;
          this.scrollbarMeasure = {
            position: 'absolute',
            top: '-9999px',
            width: '50px',
            height: '50px',
            overflow: 'scroll'
          };
          this.initScrollBarWidth();
        }
        /**
         * @return {?}
         */


        _createClass(McMeasureScrollbarService, [{
          key: "initScrollBarWidth",

          /**
           * @return {?}
           */
          value: function initScrollBarWidth() {
            /** @type {?} */
            var scrollDiv = this.document.createElement('div'); // tslint:disable-next-line

            for (var scrollProp in this.scrollbarMeasure) {
              if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {
                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];
              }
            }

            this.document.body.appendChild(scrollDiv);
            /** @type {?} */

            var width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            this.document.body.removeChild(scrollDiv);
            this._scrollBarWidth = width;
          }
        }, {
          key: "scrollBarWidth",
          get: function get() {
            if (this._scrollBarWidth) {
              return this._scrollBarWidth;
            }

            this.initScrollBarWidth();
            return this._scrollBarWidth;
          }
        }]);

        return McMeasureScrollbarService;
      }();

      McMeasureScrollbarService.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{
          providedIn: 'root'
        }]
      }];
      /** @nocollapse */

      McMeasureScrollbarService.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]]
          }]
        }];
      };
      /** @nocollapse */


      McMeasureScrollbarService.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function McMeasureScrollbarService_Factory() {
          return new McMeasureScrollbarService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]));
        },
        token: McMeasureScrollbarService,
        providedIn: "root"
      });

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: option/optgroup.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       */


      var McOptgroupBase = function McOptgroupBase() {
        _classCallCheck(this, McOptgroupBase);
      }; // tslint:disable-next-line: naming-convention

      /** @type {?} */


      var McOptgroupMixinBase = mixinDisabled(McOptgroupBase);
      /** @type {?} */

      var uniqueOptgroupIdCounter = 0;
      /**
       * Component that is used to group instances of `mc-option`.
       */

      var McOptgroup = /*#__PURE__*/function (_McOptgroupMixinBase) {
        _inherits(McOptgroup, _McOptgroupMixinBase);

        var _super7 = _createSuper(McOptgroup);

        function McOptgroup() {
          var _this22;

          _classCallCheck(this, McOptgroup);

          _this22 = _super7.apply(this, arguments);
          /**
           * Unique id for the underlying label.
           */

          _this22.labelId = "mc-optgroup-label-".concat(uniqueOptgroupIdCounter++);
          return _this22;
        }

        return McOptgroup;
      }(McOptgroupMixinBase);

      McOptgroup.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-optgroup',
          exportAs: 'mcOptgroup',
          template: "<label class=\"mc-optgroup-label\" [id]=\"labelId\">{{ label }}</label>\n<ng-content select=\"mc-option, mc-list-option, ng-container\"></ng-content>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          inputs: ['disabled'],
          host: {
            "class": 'mc-optgroup',
            '[class.mc-disabled]': 'disabled'
          },
          styles: [".mc-optgroup-label{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:default;padding-left:17px;user-select:none}"]
        }]
      }];
      McOptgroup.propDecorators = {
        label: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: option/option.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Option IDs need to be unique across components, so this counter exists outside of
       * the component definition.
       * @type {?}
       */


      var uniqueIdCounter = 0;
      /**
       * Event object emitted by McOption when selected or deselected.
       */

      var McOptionSelectionChange =
      /**
       * @param {?} source
       * @param {?=} isUserInput
       */
      function McOptionSelectionChange(source) {
        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _classCallCheck(this, McOptionSelectionChange);

        this.source = source;
        this.isUserInput = isUserInput;
      };

      if (false) {}
      /**
       * Describes a parent component that manages a list of options.
       * Contains properties that the options can inherit.
       * \@docs-private
       * @record
       */


      function McOptionParentComponent() {}

      if (false) {}
      /**
       * Injection token used to provide the parent component to options.
       * @type {?}
       */


      var MC_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MC_OPTION_PARENT_COMPONENT');
      /**
       * Single option inside of a `<mc-select>` element.
       */

      var McOption = /*#__PURE__*/function () {
        /**
         * @param {?} element
         * @param {?} changeDetectorRef
         * @param {?} parent
         * @param {?} group
         */
        function McOption(element, changeDetectorRef, parent, group) {
          _classCallCheck(this, McOption);

          this.element = element;
          this.changeDetectorRef = changeDetectorRef;
          this.parent = parent;
          this.group = group;
          /**
           * Event emitted when the option is selected or deselected.
           */
          // tslint:disable-next-line:no-output-on-prefix

          this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * Emits when the state of the option changes and any parents have to be notified.
           */

          this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
          this._id = "mc-option-".concat(uniqueIdCounter++);
          this._selected = false;
          this._disabled = false;
          this._active = false;
          this.mostRecentViewValue = '';
        }
        /**
         * @return {?}
         */


        _createClass(McOption, [{
          key: "ngAfterViewChecked",

          /**
           * @return {?}
           */
          value: function ngAfterViewChecked() {
            // Since parent components could be using the option's label to display the selected values
            // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed
            // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
            // relatively cheap, however we still limit them only to selected options in order to avoid
            // hitting the DOM too often.
            if (this._selected) {
              /** @type {?} */
              var viewValue = this.viewValue;

              if (viewValue !== this.mostRecentViewValue) {
                this.mostRecentViewValue = viewValue;
                this.stateChanges.next();
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.stateChanges.complete();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHeight",
          value: function getHeight() {
            // tslint:disable-next-line:naming-convention

            /** @type {?} */
            var DOMRect = this.element.nativeElement.getClientRects()[0];
            return DOMRect ? DOMRect.height : 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "select",
          value: function select() {
            if (!this._selected) {
              this._selected = true;
              this.changeDetectorRef.markForCheck();
              this.emitSelectionChangeEvent();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "deselect",
          value: function deselect() {
            if (this._selected) {
              this._selected = false;
              this.changeDetectorRef.markForCheck();
              this.emitSelectionChangeEvent();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            /** @type {?} */
            var element = this.getHostElement();

            if (typeof element.focus === 'function') {
              element.focus();
            }
          }
          /**
           * This method sets display styles on the option to make it appear
           * active. This is used by the ActiveDescendantKeyManager so key
           * events will display the proper options as active on arrow key events.
           * @return {?}
           */

        }, {
          key: "setActiveStyles",
          value: function setActiveStyles() {
            if (!this._active) {
              this._active = true;
              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * This method removes display styles on the option that made it appear
           * active. This is used by the ActiveDescendantKeyManager so key
           * events will display the proper options as active on arrow key events.
           * @return {?}
           */

        }, {
          key: "setInactiveStyles",
          value: function setInactiveStyles() {
            if (this._active) {
              this._active = false;
              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * Gets the label to be used when determining whether the option should be focused.
           * @return {?}
           */

        }, {
          key: "getLabel",
          value: function getLabel() {
            return this.viewValue;
          }
          /**
           * Ensures the option is selected when activated from the keyboard.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            // tslint:disable-next-line
            if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ENTER"] || event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["SPACE"]) {
              this.selectViaInteraction(); // Prevent the page from scrolling down and form submits.

              event.preventDefault();
            }
          }
          /**
           * `Selects the option while indicating the selection came from the user. Used to
           * determine if the select's view -> model callback should be invoked.`
           * @return {?}
           */

        }, {
          key: "selectViaInteraction",
          value: function selectViaInteraction() {
            if (!this.disabled) {
              this._selected = this.multiple ? !this._selected : true;
              this.changeDetectorRef.markForCheck();
              this.emitSelectionChangeEvent(true);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "getTabIndex",
          value: function getTabIndex() {
            return this.disabled ? '-1' : '0';
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this.element.nativeElement;
          }
          /**
           * Emits the selection change event.
           * @private
           * @param {?=} isUserInput
           * @return {?}
           */

        }, {
          key: "emitSelectionChangeEvent",
          value: function emitSelectionChangeEvent() {
            var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));
          }
        }, {
          key: "showCheckbox",
          get: function get() {
            return this._showCheckbox === undefined ? this.multiple : this._showCheckbox;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._showCheckbox = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
          }
          /**
           * The displayed value of the option. It is necessary to show the selected option in the
           * select's trigger.
           * @return {?}
           */

        }, {
          key: "viewValue",
          get: function get() {
            // TODO: Add input property alternative for node envs.
            return (this.getHostElement().textContent || '').trim();
          }
          /**
           * Whether the wrapping component is in multiple selection mode.
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return this.parent && this.parent.multiple;
          }
          /**
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.group && this.group.disabled || this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether or not the option is currently active and ready to be selected.
           * An active option displays styles as if it is focused, but the
           * focus is actually retained somewhere else. This comes in handy
           * for components like autocomplete where focus must remain on the input.
           * @return {?}
           */

        }, {
          key: "active",
          get: function get() {
            return this._active;
          }
        }]);

        return McOption;
      }();

      McOption.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-option',
          exportAs: 'mcOption',
          host: {
            '[attr.tabindex]': 'getTabIndex()',
            "class": 'mc-option',
            '[class.mc-selected]': 'selected',
            '[class.mc-option-multiple]': 'multiple',
            '[class.mc-active]': 'active',
            '[class.mc-disabled]': 'disabled',
            '[id]': 'id',
            '(click)': 'selectViaInteraction()',
            '(keydown)': 'handleKeydown($event)'
          },
          template: "<mc-pseudo-checkbox\n    *ngIf=\"showCheckbox\"\n    [state]=\"selected ? 'checked' : ''\"\n    [disabled]=\"disabled\">\n</mc-pseudo-checkbox>\n\n<span class=\"mc-option-text\"><ng-content></ng-content></span>\n\n<div class=\"mc-option-overlay\"></div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-option{-webkit-tap-highlight-color:transparent;align-items:center;border:2px solid transparent;box-sizing:border-box;cursor:pointer;display:flex;flex-direction:row;height:32px;max-width:100%;outline:none;padding:0 16px;position:relative}.mc-option.mc-disabled{cursor:default}.mc-option .mc-pseudo-checkbox{margin-right:8px}.mc-option .mc-option-overlay{border-radius:inherit;bottom:-2px;left:-2px;pointer-events:none;position:absolute;right:-2px;top:-2px}.mc-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
        }]
      }];
      /** @nocollapse */

      McOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_OPTION_PARENT_COMPONENT]
          }]
        }, {
          type: McOptgroup,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }]
        }];
      };

      McOption.propDecorators = {
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        showCheckbox: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        onSelectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * Counts the amount of option group labels that precede the specified option.
       * \@docs-private
       * @param {?} optionIndex Index of the option at which to start counting.
       * @param {?} options Flat list of all of the options.
       * @param {?} optionGroups Flat list of all of the option groups.
       * @return {?}
       */


      function countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
        if (optionGroups.length) {
          /** @type {?} */
          var optionsArray = options.toArray();
          /** @type {?} */

          var groups = optionGroups.toArray();
          /** @type {?} */

          var groupCounter = 0;

          for (var i = 0; i < optionIndex + 1; i++) {
            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
              groupCounter++;
            }
          }

          return groupCounter;
        }

        return 0;
      }
      /**
       * Determines the position to which to scroll a panel in order for an option to be into view.
       * \@docs-private
       * @param {?} optionIndex Index of the option to be scrolled into the view.
       * @param {?} optionHeight Height of the options.
       * @param {?} currentScrollPosition Current scroll position of the panel.
       * @param {?} panelHeight Height of the panel.
       * @return {?}
       */


      function getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {
        /** @type {?} */
        var optionOffset = optionIndex * optionHeight;

        if (optionOffset < currentScrollPosition) {
          return optionOffset;
        }

        if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
          return Math.max(0, optionOffset - panelHeight + optionHeight);
        }

        return currentScrollPosition;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: option/option-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McOptionModule = function McOptionModule() {
        _classCallCheck(this, McOptionModule);
      };

      McOptionModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"], McPseudoCheckboxModule],
          exports: [McOption, McOptgroup],
          declarations: [McOption, McOptgroup]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: option/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-core.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-core.js.map

      /***/
    },

    /***/
    "59Z+":
    /*!*********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-radio.js ***!
      \*********************************************************/

    /*! exports provided: MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, McRadioButton, McRadioButtonMixinBase, McRadioChange, McRadioGroup, McRadioGroupBase, McRadioGroupMixinBase, McRadioModule */

    /***/
    function Z(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR", function () {
        return MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioButton", function () {
        return McRadioButton;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioButtonMixinBase", function () {
        return McRadioButtonMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioChange", function () {
        return McRadioChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioGroup", function () {
        return McRadioGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioGroupBase", function () {
        return McRadioGroupBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioGroupMixinBase", function () {
        return McRadioGroupMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McRadioModule", function () {
        return McRadioModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /**
       * @fileoverview added by tsickle
       * Generated from: radio.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Increasing integer for generating unique ids for radio components.

      /** @type {?} */


      var nextUniqueId = 0;
      /**
       * Change event object emitted by McRadio.
       */

      var McRadioChange =
      /**
       * @param {?} source
       * @param {?} value
       */
      function McRadioChange(source, value) {
        _classCallCheck(this, McRadioChange);

        this.source = source;
        this.value = value;
      };

      if (false) {} // Boilerplate for applying mixins to McRadioGroup.

      /**
       * \@docs-private
       */


      var McRadioGroupBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McRadioGroupBase(_elementRef) {
        _classCallCheck(this, McRadioGroupBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McRadioGroupMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McRadioGroupBase);
      /**
       * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This
       * allows it to support [(ngModel)] and ngControl.
       * \@docs-private
       * @type {?}
       */

      var MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McRadioGroup;
        }),
        multi: true
      };

      var McRadioGroup = /*#__PURE__*/function (_McRadioGroupMixinBas) {
        _inherits(McRadioGroup, _McRadioGroupMixinBas);

        var _super8 = _createSuper(McRadioGroup);

        /**
         * @param {?} elementRef
         * @param {?} _changeDetector
         */
        function McRadioGroup(elementRef, _changeDetector) {
          var _this23;

          _classCallCheck(this, McRadioGroup);

          _this23 = _super8.call(this, elementRef);
          _this23._changeDetector = _changeDetector;
          /**
           * Event emitted when the group value changes.
           * Change events are only emitted when the value changes due to user interaction with
           * a radio button (the same behavior as `<input type-"radio">`).
           */

          _this23.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Selected value for group. Should equal the value of the selected radio button if there *is*
           * a corresponding radio button with a matching value. If there is *not* such a corresponding
           * radio button, this value persists to be applied in case a new radio button is added with a
           * matching value.
           */

          _this23._value = null;
          /**
           * The HTML name attribute applied to radio buttons in this group.
           */

          _this23._name = "mc-radio-group-".concat(nextUniqueId++);
          /**
           * The currently selected radio button. Should match value.
           */

          _this23._selected = null;
          /**
           * Whether the `value` has been set to its initial value.
           */

          _this23.isInitialized = false;
          /**
           * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'
           */

          _this23._labelPosition = 'after';
          /**
           * Whether the radio group is disabled.
           */

          _this23._disabled = false;
          /**
           * Whether the radio group is required.
           */

          _this23._required = false;
          /**
           * The method to be called in order to update ngModel
           */
          // tslint:disable-next-line

          _this23.controlValueAccessorChangeFn =
          /**
          * @return {?}
          */
          function () {};
          /**
           * onTouch function registered via registerOnTouch (ControlValueAccessor).
           * \@docs-private
           */
          // tslint:disable-next-line


          _this23.onTouched =
          /**
          * @return {?}
          */
          function () {};

          return _this23;
        }
        /**
         * Name of the radio button group. All radio buttons inside this group will use this name.
         * @return {?}
         */


        _createClass(McRadioGroup, [{
          key: "checkSelectedRadioButton",

          /**
           * @return {?}
           */
          value: function checkSelectedRadioButton() {
            if (this._selected && !this._selected.checked) {
              this._selected.checked = true;
            }
          }
          /**
           * Initialize properties once content children are available.
           * This allows us to propagate relevant attributes to associated buttons.
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            // Mark this component as initialized in AfterContentInit because the initial value can
            // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the
            // NgModel occurs *after* the OnInit of the McRadioGroup.
            this.isInitialized = true;
          }
          /**
           * Mark this group as being "touched" (for ngModel). Meant to be called by the contained
           * radio buttons upon their blur.
           * @return {?}
           */

        }, {
          key: "touch",
          value: function touch() {
            if (this.onTouched) {
              this.onTouched();
            }
          }
          /**
           * Dispatch change event with current selection and group value.
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent() {
            if (this.isInitialized) {
              this.change.emit(new McRadioChange(
              /** @type {?} */
              this._selected, this._value));
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "markRadiosForCheck",
          value: function markRadiosForCheck() {
            if (this.radios) {
              this.radios.forEach(
              /**
              * @param {?} radio
              * @return {?}
              */
              function (radio) {
                return radio.markForCheck();
              });
            }
          }
          /**
           * Sets the model value. Implemented as part of ControlValueAccessor.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;

            this._changeDetector.markForCheck();
          }
          /**
           * Registers a callback to be triggered when the model value changes.
           * Implemented as part of ControlValueAccessor.
           * @param {?} fn Callback to be registered.
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.controlValueAccessorChangeFn = fn;
          }
          /**
           * Registers a callback to be triggered when the control is touched.
           * Implemented as part of ControlValueAccessor.
           * @param {?} fn Callback to be registered.
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
           * @param {?} isDisabled Whether the control should be disabled.
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;

            this._changeDetector.markForCheck();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateRadioButtonNames",
          value: function updateRadioButtonNames() {
            var _this24 = this;

            if (this.radios) {
              this.radios.forEach(
              /**
              * @param {?} radio
              * @return {?}
              */
              function (radio) {
                radio.name = _this24.name;
              });
            }
          }
          /**
           * Updates the `selected` radio button from the internal _value state.
           * @private
           * @return {?}
           */

        }, {
          key: "updateSelectedRadioFromValue",
          value: function updateSelectedRadioFromValue() {
            var _this25 = this;

            // If the value already matches the selected radio, do nothing.

            /** @type {?} */
            var isAlreadySelected = this._selected !== null && this._selected.value === this._value;

            if (this.radios != null && !isAlreadySelected) {
              this._selected = null;
              this.radios.forEach(
              /**
              * @param {?} radio
              * @return {?}
              */
              function (radio) {
                radio.checked = _this25.value === radio.value;

                if (radio.checked) {
                  _this25._selected = radio;
                }
              });
            }
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._name = value;
            this.updateRadioButtonNames();
          }
          /**
           * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'
           * @return {?}
           */

        }, {
          key: "labelPosition",
          get: function get() {
            return this._labelPosition;
          }
          /**
           * @param {?} v
           * @return {?}
           */
          ,
          set: function set(v) {
            this._labelPosition = v === 'before' ? 'before' : 'after';
            this.markRadiosForCheck();
          }
          /**
           * Value of the radio button.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} newValue
           * @return {?}
           */
          ,
          set: function set(newValue) {
            if (this._value !== newValue) {
              // Set this before proceeding to ensure no circular loop occurs with selection.
              this._value = newValue;
              this.updateSelectedRadioFromValue();
              this.checkSelectedRadioButton();
            }
          }
          /**
           * Whether the radio button is selected.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} selected
           * @return {?}
           */
          ,
          set: function set(selected) {
            this._selected = selected;
            this.value = selected ? selected.value : null;
            this.checkSelectedRadioButton();
          }
          /**
           * Whether the radio group is disabled
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
            this.markRadiosForCheck();
          }
          /**
           * Whether the radio group is required
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
            this.markRadiosForCheck();
          }
        }]);

        return McRadioGroup;
      }(McRadioGroupMixinBase);

      McRadioGroup.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'mc-radio-group',
          exportAs: 'mcRadioGroup',
          host: {
            role: 'radiogroup',
            "class": 'mc-radio-group'
          },
          providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]
        }]
      }];
      /** @nocollapse */

      McRadioGroup.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }];
      };

      McRadioGroup.propDecorators = {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        labelPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        radios: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
          /**
          * @return {?}
          */
          function () {
            return McRadioButton;
          }), {
            descendants: true
          }]
        }]
      };

      if (false) {} // Boilerplate for applying mixins to McRadioButton.

      /**
       * \@docs-private
       * @abstract
       */
      // tslint:disable-next-line:naming-convention


      var McRadioButtonBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McRadioButtonBase(_elementRef) {
        _classCallCheck(this, McRadioButtonBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McRadioButtonMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(McRadioButtonBase));

      var McRadioButton = /*#__PURE__*/function (_McRadioButtonMixinBa) {
        _inherits(McRadioButton, _McRadioButtonMixinBa);

        var _super9 = _createSuper(McRadioButton);

        /**
         * @param {?} radioGroup
         * @param {?} elementRef
         * @param {?} _changeDetector
         * @param {?} focusMonitor
         * @param {?} _radioDispatcher
         */
        function McRadioButton(radioGroup, elementRef, _changeDetector, focusMonitor, _radioDispatcher) {
          var _this26;

          _classCallCheck(this, McRadioButton);

          _this26 = _super9.call(this, elementRef);
          _this26._changeDetector = _changeDetector;
          _this26.focusMonitor = focusMonitor;
          _this26._radioDispatcher = _radioDispatcher;
          /**
           * Event emitted when the checked state of this radio button changes.
           * Change events are only emitted when the value changes due to user interaction with
           * the radio button (the same behavior as `<input type-"radio">`).
           */

          _this26.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this26.isFocused = false;
          /* tslint:disable:member-ordering */

          _this26.uniqueId = "mc-radio-".concat(++nextUniqueId);
          /**
           * Whether this radio is checked.
           */

          _this26._checked = false;
          /**
           * Value assigned to this radio.
           */

          _this26._value = null;
          /**
           * Unregister function for _radioDispatcher
           */
          // tslint:disable-next-line

          _this26.removeUniqueSelectionListener =
          /**
          * @return {?}
          */
          function () {};

          _this26.id = _this26.uniqueId;
          _this26.radioGroup = radioGroup;
          _this26.removeUniqueSelectionListener = _radioDispatcher.listen(
          /**
          * @param {?} id
          * @param {?} name
          * @return {?}
          */
          function (id, name) {
            if (id !== _this26.id && name === _this26.name) {
              _this26.checked = false;
            }
          });
          return _this26;
        }
        /**
         * Whether this radio button is checked.
         * @return {?}
         */


        _createClass(McRadioButton, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            if (this.radioGroup) {
              // If the radio is inside a radio group, determine if it should be checked
              this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group

              this.name = this.radioGroup.name;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this27 = this;

            this.focusMonitor.monitor(this._elementRef, true).subscribe(
            /**
            * @param {?} focusOrigin
            * @return {?}
            */
            function (focusOrigin) {
              if (!focusOrigin && _this27.radioGroup) {
                _this27.radioGroup.touch();
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.focusMonitor.stopMonitoring(this._elementRef);
            this.removeUniqueSelectionListener();
          }
          /**
           * Focuses the radio button.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.inputElement.nativeElement.focus();
          }
          /**
           * Marks the radio button as needing checking for change detection.
           * This method is exposed because the parent radio group will directly
           * update bound properties of the radio button.
           * @return {?}
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            // When group value changes, the button will not be notified. Use `markForCheck` to explicit
            // update radio button's status
            this._changeDetector.markForCheck();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onInputClick",
          value: function onInputClick(event) {
            // We have to stop propagation for click events on the visual hidden input element.
            // By default, when a user clicks on a label element, a generated click event will be
            // dispatched on the associated input element. Since we are using a label element as our
            // root container, the click event on the `radio-button` will be executed twice.
            // The real click event will bubble up, and the generated click event also tries to bubble up.
            // This will lead to multiple click events.
            // Preventing bubbling for the second event will solve that issue.
            event.stopPropagation();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onInputChange",
          value: function onInputChange(event) {
            // We always have to stop propagation on the change event.
            // Otherwise the change event, from the input element, will bubble up and
            // emit its event object to the `change` output.
            event.stopPropagation();
            /** @type {?} */

            var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;
            this.checked = true;
            this.emitChangeEvent();

            if (this.radioGroup) {
              this.radioGroup.controlValueAccessorChangeFn(this.value);
              this.radioGroup.touch();

              if (groupValueChanged) {
                this.radioGroup.emitChangeEvent();
              }
            }
          }
          /**
           * Dispatch change event with current value.
           * @private
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent() {
            this.change.emit(new McRadioChange(this, this._value));
          }
        }, {
          key: "checked",
          get: function get() {
            return this._checked;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newCheckedState = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);

            if (this._checked !== newCheckedState) {
              this._checked = newCheckedState;

              if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {
                this.radioGroup.selected = this;
              } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {
                // When unchecking the selected radio button, update the selected radio
                // property on the group.
                this.radioGroup.selected = null;
              }

              if (newCheckedState) {
                // Notify all radio buttons with the same name to un-check.
                this._radioDispatcher.notify(this.id, this.name);
              }

              this._changeDetector.markForCheck();
            }
          }
          /**
           * The value of this radio button.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (this._value !== value) {
              this._value = value;

              if (this.radioGroup != null) {
                if (!this.checked) {
                  // Update checked when the value changed to match the radio group's value
                  this.checked = this.radioGroup.value === value;
                }

                if (this.checked) {
                  this.radioGroup.selected = this;
                }
              }
            }
          }
          /**
           * Whether the radio button is disabled.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || this.radioGroup != null && this.radioGroup.disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newDisabledState = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);

            if (this._disabled !== newDisabledState) {
              this._disabled = newDisabledState;

              this._changeDetector.markForCheck();
            }
          }
          /**
           * Whether the radio button is required.
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required || this.radioGroup && this.radioGroup.required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
          }
          /**
           * Whether the label should appear after or before the radio button. Defaults to 'after'
           * @return {?}
           */

        }, {
          key: "labelPosition",
          get: function get() {
            return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._labelPosition = value;
          }
          /**
           * ID of the native input element inside `<mc-radio-button>`
           * @return {?}
           */

        }, {
          key: "inputId",
          get: function get() {
            return "".concat(this.id || this.uniqueId, "-input");
          }
        }]);

        return McRadioButton;
      }(McRadioButtonMixinBase);

      McRadioButton.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-radio-button',
          template: "<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n",
          inputs: ['color', 'tabIndex'],
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          exportAs: 'mcRadioButton',
          host: {
            "class": 'mc-radio-button',
            '[attr.id]': 'id',
            '[class.mc-selected]': 'checked',
            '[class.mc-disabled]': 'disabled'
          },
          styles: [".mc-radio-button{display:inline-block}.mc-radio-label{align-items:center;cursor:pointer;display:inline-flex;vertical-align:middle;white-space:nowrap;width:100%}.mc-radio-label-content{display:inline-block;line-height:inherit;order:0;padding-left:26px;padding-right:0;position:relative}.mc-radio-label-content .mc-radio-button__inner-circle,.mc-radio-label-content .mc-radio-button__outer-circle{border-radius:50%;border-style:solid;box-sizing:content-box;content:\"\";position:absolute}.mc-radio-label-content .mc-radio-button__outer-circle{border-width:1px;height:14px;left:0;top:calc(50% - 8px);width:14px}.mc-radio-label-content .mc-radio-button__inner-circle{border-width:4px;display:none;height:6px;left:1px;top:calc(50% - 7px);width:6px}[dir=rtl] .mc-radio-label-content{padding-left:0;padding-right:26px}.mc-radio-input{opacity:0;outline:none;position:absolute}"]
        }]
      }];
      /** @nocollapse */

      McRadioButton.ctorParameters = function () {
        return [{
          type: McRadioGroup,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }, {
          type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__["UniqueSelectionDispatcher"]
        }];
      };

      McRadioButton.propDecorators = {
        checked: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        labelPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        ariaLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-label']
        }],
        ariaLabelledby: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-labelledby']
        }],
        ariaDescribedby: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-describedby']
        }],
        inputElement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['input', {
            "static": false
          }]
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        isFocused: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: radio.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McRadioModule = function McRadioModule() {
        _classCallCheck(this, McRadioModule);
      };

      McRadioModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"]],
          exports: [McRadioGroup, McRadioButton],
          declarations: [McRadioGroup, McRadioButton]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-radio.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-radio.js.map

      /***/
    },

    /***/
    "5F9T":
    /*!**************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-datepicker.js ***!
      \**************************************************************/

    /*! exports provided: MC_DATEPICKER_SCROLL_STRATEGY, MC_DATEPICKER_SCROLL_STRATEGY_FACTORY, MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MC_DATEPICKER_VALIDATORS, MC_DATEPICKER_VALUE_ACCESSOR, McCalendar, McCalendarBody, McCalendarCell, McCalendarHeader, McDatepicker, McDatepickerContent, McDatepickerInput, McDatepickerInputEvent, McDatepickerIntl, McDatepickerModule, McDatepickerToggle, McDatepickerToggleIcon, McMonthView, McMultiYearView, McYearView, mcDatepickerAnimations, yearsPerPage, yearsPerRow */

    /***/
    function F9T(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_SCROLL_STRATEGY", function () {
        return MC_DATEPICKER_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_SCROLL_STRATEGY_FACTORY", function () {
        return MC_DATEPICKER_SCROLL_STRATEGY_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
        return MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_VALIDATORS", function () {
        return MC_DATEPICKER_VALIDATORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_VALUE_ACCESSOR", function () {
        return MC_DATEPICKER_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCalendar", function () {
        return McCalendar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCalendarBody", function () {
        return McCalendarBody;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCalendarCell", function () {
        return McCalendarCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCalendarHeader", function () {
        return McCalendarHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepicker", function () {
        return McDatepicker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerContent", function () {
        return McDatepickerContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerInput", function () {
        return McDatepickerInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerInputEvent", function () {
        return McDatepickerInputEvent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerIntl", function () {
        return McDatepickerIntl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerModule", function () {
        return McDatepickerModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerToggle", function () {
        return McDatepickerToggle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDatepickerToggleIcon", function () {
        return McDatepickerToggleIcon;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McMonthView", function () {
        return McMonthView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McMultiYearView", function () {
        return McMultiYearView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McYearView", function () {
        return McYearView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcDatepickerAnimations", function () {
        return mcDatepickerAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "yearsPerPage", function () {
        return yearsPerPage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "yearsPerRow", function () {
        return yearsPerRow;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/cdk/datetime */
      "5vLs");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! @ptsecurity/mosaic/input */
      "qvb6");
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker-errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @param {?} provider
       * @return {?}
       */


      function createMissingDateImplError(provider) {
        return Error("McDatepicker: No provider found for ".concat(provider, ". You must import one of the existing ") + "modules at your application root or provide a custom implementation or use exists ones.");
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker-intl.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Datepicker data that requires internationalization.
       */


      var McDatepickerIntl = function McDatepickerIntl() {
        _classCallCheck(this, McDatepickerIntl);

        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        /**
         * A label for the calendar popup (used by screen readers).
         */

        this.calendarLabel = 'Calendar';
        /**
         * A label for the button used to open the calendar popup (used by screen readers).
         */

        this.openCalendarLabel = 'Open calendar';
        /**
         * A label for the previous month button (used by screen readers).
         */

        this.prevMonthLabel = 'Previous month';
        /**
         * A label for the next month button (used by screen readers).
         */

        this.nextMonthLabel = 'Next month';
        /**
         * A label for the previous year button (used by screen readers).
         */

        this.prevYearLabel = 'Previous year';
        /**
         * A label for the next year button (used by screen readers).
         */

        this.nextYearLabel = 'Next year';
        /**
         * A label for the previous multi-year button (used by screen readers).
         */

        this.prevMultiYearLabel = 'Previous 20 years';
        /**
         * A label for the next multi-year button (used by screen readers).
         */

        this.nextMultiYearLabel = 'Next 20 years';
        /**
         * A label for the 'switch to month view' button (used by screen readers).
         */

        this.switchToMonthViewLabel = 'Choose date';
        /**
         * A label for the 'switch to year view' button (used by screen readers).
         */

        this.switchToMultiYearViewLabel = 'Choose month and year';
      };

      McDatepickerIntl.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Injectable"],
        args: [{
          providedIn: 'root'
        }]
      }];
      /** @nocollapse */

      McDatepickerIntl.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"])({
        factory: function McDatepickerIntl_Factory() {
          return new McDatepickerIntl();
        },
        token: McDatepickerIntl,
        providedIn: "root"
      });

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: calendar-body.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * An internal class that represents the data corresponding to a single calendar cell.
       * \@docs-private
       */


      var McCalendarCell =
      /**
       * @param {?} value
       * @param {?} displayValue
       * @param {?} ariaLabel
       * @param {?} enabled
       * @param {?=} cssClasses
       */
      function McCalendarCell(value, displayValue, ariaLabel, enabled, cssClasses) {
        _classCallCheck(this, McCalendarCell);

        this.value = value;
        this.displayValue = displayValue;
        this.ariaLabel = ariaLabel;
        this.enabled = enabled;
        this.cssClasses = cssClasses;
      };

      if (false) {}
      /**
       * An internal component used to display calendar data in a table.
       * \@docs-private
       */


      var McCalendarBody = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} ngZone
         */
        function McCalendarBody(elementRef, ngZone) {
          _classCallCheck(this, McCalendarBody);

          this.elementRef = elementRef;
          this.ngZone = ngZone;
          /**
           * The number of columns in the table.
           */

          this.numCols = 7;
          /**
           * The cell number of the active cell in the table.
           */

          this.activeCell = 0;
          /**
           * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
           * maintained even as the table resizes.
           */

          this.cellAspectRatio = 1;
          /**
           * Emits when a new value is selected.
           */

          this.selectedValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        }
        /**
         * @param {?} cell
         * @return {?}
         */


        _createClass(McCalendarBody, [{
          key: "cellClicked",
          value: function cellClicked(cell) {
            if (cell.enabled) {
              this.selectedValueChange.emit(cell.value);
            }
          }
          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            /** @type {?} */
            var columnChanges = changes.numCols; // tslint:disable-next-line:no-this-assignment

            var rows = this.rows,
                numCols = this.numCols;

            if (changes.rows || columnChanges) {
              this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;
            }

            if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {
              this.cellPadding = "".concat(this.cellAspectRatio * 50 / numCols, "%");
            }

            if (columnChanges || !this.cellWidth) {
              this.cellWidth = "".concat(100 / numCols, "%");
            }
          }
          /**
           * @param {?} rowIndex
           * @param {?} colIndex
           * @return {?}
           */

        }, {
          key: "isActiveCell",
          value: function isActiveCell(rowIndex, colIndex) {
            /** @type {?} */
            var cellNumber = rowIndex * this.numCols + colIndex; // Account for the fact that the first row may not have as many cells.

            if (rowIndex) {
              cellNumber -= this.firstRowOffset;
            }

            return cellNumber === this.activeCell;
          }
          /**
           * Focuses the active cell after the microtask queue is empty.
           * @return {?}
           */

        }, {
          key: "focusActiveCell",
          value: function focusActiveCell() {
            var _this28 = this;

            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              _this28.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1)).subscribe(
              /**
              * @return {?}
              */
              function () {
                /** @type {?} */
                var activeCell = _this28.elementRef.nativeElement.querySelector('.mc-calendar__body_active');

                if (activeCell) {
                  activeCell.focus();
                }
              });
            });
          }
        }]);

        return McCalendarBody;
      }();

      McCalendarBody.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: '[mc-calendar-body]',
          exportAs: 'mcCalendarBody',
          template: "<!--\n  If there's not enough space in the first row, create a separate label row. We mark this row as\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\n-->\n<tr *ngIf=\"firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\n    <td class=\"mc-calendar__body-label\"\n        [attr.colspan]=\"numCols\"\n        [style.paddingTop]=\"cellPadding\"\n        [style.paddingBottom]=\"cellPadding\">\n        {{label}}\n    </td>\n</tr>\n\n<!-- Create the first row separately so we can include a special spacer cell. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n    <!--\n      We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n      The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n      percentage of the width (a variant of the trick described here:\n      https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n    -->\n    <td *ngIf=\"rowIndex === 0 && firstRowOffset\"\n        aria-hidden=\"true\"\n        class=\"mc-calendar__body-label\"\n        [attr.colspan]=\"firstRowOffset\"\n        [style.paddingTop]=\"cellPadding\"\n        [style.paddingBottom]=\"cellPadding\">\n        {{firstRowOffset >= labelMinRequiredCells ? label : ''}}\n    </td>\n    <td *ngFor=\"let item of row; let colIndex = index\"\n        role=\"gridcell\"\n        class=\"mc-calendar__body-cell\"\n        [ngClass]=\"item.cssClasses\"\n        [tabindex]=\"isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n        [class.mc-calendar__body_disabled]=\"!item.enabled\"\n        [class.mc-calendar__body_active]=\"isActiveCell(rowIndex, colIndex)\"\n        [attr.aria-label]=\"item.ariaLabel\"\n        [attr.aria-disabled]=\"!item.enabled || null\"\n        [attr.aria-selected]=\"selectedValue === item.value\"\n        (click)=\"cellClicked(item)\"\n        [style.width]=\"cellWidth\"\n        [style.paddingTop]=\"cellPadding\"\n        [style.paddingBottom]=\"cellPadding\">\n        <div class=\"mc-calendar__body-cell-content\"\n             [class.mc-selected]=\"selectedValue === item.value\"\n             [class.mc-calendar__body-today]=\"todayValue === item.value\">\n            {{item.displayValue}}\n        </div>\n    </td>\n</tr>\n",
          host: {
            "class": 'mc-calendar__body',
            role: 'grid',
            'aria-readonly': 'true'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-calendar__body{min-width:224px}.mc-calendar__body-label{height:0;line-height:0;padding-left:4.71429%;padding-right:4.71429%;text-align:left}.mc-calendar__body-cell{cursor:pointer;height:0;line-height:0;outline:none;position:relative;text-align:center}.mc-calendar__body_disabled{cursor:default}.mc-calendar__body-cell-content{align-items:center;border-style:solid;border-width:1px;box-sizing:border-box;display:flex;height:90%;justify-content:center;left:5%;line-height:1;padding:8px;position:absolute;top:5%;width:90%}.cdk-high-contrast-active .mc-calendar__body-cell-content,.cdk-high-contrast-active :host .mc-calendar__body-cell-content{border:none}mc-month-view .mc-calendar__body-cell-content{justify-content:flex-end}mc-multi-year-view .mc-calendar__body-cell-content,mc-year-view .mc-calendar__body-cell-content{justify-content:center}.cdk-high-contrast-active .mc-datepicker__popup:not(:empty),.cdk-high-contrast-active .mc-selected{outline:1px solid}.cdk-high-contrast-active .mc-calendar__body-today{outline:1px dotted}.cdk-high-contrast-active :host .mc-datepicker__popup:not(:empty),.cdk-high-contrast-active :host .mc-selected{outline:1px solid}.cdk-high-contrast-active :host .mc-calendar__body-today{outline:1px dotted}[dir=rtl] .mc-calendar__body-label{text-align:right}"]
        }]
      }];
      /** @nocollapse */

      McCalendarBody.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"]
        }];
      };

      McCalendarBody.propDecorators = {
        label: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        rows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        todayValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selectedValue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        labelMinRequiredCells: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        numCols: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        activeCell: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        cellAspectRatio: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selectedValueChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: month-view.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var DAYS_PER_WEEK = 7;
      /**
       * An internal component used to display a single month in the datepicker.
       * \@docs-private
       * @template D
       */

      var McMonthView = /*#__PURE__*/function () {
        /**
         * @param {?} changeDetectorRef
         * @param {?} dateFormats
         * @param {?} dateAdapter
         * @param {?=} dir
         */
        function McMonthView(changeDetectorRef, dateFormats, dateAdapter, dir) {
          _classCallCheck(this, McMonthView);

          this.changeDetectorRef = changeDetectorRef;
          this.dateFormats = dateFormats;
          this.dateAdapter = dateAdapter;
          this.dir = dir;
          /**
           * Emits when a new date is selected.
           */

          this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when any date is selected.
           */

          this.userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when any date is activated.
           */

          this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();

          if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
          }

          if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
          }
          /** @type {?} */


          var firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();
          /** @type {?} */

          var narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');
          /** @type {?} */

          var longWeekdays = this.dateAdapter.getDayOfWeekNames('long'); // Rotate the labels for days of the week based on the configured first day of the week.

          /** @type {?} */

          var weekdays = longWeekdays.map(
          /**
          * @param {?} long
          * @param {?} i
          * @return {?}
          */
          function (_long, i) {
            return {
              "long": _long,
              narrow: narrowWeekdays[i]
            };
          });
          this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
          this._activeDate = this.dateAdapter.today();
        }
        /**
         * The date to display in this month view (everything other than the month and year is ignored).
         * @return {?}
         */


        _createClass(McMonthView, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.init();
          }
          /**
           * Handles when a new date is selected.
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "dateSelected",
          value: function dateSelected(date) {
            if (this.selectedDate !== date) {
              /** @type {?} */
              var selectedYear = this.dateAdapter.getYear(this.activeDate);
              /** @type {?} */

              var selectedMonth = this.dateAdapter.getMonth(this.activeDate);
              /** @type {?} */

              var selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);
              this.selectedChange.emit(selectedDate);
            }

            this.userSelection.emit();
          }
          /**
           * Handles keydown events on the calendar body when calendar is in month view.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleCalendarBodyKeydown",
          value: function handleCalendarBodyKeydown(event) {
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.

            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */

            var isRtl = this.isRtl(); // tslint:disable-next-line:deprecation

            switch (event.keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["HOME"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 1 - this.dateAdapter.getDate(this._activeDate));
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["END"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, this.dateAdapter.getNumDaysInMonth(this._activeDate) - this.dateAdapter.getDate(this._activeDate));
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["PAGE_UP"]:
                this.activeDate = event.altKey ? this.dateAdapter.addCalendarYears(this._activeDate, -1) : this.dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["PAGE_DOWN"]:
                this.activeDate = event.altKey ? this.dateAdapter.addCalendarYears(this._activeDate, 1) : this.dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                  this.dateSelected(this.dateAdapter.getDate(this._activeDate));
                  this.userSelection.emit(); // Prevent unexpected default actions such as form submission.

                  event.preventDefault();
                }

                return;

              default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
            }

            if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
              this.activeDateChange.emit(this.activeDate);
            }

            this.focusActiveCell(); // Prevent unexpected default actions such as form submission.

            event.preventDefault();
          }
          /**
           * Initializes this month view.
           * @return {?}
           */

        }, {
          key: "init",
          value: function init() {
            this.selectedDate = this.getDateInCurrentMonth(this.selected);
            this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());
            this.monthLabel = this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];
            this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);
            /** @type {?} */

            var firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), 1);
            this.firstWeekOffset = (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) - this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
            this.createWeekCells();
            this.changeDetectorRef.markForCheck();
          }
          /**
           * Focuses the active cell after the microtask queue is empty.
           * @return {?}
           */

        }, {
          key: "focusActiveCell",
          value: function focusActiveCell() {
            this.mcCalendarBody.focusActiveCell();
          }
          /**
           * Creates McCalendarCells for the dates in this month.
           * @private
           * @return {?}
           */

        }, {
          key: "createWeekCells",
          value: function createWeekCells() {
            /** @type {?} */
            var daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);
            /** @type {?} */

            var dateNames = this.dateAdapter.getDateNames();
            this.weeks = [[]];

            for (var i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {
              if (cell === DAYS_PER_WEEK) {
                this.weeks.push([]);
                cell = 0;
              }
              /** @type {?} */


              var date = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), i + 1);
              /** @type {?} */

              var enabled = this.shouldEnableDate(date);
              /** @type {?} */

              var ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
              /** @type {?} */

              var cellClasses = this.dateClass ? this.dateClass(date) : undefined;
              this.weeks[this.weeks.length - 1].push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));
            }
          }
          /**
           * Date filter for the month
           * @private
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "shouldEnableDate",
          value: function shouldEnableDate(date) {
            return !!date && (!this.dateFilter || this.dateFilter(date)) && (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);
          }
          /**
           * Gets the date in this month that the given Date falls on.
           * Returns null if the given Date is in another month.
           * @private
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getDateInCurrentMonth",
          value: function getDateInCurrentMonth(date) {
            return date && this.hasSameMonthAndYear(date, this.activeDate) ? this.dateAdapter.getDate(date) : null;
          }
          /**
           * Checks whether the 2 dates are non-null and fall within the same month of the same year.
           * @private
           * @param {?} d1
           * @param {?} d2
           * @return {?}
           */

        }, {
          key: "hasSameMonthAndYear",
          value: function hasSameMonthAndYear(d1, d2) {
            return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) && this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));
          }
          /**
           * @private
           * @param {?} obj The object to check.
           * @return {?} The given object if it is both a date instance and valid, otherwise null.
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
          /**
           * Determines whether the user has the RTL layout direction.
           * @private
           * @return {?}
           */

        }, {
          key: "isRtl",
          value: function isRtl() {
            return this.dir && this.dir.value === 'rtl';
          }
        }, {
          key: "activeDate",
          get: function get() {
            return this._activeDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */

            var validDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
            this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);

            if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
              this.init();
            }
          }
          /**
           * The currently selected date.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.selectedDate = this.getDateInCurrentMonth(this._selected);
          }
          /**
           * The minimum selectable date.
           * @return {?}
           */

        }, {
          key: "minDate",
          get: function get() {
            return this._minDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The maximum selectable date.
           * @return {?}
           */

        }, {
          key: "maxDate",
          get: function get() {
            return this._maxDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
        }]);

        return McMonthView;
      }();

      McMonthView.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-month-view',
          exportAs: 'mcMonthView',
          template: "<table class=\"mc-calendar__table\">\n    <thead class=\"mc-calendar__table-header\">\n    <tr>\n        <th *ngFor=\"let day of weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th>\n    </tr>\n    <tr>\n        <th class=\"mc-calendar__table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th>\n    </tr>\n    </thead>\n    <tbody mc-calendar-body\n           [label]=\"monthLabel\"\n           [rows]=\"weeks\"\n           [todayValue]=\"todayDate\"\n           [selectedValue]=\"selectedDate\"\n           [labelMinRequiredCells]=\"3\"\n           [activeCell]=\"dateAdapter.getDate(activeDate) - 1\"\n           (selectedValueChange)=\"dateSelected($event)\"\n           (keydown)=\"handleCalendarBodyKeydown($event)\">\n    </tbody>\n</table>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      McMonthView.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["MC_DATE_FORMATS"]]
          }]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }];
      };

      McMonthView.propDecorators = {
        activeDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        minDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        maxDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateFilter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selectedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        userSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        activeDateChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        mcCalendarBody: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McCalendarBody, {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: multi-year-view.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var yearsPerPage = 24;
      /** @type {?} */

      var yearsPerRow = 4;
      /**
       * An internal component used to display a year selector in the datepicker.
       * \@docs-private
       * @template D
       */

      var McMultiYearView = /*#__PURE__*/function () {
        /**
         * @param {?} changeDetectorRef
         * @param {?} dateAdapter
         * @param {?=} dir
         */
        function McMultiYearView(changeDetectorRef, dateAdapter, dir) {
          _classCallCheck(this, McMultiYearView);

          this.changeDetectorRef = changeDetectorRef;
          this.dateAdapter = dateAdapter;
          this.dir = dir;
          /**
           * Emits when a new year is selected.
           */

          this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits the selected year. This doesn't imply a change on the selected date
           */

          this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when any date is activated.
           */

          this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();

          if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
          }

          this._activeDate = this.dateAdapter.today();
        }
        /**
         * The date to display in this multi-year view (everything other than the year is ignored).
         * @return {?}
         */


        _createClass(McMultiYearView, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.init();
          }
          /**
           * Initializes this multi-year view.
           * @return {?}
           */

        }, {
          key: "init",
          value: function init() {
            var _this29 = this;

            this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());
            /** @type {?} */

            var activeYear = this.dateAdapter.getYear(this._activeDate);
            /** @type {?} */

            var activeOffset = activeYear % yearsPerPage;
            this.years = [];

            for (var i = 0, row = []; i < yearsPerPage; i++) {
              row.push(activeYear - activeOffset + i);

              if (row.length === yearsPerRow) {
                this.years.push(row.map(
                /**
                * @param {?} year
                * @return {?}
                */
                function (year) {
                  return _this29.createCellForYear(year);
                }));
                row = [];
              }
            }

            this.changeDetectorRef.markForCheck();
          }
          /**
           * Handles when a new year is selected.
           * @param {?} year
           * @return {?}
           */

        }, {
          key: "onYearSelected",
          value: function onYearSelected(year) {
            this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));
            /** @type {?} */

            var month = this.dateAdapter.getMonth(this.activeDate);
            /** @type {?} */

            var daysInMonth = this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));
            this.selectedChange.emit(this.dateAdapter.createDate(year, month, Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));
          }
          /**
           * Handles keydown events on the calendar body when calendar is in multi-year view.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleCalendarBodyKeydown",
          value: function handleCalendarBodyKeydown(event) {
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.

            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */

            var isRtl = this.isRtl(); // tslint:disable-next-line:deprecation

            switch (event.keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["HOME"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["END"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["PAGE_UP"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["PAGE_DOWN"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]:
                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));
                break;

              default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
            }

            if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
              this.activeDateChange.emit(this.activeDate);
            }

            this.focusActiveCell(); // Prevent unexpected default actions such as form submission.

            event.preventDefault();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getActiveCell",
          value: function getActiveCell() {
            return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;
          }
          /**
           * Focuses the active cell after the microtask queue is empty.
           * @return {?}
           */

        }, {
          key: "focusActiveCell",
          value: function focusActiveCell() {
            this.mcCalendarBody.focusActiveCell();
          }
          /**
           * Creates an McCalendarCell for the given year.
           * @private
           * @param {?} year
           * @return {?}
           */

        }, {
          key: "createCellForYear",
          value: function createCellForYear(year) {
            /** @type {?} */
            var yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));
            return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));
          }
          /**
           * Whether the given year is enabled.
           * @private
           * @param {?} year
           * @return {?}
           */

        }, {
          key: "shouldEnableYear",
          value: function shouldEnableYear(year) {
            // disable if the year is greater than maxDate lower than minDate
            if (year === undefined || year === null || this.maxDate && year > this.dateAdapter.getYear(this.maxDate) || this.minDate && year < this.dateAdapter.getYear(this.minDate)) {
              return false;
            } // enable if it reaches here and there's no filter defined


            if (!this.dateFilter) {
              return true;
            }
            /** @type {?} */


            var firstOfYear = this.dateAdapter.createDate(year, 0, 1); // If any date in the year is enabled count the year as enabled.

            for (var date = firstOfYear; this.dateAdapter.getYear(date) === year; date = this.dateAdapter.addCalendarDays(date, 1)) {
              if (this.dateFilter(date)) {
                return true;
              }
            }

            return false;
          }
          /**
           * @private
           * @param {?} obj The object to check.
           * @return {?} The given object if it is both a date instance and valid, otherwise null.
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
          /**
           * Determines whether the user has the RTL layout direction.
           * @private
           * @return {?}
           */

        }, {
          key: "isRtl",
          value: function isRtl() {
            return this.dir && this.dir.value === 'rtl';
          }
        }, {
          key: "activeDate",
          get: function get() {
            return this._activeDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */

            var validDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
            this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);

            if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !== Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {
              this.init();
            }
          }
          /**
           * The currently selected date.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);
          }
          /**
           * The minimum selectable date.
           * @return {?}
           */

        }, {
          key: "minDate",
          get: function get() {
            return this._minDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The maximum selectable date.
           * @return {?}
           */

        }, {
          key: "maxDate",
          get: function get() {
            return this._maxDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
        }]);

        return McMultiYearView;
      }();

      McMultiYearView.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-multi-year-view',
          exportAs: 'mcMultiYearView',
          template: "<table class=\"mc-calendar__table\">\n    <thead class=\"mc-calendar__table-header\">\n    <tr>\n        <th class=\"mc-calendar__table-header-divider\" colspan=\"4\"></th>\n    </tr>\n    </thead>\n    <tbody mc-calendar-body\n           [rows]=\"years\"\n           [todayValue]=\"todayYear\"\n           [selectedValue]=\"selectedYear\"\n           [numCols]=\"4\"\n           [cellAspectRatio]=\"4 / 7\"\n           [activeCell]=\"getActiveCell()\"\n           (selectedValueChange)=\"onYearSelected($event)\"\n           (keydown)=\"handleCalendarBodyKeydown($event)\">\n    </tbody>\n</table>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      McMultiYearView.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }];
      };

      McMultiYearView.propDecorators = {
        activeDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        minDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        maxDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateFilter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selectedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        yearSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        activeDateChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        mcCalendarBody: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McCalendarBody, {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: year-view.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * An internal component used to display a single year in the datepicker.
       * \@docs-private
       * @template D
       */


      var McYearView = /*#__PURE__*/function () {
        /**
         * @param {?} changeDetectorRef
         * @param {?} dateFormats
         * @param {?} dateAdapter
         * @param {?=} dir
         */
        function McYearView(changeDetectorRef, dateFormats, dateAdapter, dir) {
          _classCallCheck(this, McYearView);

          this.changeDetectorRef = changeDetectorRef;
          this.dateFormats = dateFormats;
          this.dateAdapter = dateAdapter;
          this.dir = dir;
          /**
           * Emits when a new month is selected.
           */

          this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits the selected month. This doesn't imply a change on the selected date
           */

          this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when any date is activated.
           */

          this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();

          if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
          }

          if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
          }

          this._activeDate = this.dateAdapter.today();
        }
        /**
         * The date to display in this year view (everything other than the year is ignored).
         * @return {?}
         */


        _createClass(McYearView, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.init();
          }
          /**
           * Handles when a new month is selected.
           * @param {?} month
           * @return {?}
           */

        }, {
          key: "onMonthSelected",
          value: function onMonthSelected(month) {
            /** @type {?} */
            var normalizedDate = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);
            this.monthSelected.emit(normalizedDate);
            /** @type {?} */

            var daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);
            this.selectedChange.emit(this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));
          }
          /**
           * Handles keydown events on the calendar body when calendar is in year view.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleCalendarBodyKeydown",
          value: function handleCalendarBodyKeydown(event) {
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.
            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
            // disabled ones from being selected. This may not be ideal, we should look into whether
            // navigation should skip over disabled dates, and if so, how to implement that efficiently.

            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */

            var isRtl = this.isRtl();
            /** @type {?} */

            var VERTICAL_SHIFT = 4;
            /** @type {?} */

            var PAGE_SHIFT = 10;
            /** @type {?} */

            var MAX_MONTH_INDEX = 11; // tslint:disable-next-line:deprecation

            switch (event.keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["HOME"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -this.dateAdapter.getMonth(this._activeDate));
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["END"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["PAGE_UP"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["PAGE_DOWN"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]:
                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));
                break;

              default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
            }

            if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
              this.activeDateChange.emit(this.activeDate);
            }

            this.focusActiveCell(); // Prevent unexpected default actions such as form submission.

            event.preventDefault();
          }
          /**
           * Initializes this year view.
           * @return {?}
           */

        }, {
          key: "init",
          value: function init() {
            var _this30 = this;

            this.selectedMonth = this.getMonthInCurrentYear(this.selected);
            this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());
            this.yearLabel = this.dateAdapter.getYearName(this.activeDate);
            /** @type {?} */

            var monthNames = this.dateAdapter.getMonthNames('short'); // First row of months only contains 5 elements so we can fit the year label on the same row.
            // tslint:disable-next-line:no-magic-numbers

            this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(
            /**
            * @param {?} row
            * @return {?}
            */
            function (row) {
              return row.map(
              /**
              * @param {?} month
              * @return {?}
              */
              function (month) {
                return _this30.createCellForMonth(month, monthNames[month]);
              });
            });
            this.changeDetectorRef.markForCheck();
          }
          /**
           * Focuses the active cell after the microtask queue is empty.
           * @return {?}
           */

        }, {
          key: "focusActiveCell",
          value: function focusActiveCell() {
            this.mcCalendarBody.focusActiveCell();
          }
          /**
           * Gets the month in this year that the given Date falls on.
           * Returns null if the given Date is in another year.
           * @private
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getMonthInCurrentYear",
          value: function getMonthInCurrentYear(date) {
            return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ? this.dateAdapter.getMonth(date) : null;
          }
          /**
           * Creates an McCalendarCell for the given month.
           * @private
           * @param {?} month
           * @param {?} monthName
           * @return {?}
           */

        }, {
          key: "createCellForMonth",
          value: function createCellForMonth(month, monthName) {
            /** @type {?} */
            var ariaLabel = this.dateAdapter.format(this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1), this.dateFormats.display.monthYearA11yLabel);
            /** @type {?} */

            var newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);
            return new McCalendarCell(month, newMonthName, ariaLabel, this.shouldEnableMonth(month));
          }
          /**
           * Whether the given month is enabled.
           * @private
           * @param {?} month
           * @return {?}
           */

        }, {
          key: "shouldEnableMonth",
          value: function shouldEnableMonth(month) {
            /** @type {?} */
            var activeYear = this.dateAdapter.getYear(this.activeDate);

            if (month === undefined || month === null || this.isYearAndMonthAfterMaxDate(activeYear, month) || this.isYearAndMonthBeforeMinDate(activeYear, month)) {
              return false;
            }

            if (!this.dateFilter) {
              return true;
            }
            /** @type {?} */


            var firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1); // If any date in the month is enabled count the month as enabled.

            for (var date = firstOfMonth; this.dateAdapter.getMonth(date) === month; date = this.dateAdapter.addCalendarDays(date, 1)) {
              if (this.dateFilter(date)) {
                return true;
              }
            }

            return false;
          }
          /**
           * Tests whether the combination month/year is after this.maxDate, considering
           * just the month and year of this.maxDate
           * @private
           * @param {?} year
           * @param {?} month
           * @return {?}
           */

        }, {
          key: "isYearAndMonthAfterMaxDate",
          value: function isYearAndMonthAfterMaxDate(year, month) {
            if (this.maxDate) {
              /** @type {?} */
              var maxYear = this.dateAdapter.getYear(this.maxDate);
              /** @type {?} */

              var maxMonth = this.dateAdapter.getMonth(this.maxDate);
              return year > maxYear || year === maxYear && month > maxMonth;
            }

            return false;
          }
          /**
           * Tests whether the combination month/year is before this.minDate, considering
           * just the month and year of this.minDate
           * @private
           * @param {?} year
           * @param {?} month
           * @return {?}
           */

        }, {
          key: "isYearAndMonthBeforeMinDate",
          value: function isYearAndMonthBeforeMinDate(year, month) {
            if (this.minDate) {
              /** @type {?} */
              var minYear = this.dateAdapter.getYear(this.minDate);
              /** @type {?} */

              var minMonth = this.dateAdapter.getMonth(this.minDate);
              return year < minYear || year === minYear && month < minMonth;
            }

            return false;
          }
          /**
           * @private
           * @param {?} obj The object to check.
           * @return {?} The given object if it is both a date instance and valid, otherwise null.
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
          /**
           * Determines whether the user has the RTL layout direction.
           * @private
           * @return {?}
           */

        }, {
          key: "isRtl",
          value: function isRtl() {
            return this.dir && this.dir.value === 'rtl';
          }
        }, {
          key: "activeDate",
          get: function get() {
            return this._activeDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var oldActiveDate = this._activeDate;
            /** @type {?} */

            var validDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
            this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);

            if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {
              this.init();
            }
          }
          /**
           * The currently selected date.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.selectedMonth = this.getMonthInCurrentYear(this._selected);
          }
          /**
           * The minimum selectable date.
           * @return {?}
           */

        }, {
          key: "minDate",
          get: function get() {
            return this._minDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The maximum selectable date.
           * @return {?}
           */

        }, {
          key: "maxDate",
          get: function get() {
            return this._maxDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
        }]);

        return McYearView;
      }();

      McYearView.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-year-view',
          exportAs: 'mcYearView',
          template: "<table class=\"mc-calendar__table\">\n    <thead class=\"mc-calendar__table-header\">\n    <tr>\n        <th class=\"mc-calendar__table-header-divider\" colspan=\"4\"></th>\n    </tr>\n    </thead>\n    <tbody mc-calendar-body\n           [label]=\"yearLabel\"\n           [rows]=\"months\"\n           [todayValue]=\"todayMonth\"\n           [selectedValue]=\"selectedMonth\"\n           [labelMinRequiredCells]=\"2\"\n           [numCols]=\"4\"\n           [cellAspectRatio]=\"4 / 7\"\n           [activeCell]=\"dateAdapter.getMonth(activeDate)\"\n           (selectedValueChange)=\"onMonthSelected($event)\"\n           (keydown)=\"handleCalendarBodyKeydown($event)\">\n    </tbody>\n</table>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      McYearView.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["MC_DATE_FORMATS"]]
          }]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }];
      };

      McYearView.propDecorators = {
        activeDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        minDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        maxDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateFilter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selectedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        monthSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        activeDateChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        mcCalendarBody: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McCalendarBody, {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: calendar.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Default header for McCalendar
       * @template D
       */


      var McCalendarHeader = /*#__PURE__*/function () {
        /**
         * @param {?} intl
         * @param {?} calendar
         * @param {?} dateAdapter
         * @param {?} dateFormats
         * @param {?} changeDetectorRef
         */
        function McCalendarHeader(intl, calendar, dateAdapter, dateFormats, changeDetectorRef) {
          _classCallCheck(this, McCalendarHeader);

          this.intl = intl;
          this.calendar = calendar;
          this.dateAdapter = dateAdapter;
          this.dateFormats = dateFormats;
          this.calendar.stateChanges.subscribe(
          /**
          * @return {?}
          */
          function () {
            return changeDetectorRef.markForCheck();
          });
        }
        /**
         * The label for the current calendar view.
         * @return {?}
         */


        _createClass(McCalendarHeader, [{
          key: "currentPeriodClicked",

          /**
           * Handles user clicks on the period label.
           * @return {?}
           */
          value: function currentPeriodClicked() {
            this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';
          }
          /**
           * Handles user clicks on the previous button.
           * @return {?}
           */

        }, {
          key: "previousClicked",
          value: function previousClicked() {
            this.calendar.activeDate = this.calendar.currentView === 'month' ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage);
          }
          /**
           * Handles user clicks on the next button.
           * @return {?}
           */

        }, {
          key: "nextClicked",
          value: function nextClicked() {
            this.calendar.activeDate = this.calendar.currentView === 'month' ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? 1 : yearsPerPage);
          }
          /**
           * Whether the previous period button is enabled.
           * @return {?}
           */

        }, {
          key: "previousEnabled",
          value: function previousEnabled() {
            if (!this.calendar.minDate) {
              return true;
            }

            return !this.calendar.minDate || !this.isSameView(this.calendar.activeDate, this.calendar.minDate);
          }
          /**
           * Whether the next period button is enabled.
           * @return {?}
           */

        }, {
          key: "nextEnabled",
          value: function nextEnabled() {
            return !this.calendar.maxDate || !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);
          }
          /**
           * Whether the two dates represent the same view in the current view mode (month or year).
           * @private
           * @param {?} date1
           * @param {?} date2
           * @return {?}
           */

        }, {
          key: "isSameView",
          value: function isSameView(date1, date2) {
            if (this.calendar.currentView === 'month') {
              return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) && this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);
            }

            if (this.calendar.currentView === 'year') {
              return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);
            } // Otherwise we are in 'multi-year' view.


            return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) === Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);
          }
        }, {
          key: "periodButtonText",
          get: function get() {
            if (this.calendar.currentView === 'month') {
              /** @type {?} */
              var label = this.dateAdapter.format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);
              return label[0].toLocaleUpperCase() + label.substr(1);
            }

            if (this.calendar.currentView === 'year') {
              return this.dateAdapter.getYearName(this.calendar.activeDate);
            }
            /** @type {?} */


            var activeYear = this.dateAdapter.getYear(this.calendar.activeDate);
            /** @type {?} */

            var firstYearInView = this.dateAdapter.getYearName( // tslint:disable-next-line:no-magic-numbers
            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));
            /** @type {?} */

            var lastYearInView = this.dateAdapter.getYearName( // tslint:disable-next-line:no-magic-numbers
            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));
            return "".concat(firstYearInView, " \u2013 ").concat(lastYearInView);
          }
          /**
           * @return {?}
           */

        }, {
          key: "periodButtonLabel",
          get: function get() {
            return this.calendar.currentView === 'month' ? this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;
          }
          /**
           * The label for the previous button.
           * @return {?}
           */

        }, {
          key: "prevButtonLabel",
          get: function get() {
            return {
              month: this.intl.prevMonthLabel,
              year: this.intl.prevYearLabel,
              'multi-year': this.intl.prevMultiYearLabel
            }[this.calendar.currentView];
          }
          /**
           * The label for the next button.
           * @return {?}
           */

        }, {
          key: "nextButtonLabel",
          get: function get() {
            return {
              month: this.intl.nextMonthLabel,
              year: this.intl.nextYearLabel,
              'multi-year': this.intl.nextMultiYearLabel
            }[this.calendar.currentView];
          }
        }]);

        return McCalendarHeader;
      }();

      McCalendarHeader.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-calendar-header',
          template: "<div class=\"mc-calendar__header\">\n    <div class=\"mc-calendar__controls\">\n        <button mc-button type=\"button\" class=\"mc-calendar__period-button\"\n                (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\">\n            {{periodButtonText}}\n            <i class=\"mc mc-icon\"\n               [class.mc-angle-up-M_16]=\"calendar.currentView !== 'month'\"\n               [class.mc-angle-down-M_16]=\"calendar.currentView === 'month'\"></i>\n        </button>\n\n        <div class=\"mc-calendar-spacer\"></div>\n\n        <ng-content></ng-content>\n\n        <button mc-button type=\"button\" class=\"mc-calendar__previous-button\"\n                [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\"\n                [attr.aria-label]=\"prevButtonLabel\">\n            <i mc-icon=\"mc-angle-left-L_16\"></i>\n        </button>\n\n        <button mc-button type=\"button\" class=\"mc-calendar__next-button\"\n                [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\"\n                [attr.aria-label]=\"nextButtonLabel\">\n            <i mc-icon=\"mc-angle-right-L_16\"></i>\n        </button>\n    </div>\n</div>\n",
          exportAs: 'mcCalendarHeader',
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      McCalendarHeader.ctorParameters = function () {
        return [{
          type: McDatepickerIntl
        }, {
          type: McCalendar,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return McCalendar;
            })]
          }]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["MC_DATE_FORMATS"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }];
      };

      if (false) {}
      /**
       * A calendar that is used as part of the datepicker.
       * \@docs-private
       * @template D
       */


      var McCalendar = /*#__PURE__*/function () {
        /**
         * @param {?} intl
         * @param {?} dateAdapter
         * @param {?} dateFormats
         * @param {?} changeDetectorRef
         */
        function McCalendar(intl, dateAdapter, dateFormats, changeDetectorRef) {
          var _this31 = this;

          _classCallCheck(this, McCalendar);

          this.dateAdapter = dateAdapter;
          this.dateFormats = dateFormats;
          this.changeDetectorRef = changeDetectorRef;
          /**
           * Whether the calendar should be started in month or year view.
           */

          this.startView = 'month';
          /**
           * Emits when the currently selected date changes.
           */

          this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits the year chosen in multiyear view.
           * This doesn't imply a change on the selected date.
           */

          this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits the month chosen in year view.
           * This doesn't imply a change on the selected date.
           */

          this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when any date is selected.
           */

          this.userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits whenever there is a state change that the header may need to respond to.
           */

          this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          /**
           * Used for scheduling that focus should be moved to the active cell on the next tick.
           * We need to schedule it, rather than do it immediately, because we have to wait
           * for Angular to re-evaluate the view children.
           */

          this.moveFocusOnNextTick = false;

          if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
          }

          if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
          }

          this.intlChanges = intl.changes.subscribe(
          /**
          * @return {?}
          */
          function () {
            changeDetectorRef.markForCheck();

            _this31.stateChanges.next();
          });
        }
        /**
         * A date representing the period (month or year) to start the calendar in.
         * @return {?}
         */


        _createClass(McCalendar, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.calendarHeaderPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["ComponentPortal"](this.headerComponent || McCalendarHeader);
            this.activeDate = this.startAt || this.dateAdapter.today(); // Assign to the private property since we don't want to move focus on init.

            this._currentView = this.startView;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewChecked",
          value: function ngAfterViewChecked() {
            if (this.moveFocusOnNextTick) {
              this.moveFocusOnNextTick = false;
              this.focusActiveCell();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.intlChanges.unsubscribe();
            this.stateChanges.complete();
          }
          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            /** @type {?} */
            var change = changes.minDate || changes.maxDate || changes.dateFilter;

            if (change && !change.firstChange) {
              /** @type {?} */
              var view = this.getCurrentViewComponent();

              if (view) {
                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                // passed down to the view via data bindings which won't be up-to-date when we call `init`.
                this.changeDetectorRef.detectChanges();
                view.init();
              }
            }

            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "focusActiveCell",
          value: function focusActiveCell() {
            this.getCurrentViewComponent().focusActiveCell();
          }
          /**
           * Updates today's date after an update of the active date
           * @return {?}
           */

        }, {
          key: "updateTodaysDate",
          value: function updateTodaysDate() {
            /** @type {?} */
            var view = this.currentView === 'month' ? this.monthView : this.currentView === 'year' ? this.yearView : this.multiYearView;
            view.ngAfterContentInit();
          }
          /**
           * Handles date selection in the month view.
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "dateSelected",
          value: function dateSelected(date) {
            if (!this.dateAdapter.sameDate(date, this.selected)) {
              this.selectedChange.emit(date);
            }
          }
          /**
           * Handles year selection in the multiyear view.
           * @param {?} normalizedYear
           * @return {?}
           */

        }, {
          key: "yearSelectedInMultiYearView",
          value: function yearSelectedInMultiYearView(normalizedYear) {
            this.yearSelected.emit(normalizedYear);
          }
          /**
           * Handles month selection in the year view.
           * @param {?} normalizedMonth
           * @return {?}
           */

        }, {
          key: "monthSelectedInYearView",
          value: function monthSelectedInYearView(normalizedMonth) {
            this.monthSelected.emit(normalizedMonth);
          }
          /**
           * @return {?}
           */

        }, {
          key: "userSelected",
          value: function userSelected() {
            this.userSelection.emit();
          }
          /**
           * Handles year/month selection in the multi-year/year views.
           * @param {?} date
           * @param {?} view
           * @return {?}
           */

        }, {
          key: "goToDateInView",
          value: function goToDateInView(date, view) {
            this.activeDate = date;
            this.currentView = view;
          }
          /**
           * @private
           * @param {?} obj The object to check.
           * @return {?} The given object if it is both a date instance and valid, otherwise null.
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
          /**
           * Returns the component instance that corresponds to the current calendar view.
           * @private
           * @return {?}
           */

        }, {
          key: "getCurrentViewComponent",
          value: function getCurrentViewComponent() {
            return this.monthView || this.yearView || this.multiYearView;
          }
        }, {
          key: "startAt",
          get: function get() {
            return this._startAt;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The currently selected date.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The minimum selectable date.
           * @return {?}
           */

        }, {
          key: "minDate",
          get: function get() {
            return this._minDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The maximum selectable date.
           * @return {?}
           */

        }, {
          key: "maxDate",
          get: function get() {
            return this._maxDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * The current active date. This determines which time period is shown and which date is
           * highlighted when using keyboard navigation.
           * @return {?}
           */

        }, {
          key: "activeDate",
          get: function get() {
            return this.clampedActiveDate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);
            this.stateChanges.next();
          }
          /**
           * Whether the calendar is in month view.
           * @return {?}
           */

        }, {
          key: "currentView",
          get: function get() {
            return this._currentView;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._currentView = value;
            this.moveFocusOnNextTick = true;
          }
        }]);

        return McCalendar;
      }();

      McCalendar.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-calendar',
          exportAs: 'mcCalendar',
          template: "<ng-template [cdkPortalOutlet]=\"calendarHeaderPortal\"></ng-template>\n\n<div class=\"mc-calendar__content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n    <mc-month-view\n        *ngSwitchCase=\"'month'\"\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (selectedChange)=\"dateSelected($event)\"\n        (userSelection)=\"userSelected()\">\n    </mc-month-view>\n\n    <mc-year-view\n        *ngSwitchCase=\"'year'\"\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (monthSelected)=\"monthSelectedInYearView($event)\"\n        (selectedChange)=\"goToDateInView($event, 'month')\">\n    </mc-year-view>\n\n    <mc-multi-year-view\n        *ngSwitchCase=\"'multi-year'\"\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (yearSelected)=\"yearSelectedInMultiYearView($event)\"\n        (selectedChange)=\"goToDateInView($event, 'year')\">\n    </mc-multi-year-view>\n</div>\n",
          host: {
            "class": 'mc-calendar'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-calendar{display:block}.mc-calendar__header{padding:8px 8px 0}.mc-calendar__content{outline:none;padding:0 8px 8px}.mc-calendar__controls{display:flex;margin:5% calc(4.71429% - 16px)}.mc-calendar-spacer{flex:1 1 auto}.mc-calendar__period-button{min-width:0}.mc-calendar__previous-button:after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mc-calendar__next-button:after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mc-calendar__table{border-collapse:collapse;border-spacing:0;width:100%}.mc-calendar__table-header th{padding:0 0 8px;text-align:center}.mc-calendar__table-header-divider{height:1px;position:relative}.mc-calendar__table-header-divider:after{content:\"\";height:1px;left:-8px;position:absolute;right:-8px;top:0}"]
        }]
      }];
      /** @nocollapse */

      McCalendar.ctorParameters = function () {
        return [{
          type: McDatepickerIntl
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["MC_DATE_FORMATS"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }];
      };

      McCalendar.propDecorators = {
        startAt: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        minDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        maxDate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        headerComponent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        startView: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateFilter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        selectedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        yearSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        monthSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        userSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        monthView: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McMonthView, {
            "static": false
          }]
        }],
        yearView: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McYearView, {
            "static": false
          }]
        }],
        multiYearView: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McMultiYearView, {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Animations used by the mosaic datepicker.
       * \@docs-private
       * @type {?}
       */


      var mcDatepickerAnimations = {
        /**
         * Transforms the height of the datepicker's calendar.
         */
        transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('transformPanel', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0,
          transform: 'scale(1, 0.8)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1,
          transform: 'scale(1, 1)'
        }))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0
        })))]),

        /**
         * Fades in the content of the calendar.
         */
        fadeInCalendar: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('fadeInCalendar', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1
        })), // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))])
      }; // todo should be put into polyfils
      // https://github.com/angular/angular/issues/24769

      if (!Element.prototype.matches) {
        Element.prototype.matches =
        /** @type {?} */
        Element.prototype.msMatchesSelector;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Used to generate a unique ID for each datepicker instance.
       * @type {?}
       */


      var datepickerUid = 0;
      /**
       * Injection token that determines the scroll handling while the calendar is open.
       * @type {?}
       */

      var MC_DATEPICKER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["InjectionToken"]('mc-datepicker-scroll-strategy');
      /**
       * \@docs-private
       * @param {?} overlay
       * @return {?}
       */
      // tslint:disable-next-line:naming-convention

      function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition();
          }
        );
      }
      /**
       * \@docs-private
       * @type {?}
       */


      var MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MC_DATEPICKER_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"]],
        useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY
      };
      /**
       * Component used as the content for the datepicker dialog and popup. We use this instead of using
       * McCalendar directly as the content so we can control the initial focus. This also gives us a
       * place to put additional features of the popup that are not part of the calendar itself in the
       * future. (e.g. confirmation buttons).
       * \@docs-private
       * @template D
       */

      var McDatepickerContent = /*#__PURE__*/function () {
        function McDatepickerContent() {
          _classCallCheck(this, McDatepickerContent);
        }

        _createClass(McDatepickerContent, [{
          key: "ngAfterViewInit",

          /**
           * @return {?}
           */
          value: function ngAfterViewInit() {
            this.calendar.focusActiveCell();
          }
        }]);

        return McDatepickerContent;
      }();

      McDatepickerContent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-datepicker__content',
          exportAs: 'mcDatepickerContent',
          template: "<mc-calendar [id]=\"datepicker.id\"\n             [ngClass]=\"datepicker.panelClass\"\n             [startAt]=\"datepicker.startAt\"\n             [startView]=\"datepicker.startView\"\n             [minDate]=\"datepicker.minDate\"\n             [maxDate]=\"datepicker.maxDate\"\n             [dateFilter]=\"datepicker.dateFilter\"\n             [headerComponent]=\"datepicker.calendarHeaderComponent\"\n             [selected]=\"datepicker.selected\"\n             [dateClass]=\"datepicker.dateClass\"\n             [@fadeInCalendar]=\"'enter'\"\n             (selectedChange)=\"datepicker.select($event)\"\n             (yearSelected)=\"datepicker.selectYear($event)\"\n             (monthSelected)=\"datepicker.selectMonth($event)\"\n             (userSelection)=\"datepicker.close()\">\n</mc-calendar>\n",
          host: {
            "class": 'mc-datepicker__content',
            '[@transformPanel]': '"enter"'
          },
          animations: [mcDatepickerAnimations.transformPanel, mcDatepickerAnimations.fadeInCalendar],
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-datepicker__content{border-style:solid;border-width:1px;display:block}.mc-datepicker__content .mc-calendar{height:344px;width:296px}.mc-datepicker__content .mc-calendar__next-button[disabled],.mc-datepicker__content .mc-calendar__previous-button[disabled]{border:0}@media (orientation:landscape){.mc-calendar{height:80vh;width:64vh}}@media (orientation:portrait){.mc-calendar{height:100vw;width:80vw}}"]
        }]
      }];
      McDatepickerContent.propDecorators = {
        calendar: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: [McCalendar, {
            "static": false
          }]
        }]
      };

      if (false) {} // TODO: We use a component instead of a directive here so the user can use implicit
      // template reference variables (e.g. #d vs #d="mcDatepicker"). We can change this to a directive
      // if angular adds support for `exportAs: '$implicit'` on directives.

      /**
       * Component responsible for managing the datepicker popup/dialog.
       * @template D
       */


      var McDatepicker = /*#__PURE__*/function () {
        /**
         * @param {?} overlay
         * @param {?} ngZone
         * @param {?} viewContainerRef
         * @param {?} scrollStrategy
         * @param {?} dateAdapter
         * @param {?} dir
         * @param {?} document
         */
        function McDatepicker(overlay, ngZone, viewContainerRef, scrollStrategy, dateAdapter, dir, document) {
          _classCallCheck(this, McDatepicker);

          this.overlay = overlay;
          this.ngZone = ngZone;
          this.viewContainerRef = viewContainerRef;
          this.dateAdapter = dateAdapter;
          this.dir = dir;
          this.document = document;
          this._hasBackdrop = false;
          /**
           * The view that the calendar should start in.
           */

          this.startView = 'month';
          /**
           * Emits selected year in multiyear view.
           * This doesn't imply a change on the selected date.
           */

          this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits selected month in year view.
           * This doesn't imply a change on the selected date.
           */

          this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          this.backdropClass = 'cdk-overlay-transparent-backdrop';
          /**
           * Emits when the datepicker has been opened.
           */

          this.openedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when the datepicker has been closed.
           */

          this.closedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * The id for the datepicker calendar.
           */

          this.id = "mc-datepicker-".concat(datepickerUid++);
          this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          /**
           * Emits when the datepicker is disabled.
           */

          this.disabledChange = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          /**
           * Emits new selected date when selected date changes.
           */

          this.selectedChanged = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          this._opened = false;
          this.validSelected = null;
          /**
           * The element that was focused before the datepicker was opened.
           */

          this.focusedElementBeforeOpen = null;
          /**
           * Subscription to value changes in the associated input element.
           */

          this.inputSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
          this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;

          if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
          }

          this.scrollStrategy = scrollStrategy;
        }
        /**
         * @return {?}
         */


        _createClass(McDatepicker, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.close();
            this.inputSubscription.unsubscribe();
            this.closeSubscription.unsubscribe();
            this.disabledChange.complete();

            if (this.popupRef) {
              this.popupRef.dispose();
              this.popupComponentRef = null;
            }
          }
          /**
           * Selects the given date
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "select",
          value: function select(date) {
            /** @type {?} */
            var oldValue = this.selected;
            this.selected = date;

            if (!this.dateAdapter.sameDate(oldValue, this.selected)) {
              this.selectedChanged.next(date);
            }
          }
          /**
           * Emits the selected year in multiyear view
           * @param {?} normalizedYear
           * @return {?}
           */

        }, {
          key: "selectYear",
          value: function selectYear(normalizedYear) {
            this.yearSelected.emit(normalizedYear);
          }
          /**
           * Emits selected month in year view
           * @param {?} normalizedMonth
           * @return {?}
           */

        }, {
          key: "selectMonth",
          value: function selectMonth(normalizedMonth) {
            this.monthSelected.emit(normalizedMonth);
          }
          /**
           * Register an input with this datepicker.
           * @param {?} input The datepicker input to register with this datepicker.
           * @return {?}
           */

        }, {
          key: "registerInput",
          value: function registerInput(input) {
            var _this32 = this;

            if (this.datepickerInput) {
              throw Error('A McDatepicker can only be associated with a single input.');
            }

            this.datepickerInput = input;
            this.inputSubscription = this.datepickerInput.valueChange.subscribe(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this32.selected = value;
            });
          }
          /**
           * Open the calendar.
           * @return {?}
           */

        }, {
          key: "open",
          value: function open() {
            if (this._opened || this.disabled) {
              return;
            }

            if (!this.datepickerInput) {
              throw Error('Attempted to open an McDatepicker with no associated input.');
            }

            if (this.document) {
              this.focusedElementBeforeOpen = this.document.activeElement;
            }

            this.openAsPopup();
            this._opened = true;
            this.openedStream.emit();
          }
          /**
           * Close the calendar.
           * @return {?}
           */

        }, {
          key: "close",
          value: function close() {
            var _this33 = this;

            if (!this._opened) {
              return;
            }

            if (this.popupRef && this.popupRef.hasAttached()) {
              this.popupRef.detach();
            }

            if (this.calendarPortal && this.calendarPortal.isAttached) {
              this.calendarPortal.detach();
            }
            /** @type {?} */


            var completeClose =
            /**
            * @return {?}
            */
            function completeClose() {
              // The `_opened` could've been reset already if
              // we got two events in quick succession.
              if (_this33._opened) {
                _this33._opened = false;

                _this33.closedStream.emit();

                _this33.focusedElementBeforeOpen = null;

                _this33.datepickerInput.elementRef.nativeElement.focus();
              }
            };

            if (this.focusedElementBeforeOpen && typeof this.focusedElementBeforeOpen.focus === 'function') {
              // Because IE moves focus asynchronously, we can't count on it being restored before we've
              // marked the datepicker as closed. If the event fires out of sequence and the element that
              // we're refocusing opens the datepicker on focus, the user could be stuck with not being
              // able to close the calendar at all. We work around it by making the logic, that marks
              // the datepicker as closed, async as well.
              this.focusedElementBeforeOpen.focus();
              setTimeout(completeClose);
            } else {
              completeClose();
            }
          }
          /**
           * Open the calendar as a popup.
           * @private
           * @return {?}
           */

        }, {
          key: "openAsPopup",
          value: function openAsPopup() {
            var _this34 = this;

            if (!this.calendarPortal) {
              this.calendarPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["ComponentPortal"](McDatepickerContent, this.viewContainerRef);
            }

            if (!this.popupRef) {
              this.createPopup();
            }

            if (!this.popupRef.hasAttached()) {
              this.popupComponentRef = this.popupRef.attach(this.calendarPortal);
              this.popupComponentRef.instance.datepicker = this; // Update the position once the calendar has rendered.

              this.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1)).subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this34.popupRef.updatePosition();
              });
            }
          }
          /**
           * Create the popup.
           * @private
           * @return {?}
           */

        }, {
          key: "createPopup",
          value: function createPopup() {
            var _this35 = this;

            /** @type {?} */
            var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["OverlayConfig"]({
              positionStrategy: this.createPopupPositionStrategy(),
              hasBackdrop: this.hasBackdrop,
              backdropClass: this.backdropClass,
              direction: this.dir,
              scrollStrategy: this.scrollStrategy(),
              panelClass: 'mc-datepicker__popup'
            });
            this.popupRef = this.overlay.create(overlayConfig);
            this.popupRef.overlayElement.setAttribute('role', 'dialog');
            this.closeSubscription = this.closingActions().subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this35.close();
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "closingActions",
          value: function closingActions() {
            var _this36 = this;

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["merge"])(this.popupRef.backdropClick(), this.popupRef.outsidePointerEvents(), this.popupRef.detachments(), this.popupRef.keydownEvents().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              // Closing on alt + up is only valid when there's an input associated with the datepicker.
              // tslint:disable-next-line:deprecation
              return event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"] || _this36.datepickerInput && event.altKey && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"];
            })));
          }
          /**
           * Create the popup PositionStrategy.
           * @private
           * @return {?}
           */

        }, {
          key: "createPopupPositionStrategy",
          value: function createPopupPositionStrategy() {
            return this.overlay.position().flexibleConnectedTo(this.datepickerInput.elementRef).withTransformOriginOn('.mc-datepicker__content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition().withPositions([{
              originX: 'start',
              originY: 'bottom',
              overlayX: 'start',
              overlayY: 'top'
            }, {
              originX: 'start',
              originY: 'top',
              overlayX: 'start',
              overlayY: 'bottom'
            }, {
              originX: 'end',
              originY: 'bottom',
              overlayX: 'end',
              overlayY: 'top'
            }, {
              originX: 'end',
              originY: 'top',
              overlayX: 'end',
              overlayY: 'bottom'
            }]);
          }
          /**
           * @private
           * @param {?} obj The object to check.
           * @return {?} The given object if it is both a date instance and valid, otherwise null.
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
        }, {
          key: "hasBackdrop",
          get: function get() {
            return this._hasBackdrop;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
          }
          /**
           * The date to open the calendar to initially.
           * @return {?}
           */

        }, {
          key: "startAt",
          get: function get() {
            // If an explicit startAt is set we start there, otherwise we start at whatever the currently
            // selected value is.
            return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
          }
          /**
           * Whether the datepicker pop-up should be disabled.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled === undefined && this.datepickerInput ? this.datepickerInput.disabled : this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);

            if (newValue !== this._disabled) {
              this._disabled = newValue;
              this.disabledChange.next(newValue);
            }
          }
          /**
           * Whether the calendar is open.
           * @return {?}
           */

        }, {
          key: "opened",
          get: function get() {
            return this._opened;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value) ? this.open() : this.close();
          }
          /**
           * The currently selected date.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this.validSelected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.validSelected = value;
          }
          /**
           * The minimum selectable date.
           * @return {?}
           */

        }, {
          key: "minDate",
          get: function get() {
            return this.datepickerInput && this.datepickerInput.min;
          }
          /**
           * The maximum selectable date.
           * @return {?}
           */

        }, {
          key: "maxDate",
          get: function get() {
            return this.datepickerInput && this.datepickerInput.max;
          }
          /**
           * @return {?}
           */

        }, {
          key: "dateFilter",
          get: function get() {
            return this.datepickerInput && this.datepickerInput.dateFilter;
          }
          /**
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this.selected;
          }
        }]);

        return McDatepicker;
      }();

      McDatepicker.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-datepicker',
          template: '',
          exportAs: 'mcDatepicker',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          providers: [{
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__["McFormFieldControl"],
            useExisting: McDatepicker
          }]
        }]
      }];
      /** @nocollapse */

      McDatepicker.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewContainerRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [MC_DATEPICKER_SCROLL_STRATEGY]
          }]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
          }]
        }];
      };

      McDatepicker.propDecorators = {
        hasBackdrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        startAt: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        opened: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        calendarHeaderComponent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        startView: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        yearSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        monthSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        panelClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        backdropClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        openedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"],
          args: ['opened']
        }],
        closedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"],
          args: ['closed']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker-input.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @type {?}
       */


      var MC_DATEPICKER_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_15__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McDatepickerInput;
        }),
        multi: true
      };
      /**
       * \@docs-private
       * @type {?}
       */

      var MC_DATEPICKER_VALIDATORS = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_15__["NG_VALIDATORS"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McDatepickerInput;
        }),
        multi: true
      };
      /**
       * An event used for datepicker input and change events. We don't always have access to a native
       * input or change event because the event may have been triggered by the user clicking on the
       * calendar popup. For consistency, we always use McDatepickerInputEvent instead.
       * @template D
       */

      var McDatepickerInputEvent =
      /**
       * @param {?} target
       * @param {?} targetElement
       */
      function McDatepickerInputEvent(target, targetElement) {
        _classCallCheck(this, McDatepickerInputEvent);

        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
      };

      if (false) {}
      /**
       * Directive used to connect an input to a McDatepicker.
       * @template D
       */


      var McDatepickerInput = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} dateAdapter
         * @param {?} dateFormats
         */
        function McDatepickerInput(elementRef, dateAdapter, dateFormats) {
          var _this37 = this;

          _classCallCheck(this, McDatepickerInput);

          this.elementRef = elementRef;
          this.dateAdapter = dateAdapter;
          this.dateFormats = dateFormats;
          /**
           * Emits when a `change` event is fired on this `<input>`.
           */

          this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when an `input` event is fired on this `<input>`.
           */

          this.dateInput = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when the value changes (either due to user input or programmatic change).
           */

          this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          /**
           * Emits when the disabled state has changed
           */

          this.disabledChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
          this.datepickerSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
          this.localeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
          /**
           * Whether the last value set on the input was valid.
           */

          this.lastValueValid = false;

          this.onTouched =
          /**
          * @return {?}
          */
          function () {};

          this.cvaOnChange =
          /**
          * @return {?}
          */
          function () {};

          this.validatorOnChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * The form control validator for whether the input parses.
           */


          this.parseValidator =
          /**
          * @return {?}
          */
          function () {
            return _this37.lastValueValid ? null : {
              mcDatepickerParse: {
                text: _this37.elementRef.nativeElement.value
              }
            };
          };
          /**
           * The form control validator for the min date.
           */


          this.minValidator =
          /**
          * @param {?} control
          * @return {?}
          */
          function (control) {
            /** @type {?} */
            var controlValue = _this37.getValidDateOrNull(_this37.dateAdapter.deserialize(control.value));

            return !_this37.min || !controlValue || _this37.dateAdapter.compareDate(_this37.min, controlValue) <= 0 ? null : {
              mcDatepickerMin: {
                min: _this37.min,
                actual: controlValue
              }
            };
          };
          /**
           * The form control validator for the max date.
           */


          this.maxValidator =
          /**
          * @param {?} control
          * @return {?}
          */
          function (control) {
            /** @type {?} */
            var controlValue = _this37.getValidDateOrNull(_this37.dateAdapter.deserialize(control.value));

            return !_this37.max || !controlValue || _this37.dateAdapter.compareDate(_this37.max, controlValue) >= 0 ? null : {
              mcDatepickerMax: {
                max: _this37.max,
                actual: controlValue
              }
            };
          };
          /**
           * The form control validator for the date filter.
           */


          this.filterValidator =
          /**
          * @param {?} control
          * @return {?}
          */
          function (control) {
            /** @type {?} */
            var controlValue = _this37.getValidDateOrNull(_this37.dateAdapter.deserialize(control.value));

            return !_this37.dateFilter || !controlValue || _this37.dateFilter(controlValue) ? null : {
              mcDatepickerFilter: true
            };
          };

          this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_15__["Validators"].compose([this.parseValidator, this.minValidator, this.maxValidator, this.filterValidator]);

          if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
          }

          if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
          } // Update the displayed date when the locale changes.


          this.localeSubscription = dateAdapter.localeChanges.subscribe(
          /**
          * @return {?}
          */
          function () {
            return _this37.value = _this37.value;
          });
        }
        /**
         * The datepicker that this input is associated with.
         * @param {?} value
         * @return {?}
         */


        _createClass(McDatepickerInput, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.datepickerSubscription.unsubscribe();
            this.localeSubscription.unsubscribe();
            this.valueChange.complete();
            this.disabledChange.complete();
          }
          /**
           * \@docs-private
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this.validatorOnChange = fn;
          }
          /**
           * \@docs-private
           * @param {?} c
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(c) {
            return this.validator ? this.validator(c) : null;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.cvaOnChange = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            // tslint:disable-next-line:deprecation

            /** @type {?} */
            var isAltDownArrow = event.altKey && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"];

            if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {
              this.datepicker.open();
              event.preventDefault();
            }
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "onInput",
          value: function onInput(value) {
            /** @type {?} */
            var date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);
            this.lastValueValid = !date || this.dateAdapter.isValid(date);
            date = this.getValidDateOrNull(date);

            if (!this.dateAdapter.sameDate(date, this._value)) {
              this._value = date;
              this.cvaOnChange(date);
              this.valueChange.emit(date);
              this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onChange",
          value: function onChange() {
            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));
          }
          /**
           * Handles blur events on the input.
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            // Reformat the input only if we have a valid value.
            if (this.value) {
              this.formatValue(this.value);
            }

            this.onTouched();
          }
          /**
           * Formats a value and sets it on the input element.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "formatValue",
          value: function formatValue(value) {
            this.elementRef.nativeElement.value = value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';
          }
          /**
           * @private
           * @param {?} obj The object to check.
           * @return {?} The given object if it is both a date instance and valid, otherwise null.
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
        }, {
          key: "mcDatepicker",
          set: function set(value) {
            var _this38 = this;

            if (!value) {
              return;
            }

            this.datepicker = value;
            this.datepicker.registerInput(this);
            this.datepickerSubscription.unsubscribe();
            this.datepickerSubscription = this.datepicker.selectedChanged.subscribe(
            /**
            * @param {?} selected
            * @return {?}
            */
            function (selected) {
              _this38.value = selected;

              _this38.cvaOnChange(selected);

              _this38.onTouched();

              _this38.dateChange.emit(new McDatepickerInputEvent(_this38, _this38.elementRef.nativeElement));
            });
          }
          /**
           * Function that can be used to filter out dates within the datepicker.
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "mcDatepickerFilter",
          set: function set(value) {
            this.dateFilter = value;
            this.validatorOnChange();
          }
          /**
           * The value of the input.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            // tslint:disable-next-line:no-parameter-reassignment
            value = this.dateAdapter.deserialize(value);
            this.lastValueValid = !value || this.dateAdapter.isValid(value); // tslint:disable-next-line:no-parameter-reassignment

            value = this.getValidDateOrNull(value);
            /** @type {?} */

            var oldDate = this.value;
            this._value = value;
            this.formatValue(value);

            if (!this.dateAdapter.sameDate(oldDate, value)) {
              this.valueChange.emit(value);
            }
          }
          /**
           * The minimum valid date.
           * @return {?}
           */

        }, {
          key: "min",
          get: function get() {
            return this._min;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.validatorOnChange();
          }
          /**
           * The maximum valid date.
           * @return {?}
           */

        }, {
          key: "max",
          get: function get() {
            return this._max;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.validatorOnChange();
          }
          /**
           * Whether the datepicker-input is disabled.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return !!this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
            /** @type {?} */

            var element = this.elementRef.nativeElement;

            if (this._disabled !== newValue) {
              this._disabled = newValue;
              this.disabledChange.emit(newValue);
            } // We need to null check the `blur` method, because it's undefined during SSR.


            if (newValue && element.blur) {
              // Normally, native input elements automatically blur if they turn disabled. This behavior
              // is problematic, because it would mean that it triggers another change detection cycle,
              // which then causes a changed after checked error if the input element was focused before.
              element.blur();
            }
          }
        }]);

        return McDatepickerInput;
      }();

      McDatepickerInput.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"],
        args: [{
          selector: 'input[mcDatepicker]',
          exportAs: 'mcDatepickerInput',
          providers: [MC_DATEPICKER_VALUE_ACCESSOR, MC_DATEPICKER_VALIDATORS, {
            provide: _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_16__["MC_INPUT_VALUE_ACCESSOR"],
            useExisting: McDatepickerInput
          }],
          host: {
            '[attr.aria-haspopup]': 'true',
            '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',
            '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',
            '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',
            '[attr.disabled]': 'disabled || null',
            '(input)': 'onInput($event.target.value)',
            '(change)': 'onChange()',
            '(blur)': 'onBlur()',
            '(keydown)': 'onKeydown($event)'
          }
        }]
      }];
      /** @nocollapse */

      McDatepickerInput.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_7__["MC_DATE_FORMATS"]]
          }]
        }];
      };

      McDatepickerInput.propDecorators = {
        mcDatepicker: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        mcDatepickerFilter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        min: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        max: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        dateChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }],
        dateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker-toggle.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Can be used to override the icon of a `mcDatepickerToggle`.
       */


      var McDatepickerToggleIcon = function McDatepickerToggleIcon() {
        _classCallCheck(this, McDatepickerToggleIcon);
      };

      McDatepickerToggleIcon.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"],
        args: [{
          selector: '[mcDatepickerToggleIcon]'
        }]
      }];
      /**
       * @template D
       */

      var McDatepickerToggle = /*#__PURE__*/function () {
        /**
         * @param {?} intl
         * @param {?} changeDetectorRef
         */
        function McDatepickerToggle(intl, changeDetectorRef) {
          _classCallCheck(this, McDatepickerToggle);

          this.intl = intl;
          this.changeDetectorRef = changeDetectorRef;
          this.stateChanges = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
        }
        /**
         * Whether the toggle button is disabled.
         * @return {?}
         */


        _createClass(McDatepickerToggle, [{
          key: "ngOnChanges",

          /**
           * @param {?} changes
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if (changes.datepicker) {
              this.watchStateChanges();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.stateChanges.unsubscribe();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            this.watchStateChanges();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "open",
          value: function open(event) {
            if (this.datepicker && !this.disabled) {
              this.datepicker.open();
              event.stopPropagation();
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "watchStateChanges",
          value: function watchStateChanges() {
            var _this39 = this;

            /** @type {?} */
            var datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["of"])();
            /** @type {?} */

            var inputDisabled = this.datepicker && this.datepicker.datepickerInput ? this.datepicker.datepickerInput.disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["of"])();
            /** @type {?} */

            var datepickerToggled = this.datepicker ? Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["merge"])(this.datepicker.openedStream, this.datepicker.closedStream) : Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["of"])();
            this.stateChanges.unsubscribe();
            this.stateChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["merge"])(this.intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this39.changeDetectorRef.markForCheck();
            });
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
          }
        }]);

        return McDatepickerToggle;
      }();

      McDatepickerToggle.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"],
        args: [{
          selector: 'mc-datepicker-toggle',
          template: "<button\n    #button\n    mc-button\n    type=\"button\"\n    class=\"mc-datepicker-toggle__button\"\n    aria-haspopup=\"true\"\n    [attr.aria-label]=\"intl.openCalendarLabel\"\n    [attr.tabindex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    (click)=\"open($event)\">\n\n    <i *ngIf=\"!customIcon\" mc-icon=\"mc-calendar_16\" class=\"mc-datepicker-toggle__default-icon\"></i>\n\n    <ng-content select=\"[mcDatepickerToggleIcon]\"></ng-content>\n</button>\n",
          host: {
            "class": 'mc-datepicker-toggle',
            '[class.mc-active]': 'datepicker && datepicker.opened'
          },
          exportAs: 'mcDatepickerToggle',
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-datepicker-toggle:focus{outline:0}.mc-datepicker-toggle__button.mc-icon-button{height:30px;margin-left:2px;width:30px}.mc-form-field-appearance-legacy .mc-form-field-prefix .mc-datepicker-toggle__default-icon,.mc-form-field-appearance-legacy .mc-form-field-suffix .mc-datepicker-toggle__default-icon{width:1em}.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-prefix .mc-datepicker-toggle__default-icon,.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-suffix .mc-datepicker-toggle__default-icon{display:block;height:1.5em;width:1.5em}.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-prefix .mc-icon-button .mc-datepicker-toggle__default-icon,.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-suffix .mc-icon-button .mc-datepicker-toggle__default-icon{margin:auto}"]
        }]
      }];
      /** @nocollapse */

      McDatepickerToggle.ctorParameters = function () {
        return [{
          type: McDatepickerIntl
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }];
      };

      McDatepickerToggle.propDecorators = {
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        datepicker: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"],
          args: ['for']
        }],
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        customIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ContentChild"],
          args: [McDatepickerToggleIcon, {
            "static": false
          }]
        }],
        button: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
          args: ['button', {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: datepicker-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McDatepickerModule = function McDatepickerModule() {
        _classCallCheck(this, McDatepickerModule);
      };

      McDatepickerModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__["McButtonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["OverlayModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["PortalModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__["McIconModule"]],
          exports: [McCalendar, McCalendarBody, McDatepicker, McDatepickerContent, McDatepickerInput, McDatepickerToggle, McDatepickerToggleIcon, McMonthView, McYearView, McMultiYearView, McCalendarHeader, _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__["McButtonModule"]],
          declarations: [McCalendar, McCalendarBody, McDatepicker, McDatepickerContent, McDatepickerInput, McDatepickerToggle, McDatepickerToggleIcon, McMonthView, McYearView, McMultiYearView, McCalendarHeader],
          providers: [McDatepickerIntl, MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],
          entryComponents: [McDatepickerContent, McCalendarHeader]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-datepicker.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-datepicker.js.map

      /***/
    },

    /***/
    "5vLs":
    /*!******************************************************!*\
      !*** ./dist/cdk/fesm2015/ptsecurity-cdk-datetime.js ***!
      \******************************************************/

    /*! exports provided: DateAdapter, MC_DATE_FORMATS, MC_DATE_LOCALE, MC_DATE_LOCALE_FACTORY */

    /***/
    function vLs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DateAdapter", function () {
        return DateAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATE_FORMATS", function () {
        return MC_DATE_FORMATS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATE_LOCALE", function () {
        return MC_DATE_LOCALE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DATE_LOCALE_FACTORY", function () {
        return MC_DATE_LOCALE_FACTORY;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /**
       * @fileoverview added by tsickle
       * Generated from: date-formats.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function McDateFormats() {}

      if (false) {}
      /** @type {?} */


      var MC_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mc-date-formats');
      /**
       * @fileoverview added by tsickle
       * Generated from: date-adapter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * InjectionToken for datepicker that can be used to override default locale code.
       * @type {?}
       */

      var MC_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MC_DATE_LOCALE', {
        providedIn: 'root',
        factory: MC_DATE_LOCALE_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */
      // tslint:disable-next-line:naming-convention

      function MC_DATE_LOCALE_FACTORY() {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]);
      }
      /**
       * interface for absolute date or datetime formatter template
       * @record
       */


      function IFormatterAbsoluteTemplate() {}

      if (false) {}
      /**
       * interface for range date or datetime formatter template
       * @record
       */


      function IFormatterRangeTemplate() {}

      if (false) {}
      /**
       * interface for relative date or datetime formatter template
       * @record
       */


      function IFormatterRelativeTemplate() {}

      if (false) {}
      /**
       * @record
       */


      function IAbsoluteDateTimeOptions() {}

      if (false) {}
      /**
       * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
       * @abstract
       * @template D
       */
      // tslint:disable-next-line:naming-convention


      var DateAdapter = /*#__PURE__*/function () {
        function DateAdapter() {
          _classCallCheck(this, DateAdapter);

          this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
        }
        /**
         * A stream that emits when the locale changes.
         * @return {?}
         */


        _createClass(DateAdapter, [{
          key: "deserialize",

          /**
           * Attempts to deserialize a value to a valid date object. This is different from parsing in that
           * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
           * string). The default implementation does not allow any deserialization, it simply checks that
           * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
           * method on all of it's `\@Input()` properties that accept dates. It is therefore possible to
           * support passing values from your backend directly to these properties by overriding this method
           * to also deserialize the format used by your backend.
           * @param {?} value The value to be deserialized into a date object.
           * @return {?} The deserialized date object, either a valid date, null if the value can be
           *     deserialized into a null date (e.g. the empty string), or an invalid date.
           */
          value: function deserialize(value) {
            if (value == null || this.isDateInstance(value) && this.isValid(value)) {
              return value;
            }

            return this.invalid();
          }
          /**
           * Sets the locale used for all dates.
           * @param {?} locale The new locale.
           * @return {?}
           */

        }, {
          key: "setLocale",
          value: function setLocale(locale) {
            this.locale = locale;

            this._localeChanges.next();
          }
          /**
           * Compares two dates.
           * @param {?} first The first date to compare.
           * @param {?} second The second date to compare.
           * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
           *     a number greater than 0 if the first date is later.
           */

        }, {
          key: "compareDate",
          value: function compareDate(first, second) {
            return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);
          }
          /**
           * Compares two datetimes.
           * @param {?} first The first date to compare.
           * @param {?} second The second date to compare.
           * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
           *     a number greater than 0 if the first date is later.
           */

        }, {
          key: "compareDateTime",
          value: function compareDateTime(first, second) {
            return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second) || this.getHours(first) - this.getHours(second) || this.getMinutes(first) - this.getMinutes(second) || this.getSeconds(first) - this.getSeconds(second) || this.getMilliseconds(first) - this.getMilliseconds(second);
          }
          /**
           * Checks if two dates are equal.
           * @param {?} first The first date to check.
           * @param {?} second The second date to check.
           * @return {?} Whether the two dates are equal.
           *     Null dates are considered equal to other null dates.
           */

        }, {
          key: "sameDate",
          value: function sameDate(first, second) {
            if (first && second) {
              /** @type {?} */
              var firstValid = this.isValid(first);
              /** @type {?} */

              var secondValid = this.isValid(second);

              if (firstValid && secondValid) {
                return !this.compareDate(first, second);
              }

              return firstValid === secondValid;
            }

            return first === second;
          }
          /**
           * Clamp the given date between min and max dates.
           * @param {?} date The date to clamp.
           * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
           * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
           * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
           *     otherwise `date`.
           */

        }, {
          key: "clampDate",
          value: function clampDate(date, min, max) {
            if (min && this.compareDate(date, min) < 0) {
              return min;
            }

            if (max && this.compareDate(date, max) > 0) {
              return max;
            }

            return date;
          }
        }, {
          key: "localeChanges",
          get: function get() {
            return this._localeChanges;
          }
        }]);

        return DateAdapter;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-cdk-datetime.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-cdk-datetime.js.map

      /***/

    },

    /***/
    "6AiE":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tabs.js ***!
      \********************************************************/

    /*! exports provided: MC_TABS_CONFIG, McAlignTabsCenterCssStyler, McAlignTabsEndCssStyler, McLightTabsCssStyler, McStretchTabsCssStyler, McTab, McTabBody, McTabBodyPortal, McTabChangeEvent, McTabContent, McTabGroup, McTabGroupBase, McTabGroupMixinBase, McTabHeader, McTabLabel, McTabLabelWrapper, McTabLink, McTabNav, McTabsModule, mcTabsAnimations, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi */

    /***/
    function AiE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TABS_CONFIG", function () {
        return MC_TABS_CONFIG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAlignTabsCenterCssStyler", function () {
        return McAlignTabsCenterCssStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAlignTabsEndCssStyler", function () {
        return McAlignTabsEndCssStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLightTabsCssStyler", function () {
        return McLightTabsCssStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McStretchTabsCssStyler", function () {
        return McStretchTabsCssStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTab", function () {
        return McTab;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabBody", function () {
        return McTabBody;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabBodyPortal", function () {
        return McTabBodyPortal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabChangeEvent", function () {
        return McTabChangeEvent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabContent", function () {
        return McTabContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabGroup", function () {
        return McTabGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabGroupBase", function () {
        return McTabGroupBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabGroupMixinBase", function () {
        return McTabGroupMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabHeader", function () {
        return McTabHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabLabel", function () {
        return McTabLabel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabLabelWrapper", function () {
        return McTabLabelWrapper;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabLink", function () {
        return McTabLink;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabNav", function () {
        return McTabNav;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTabsModule", function () {
        return McTabsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcTabsAnimations", function () {
        return mcTabsAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return McTabHeaderBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return McTabLabelWrapperBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return McTabLabelWrapperMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵd", function () {
        return McTabBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵe", function () {
        return McTabMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵf", function () {
        return McTabNavBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵg", function () {
        return McTabNavMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵh", function () {
        return McTabLinkBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵi", function () {
        return McTabLinkMixinBase;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "7KAL");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-content.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Decorates the `ng-template` tags and reads out the template from it.
       */


      var McTabContent =
      /**
       * @param {?} template
       */
      function McTabContent(template) {
        _classCallCheck(this, McTabContent);

        this.template = template;
      };

      McTabContent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mcTabContent]'
        }]
      }];
      /** @nocollapse */

      McTabContent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-label.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Used to flag tab labels for use with the portal directive
       */


      var McTabLabel = /*#__PURE__*/function (_angular_cdk_portal__) {
        _inherits(McTabLabel, _angular_cdk_portal__);

        var _super10 = _createSuper(McTabLabel);

        function McTabLabel() {
          _classCallCheck(this, McTabLabel);

          return _super10.apply(this, arguments);
        }

        return McTabLabel;
      }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortal"]);

      McTabLabel.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mc-tab-label], [mcTabLabel]'
        }]
      }]; // TODO: workaround for https://github.com/angular/material2/issues/12760

      /** @type {?} */
      McTabLabel.ctorParameters =
      /**
      * @return {?}
      */
      function () {
        return (
          /** @type {?} */
          _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortal"].ctorParameters
        );
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: tab.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTabBase = function McTabBase() {
        _classCallCheck(this, McTabBase);
      }; // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTabMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabBase);

      var McTab = /*#__PURE__*/function (_McTabMixinBase) {
        _inherits(McTab, _McTabMixinBase);

        var _super11 = _createSuper(McTab);

        /**
         * @param {?} viewContainerRef
         */
        function McTab(viewContainerRef) {
          var _this40;

          _classCallCheck(this, McTab);

          _this40 = _super11.call(this);
          _this40.viewContainerRef = viewContainerRef;
          /**
           * Plain text label for the tab, used when there is no template label.
           */

          _this40.textLabel = '';
          /**
           * Emits whenever the internal state of the tab changes.
           */

          _this40.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * The relatively indexed position where 0 represents the center, negative is left, and positive
           * represents the right.
           */

          _this40.position = null;
          /**
           * The initial relatively index origin of the tab if it was created and selected after there
           * was already a selected tab. Provides context of what position the tab should originate from.
           */

          _this40.origin = null;
          /**
           * Whether the tab is currently active.
           */

          _this40.isActive = false;
          /**
           * Portal that will be the hosted content of the tab
           */

          _this40.contentPortal = null;
          return _this40;
        }
        /**
         * \@docs-private
         * @return {?}
         */


        _createClass(McTab, [{
          key: "ngOnChanges",

          /**
           * @param {?} changes
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {
              this.stateChanges.next();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.stateChanges.complete();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.contentPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this.explicitContent || this.implicitContent, this.viewContainerRef);
          }
        }, {
          key: "content",
          get: function get() {
            return this.contentPortal;
          }
        }]);

        return McTab;
      }(McTabMixinBase);

      McTab.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-tab',
          // Create a template for the content of the <mc-tab> so that we can grab a reference to this
          // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the
          // tab-group.
          template: '<ng-template><ng-content></ng-content></ng-template>',
          inputs: ['disabled'],
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          exportAs: 'mcTab'
        }]
      }];
      /** @nocollapse */

      McTab.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }];
      };

      McTab.propDecorators = {
        templateLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
          args: [McTabLabel, {
            "static": false
          }]
        }],
        explicitContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"],
          args: [McTabContent, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"],
            "static": true
          }]
        }],
        implicitContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"], {
            "static": true
          }]
        }],
        textLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['label']
        }],
        tabId: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['tabId']
        }],
        ariaLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['aria-label']
        }],
        ariaLabelledby: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['aria-labelledby']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tabs-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var mcTabsAnimations = {
        /**
         * Animation translates a tab along the X axis.
         */
        translateTab: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["trigger"])('translateTab', [// Note: transitions to `none` instead of 0, because some browsers might blur the content.
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["state"])('center, void, left-origin-center, right-origin-center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({
          transform: 'none'
        })), // If the tab is either on the left or right, we additionally add a `min-height` of 1px
        // in order to ensure that the element has a height before its state changes. This is
        // necessary because Chrome does seem to skip the transition in RTL mode if the element does
        // not have a static height and is not rendered. See related issue: #9465
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["state"])('left', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({
          transform: 'translate3d(-100%, 0, 0)',
          minHeight: '1px'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["state"])('right', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({
          transform: 'translate3d(100%, 0, 0)',
          minHeight: '1px'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["transition"])('* => left, * => right, left => center, right => center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["transition"])('void => left-origin-center', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({
          transform: 'translate3d(-100%, 0, 0)'
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')]), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["transition"])('void => right-origin-center', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({
          transform: 'translate3d(100%, 0, 0)'
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')])])
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-body.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Wrapper for the contents of a tab.
       * \@docs-private
       */

      var McTabBody = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} dir
         * @param {?} changeDetectorRef
         */
        function McTabBody(elementRef, dir, changeDetectorRef) {
          var _this41 = this;

          _classCallCheck(this, McTabBody);

          this.elementRef = elementRef;
          this.dir = dir;
          /**
           * Event emitted when the tab begins to animate towards the center as the active tab.
           */

          this.onCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted before the centering of the tab begins.
           */

          this.beforeCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted before the centering of the tab begins.
           */

          this.afterLeavingCenter = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted when the tab completes its animation towards the center.
           */

          this.onCentered = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"](true); // Note that the default value will always be overwritten by `McTabBody`, but we need one
          // anyway to prevent the animations module from throwing an error if the body is used on its own.

          /**
           * Duration for the tab's animation.
           */

          this.animationDuration = '0ms';
          /**
           * Subscription to the directionality change observable.
           */

          this.dirChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;

          if (this.dir && changeDetectorRef) {
            this.dirChangeSubscription = this.dir.change.subscribe(
            /**
            * @param {?} direction
            * @return {?}
            */
            function (direction) {
              _this41.computePositionAnimationState(direction);

              changeDetectorRef.markForCheck();
            });
          }
        }
        /**
         * The shifted index position of the tab body, where zero represents the active center tab.
         * @param {?} position
         * @return {?}
         */


        _createClass(McTabBody, [{
          key: "ngOnInit",

          /**
           * After initialized, check if the content is centered and has an origin. If so, set the
           * special position states that transition the tab from the left or right before centering.
           * @return {?}
           */
          value: function ngOnInit() {
            if (this.bodyPosition === 'center' && this.origin != null) {
              this.bodyPosition = this.computePositionFromOrigin();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.dirChangeSubscription.unsubscribe();
          }
          /**
           * @param {?} e
           * @return {?}
           */

        }, {
          key: "onTranslateTabStarted",
          value: function onTranslateTabStarted(e) {
            /** @type {?} */
            var isCentering = this.isCenterPosition(e.toState);
            this.beforeCentering.emit(isCentering);

            if (isCentering) {
              this.onCentering.emit(this.elementRef.nativeElement.clientHeight);
            }
          }
          /**
           * @param {?} e
           * @return {?}
           */

        }, {
          key: "onTranslateTabComplete",
          value: function onTranslateTabComplete(e) {
            // If the transition to the center is complete, emit an event.
            if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {
              this.onCentered.emit();
            }

            if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {
              this.afterLeavingCenter.emit();
            }
          }
          /**
           * The text direction of the containing app.
           * @return {?}
           */

        }, {
          key: "getLayoutDirection",
          value: function getLayoutDirection() {
            return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';
          }
          /**
           * Whether the provided position state is considered center, regardless of origin.
           * @param {?} position
           * @return {?}
           */

        }, {
          key: "isCenterPosition",
          value: function isCenterPosition(position) {
            return position === 'center' || position === 'left-origin-center' || position === 'right-origin-center';
          }
          /**
           * Computes the position state that will be used for the tab-body animation trigger.
           * @private
           * @param {?=} dir
           * @return {?}
           */

        }, {
          key: "computePositionAnimationState",
          value: function computePositionAnimationState() {
            var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayoutDirection();

            if (this.positionIndex < 0) {
              this.bodyPosition = dir === 'ltr' ? 'left' : 'right';
            } else if (this.positionIndex > 0) {
              this.bodyPosition = dir === 'ltr' ? 'right' : 'left';
            } else {
              this.bodyPosition = 'center';
            }
          }
          /**
           * Computes the position state based on the specified origin position. This is used if the
           * tab is becoming visible immediately after creation.
           * @private
           * @return {?}
           */

        }, {
          key: "computePositionFromOrigin",
          value: function computePositionFromOrigin() {
            /** @type {?} */
            var dir = this.getLayoutDirection();

            if (dir === 'ltr' && this.origin <= 0 || dir === 'rtl' && this.origin > 0) {
              return 'left-origin-center';
            }

            return 'right-origin-center';
          }
        }, {
          key: "position",
          set: function set(position) {
            this.positionIndex = position;
            this.computePositionAnimationState();
          }
        }]);

        return McTabBody;
      }();

      McTabBody.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-tab-body',
          template: "<div class=\"mc-tab-body__content\"\n     #content\n     [@translateTab]=\"{\n        value: bodyPosition,\n        params: {animationDuration: animationDuration}\n     }\"\n     (@translateTab.start)=\"onTranslateTabStarted($event)\"\n     (@translateTab.done)=\"onTranslateTabComplete($event)\">\n    <ng-template mcTabBodyHost></ng-template>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          animations: [mcTabsAnimations.translateTab],
          host: {
            "class": 'mc-tab-body'
          },
          styles: [".mc-tab-body__content{height:100%;overflow:auto}.mc-tab-body__content .mc-tab-group_dynamic-height{overflow:hidden}"]
        }]
      }];
      /** @nocollapse */

      McTabBody.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }];
      };

      McTabBody.propDecorators = {
        position: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        onCentering: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        beforeCentering: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        afterLeavingCenter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        onCentered: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        portalHost: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortalOutlet"], {
            "static": false
          }]
        }],
        content: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['content']
        }],
        origin: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        animationDuration: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * The portal host directive for the contents of the tab.
       * \@docs-private
       */


      var McTabBodyPortal = /*#__PURE__*/function (_angular_cdk_portal__2) {
        _inherits(McTabBodyPortal, _angular_cdk_portal__2);

        var _super12 = _createSuper(McTabBodyPortal);

        /**
         * @param {?} componentFactoryResolver
         * @param {?} viewContainerRef
         * @param {?} host
         */
        function McTabBodyPortal(componentFactoryResolver, viewContainerRef, host) {
          var _this42;

          _classCallCheck(this, McTabBodyPortal);

          _this42 = _super12.call(this, componentFactoryResolver, viewContainerRef);
          _this42.host = host;
          /**
           * Subscription to events for when the tab body begins centering.
           */

          _this42.centeringSub = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /**
           * Subscription to events for when the tab body finishes leaving from center position.
           */

          _this42.leavingSub = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          return _this42;
        }
        /**
         * Set initial visibility or set up subscription for changing visibility.
         * @return {?}
         */


        _createClass(McTabBodyPortal, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this43 = this;

            _get(_getPrototypeOf(McTabBodyPortal.prototype), "ngOnInit", this).call(this);

            this.centeringSub = this.host.beforeCentering.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(this.host.isCenterPosition(this.host.bodyPosition))).subscribe(
            /**
            * @param {?} isCentering
            * @return {?}
            */
            function (isCentering) {
              if (isCentering && !_this43.hasAttached()) {
                _this43.attach(_this43.host.content);
              }
            });
            this.leavingSub = this.host.afterLeavingCenter.subscribe(
            /**
            * @return {?}
            */
            function () {
              _this43.detach();
            });
          }
          /**
           * Clean up centering subscription.
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            _get(_getPrototypeOf(McTabBodyPortal.prototype), "ngOnDestroy", this).call(this);

            this.centeringSub.unsubscribe();
            this.leavingSub.unsubscribe();
          }
        }]);

        return McTabBodyPortal;
      }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortalOutlet"]);

      McTabBodyPortal.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mcTabBodyHost]'
        }]
      }];
      /** @nocollapse */

      McTabBodyPortal.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: McTabBody,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return McTabBody;
            })]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-label-wrapper.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Boilerplate for applying mixins to McTabLabelWrapper.

      /**
       * \@docs-private
       */


      var McTabLabelWrapperBase = function McTabLabelWrapperBase() {
        _classCallCheck(this, McTabLabelWrapperBase);
      }; // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTabLabelWrapperMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabLabelWrapperBase);
      /**
       * Used in the `mc-tab-group` view to display tab labels.
       * \@docs-private
       */

      var McTabLabelWrapper = /*#__PURE__*/function (_McTabLabelWrapperMix) {
        _inherits(McTabLabelWrapper, _McTabLabelWrapperMix);

        var _super13 = _createSuper(McTabLabelWrapper);

        /**
         * @param {?} elementRef
         */
        function McTabLabelWrapper(elementRef) {
          var _this44;

          _classCallCheck(this, McTabLabelWrapper);

          _this44 = _super13.call(this);
          _this44.elementRef = elementRef;
          return _this44;
        }
        /**
         * Sets focus on the wrapper element
         * @return {?}
         */


        _createClass(McTabLabelWrapper, [{
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getOffsetLeft",
          value: function getOffsetLeft() {
            return this.elementRef.nativeElement.offsetLeft;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getOffsetWidth",
          value: function getOffsetWidth() {
            return this.elementRef.nativeElement.offsetWidth;
          }
        }]);

        return McTabLabelWrapper;
      }(McTabLabelWrapperMixinBase);

      McTabLabelWrapper.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mcTabLabelWrapper]',
          inputs: ['disabled'],
          host: {
            '[class.mc-disabled]': 'disabled',
            '[attr.aria-disabled]': '!!disabled'
          }
        }]
      }];
      /** @nocollapse */

      McTabLabelWrapper.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-header.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var VIEWPORT_THROTTLE_TIME = 150;
      /** @type {?} */

      var SCROLL_DISTANCE_DELIMITER = 3;
      /**
       * The distance in pixels that will be overshot when scrolling a tab label into view. This helps
       * provide a small affordance to the label next to it.
       * @type {?}
       */

      var EXAGGERATED_OVERSCROLL = 60; // Boilerplate for applying mixins to McTabHeader.

      /**
       * \@docs-private
       */

      var McTabHeaderBase = function McTabHeaderBase() {
        _classCallCheck(this, McTabHeaderBase);
      };
      /**
       * The header of the tab group which displays a list of all the tabs in the tab group.
       * When the tabs list's width exceeds the width of the header container,
       * then arrows will be displayed to allow the user to scroll
       * left and right across the header.
       * \@docs-private
       */


      var McTabHeader = /*#__PURE__*/function (_McTabHeaderBase) {
        _inherits(McTabHeader, _McTabHeaderBase);

        var _super14 = _createSuper(McTabHeader);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} viewportRuler
         * @param {?} dir
         * @param {?} ngZone
         */
        function McTabHeader(elementRef, changeDetectorRef, viewportRuler, dir, ngZone) {
          var _this45;

          _classCallCheck(this, McTabHeader);

          _this45 = _super14.call(this);
          _this45.elementRef = elementRef;
          _this45.changeDetectorRef = changeDetectorRef;
          _this45.viewportRuler = viewportRuler;
          _this45.dir = dir;
          _this45.ngZone = ngZone;
          /**
           * Whether the controls for pagination should be displayed
           */

          _this45.showPaginationControls = false;
          /**
           * Whether the tab list can be scrolled more towards the end of the tab label list.
           */

          _this45.disableScrollAfter = true;
          /**
           * Whether the tab list can be scrolled more towards the beginning of the tab label list.
           */

          _this45.disableScrollBefore = true;
          /**
           * Event emitted when the option is selected.
           */

          _this45.selectFocusedIndex = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted when a label is focused.
           */

          _this45.indexFocused = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * The distance in pixels that the tab labels should be translated to the left.
           */

          _this45._scrollDistance = 0;
          /**
           * Whether the header should scroll to the selected index after the view has been checked.
           */

          _this45.selectedIndexChanged = false;
          /**
           * Emits when the component is destroyed.
           */

          _this45.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          _this45._selectedIndex = 0;
          return _this45;
        }
        /**
         * The index of the active tab.
         * @return {?}
         */


        _createClass(McTabHeader, [{
          key: "ngAfterContentChecked",

          /**
           * @return {?}
           */
          value: function ngAfterContentChecked() {
            // If the number of tab labels have changed, check if scrolling should be enabled
            if (this.tabLabelCount !== this.labelWrappers.length) {
              this.updatePagination();
              this.tabLabelCount = this.labelWrappers.length;
              this.changeDetectorRef.markForCheck();
            } // If the selected index has changed, scroll to the label and check if the scrolling controls
            // should be disabled.


            if (this.selectedIndexChanged) {
              this.scrollToLabel(this._selectedIndex);
              this.checkScrollingControls();
              this.selectedIndexChanged = false;
              this.changeDetectorRef.markForCheck();
            } // If the scroll distance has been changed (tab selected, focused, scroll controls activated),
            // then translate the header to reflect this.


            if (this.scrollDistanceChanged) {
              this.updateTabScrollPosition();
              this.scrollDistanceChanged = false;
              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            // tslint:disable-next-line: deprecation
            switch (event.keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"]:
                this.keyManager.setFirstItemActive();
                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]:
                this.keyManager.setLastItemActive();
                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]:
                this.selectFocusedIndex.emit(this.focusIndex);
                event.preventDefault();
                break;

              default:
                this.keyManager.onKeydown(event);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this46 = this;

            /** @type {?} */
            var dirChange = this.dir ? this.dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(null);
            /** @type {?} */

            var resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);
            /** @type {?} */

            var realign =
            /**
            * @return {?}
            */
            function realign() {
              _this46.updatePagination();
            };

            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__["FocusKeyManager"](this.labelWrappers).withHorizontalOrientation(this.getLayoutDirection()).withWrap();
            this.keyManager.updateActiveItem(0); // Defer the first call in order to allow for slower browsers to lay out the elements.
            // This helps in cases where the user lands directly on a page with paginated tabs.

            typeof requestAnimationFrame === undefined ? realign() : requestAnimationFrame(realign); // On dir change or window resize, update the orientation of
            // the key manager if the direction has changed.

            Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(dirChange, resize).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              realign();

              _this46.keyManager.withHorizontalOrientation(_this46.getLayoutDirection());
            }); // If there is a change in the focus key manager we need to emit the `indexFocused`
            // event in order to provide a public event that notifies about focus changes. Also we realign
            // the tabs container by scrolling the new focused tab into the visible section.

            this.keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @param {?} newFocusIndex
            * @return {?}
            */
            function (newFocusIndex) {
              _this46.indexFocused.emit(newFocusIndex);

              _this46.setTabFocus(newFocusIndex);
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.next();
            this.destroyed.complete();
          }
          /**
           * Callback for when the MutationObserver detects that the content has changed.
           * @return {?}
           */

        }, {
          key: "onContentChanges",
          value: function onContentChanges() {
            var _this47 = this;

            /** @type {?} */
            var textContent = this.elementRef.nativeElement.textContent; // We need to diff the text content of the header, because the MutationObserver callback
            // will fire even if the text content didn't change which is inefficient and is prone
            // to infinite loops if a poorly constructed expression is passed in.

            if (textContent !== this.currentTextContent) {
              this.currentTextContent = textContent;
              /** @type {?} */

              var zoneCallback =
              /**
              * @return {?}
              */
              function zoneCallback() {
                _this47.updatePagination();

                _this47.changeDetectorRef.markForCheck();
              }; // The content observer runs outside the `NgZone` by default, which
              // means that we need to bring the callback back in ourselves.
              // TODO: Remove null check for `_ngZone` once it's a required parameter.


              this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();
            }
          }
          /**
           * Updating the view whether pagination should be enabled or not
           *
           * WARNING: Calling this method can be very costly in terms of performance.  It should be called
           * as infrequently as possible from outside of the Tabs component as it causes a reflow of the
           * page.
           * @return {?}
           */

        }, {
          key: "updatePagination",
          value: function updatePagination() {
            this.checkPaginationEnabled();
            this.checkScrollingControls();
            this.updateTabScrollPosition();
          }
          /**
           * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
           * providing a valid index and return true.
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "isValidIndex",
          value: function isValidIndex(index) {
            if (!this.labelWrappers) {
              return true;
            }
            /** @type {?} */


            var tab = this.labelWrappers ? this.labelWrappers.toArray()[index] : null;
            return !!tab && !tab.disabled;
          }
          /**
           * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
           * scrolling is enabled.
           * @param {?} tabIndex
           * @return {?}
           */

        }, {
          key: "setTabFocus",
          value: function setTabFocus(tabIndex) {
            if (this.showPaginationControls) {
              this.scrollToLabel(tabIndex);
            }

            if (this.labelWrappers && this.labelWrappers.length) {
              this.labelWrappers.toArray()[tabIndex].focus(); // Do not let the browser manage scrolling to focus the element, this will be handled
              // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width
              // should be the full width minus the offset width.

              /** @type {?} */

              var containerEl = this.tabListContainer.nativeElement;
              /** @type {?} */

              var dir = this.getLayoutDirection();

              if (dir === 'ltr') {
                containerEl.scrollLeft = 0;
              } else {
                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;
              }
            }
          }
          /**
           * The layout direction of the containing app.
           * @return {?}
           */

        }, {
          key: "getLayoutDirection",
          value: function getLayoutDirection() {
            return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';
          }
          /**
           * Performs the CSS transformation on the tab list that will cause the list to scroll.
           * @return {?}
           */

        }, {
          key: "updateTabScrollPosition",
          value: function updateTabScrollPosition() {
            /** @type {?} */
            var scrollDistance = this.scrollDistance;
            /** @type {?} */

            var translateX = this.getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance; // Don't use `translate3d` here because we don't want to create a new layer. A new layer
            // seems to cause flickering and overflow in Internet Explorer.
            // See: https://github.com/angular/material2/issues/10276
            // We round the `transform` here, because transforms with sub-pixel precision cause some
            // browsers to blur the content of the element.

            this.tabList.nativeElement.style.transform = "translateX(".concat(Math.round(translateX), "px)"); // Setting the `transform` on IE will change the scroll offset of the parent, causing the
            // position to be thrown off in some cases. We have to reset it ourselves to ensure that
            // it doesn't get thrown off.

            this.tabList.nativeElement.scrollLeft = 0;
          }
          /**
           * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
           * the end of the list, respectively). The distance to scroll is computed to be a third of the
           * length of the tab list view window.
           *
           * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
           * should be called sparingly.
           * @param {?} scrollDir
           * @return {?}
           */

        }, {
          key: "scrollHeader",
          value: function scrollHeader(scrollDir) {
            /** @type {?} */
            var viewLength = this.tabListContainer.nativeElement.offsetWidth; // Move the scroll distance one-third the length of the tab list's viewport.

            this.scrollDistance += (scrollDir === 'before' ? -1 : 1) * viewLength / SCROLL_DISTANCE_DELIMITER;
          }
          /**
           * Moves the tab list such that the desired tab label (marked by index) is moved into view.
           *
           * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
           * should be called sparingly.
           * @param {?} labelIndex
           * @return {?}
           */

        }, {
          key: "scrollToLabel",
          value: function scrollToLabel(labelIndex) {
            /** @type {?} */
            var selectedLabel = this.labelWrappers ? this.labelWrappers.toArray()[labelIndex] : null;

            if (!selectedLabel) {
              return;
            } // The view length is the visible width of the tab labels.

            /** @type {?} */


            var viewLength = this.tabListContainer.nativeElement.offsetWidth;
            /** @type {?} */

            var labelBeforePos;
            /** @type {?} */

            var labelAfterPos;

            if (this.getLayoutDirection() === 'ltr') {
              labelBeforePos = selectedLabel.getOffsetLeft();
              labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
            } else {
              labelAfterPos = this.tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
              labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
            }
            /** @type {?} */


            var beforeVisiblePos = this.scrollDistance;
            /** @type {?} */

            var afterVisiblePos = this.scrollDistance + viewLength;

            if (labelBeforePos < beforeVisiblePos) {
              // Scroll header to move label to the before direction
              this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
            } else if (labelAfterPos > afterVisiblePos) {
              // Scroll header to move label to the after direction
              this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
            }
          }
          /**
           * Evaluate whether the pagination controls should be displayed. If the scroll width of the
           * tab list is wider than the size of the header container, then the pagination controls should
           * be shown.
           *
           * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
           * should be called sparingly.
           * @return {?}
           */

        }, {
          key: "checkPaginationEnabled",
          value: function checkPaginationEnabled() {
            /** @type {?} */
            var isEnabled = this.tabList.nativeElement.scrollWidth > this.elementRef.nativeElement.offsetWidth;

            if (!isEnabled) {
              this.scrollDistance = 0;
            }

            if (isEnabled !== this.showPaginationControls) {
              this.changeDetectorRef.markForCheck();
            }

            this.showPaginationControls = isEnabled;
          }
          /**
           * Evaluate whether the before and after controls should be enabled or disabled.
           * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
           * before button. If the header is at the end of the list (scroll distance is equal to the
           * maximum distance we can scroll), then disable the after button.
           *
           * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
           * should be called sparingly.
           * @return {?}
           */

        }, {
          key: "checkScrollingControls",
          value: function checkScrollingControls() {
            // Check if the pagination arrows should be activated.
            this.disableScrollBefore = this.scrollDistance === 0;
            this.disableScrollAfter = this.scrollDistance === this.getMaxScrollDistance();
            this.changeDetectorRef.markForCheck();
          }
          /**
           * Determines what is the maximum length in pixels that can be set for the scroll distance. This
           * is equal to the difference in width between the tab list container and tab header container.
           *
           * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
           * should be called sparingly.
           * @return {?}
           */

        }, {
          key: "getMaxScrollDistance",
          value: function getMaxScrollDistance() {
            /** @type {?} */
            var lengthOfTabList = this.tabList.nativeElement.scrollWidth;
            /** @type {?} */

            var viewLength = this.tabListContainer.nativeElement.offsetWidth;
            return lengthOfTabList - viewLength || 0;
          }
        }, {
          key: "selectedIndex",
          get: function get() {
            return this._selectedIndex;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var coercedValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceNumberProperty"])(value);
            this.selectedIndexChanged = this._selectedIndex !== coercedValue;
            this._selectedIndex = coercedValue;

            if (this.keyManager) {
              this.keyManager.updateActiveItem(coercedValue);
            }
          }
          /**
           * Tracks which element has focus; used for keyboard navigation
           * @return {?}
           */

        }, {
          key: "focusIndex",
          get: function get() {
            return this.keyManager ? this.keyManager.activeItemIndex : 0;
          }
          /**
           * When the focus index is set, we must manually send focus to the correct label
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (!this.isValidIndex(value) || this.focusIndex === value || !this.keyManager) {
              return;
            }

            this.keyManager.setActiveItem(value);
          }
          /**
           * Sets the distance in pixels that the tab header should be transformed in the X-axis.
           * @return {?}
           */

        }, {
          key: "scrollDistance",
          get: function get() {
            return this._scrollDistance;
          }
          /**
           * @param {?} v
           * @return {?}
           */
          ,
          set: function set(v) {
            this._scrollDistance = Math.max(0, Math.min(this.getMaxScrollDistance(), v)); // Mark that the scroll distance has changed so that after the view is checked, the CSS
            // transformation can move the header.

            this.scrollDistanceChanged = true;
            this.checkScrollingControls();
          }
        }]);

        return McTabHeader;
      }(McTabHeaderBase);

      McTabHeader.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-tab-header',
          template: "<div class=\"mc-tab-header__pagination mc-tab-header__pagination_before mc-elevation-z4\"\n     aria-hidden=\"true\"\n     [class.mc-tab-header_disabled]=\"disableScrollBefore\"\n     (click)=\"scrollHeader('before')\">\n    <div class=\"mc-tab-header__pagination-chevron\"></div>\n</div>\n\n<div class=\"mc-tab-header__content\"\n     #tabListContainer\n     (keydown)=\"handleKeydown($event)\">\n    <div class=\"mc-tab-list\"\n         #tabList\n         role=\"tablist\"\n         (cdkObserveContent)=\"onContentChanges()\">\n        <div class=\"mc-tab-list__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n\n<div class=\"mc-tab-header__pagination mc-tab-header__pagination_after mc-elevation-z4\"\n     aria-hidden=\"true\"\n     [class.mc-tab-header_disabled]=\"disableScrollAfter\"\n     (click)=\"scrollHeader('after')\">\n    <div class=\"mc-tab-header__pagination-chevron\"></div>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          host: {
            "class": 'mc-tab-header',
            '[class.mc-tab-header__pagination-controls_enabled]': 'showPaginationControls',
            '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \'rtl\''
          },
          styles: [".mc-tab-header{display:flex}.mc-tab-header__pagination{align-items:center;cursor:pointer;display:none;justify-content:center;min-width:32px;position:relative;z-index:2}.mc-tab-header__pagination .mc-tab-header__pagination-controls_enabled{display:flex}.mc-tab-header__pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\"\";height:8px;width:8px}.mc-tab-header__pagination_after,.mc-tab-header_rtl .mc-tab-header__pagination_before{padding-right:4px}.mc-tab-header__pagination_after .mc-tab-header__pagination-chevron,.mc-tab-header_rtl .mc-tab-header__pagination_before .mc-tab-header__pagination-chevron{transform:rotate(45deg)}.mc-tab-header__pagination_before,.mc-tab-header_rtl .mc-tab-header__pagination_after{padding-left:4px}.mc-tab-header__pagination_before .mc-tab-header__pagination-chevron,.mc-tab-header_rtl .mc-tab-header__pagination_after .mc-tab-header__pagination-chevron{transform:rotate(-135deg)}.mc-tab-header_disabled{box-shadow:none;cursor:default}.mc-tab-header__content{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mc-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mc-tab-list__content{display:flex}.mc-tab-group_align-labels-center .mc-tab-list__content{justify-content:center}.mc-tab-group_align-labels-end .mc-tab-list__content{justify-content:flex-end}.mc-tab-group_stretch-labels .mc-tab-label,.mc-tab-group_stretch-labels .mc-tab-light-label{flex-basis:0;flex-grow:1}"]
        }]
      }];
      /** @nocollapse */

      McTabHeader.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__["ViewportRuler"]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
        }];
      };

      McTabHeader.propDecorators = {
        selectedIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        labelWrappers: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [McTabLabelWrapper]
        }],
        tabListContainer: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: ['tabListContainer', {
            "static": true
          }]
        }],
        tabList: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: ['tabList', {
            "static": true
          }]
        }],
        selectFocusedIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        indexFocused: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-group.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McLightTabsCssStyler = function McLightTabsCssStyler() {
        _classCallCheck(this, McLightTabsCssStyler);
      };

      McLightTabsCssStyler.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',
          host: {
            "class": 'mc-tab-group_light'
          }
        }]
      }];

      var McAlignTabsCenterCssStyler = function McAlignTabsCenterCssStyler() {
        _classCallCheck(this, McAlignTabsCenterCssStyler);
      };

      McAlignTabsCenterCssStyler.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',
          host: {
            "class": 'mc-tab-group_align-labels-center'
          }
        }]
      }];

      var McAlignTabsEndCssStyler = function McAlignTabsEndCssStyler() {
        _classCallCheck(this, McAlignTabsEndCssStyler);
      };

      McAlignTabsEndCssStyler.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',
          host: {
            "class": 'mc-tab-group_align-labels-end'
          }
        }]
      }];

      var McStretchTabsCssStyler = function McStretchTabsCssStyler() {
        _classCallCheck(this, McStretchTabsCssStyler);
      };

      McStretchTabsCssStyler.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',
          host: {
            "class": 'mc-tab-group_stretch-labels'
          }
        }]
      }];
      /**
       * Used to generate unique ID's for each tab component
       * @type {?}
       */

      var nextId = 0;
      /**
       * A simple change event emitted on focus or selection changes.
       */

      var McTabChangeEvent = function McTabChangeEvent() {
        _classCallCheck(this, McTabChangeEvent);
      };

      if (false) {}
      /**
       * Object that can be used to configure the default options for the tabs module.
       * @record
       */


      function IMcTabsConfig() {}

      if (false) {}
      /**
       * Injection token that can be used to provide the default options the tabs module.
       * @type {?}
       */


      var MC_TABS_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('MC_TABS_CONFIG'); // Boilerplate for applying mixins to McTabGroup.

      /**
       * \@docs-private
       */

      var McTabGroupBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McTabGroupBase(_elementRef) {
        _classCallCheck(this, McTabGroupBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTabGroupMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabGroupBase));
      /**
       * Tab-group component.  Supports basic tab pairs (label + content) and includes
       * keyboard navigation.
       */

      var McTabGroup = /*#__PURE__*/function (_McTabGroupMixinBase) {
        _inherits(McTabGroup, _McTabGroupMixinBase);

        var _super15 = _createSuper(McTabGroup);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} lightTabs
         * @param {?=} defaultConfig
         */
        function McTabGroup(elementRef, changeDetectorRef, lightTabs, defaultConfig) {
          var _this48;

          _classCallCheck(this, McTabGroup);

          _this48 = _super15.call(this, elementRef);
          _this48.changeDetectorRef = changeDetectorRef;
          /**
           * Position of the tab header.
           */

          _this48.headerPosition = 'above';
          /**
           * Output to enable support for two-way binding on `[(selectedIndex)]`
           */

          _this48.selectedIndexChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted when focus has changed within a tab group.
           */

          _this48.focusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted when the body animation has completed
           */

          _this48.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /**
           * Event emitted when the tab selection has changed.
           */

          _this48.selectedTabChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"](true);
          /**
           * The tab index that should be selected after the content has been checked.
           */

          _this48.indexToSelect = 0;
          /**
           * Snapshot of the height of the tab body wrapper before another tab is activated.
           */

          _this48.tabBodyWrapperHeight = 0;
          /**
           * Subscription to tabs being added/removed.
           */

          _this48.tabsSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /**
           * Subscription to changes in the tab labels.
           */

          _this48.tabLabelSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          _this48._dynamicHeight = false;
          _this48._selectedIndex = null;
          _this48.lightTab = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(lightTabs);
          _this48.groupId = nextId++;
          _this48.animationDuration = defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '0ms';
          return _this48;
        }
        /**
         * Whether the tab group should grow to the size of the active tab.
         * @return {?}
         */


        _createClass(McTabGroup, [{
          key: "ngAfterContentChecked",

          /**
           * After the content is checked, this component knows what tabs have been defined
           * and what the selected index should be. This is where we can know exactly what position
           * each tab should be in according to the new selected index, and additionally we know how
           * a new selected tab should transition in (from the left or right).
           * @return {?}
           */
          value: function ngAfterContentChecked() {
            var _this49 = this;

            // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
            // the amount of tabs changes before the actual change detection runs.

            /** @type {?} */
            var indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect); // If there is a change in selected index, emit a change event. Should not trigger if
            // the selected index has not yet been initialized.

            if (this._selectedIndex !== indexToSelect) {
              /** @type {?} */
              var isFirstRun = this._selectedIndex == null;

              if (!isFirstRun) {
                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));
              } // Changing these values after change detection has run
              // since the checked content may contain references to them.


              Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                _this49.tabs.forEach(
                /**
                * @param {?} tab
                * @param {?} index
                * @return {?}
                */
                function (tab, index) {
                  return tab.isActive = index === indexToSelect;
                });

                if (!isFirstRun) {
                  _this49.selectedIndexChange.emit(indexToSelect);
                }
              });
            } // Setup the position for each tab and optionally setup an origin on the next selected tab.


            this.tabs.forEach(
            /**
            * @param {?} tab
            * @param {?} index
            * @return {?}
            */
            function (tab, index) {
              tab.position = index - indexToSelect; // If there is already a selected tab, then set up an origin for the next selected tab
              // if it doesn't have one already.

              if (_this49._selectedIndex != null && tab.position === 0 && !tab.origin) {
                tab.origin = indexToSelect - _this49._selectedIndex;
              }
            });

            if (this._selectedIndex !== indexToSelect) {
              this._selectedIndex = indexToSelect;
              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this50 = this;

            this.subscribeToTabLabels(); // Subscribe to changes in the amount of tabs, in order to be
            // able to re-render the content as new tabs are added or removed.

            this.tabsSubscription = this.tabs.changes.subscribe(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var indexToSelect = _this50.clampTabIndex(_this50.indexToSelect); // Maintain the previously-selected tab if a new tab is added or removed and there is no
              // explicit change that selects a different tab.


              if (indexToSelect === _this50._selectedIndex) {
                /** @type {?} */
                var tabs = _this50.tabs.toArray();

                for (var i = 0; i < tabs.length; i++) {
                  if (tabs[i].isActive) {
                    // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed
                    // event, otherwise the consumer may end up in an infinite loop in some edge cases like
                    // adding a tab within the `selectedIndexChange` event.
                    _this50.indexToSelect = _this50._selectedIndex = i;
                    break;
                  }
                }
              }

              _this50.subscribeToTabLabels();

              _this50.changeDetectorRef.markForCheck();
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.tabsSubscription.unsubscribe();
            this.tabLabelSubscription.unsubscribe();
          }
          /**
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "focusChanged",
          value: function focusChanged(index) {
            this.focusChange.emit(this.createChangeEvent(index));
          }
          /**
           * Returns a unique id for each tab label element
           * @param {?} i
           * @return {?}
           */

        }, {
          key: "getTabLabelId",
          value: function getTabLabelId(i) {
            return "mc-tab-label-".concat(this.groupId, "-").concat(i);
          }
          /**
           * Returns a unique id for each tab content element
           * @param {?} i
           * @return {?}
           */

        }, {
          key: "getTabContentId",
          value: function getTabContentId(i) {
            return "mc-tab-content-".concat(this.groupId, "-").concat(i);
          }
          /**
           * Sets the height of the body wrapper to the height of the activating tab if dynamic
           * height property is true.
           * @param {?} tabHeight
           * @return {?}
           */

        }, {
          key: "setTabBodyWrapperHeight",
          value: function setTabBodyWrapperHeight(tabHeight) {
            if (!this._dynamicHeight || !this.tabBodyWrapperHeight) {
              return;
            }
            /** @type {?} */


            var wrapper = this.tabBodyWrapper.nativeElement;
            wrapper.style.height = "".concat(this.tabBodyWrapperHeight, "px"); // This conditional forces the browser to paint the height so that
            // the animation to the new height can have an origin.

            if (this.tabBodyWrapper.nativeElement.offsetHeight) {
              wrapper.style.height = "".concat(tabHeight, "px");
            }
          }
          /**
           * Removes the height of the tab body wrapper.
           * @return {?}
           */

        }, {
          key: "removeTabBodyWrapperHeight",
          value: function removeTabBodyWrapperHeight() {
            this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;
            this.tabBodyWrapper.nativeElement.style.height = '';
            this.animationDone.emit();
          }
          /**
           * Handle click events, setting new selected index if appropriate.
           * @param {?} tab
           * @param {?} tabHeader
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick(tab, tabHeader, index) {
            if (!tab.disabled) {
              this.selectedIndex = tabHeader.focusIndex = index;
            }
          }
          /**
           * Retrieves the tabindex for the tab.
           * @param {?} tab
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "getTabIndex",
          value: function getTabIndex(tab, index) {
            if (tab.disabled) {
              return null;
            }

            return this.selectedIndex === index ? 0 : -1;
          }
          /**
           * @private
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "createChangeEvent",
          value: function createChangeEvent(index) {
            /** @type {?} */
            var event = new McTabChangeEvent();
            event.index = index;

            if (this.tabs && this.tabs.length) {
              event.tab = this.tabs.toArray()[index];
            }

            return event;
          }
          /**
           * Subscribes to changes in the tab labels. This is needed, because the \@Input for the label is
           * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the
           * binding to be updated, we need to subscribe to changes in it and trigger change detection
           * manually.
           * @private
           * @return {?}
           */

        }, {
          key: "subscribeToTabLabels",
          value: function subscribeToTabLabels() {
            var _this51 = this;

            if (this.tabLabelSubscription) {
              this.tabLabelSubscription.unsubscribe();
            }

            this.tabLabelSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, _toConsumableArray(this.tabs.map(
            /**
            * @param {?} tab
            * @return {?}
            */
            function (tab) {
              return tab.stateChanges;
            }))).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this51.changeDetectorRef.markForCheck();
            });
          }
          /**
           * Clamps the given index to the bounds of 0 and the tabs length.
           * @private
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "clampTabIndex",
          value: function clampTabIndex(index) {
            // Note the `|| 0`, which ensures that values like NaN can't get through
            // and which would otherwise throw the component into an infinite loop
            // (since Mch.max(NaN, 0) === NaN).
            return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));
          }
        }, {
          key: "dynamicHeight",
          get: function get() {
            return this._dynamicHeight;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._dynamicHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
          }
          /**
           * The index of the active tab.
           * @return {?}
           */

        }, {
          key: "selectedIndex",
          get: function get() {
            return this._selectedIndex;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.indexToSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceNumberProperty"])(value, null);
          }
        }]);

        return McTabGroup;
      }(McTabGroupMixinBase);

      McTabGroup.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-tab-group',
          exportAs: 'mcTabGroup',
          template: "<mc-tab-header #tabHeader\n               [selectedIndex]=\"selectedIndex\"\n               (indexFocused)=\"focusChanged($event)\"\n               (selectFocusedIndex)=\"selectedIndex = $event\">\n    <div role=\"tab\"\n         mcTabLabelWrapper\n         cdkMonitorElementFocus\n         [class.mc-tab-label]=\"!lightTab\"\n         [class.mc-tab-light-label]=\"lightTab\"\n         *ngFor=\"let tab of tabs; let i = index\"\n         [id]=\"getTabLabelId(i)\"\n         [attr.tabindex]=\"getTabIndex(tab, i)\"\n         [attr.aria-posinset]=\"i + 1\"\n         [attr.aria-setsize]=\"tabs.length\"\n         [attr.aria-controls]=\"getTabContentId(i)\"\n         [attr.aria-selected]=\"selectedIndex == i\"\n         [attr.aria-label]=\"tab.ariaLabel || null\"\n         [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n         [class.mc-active]=\"selectedIndex == i\"\n         [disabled]=\"tab.disabled\"\n         (click)=\"handleClick(tab, tabHeader, i)\">\n\n        <div class=\"mc-tab-label__content\">\n            <!-- If there is a label template, use it. -->\n            <ng-template [ngIf]=\"tab.templateLabel\">\n                <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n            </ng-template>\n\n            <!-- If there is not a label template, fall back to the text label. -->\n            <ng-template [ngIf]=\"!tab.templateLabel\">{{tab.textLabel}}</ng-template>\n        </div>\n\n        <div class=\"mc-tab-overlay\"></div>\n    </div>\n</mc-tab-header>\n\n<div class=\"mc-tab-body__wrapper\"\n     #tabBodyWrapper>\n    <mc-tab-body role=\"tabpanel\"\n                 *ngFor=\"let tab of tabs; let i = index\"\n                 [id]=\"getTabContentId(i)\"\n                 [attr.aria-labelledby]=\"getTabLabelId(i)\"\n                 [class.mc-tab-body__active]=\"selectedIndex == i\"\n                 [content]=\"tab.content\"\n                 [position]=\"tab.position\"\n                 [origin]=\"tab.origin\"\n                 [animationDuration]=\"animationDuration\"\n                 (onCentered)=\"removeTabBodyWrapperHeight()\"\n                 (onCentering)=\"setTabBodyWrapperHeight($event)\">\n    </mc-tab-body>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          inputs: ['color', 'disabled'],
          host: {
            "class": 'mc-tab-group',
            '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',
            '[class.mc-tab-group_inverted-header]': 'headerPosition === "below"'
          },
          styles: [".mc-tab-label.cdk-keyboard-focused:after,.mc-tab-light-label.cdk-keyboard-focused:after,.mc-tab-light-label.mc-active:before,.mc-tab-light-label:hover:before{content:\"\";display:block;position:absolute}.mc-tab-light-label.mc-active:before,.mc-tab-light-label:hover:before{bottom:-1px;height:4px;left:0;right:0}.mc-tab-group{box-sizing:border-box;display:flex;flex-direction:column;text-align:center;white-space:nowrap}.mc-tab-group.mc-tab-group_inverted-header{flex-direction:column-reverse}.mc-tab-label{align-items:center;border-bottom-style:solid;border-bottom-width:1px;border-top-left-radius:3px;border-top-right-radius:3px;border-top-style:solid;border-top-width:1px;box-sizing:border-box;cursor:pointer;display:inline-flex;height:40px;justify-content:center;outline:none;padding-left:16px;padding-right:16px;position:relative;text-align:center;white-space:nowrap}.mc-tab-label.cdk-keyboard-focused{z-index:1}.mc-tab-label.cdk-keyboard-focused:after{border-bottom:none;border-style:solid;border-top-left-radius:3px;border-top-right-radius:3px;border-width:2px;bottom:-1px;left:-1px;right:-1px;top:-2px}.mc-tab-label.mc-disabled{pointer-events:none}.mc-tab-label .mc-tab-overlay{bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:-1px}.mc-tab-label.mc-active{border-style:solid;border-width:1px;padding-left:15px;padding-right:15px}.mc-tab-label.mc-active.cdk-keyboard-focused:after{left:-2px;right:-2px;z-index:1}.mc-tab-label .mc-tab-overlay{border-top:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}.mc-tab-light-label{align-items:center;border-bottom-style:solid;border-bottom-width:1px;box-sizing:border-box;cursor:pointer;display:inline-flex;height:40px;justify-content:center;outline:none;padding-left:16px;padding-right:16px;position:relative;text-align:center;white-space:nowrap}.mc-tab-light-label.cdk-keyboard-focused{z-index:1}.mc-tab-light-label.cdk-keyboard-focused:after{border-bottom:none;border-style:solid;border-top-left-radius:3px;border-top-right-radius:3px;border-width:2px;bottom:-1px;left:-1px;right:-1px;top:-2px}.mc-tab-light-label.mc-disabled{pointer-events:none}.mc-tab-light-label .mc-tab-overlay{bottom:0;left:0;pointer-events:none;right:0;top:-1px}.mc-tab-light-label.cdk-keyboard-focused+:hover:before{left:1px}.mc-tab-light-label.cdk-keyboard-focused:after{top:-1px}.mc-tab-light-label .mc-tab-overlay{position:absolute;top:0}.mc-tab-header__content{padding:1px 1px 0}.mc-tab-body__wrapper{display:flex;overflow:hidden;position:relative}.mc-tab-body{bottom:0;display:block;flex-basis:100%;left:0;overflow:hidden;position:absolute;right:0;top:0}.mc-tab-body.mc-tab-body__active{flex-grow:1;overflow-x:hidden;overflow-y:auto;position:relative;z-index:1}.mc-tab-group.mc-tab-group_dynamic-height .mc-tab-body.mc-tab-body__active{overflow-y:hidden}"]
        }]
      }];
      /** @nocollapse */

      McTabGroup.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"],
            args: ['mc-light-tabs']
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MC_TABS_CONFIG]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };

      McTabGroup.propDecorators = {
        dynamicHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        selectedIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        tabs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [McTab]
        }],
        tabBodyWrapper: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: ['tabBodyWrapper', {
            "static": false
          }]
        }],
        tabHeader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: ['tabHeader', {
            "static": false
          }]
        }],
        headerPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        animationDuration: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        selectedIndexChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        focusChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        animationDone: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        selectedTabChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-nav-bar/tab-nav-bar.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Boilerplate for applying mixins to McTabNav.

      /**
       * \@docs-private
       */


      var McTabNavBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McTabNavBase(_elementRef) {
        _classCallCheck(this, McTabNavBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTabNavMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(McTabNavBase);
      /**
       * Navigation component matching the styles of the tab group header.
       */

      var McTabNav = /*#__PURE__*/function (_McTabNavMixinBase) {
        _inherits(McTabNav, _McTabNavMixinBase);

        var _super16 = _createSuper(McTabNav);

        /**
         * @param {?} elementRef
         */
        function McTabNav(elementRef) {
          _classCallCheck(this, McTabNav);

          return _super16.call(this, elementRef);
        }

        return McTabNav;
      }(McTabNavMixinBase);

      McTabNav.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: '[mc-tab-nav-bar]',
          exportAs: 'mcTabNavBar, mcTabNav',
          inputs: ['color'],
          template: "<div class=\"mc-tab-links\">\n    <ng-content></ng-content>\n</div>\n",
          host: {
            "class": 'mc-tab-nav-bar'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.cdk-keyboard-focused:after,.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.mc-active:before,.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link:hover:before,.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link.cdk-keyboard-focused:after{content:\"\";display:block;position:absolute}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.mc-active:before,.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link:hover:before{bottom:-1px;height:4px;left:0;right:0}.mc-tab-link{-webkit-tap-highlight-color:transparent;text-decoration:none;vertical-align:top}.mc-tab-group_stretch-labels .mc-tab-link{flex-basis:0;flex-grow:1}.mc-tab-link.mc-disabled{pointer-events:none}.mc-tab-nav-bar{display:flex}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link{align-items:center;border-bottom-style:solid;border-bottom-width:1px;border-top-left-radius:3px;border-top-right-radius:3px;border-top-style:solid;border-top-width:1px;box-sizing:border-box;cursor:pointer;display:inline-flex;height:40px;justify-content:center;outline:none;padding-left:16px;padding-right:16px;position:relative;text-align:center;white-space:nowrap}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link.cdk-keyboard-focused{z-index:1}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link.cdk-keyboard-focused:after{border-bottom:none;border-style:solid;border-top-left-radius:3px;border-top-right-radius:3px;border-width:2px;bottom:-1px;left:-1px;right:-1px;top:-2px}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link.mc-disabled{pointer-events:none}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link .mc-tab-overlay{bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:-1px}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link.mc-active{border-style:solid;border-width:1px;padding-left:15px;padding-right:15px}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link.mc-active.cdk-keyboard-focused:after{left:-2px;right:-2px;z-index:1}.mc-tab-nav-bar:not(.mc-tab-group_light) .mc-tab-link .mc-tab-overlay{border-top:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link{align-items:center;border-bottom-style:solid;border-bottom-width:1px;box-sizing:border-box;cursor:pointer;display:inline-flex;height:40px;justify-content:center;outline:none;padding-left:16px;padding-right:16px;position:relative;text-align:center;white-space:nowrap}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.cdk-keyboard-focused{z-index:1}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.cdk-keyboard-focused:after{border-bottom:none;border-style:solid;border-top-left-radius:3px;border-top-right-radius:3px;border-width:2px;bottom:-1px;left:-1px;right:-1px;top:-2px}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.mc-disabled{pointer-events:none}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link .mc-tab-overlay{bottom:0;left:0;pointer-events:none;right:0;top:-1px}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.cdk-keyboard-focused+:hover:before{left:1px}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link.cdk-keyboard-focused:after{top:-1px}.mc-tab-nav-bar.mc-tab-group_light .mc-tab-link .mc-tab-overlay{position:absolute;top:0}.mc-tab-links{display:flex;flex-grow:1;padding:1px 1px 0;position:relative}.mc-tab-links .mc-tab-group_align-labels-center{justify-content:center}.mc-tab-links .mc-tab-group_align-labels-end{justify-content:flex-end}"]
        }]
      }];
      /** @nocollapse */

      McTabNav.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      }; // Boilerplate for applying mixins to McTabLink.


      var McTabLinkBase = function McTabLinkBase() {
        _classCallCheck(this, McTabLinkBase);
      }; // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTabLinkMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabLinkBase));
      /**
       * Link inside of a `mc-tab-nav-bar`.
       */

      var McTabLink = /*#__PURE__*/function (_McTabLinkMixinBase) {
        _inherits(McTabLink, _McTabLinkMixinBase);

        var _super17 = _createSuper(McTabLink);

        /**
         * @param {?} elementRef
         * @param {?} focusMonitor
         */
        function McTabLink(elementRef, focusMonitor) {
          var _this52;

          _classCallCheck(this, McTabLink);

          _this52 = _super17.call(this);
          _this52.elementRef = elementRef;
          _this52.focusMonitor = focusMonitor;
          /**
           * Whether the tab link is active or not.
           */

          _this52.isActive = false;

          _this52.focusMonitor.monitor(_this52.elementRef.nativeElement);

          return _this52;
        }
        /**
         * Whether the link is active.
         * @return {?}
         */


        _createClass(McTabLink, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
          }
        }, {
          key: "active",
          get: function get() {
            return this.isActive;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.isActive) {
              this.isActive = value;
            }
          }
        }]);

        return McTabLink;
      }(McTabLinkMixinBase);

      McTabLink.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mc-tab-link], [mcTabLink]',
          exportAs: 'mcTabLink',
          inputs: ['disabled', 'tabIndex'],
          host: {
            "class": 'mc-tab-link',
            '[attr.aria-current]': 'active',
            '[attr.aria-disabled]': 'disabled.toString()',
            '[attr.tabindex]': 'tabIndex',
            '[class.mc-disabled]': 'disabled',
            '[class.mc-active]': 'active'
          }
        }]
      }];
      /** @nocollapse */

      McTabLink.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }];
      };

      McTabLink.propDecorators = {
        active: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tabs.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTabsModule = function McTabsModule() {
        _classCallCheck(this, McTabsModule);
      };

      McTabsModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"]],
          // Don't export all components because some are only to be used internally.
          exports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"], McTabGroup, McTabLabel, McTab, McTabNav, McTabLink, McTabContent, McLightTabsCssStyler, McAlignTabsCenterCssStyler, McAlignTabsEndCssStyler, McStretchTabsCssStyler],
          declarations: [McTabGroup, McTabLabel, McTab, McTabLabelWrapper, McTabNav, McTabLink, McTabBody, McTabBodyPortal, McTabHeader, McTabContent, McLightTabsCssStyler, McAlignTabsCenterCssStyler, McAlignTabsEndCssStyler, McStretchTabsCssStyler]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: tab-nav-bar/index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-tabs.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-tabs.js.map

      /***/
    },

    /***/
    "6uKg":
    /*!*****************************************************************************************!*\
      !*** ./packages/docs/src/app/components/component-viewer/component-viewer.component.ts ***!
      \*****************************************************************************************/

    /*! exports provided: ComponentViewerComponent, ComponentOverviewComponent */

    /***/
    function uKg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentViewerComponent", function () {
        return ComponentViewerComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentOverviewComponent", function () {
        return ComponentOverviewComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_component_viewer_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./component-viewer.template.html */
      "A+YV");
      /* harmony import */


      var _component_overview_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./component-overview.scss */
      "lRC7");
      /* harmony import */


      var _raw_loader_component_overview_template_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! raw-loader!./component-overview.template.html */
      "TIT3");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../../shared/documentation-items/documentation-items */
      "rMhK");
      /* harmony import */


      var _anchors_anchors_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../anchors/anchors.component */
      "Cb09");

      var ComponentViewerComponent = /*#__PURE__*/function () {
        function ComponentViewerComponent(routeActivated, docItems) {
          var _this53 = this;

          _classCallCheck(this, ComponentViewerComponent);

          // Listen to changes on the current route for the doc id (e.g. button/checkbox) and the
          // parent route for the section (mosaic/cdk).
          this.docItems = docItems;
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
          Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["combineLatest"])([routeActivated.params, routeActivated.parent.params]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["map"])(function (p) {
            return {
              id: p[0].id,
              section: p[1].section
            };
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["map"])(function (p) {
            return {
              doc: docItems.getItemById(p.id, p.section),
              section: p.section
            };
          }, Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this.destroyed))).subscribe(function (d) {
            _this53.componentDocItem = d.doc;
          });
        }

        _createClass(ComponentViewerComponent, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.next();
          }
        }]);

        return ComponentViewerComponent;
      }();

      ComponentViewerComponent.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"]
        }, {
          type: _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_9__["DocumentationItems"]
        }];
      };

      ComponentViewerComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_5__["Component"])({
        selector: 'docs-component-viewer',
        template: _raw_loader_component_viewer_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewEncapsulation"].None,
        styles: [_component_overview_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"], _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_9__["DocumentationItems"]])], ComponentViewerComponent);

      var ComponentOverviewComponent = /*#__PURE__*/function () {
        function ComponentOverviewComponent(componentViewer, router, ref) {
          var _this54 = this;

          _classCallCheck(this, ComponentOverviewComponent);

          this.componentViewer = componentViewer;
          this.router = router;
          this.ref = ref;
          this.routeSeparator = '/overview';
          this.documentName = '';
          this.documentLost = false;
          this.isLoad = true;
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();

          this.copyCode = function (event) {
            var codeCopyAnimationTime = 1000;
            var copyBlock = event.target.parentElement.parentElement;
            var range = document.createRange();
            range.selectNodeContents(copyBlock);
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            document.execCommand('copy');
            sel.removeAllRanges();
            copyBlock.classList.add('docs-markdown-code-block_success');
            setTimeout(function () {
              copyBlock.classList.remove('docs-markdown-code-block_success');
            }, codeCopyAnimationTime);
          };

          this.currentUrl = this.getRoute(router.url);
          this.router.events.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this.destroyed)).subscribe(function (event) {
            if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationStart"]) {
              var rootUrl = _this54.getRoute(event.url);

              if (rootUrl !== _this54.currentUrl) {
                _this54.currentUrl = rootUrl;
                _this54.isLoad = false;
              }
            }
          });
        }

        _createClass(ComponentOverviewComponent, [{
          key: "getRoute",
          value: function getRoute(route) {
            return route.split(this.routeSeparator)[0];
          }
        }, {
          key: "scrollToSelectedContentSection",
          value: function scrollToSelectedContentSection() {
            this.documentLost = false;
            this.showView();
            this.createCopyIcons();

            if (this.anchorsComponent) {
              this.anchorsComponent.setScrollPosition();
            }
          }
        }, {
          key: "createCopyIcons",
          value: function createCopyIcons() {
            var _this55 = this;

            var codeBlocks = document.querySelectorAll('.docs-markdown__pre .docs-markdown__code');
            codeBlocks.forEach(function (codeBlock) {
              // Creating copy code Block
              var copyBlock = document.createElement('span');
              copyBlock.className = 'docs-markdown-code-block'; // Creating copy success message

              var copySuccessBlock = document.createElement('span');
              copySuccessBlock.className = 'docs-markdown-code-block__copied';
              copySuccessBlock.innerText = 'Скопировано';
              var succeedIcon = document.createElement('i');
              succeedIcon.className = 'mc mc-check_16';
              copySuccessBlock.prepend(succeedIcon); // Adding copy success message to copy code Block

              copyBlock.appendChild(copySuccessBlock); // Creating copy Icon

              var copyIcon = document.createElement('i');
              copyIcon.className = 'mc mc-copy_16 docs-markdown__code-icon';
              copyIcon.addEventListener('click', _this55.copyCode); // Adding copy Icon to copy code Block

              copyBlock.appendChild(copyIcon);
              codeBlock.prepend(copyBlock);
            });
          }
        }, {
          key: "showDocumentLostAlert",
          value: function showDocumentLostAlert() {
            this.documentLost = true;
            this.showView();

            if (this.anchorsComponent) {
              this.anchorsComponent.setScrollPosition();
            }
          }
        }, {
          key: "showView",
          value: function showView() {
            this.documentName = this.componentViewer.componentDocItem.id;
            this.isLoad = true;
            this.ref.detectChanges();
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.next();
          }
        }]);

        return ComponentOverviewComponent;
      }();

      ComponentOverviewComponent.ctorParameters = function () {
        return [{
          type: ComponentViewerComponent
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectorRef"]
        }];
      };

      ComponentOverviewComponent.propDecorators = {
        anchorsComponent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewChild"],
          args: ['toc', {
            "static": false
          }]
        }]
      };
      ComponentOverviewComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_5__["Component"])({
        selector: 'component-overview',
        template: _raw_loader_component_overview_template_html__WEBPACK_IMPORTED_MODULE_3__["default"],
        animations: [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('fadeInOut', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('fadeIn', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
          opacity: 1
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('fadeOut', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
          opacity: 0
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('fadeIn => fadeOut', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('0s')]), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('fadeOut => fadeIn', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('0.3s')])])],
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewEncapsulation"].None
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [ComponentViewerComponent, _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"], _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectorRef"]])], ComponentOverviewComponent);
      /***/
    },

    /***/
    "7oHS":
    /*!**************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-form-field.js ***!
      \**************************************************************/

    /*! exports provided: McCleaner, McFormField, McFormFieldBase, McFormFieldControl, McFormFieldMixinBase, McFormFieldModule, McFormFieldWithoutBorders, McHint, McPrefix, McStepper, McSuffix, getMcFormFieldMissingControlError, getMcFormFieldYouCanNotUseCleanerInNumberInputError */

    /***/
    function oHS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCleaner", function () {
        return McCleaner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormField", function () {
        return McFormField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormFieldBase", function () {
        return McFormFieldBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormFieldControl", function () {
        return McFormFieldControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormFieldMixinBase", function () {
        return McFormFieldMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormFieldModule", function () {
        return McFormFieldModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McFormFieldWithoutBorders", function () {
        return McFormFieldWithoutBorders;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McHint", function () {
        return McHint;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McPrefix", function () {
        return McPrefix;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McStepper", function () {
        return McStepper;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSuffix", function () {
        return McSuffix;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcFormFieldMissingControlError", function () {
        return getMcFormFieldMissingControlError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcFormFieldYouCanNotUseCleanerInNumberInputError", function () {
        return getMcFormFieldYouCanNotUseCleanerInNumberInputError;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: cleaner.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McCleaner = function McCleaner() {
        _classCallCheck(this, McCleaner);
      };

      McCleaner.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-cleaner',
          exportAs: 'mcCleaner',
          template: '<i class="mc-icon_light" mc-icon="mc-close-circle_16" color="second"></i>',
          host: {
            "class": 'mc-cleaner'
          }
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: form-field-control.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * An interface which allows a control to work inside of a `MсFormField`.
       * @abstract
       * @template T
       */
      // tslint:disable-next-line:naming-convention

      var McFormFieldControl = function McFormFieldControl() {
        _classCallCheck(this, McFormFieldControl);
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: form-field-errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @return {?}
       */


      function getMcFormFieldMissingControlError() {
        return Error('mc-form-field must contain a McFormFieldControl.');
      }
      /**
       * @return {?}
       */


      function getMcFormFieldYouCanNotUseCleanerInNumberInputError() {
        return Error("You can't use mc-cleaner with input that have type=\"number\"");
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: hint.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var nextUniqueId = 0;

      var McHint = function McHint() {
        _classCallCheck(this, McHint);

        this.id = "mc-hint-".concat(nextUniqueId++);
      };

      McHint.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: 'mc-hint',
          host: {
            "class": 'mc-hint',
            '[attr.id]': 'id'
          }
        }]
      }];
      McHint.propDecorators = {
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: prefix.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McPrefix = function McPrefix() {
        _classCallCheck(this, McPrefix);
      };

      McPrefix.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mcPrefix]'
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: stepper.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McStepper = /*#__PURE__*/function () {
        function McStepper() {
          _classCallCheck(this, McStepper);

          this.stepUp = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this.stepDown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        }
        /**
         * @param {?} numberInput
         * @return {?}
         */


        _createClass(McStepper, [{
          key: "connectTo",
          value: function connectTo(numberInput) {
            if (!numberInput) {
              return;
            }

            this.stepUp.subscribe(
            /**
            * @return {?}
            */
            function () {
              numberInput.stepUp(numberInput.step);
            });
            this.stepDown.subscribe(
            /**
            * @return {?}
            */
            function () {
              numberInput.stepDown(numberInput.step);
            });
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onStepUp",
          value: function onStepUp($event) {
            this.stepUp.emit();
            $event.preventDefault();
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onStepDown",
          value: function onStepDown($event) {
            this.stepDown.emit();
            $event.preventDefault();
          }
        }]);

        return McStepper;
      }();

      McStepper.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-stepper',
          template: "\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    "
        }]
      }];
      McStepper.propDecorators = {
        stepUp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        stepDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: suffix.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McSuffix = function McSuffix() {
        _classCallCheck(this, McSuffix);
      };

      McSuffix.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mcSuffix]'
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: form-field.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var nextUniqueId$1 = 0;

      var McFormFieldBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McFormFieldBase(_elementRef) {
        _classCallCheck(this, McFormFieldBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McFormFieldMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(McFormFieldBase);

      var McFormField = /*#__PURE__*/function (_McFormFieldMixinBase) {
        _inherits(McFormField, _McFormFieldMixinBase);

        var _super18 = _createSuper(McFormField);

        // tslint:disable-next-line:naming-convention

        /**
         * @param {?} _elementRef
         * @param {?} _changeDetectorRef
         */
        function McFormField(_elementRef, _changeDetectorRef) {
          var _this56;

          _classCallCheck(this, McFormField);

          _this56 = _super18.call(this, _elementRef);
          _this56._elementRef = _elementRef;
          _this56._changeDetectorRef = _changeDetectorRef; // Unique id for the internal form field label.

          _this56.labelId = "mc-form-field-label-".concat(nextUniqueId$1++);
          _this56.hovered = false;
          _this56.canCleanerClearByEsc = true;
          _this56.$unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          return _this56;
        }
        /**
         * @return {?}
         */


        _createClass(McFormField, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            var _this57 = this;

            if (
            /** @type {?} */
            this.control.numberInput && this.hasCleaner) {
              this.cleaner = null;
              throw getMcFormFieldYouCanNotUseCleanerInNumberInputError();
            }

            this.validateControlChild();

            if (this.control.controlType) {
              this._elementRef.nativeElement.classList.add("mc-form-field-type-".concat(this.control.controlType));
            } // Subscribe to changes in the child control state in order to update the form field UI.


            this.control.stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])()).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this57._changeDetectorRef.markForCheck();
            });

            if (this.hasStepper) {
              this.stepper.connectTo(
              /** @type {?} */
              this.control.numberInput);
            } // Run change detection if the value changes.

            /** @type {?} */


            var valueChanges = this.control.ngControl && this.control.ngControl.valueChanges || rxjs__WEBPACK_IMPORTED_MODULE_5__["EMPTY"];
            Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(valueChanges).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this.$unsubscribe)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this57._changeDetectorRef.markForCheck();
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            this.validateControlChild();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            // Avoid animations on load.
            this._changeDetectorRef.detectChanges();
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "clearValue",
          value: function clearValue($event) {
            $event.stopPropagation();

            if (this.control && this.control.ngControl) {
              this.control.ngControl.reset();
              this.control.focus();
            }
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onContainerClick",
          value: function onContainerClick($event) {
            if (this.control.onContainerClick) {
              this.control.onContainerClick($event);
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            // tslint:disable-next-line:deprecation
            if (this.canCleanerClearByEsc && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] && this.control.focused && this.hasCleaner) {
              if (this.control && this.control.ngControl) {
                this.control.ngControl.reset();
              }

              event.preventDefault();
            }
          }
          /**
           * @param {?} isHovered
           * @return {?}
           */

        }, {
          key: "onHoverChanged",
          value: function onHoverChanged(isHovered) {
            if (isHovered !== this.hovered) {
              this.hovered = isHovered;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * Gets an ElementRef for the element that a overlay attached to the form-field should be
           * positioned relative to.
           * @return {?}
           */

        }, {
          key: "getConnectedOverlayOrigin",
          value: function getConnectedOverlayOrigin() {
            return this.connectionContainerRef || this._elementRef;
          }
          /**
           * Determines whether a class from the NgControl should be forwarded to the host element.
           * @param {?} prop
           * @return {?}
           */

        }, {
          key: "shouldForward",
          value: function shouldForward(prop) {
            /** @type {?} */
            var ngControl = this.control ? this.control.ngControl : null;
            return ngControl && ngControl[prop];
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.$unsubscribe.next();
            this.$unsubscribe.complete();
          }
          /**
           * Throws an error if the form field's control is missing.
           * @protected
           * @return {?}
           */

        }, {
          key: "validateControlChild",
          value: function validateControlChild() {
            if (!this.control) {
              throw getMcFormFieldMissingControlError();
            }
          }
        }, {
          key: "hasHint",
          get: function get() {
            return this.hint && this.hint.length > 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasSuffix",
          get: function get() {
            return this.suffix && this.suffix.length > 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasPrefix",
          get: function get() {
            return this.prefix && this.prefix.length > 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasCleaner",
          get: function get() {
            return !!this.cleaner;
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasStepper",
          get: function get() {
            return !!this.stepper;
          }
          /**
           * @return {?}
           */

        }, {
          key: "canShowCleaner",
          get: function get() {
            return this.hasCleaner && this.control && this.control.ngControl ? this.control.ngControl.value && !this.control.disabled : false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.control && this.control.disabled;
          }
          /**
           * @return {?}
           */

        }, {
          key: "canShowStepper",
          get: function get() {
            return this.control && !this.disabled && (this.control.focused || this.hovered);
          }
        }]);

        return McFormField;
      }(McFormFieldMixinBase);

      McFormField.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-form-field',
          exportAs: 'mcFormField',
          template: "<div class=\"mc-form-field__container\" (click)=\"onContainerClick($event)\">\n\n    <div class=\"mc-form-field__prefix\" *ngIf=\"hasPrefix\">\n        <ng-content select=\"[mcPrefix]\"></ng-content>\n    </div>\n\n    <div class=\"mc-form-field__infix\">\n        <ng-content></ng-content>\n    </div>\n\n    <div class=\"mc-form-field__suffix\" *ngIf=\"hasSuffix\">\n        <ng-content select=\"[mcSuffix]\"></ng-content>\n    </div>\n\n    <div class=\"mc-form-field__cleaner\"\n         *ngIf=\"canShowCleaner && !hasSuffix\"\n         (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <ng-content *ngIf=\"canShowStepper\" select=\"mc-stepper\"></ng-content>\n</div>\n\n<div class=\"mc-form-field__hint\">\n    <ng-content select=\"mc-hint\"></ng-content>\n</div>\n",
          host: {
            "class": 'mc-form-field',
            '[class.mc-form-field_invalid]': 'control.errorState',
            '[class.mc-form-field_has-prefix]': 'hasPrefix',
            '[class.mc-form-field_has-suffix]': 'hasSuffix',
            '[class.mc-form-field_has-cleaner]': 'canShowCleaner',
            '[class.mc-form-field_has-stepper]': 'canShowStepper',
            '[class.mc-disabled]': 'control.disabled',
            '[class.mc-focused]': 'control.focused',
            '[class.ng-untouched]': 'shouldForward("untouched")',
            '[class.ng-touched]': 'shouldForward("touched")',
            '[class.ng-pristine]': 'shouldForward("pristine")',
            '[class.ng-dirty]': 'shouldForward("dirty")',
            '[class.ng-valid]': 'shouldForward("valid")',
            '[class.ng-invalid]': 'shouldForward("invalid")',
            '[class.ng-pending]': 'shouldForward("pending")',
            '(keydown)': 'onKeyDown($event)',
            '(mouseenter)': 'onHoverChanged(true)',
            '(mouseleave)': 'onHoverChanged(false)'
          },
          inputs: ['color'],
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-form-field{border-radius:3px;display:inline-block;position:relative;width:100%}.mc-form-field:hover{z-index:1}.mc-form-field.mc-focused{z-index:2}.mc-hint{display:block}.mc-form-field__hint>.mc-hint{margin-top:4px}.mc-form-field__container{border:1px solid transparent;border-radius:3px;position:relative}.mc-form-field_without-borders .mc-form-field__container{border-color:transparent}.mc-form-field__prefix,.mc-form-field__suffix{align-items:center;bottom:0;display:flex;flex-direction:row;justify-content:center;position:absolute;top:0;width:32px}.mc-form-field__prefix{left:0}.mc-form-field__suffix{right:0}.mc-form-field_has-cleaner .mc-input,.mc-form-field_has-stepper .mc-input,.mc-form-field_has-suffix .mc-input{padding-right:32px}.mc-form-field_has-prefix .mc-input{padding-left:32px}.mc-cleaner{cursor:pointer;display:flex;height:100%;width:32px}.mc-cleaner .mc-icon{align-items:center;display:flex;height:100%;justify-content:center;width:100%}.mc-form-field__cleaner .mc-cleaner,mc-stepper{bottom:0;position:absolute;right:0;top:0}mc-stepper{align-items:center;display:flex;flex-direction:column;justify-content:center;width:32px}mc-stepper .mc-stepper-step-down,mc-stepper .mc-stepper-step-up{cursor:pointer;text-align:center;width:32px}mc-stepper .mc-stepper-step-up{transform:scaleY(-1)}", ".mc-input{background:transparent;border:none;box-sizing:border-box;margin:0;min-height:30px;outline:none;padding:5px 16px;width:100%}.mc-input::-ms-clear,.mc-input::-ms-reveal{display:none;height:0;width:0}.mc-input::-webkit-search-cancel-button,.mc-input::-webkit-search-decoration,.mc-input::-webkit-search-results-button,.mc-input::-webkit-search-results-decoration{display:none}.mc-input{display:inline-block}input.mc-input[type=number]{-moz-appearance:textfield}input.mc-input[type=number]::-webkit-inner-spin-button,input.mc-input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none}input.mc-input:invalid{box-shadow:unset}", ".mc-textarea{-webkit-appearance:none;background:transparent;border:none;box-sizing:border-box;display:inline-block;margin:0;outline:none;overflow:auto;padding:5px 16px;resize:none;vertical-align:bottom;width:100%}.mc-textarea:not(.mc-textarea-resizable){box-sizing:border-box;overflow-y:hidden}.mc-textarea.mc-textarea-resizable{min-height:50px;resize:vertical}.mc-textarea:invalid{box-shadow:unset}"]
        }]
      }];
      /** @nocollapse */

      McFormField.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }];
      };

      McFormField.propDecorators = {
        control: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
          args: [McFormFieldControl, {
            "static": false
          }]
        }],
        stepper: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
          args: [McStepper, {
            "static": false
          }]
        }],
        cleaner: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
          args: [McCleaner, {
            "static": false
          }]
        }],
        hint: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
          args: [McHint]
        }],
        suffix: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
          args: [McSuffix]
        }],
        prefix: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
          args: [McPrefix]
        }],
        connectionContainerRef: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
          args: ['connectionContainer', {
            "static": true
          }]
        }]
      };

      if (false) {}

      var McFormFieldWithoutBorders = function McFormFieldWithoutBorders() {
        _classCallCheck(this, McFormFieldWithoutBorders);
      };

      McFormFieldWithoutBorders.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: 'mc-form-field[mcFormFieldWithoutBorders]',
          exportAs: 'mcFormFieldWithoutBorders',
          host: {
            "class": 'mc-form-field_without-borders'
          }
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: form-field.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McFormFieldModule = function McFormFieldModule() {
        _classCallCheck(this, McFormFieldModule);
      };

      McFormFieldModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          declarations: [McFormField, McFormFieldWithoutBorders, McHint, McPrefix, McSuffix, McCleaner, McStepper],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__["McIconModule"]],
          exports: [McFormField, McFormFieldWithoutBorders, McHint, McPrefix, McSuffix, McCleaner, McStepper]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-form-field.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-form-field.js.map

      /***/
    },

    /***/
    "8pH+":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-link.js ***!
      \********************************************************/

    /*! exports provided: McLink, McLinkBase, McLinkMixinBase, McLinkModule */

    /***/
    function pH(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLink", function () {
        return McLink;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLinkBase", function () {
        return McLinkBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLinkMixinBase", function () {
        return McLinkMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McLinkModule", function () {
        return McLinkModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /**
       * @fileoverview added by tsickle
       * Generated from: link.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McLinkBase =
      /**
       * @param {?} elementRef
       */
      function McLinkBase(elementRef) {
        _classCallCheck(this, McLinkBase);

        this.elementRef = elementRef;
      };

      if (false) {} // tslint:disable-next-line: naming-convention

      /** @type {?} */


      var McLinkMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McLinkBase));

      var McLink = /*#__PURE__*/function (_McLinkMixinBase) {
        _inherits(McLink, _McLinkMixinBase);

        var _super19 = _createSuper(McLink);

        /**
         * @param {?} elementRef
         * @param {?} focusMonitor
         * @param {?} changeDetector
         */
        function McLink(elementRef, focusMonitor, changeDetector) {
          var _this58;

          _classCallCheck(this, McLink);

          _this58 = _super19.call(this, elementRef);
          _this58.focusMonitor = focusMonitor;
          _this58.changeDetector = changeDetector;
          _this58._disabled = false;

          _this58.focusMonitor.monitor(elementRef.nativeElement, true);

          return _this58;
        }
        /**
         * @return {?}
         */


        _createClass(McLink, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.getHostElement().focus();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this.elementRef.nativeElement;
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);

            if (newValue !== this._disabled) {
              this._disabled = newValue;
              this.changeDetector.markForCheck();
            }
          }
        }]);

        return McLink;
      }(McLinkMixinBase);

      McLink.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'a.mc-link',
          exportAs: 'mcLink',
          inputs: ['tabIndex'],
          host: {
            '[attr.disabled]': 'disabled || null',
            '[attr.tabindex]': 'tabIndex'
          }
        }]
      }];
      /** @nocollapse */

      McLink.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }];
      };

      McLink.propDecorators = {
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: link.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McLinkModule = function McLinkModule() {
        _classCallCheck(this, McLinkModule);
      };

      McLinkModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"]],
          declarations: [McLink],
          exports: [McLink]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-link.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-link.js.map

      /***/
    },

    /***/
    "9Bz7":
    /*!*********************************************************************************!*\
      !*** ./packages/docs/src/app/components/main-layout/main-layout.component.scss ***!
      \*********************************************************************************/

    /*! exports provided: default */

    /***/
    function Bz7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".main {\n  display: flex;\n  height: 100%;\n  width: 100%;\n}\n\n.content {\n  width: calc(100% - 600px);\n  margin-top: 64px;\n  margin-left: 300px;\n  margin-right: 300px;\n  margin-bottom: 62px;\n  padding: 20px 69px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL21haW4tbGF5b3V0L21haW4tbGF5b3V0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBYTtFQUNiLFlBQVk7RUFDWixXQUFXO0FBQ2Y7O0FBRUE7RUFDSSx5QkFBeUI7RUFFckIsZ0JBQVM7RUFDVCxrQkFBVztFQUNYLG1CQUFZO0VBQ1osbUJBQVk7RUFHaEIsa0JBQWtCO0FBRnRCIiwiZmlsZSI6InBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL21haW4tbGF5b3V0L21haW4tbGF5b3V0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW4ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4uY29udGVudCB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDYwMHB4KTsgLy8gZm9yIEVkZ2VcbiAgICBtYXJnaW46IHtcbiAgICAgICAgdG9wOiA2NHB4O1xuICAgICAgICBsZWZ0OiAzMDBweDtcbiAgICAgICAgcmlnaHQ6IDMwMHB4O1xuICAgICAgICBib3R0b206IDYycHg7XG4gICAgfVxuXG4gICAgcGFkZGluZzogMjBweCA2OXB4O1xufVxuIl19 */";
      /***/
    },

    /***/
    "9hGJ":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tags.js ***!
      \********************************************************/

    /*! exports provided: MC_TAGS_DEFAULT_OPTIONS, McTag, McTagAvatar, McTagBase, McTagInput, McTagList, McTagListBase, McTagListChange, McTagListMixinBase, McTagMixinBase, McTagRemove, McTagSelectionChange, McTagTrailingIcon, McTagsModule */

    /***/
    function hGJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TAGS_DEFAULT_OPTIONS", function () {
        return MC_TAGS_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTag", function () {
        return McTag;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagAvatar", function () {
        return McTagAvatar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagBase", function () {
        return McTagBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagInput", function () {
        return McTagInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagList", function () {
        return McTagList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagListBase", function () {
        return McTagListBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagListChange", function () {
        return McTagListChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagListMixinBase", function () {
        return McTagListMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagMixinBase", function () {
        return McTagMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagRemove", function () {
        return McTagRemove;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagSelectionChange", function () {
        return McTagSelectionChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagTrailingIcon", function () {
        return McTagTrailingIcon;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTagsModule", function () {
        return McTagsModule;
      });
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /**
       * @fileoverview added by tsickle
       * Generated from: tag-default-options.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Default options, for the chips module, that can be overridden.
       * @record
       */


      function McTagsDefaultOptions() {}

      if (false) {}
      /**
       * Injection token to be used to override the default options for the chips module.
       * @type {?}
       */


      var MC_TAGS_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-tags-default-options');
      /**
       * @fileoverview added by tsickle
       * Generated from: tag.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */

      function McTagEvent() {}

      if (false) {}
      /**
       * Event object emitted by McTag when selected or deselected.
       */


      var McTagSelectionChange =
      /**
       * @param {?} source
       * @param {?} selected
       * @param {?=} isUserInput
       */
      function McTagSelectionChange(source, selected) {
        var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _classCallCheck(this, McTagSelectionChange);

        this.source = source;
        this.selected = selected;
        this.isUserInput = isUserInput;
      };

      if (false) {}
      /** @type {?} */


      var TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];
      /**
       * Dummy directive to add CSS class to tag avatar.
       * \@docs-private
       */

      var McTagAvatar = function McTagAvatar() {
        _classCallCheck(this, McTagAvatar);
      };

      McTagAvatar.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'mc-tag-avatar, [mcTagAvatar]',
          host: {
            "class": 'mc-tag-avatar'
          }
        }]
      }];
      /**
       * Dummy directive to add CSS class to tag trailing icon.
       * \@docs-private
       */

      var McTagTrailingIcon = function McTagTrailingIcon() {
        _classCallCheck(this, McTagTrailingIcon);
      };

      McTagTrailingIcon.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',
          host: {
            "class": 'mc-tag-trailing-icon'
          }
        }]
      }];

      var McTagBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McTagBase(_elementRef) {
        _classCallCheck(this, McTagBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTagMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["mixinDisabled"])(McTagBase));

      var McTag = /*#__PURE__*/function (_McTagMixinBase) {
        _inherits(McTag, _McTagMixinBase);

        var _super20 = _createSuper(McTag);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} _ngZone
         */
        function McTag(elementRef, changeDetectorRef, _ngZone) {
          var _this59;

          _classCallCheck(this, McTag);

          _this59 = _super20.call(this, elementRef);
          _this59.elementRef = elementRef;
          _this59.changeDetectorRef = changeDetectorRef;
          _this59._ngZone = _ngZone;
          /**
           * Emits when the tag is focused.
           */

          _this59.onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
          /**
           * Emits when the tag is blured.
           */

          _this59.onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
          /**
           * Whether the tag has focus.
           */

          _this59.hasFocus = false;
          /**
           * Whether the tag list is selectable
           */

          _this59.tagListSelectable = true;
          /**
           * Emitted when the tag is selected or deselected.
           */

          _this59.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Emitted when the tag is destroyed.
           */

          _this59.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Emitted when a tag is to be removed.
           */

          _this59.removed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this59._selected = false;
          _this59._selectable = true;
          _this59._removable = true;
          _this59._disabled = false;

          _this59.addHostClassName();

          _this59.nativeElement = elementRef.nativeElement;
          return _this59;
        }
        /**
         * Whether the tag is selected.
         * @return {?}
         */


        _createClass(McTag, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.addClassModificatorForIcons();
          }
          /**
           * @return {?}
           */

        }, {
          key: "addClassModificatorForIcons",
          value: function addClassModificatorForIcons() {
            /** @type {?} */
            var icons = this.contentChildren.map(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return item._elementRef.nativeElement;
            });

            if (icons.length === 1) {
              /** @type {?} */
              var iconElement = icons[0];

              if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {
                if (iconElement.nextSibling) {
                  iconElement.classList.add('mc-icon_left');
                  this.nativeElement.classList.add('mc-left-icon');
                }

                if (iconElement.previousSibling) {
                  iconElement.classList.add('mc-icon_right');
                  this.nativeElement.classList.add('mc-right-icon');
                }
              }
            } else if (icons.length > 1) {
              /** @type {?} */
              var firstIconElement = icons[0];
              /** @type {?} */

              var secondIconElement = icons[1];
              firstIconElement.classList.add('mc-icon_left');
              secondIconElement.classList.add('mc-icon_right');
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "addHostClassName",
          value: function addHostClassName() {
            // Add class for the different tags
            var _iterator = _createForOfIteratorHelper(TAG_ATTRIBUTE_NAMES),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var attr = _step.value;

                if (this.elementRef.nativeElement.hasAttribute(attr) || this.elementRef.nativeElement.tagName.toLowerCase() === attr) {
                  /** @type {?} */
                  this.elementRef.nativeElement.classList.add(attr);
                  return;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            /** @type {?} */
            this.elementRef.nativeElement.classList.add('mc-standard-tag');
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.emit({
              tag: this
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "select",
          value: function select() {
            if (!this._selected) {
              this._selected = true;
              this.dispatchSelectionChange();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "deselect",
          value: function deselect() {
            if (this._selected) {
              this._selected = false;
              this.dispatchSelectionChange();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "selectViaInteraction",
          value: function selectViaInteraction() {
            if (!this._selected) {
              this._selected = true;
              this.dispatchSelectionChange(true);
            }
          }
          /**
           * @param {?=} isUserInput
           * @return {?}
           */

        }, {
          key: "toggleSelected",
          value: function toggleSelected() {
            var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this._selected = !this.selected;
            this.dispatchSelectionChange(isUserInput);
            return this.selected;
          }
          /**
           * Allows for programmatic focusing of the tag.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            var _this60 = this;

            if (!this.selectable) {
              return;
            }

            if (!this.hasFocus) {
              this.elementRef.nativeElement.focus();
              this.onFocus.next({
                tag: this
              });
              Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                _this60.hasFocus = true;

                _this60.changeDetectorRef.markForCheck();
              });
            }
          }
          /**
           * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or
           * BACKSPACE keys are pressed.
           *
           * Informs any listeners of the removal request. Does not remove the tag from the DOM.
           * @return {?}
           */

        }, {
          key: "remove",
          value: function remove() {
            if (this.removable) {
              this.removed.emit({
                tag: this
              });
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick(event) {
            if (this.disabled) {
              event.preventDefault();
            } else {
              event.stopPropagation();
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            if (this.disabled) {
              return;
            } // tslint:disable-next-line: deprecation


            switch (event.keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DELETE"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["BACKSPACE"]:
                // If we are removable, remove the focused tag
                this.remove(); // Always prevent so page navigation does not occur

                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]:
                // If we are selectable, toggle the focused tag
                if (this.selectable) {
                  this.toggleSelected(true);
                } // Always prevent space from scrolling the page since the list has focus


                event.preventDefault();
                break;

              default:
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            var _this61 = this;

            // When animations are enabled, Angular may end up removing the tag from the DOM a little
            // earlier than usual, causing it to be blurred and throwing off the logic in the tag list
            // that moves focus not the next item. To work around the issue, we defer marking the tag
            // as not focused until the next time the zone stabilizes.
            this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this61._ngZone.run(
              /**
              * @return {?}
              */
              function () {
                _this61.hasFocus = false;

                _this61.onBlur.next({
                  tag: _this61
                });
              });
            });
          }
          /**
           * @private
           * @param {?=} isUserInput
           * @return {?}
           */

        }, {
          key: "dispatchSelectionChange",
          value: function dispatchSelectionChange() {
            var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.selectionChange.emit({
              source: this,
              isUserInput: isUserInput,
              selected: this._selected
            });
          }
        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var coercedValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            if (coercedValue !== this._selected) {
              this._selected = coercedValue;
              this.dispatchSelectionChange();
            }
          }
          /**
           * The value of the tag. Defaults to the content inside `<mc-tag>` tags.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value !== undefined ? this._value : this.elementRef.nativeElement.textContent;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._value = value;
          }
          /**
           * Whether or not the tag is selectable. When a tag is not selectable,
           * changes to its selected state are always ignored. By default a tag is
           * selectable, and it becomes non-selectable if its parent tag list is
           * not selectable.
           * @return {?}
           */

        }, {
          key: "selectable",
          get: function get() {
            return this._selectable && this.tagListSelectable;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * Determines whether or not the tag displays the remove styling and emits (removed) events.
           * @return {?}
           */

        }, {
          key: "removable",
          get: function get() {
            return this._removable;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._removable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabindex",
          get: function get() {
            if (!this.selectable) {
              return null;
            }

            return this.disabled ? null : -1;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.disabled) {
              this._disabled = value;
            }
          }
        }]);

        return McTag;
      }(McTagMixinBase);

      McTag.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',
          exportAs: 'mcTag',
          template: "<div class=\"mc-tag__wrapper\">\n    <span class=\"mc-tag__text\"><ng-content></ng-content></span>\n    <ng-content select=\"[mc-icon]\"></ng-content>\n    <div class=\"mc-tag-overlay\"></div>\n</div>\n",
          inputs: ['color'],
          host: {
            "class": 'mc-tag',
            '[attr.tabindex]': 'tabindex',
            '[attr.disabled]': 'disabled || null',
            '[class.mc-selected]': 'selected',
            '[class.mc-focused]': 'hasFocus',
            '[class.mc-tag-with-avatar]': 'avatar',
            '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',
            '[class.mc-disabled]': 'disabled',
            '(click)': 'handleClick($event)',
            '(keydown)': 'handleKeydown($event)',
            '(focus)': 'focus()',
            '(blur)': 'blur()'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          styles: [".mc-tag{border-radius:4px;border-style:solid;border-width:1px;box-sizing:border-box;cursor:default;display:inline-block;height:24px;margin:2px;outline:none;overflow:hidden;position:relative}.mc-tag.mc-left-icon{padding-left:3px}.mc-tag.mc-right-icon{padding-right:3px}.mc-tag__wrapper{align-items:center;display:flex;flex:1 1 100%;height:100%}.mc-tag__wrapper .mc-icon{align-items:center;display:flex;flex-shrink:0;height:24px;justify-content:center;width:24px}.mc-tag__wrapper .mc-icon_left{margin-right:3px}.mc-tag__wrapper .mc-icon_right{margin-left:3px}.mc-tag-overlay{border-radius:inherit;bottom:-1px;left:-1px;pointer-events:none;position:absolute;right:-1px;top:-1px}.mc-tag__text{margin-left:7px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
        }]
      }];
      /** @nocollapse */

      McTag.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }];
      };

      McTag.propDecorators = {
        contentChildren: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_13__["McIcon"]]
        }],
        avatar: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [McTagAvatar, {
            "static": false
          }]
        }],
        trailingIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [McTagTrailingIcon, {
            "static": false
          }]
        }],
        removeIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
          /**
          * @return {?}
          */
          function () {
            return McTagRemove;
          }), {
            "static": false
          }]
        }],
        selectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        destroyed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        removed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        selectable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        removable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       *
       * Example:
       *
       *     `<mc-tag>
       *       <mc-icon mcTagRemove>cancel</mc-icon>
       *     </mc-tag>`
       *
       * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning
       * styles to properly center the icon within the tag.
       */


      var McTagRemove = /*#__PURE__*/function () {
        /**
         * @param {?} parentTag
         */
        function McTagRemove(parentTag) {
          _classCallCheck(this, McTagRemove);

          this.parentTag = parentTag;
        }
        /**
         * @param {?} $event
         * @return {?}
         */


        _createClass(McTagRemove, [{
          key: "focus",
          value: function focus($event) {
            $event.stopPropagation();
          }
          /**
           * Calls the parent tag's public `remove()` method if applicable.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick(event) {
            if (this.parentTag.removable) {
              this.parentTag.remove();
            } // We need to stop event propagation because otherwise the event will bubble up to the
            // form field and cause the `onContainerClick` method to be invoked. This method would then
            // reset the focused tag that has been focused after tag removal. Usually the parent
            // the parent click listener of the `McTag` would prevent propagation, but it can happen
            // that the tag is being removed before the event bubbles up.


            event.stopPropagation();
          }
        }]);

        return McTagRemove;
      }();

      McTagRemove.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: '[mcTagRemove]',
          host: {
            "class": 'mc-tag-remove mc-tag-trailing-icon',
            '[attr.tabindex]': '-1',
            '(click)': 'handleClick($event)',
            '(focus)': 'focus($event)'
          }
        }]
      }];
      /** @nocollapse */

      McTagRemove.ctorParameters = function () {
        return [{
          type: McTag
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tag-list.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTagListBase =
      /**
       * @param {?} defaultErrorStateMatcher
       * @param {?} parentForm
       * @param {?} parentFormGroup
       * @param {?} ngControl
       */
      function McTagListBase(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        _classCallCheck(this, McTagListBase);

        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTagListMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["mixinErrorState"])(McTagListBase); // Increasing integer for generating unique ids for tag-list components.

      /** @type {?} */

      var nextUniqueId = 0;
      /**
       * Change event object that is emitted when the tag list value has changed.
       */

      var McTagListChange =
      /**
       * @param {?} source
       * @param {?} value
       */
      function McTagListChange(source, value) {
        _classCallCheck(this, McTagListChange);

        this.source = source;
        this.value = value;
      };

      if (false) {}

      var McTagList = /*#__PURE__*/function (_McTagListMixinBase) {
        _inherits(McTagList, _McTagListMixinBase);

        var _super21 = _createSuper(McTagList);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} defaultErrorStateMatcher
         * @param {?} rawValidators
         * @param {?} mcValidation
         * @param {?} dir
         * @param {?} parentForm
         * @param {?} parentFormGroup
         * @param {?} ngControl
         * @param {?} ngModel
         * @param {?} formControlName
         */
        function McTagList(elementRef, changeDetectorRef, defaultErrorStateMatcher, rawValidators, mcValidation, dir, parentForm, parentFormGroup, ngControl, ngModel, formControlName) {
          var _this62;

          _classCallCheck(this, McTagList);

          _this62 = _super21.call(this, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
          _this62.elementRef = elementRef;
          _this62.changeDetectorRef = changeDetectorRef;
          _this62.rawValidators = rawValidators;
          _this62.mcValidation = mcValidation;
          _this62.dir = dir;
          _this62.ngModel = ngModel;
          _this62.formControlName = formControlName;
          _this62.controlType = 'mc-tag-list';
          _this62._tabIndex = 0;
          /**
           * Event that emits whenever the raw value of the tag-list changes. This is here primarily
           * to facilitate the two-way binding for the `value` input.
           * \@docs-private
           */

          _this62.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this62.uid = "mc-tag-list-".concat(nextUniqueId++);
          /**
           * User defined tab index.
           * When it is not null, use user defined tab index. Otherwise use tabIndex
           */

          _this62.userTabIndex = null;
          _this62.tagChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Orientation of the tag list.
           */

          _this62.orientation = 'horizontal';
          /**
           * Event emitted when the selected tag list value has been changed by the user.
           */

          _this62.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this62._required = false;
          _this62._disabled = false;
          _this62._selectable = true;
          _this62._multiple = false;
          /**
           * When a tag is destroyed, we store the index of the destroyed tag until the tags
           * query list notifies about the update. This is necessary because we cannot determine an
           * appropriate tag that should receive focus until the array of tags updated completely.
           */

          _this62.lastDestroyedTagIndex = null;
          /**
           * Subject that emits when the component has been destroyed.
           */

          _this62.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"](); // tslint:disable-next-line:no-empty

          _this62.onTouched =
          /**
          * @return {?}
          */
          function () {}; // tslint:disable-next-line:no-empty


          _this62.onChange =
          /**
          * @return {?}
          */
          function () {};

          _this62._compareWith =
          /**
          * @param {?} o1
          * @param {?} o2
          * @return {?}
          */
          function (o1, o2) {
            return o1 === o2;
          };

          if (_this62.ngControl) {
            _this62.ngControl.valueAccessor = _assertThisInitialized(_this62);
          }

          return _this62;
        }
        /**
         * Combined stream of all of the child tags' selection change events.
         * @return {?}
         */


        _createClass(McTagList, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            var _this63 = this;

            if (this.mcValidation.useValidation) {
              Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["setMosaicValidation"])(this);
            }

            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__["FocusKeyManager"](this.tags).withVerticalOrientation().withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');

            if (this.dir) {
              this.dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["takeUntil"])(this.destroyed)).subscribe(
              /**
              * @param {?} dir
              * @return {?}
              */
              function (dir) {
                return _this63.keyManager.withHorizontalOrientation(dir);
              });
            } // Prevents the tag list from capturing focus and redirecting
            // it back to the first tag when the user tabs out.


            this.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this63._tabIndex = -1;
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                _this63._tabIndex = _this63.userTabIndex || 0;

                _this63.changeDetectorRef.markForCheck();
              });
            }); // When the list changes, re-subscribe

            this.tags.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this63.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(
                /**
                * @return {?}
                */
                function () {
                  _this63.syncTagsDisabledState();
                });
              }

              _this63.resetTags(); // Reset tags selected/deselected status


              _this63.initializeSelection(); // Check to see if we need to update our tab index


              _this63.updateTabIndex(); // Check to see if we have a destroyed tag and need to refocus


              _this63.updateFocusForDestroyedTags(); // Defer setting the value in order to avoid the "Expression
              // has changed after it was checked" errors from Angular.


              Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                _this63.tagChanges.emit(_this63.tags.toArray());

                _this63.stateChanges.next();

                _this63.propagateTagsChanges();
              });
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_7__["SelectionModel"](this.multiple, undefined, false);
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.ngControl) {
              // We need to re-evaluate this on every change detection cycle, because there are some
              // error triggers that we can't subscribe to (e.g. parent form submissions). This means
              // that whatever logic is in here has to be super lean or we risk destroying the performance.
              this.updateErrorState();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.next();
            this.destroyed.complete();
            this.stateChanges.complete();
            this.dropSubscriptions();
          }
          /**
           * Associates an HTML input element with this tag list.
           * @param {?} inputElement
           * @return {?}
           */

        }, {
          key: "registerInput",
          value: function registerInput(inputElement) {
            var _this64 = this;

            var _a;

            this.tagInput = inputElement; // todo need rethink about it

            if (this.ngControl && ((_a = inputElement.ngControl) === null || _a === void 0 ? void 0 : _a.statusChanges)) {
              inputElement.ngControl.statusChanges.subscribe(
              /**
              * @return {?}
              */
              function () {
                return (
                  /** @type {?} */
                  _this64.ngControl.control.setErrors(
                  /** @type {?} */
                  inputElement.ngControl.errors)
                );
              });
            }
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            if (this.tags) {
              this.setSelectionByValue(value, false);
            }
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
            this.stateChanges.next();
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onContainerClick",
          value: function onContainerClick(event) {
            if (!this.originatesFromTag(event)) {
              this.focus();
            }
          }
          /**
           * Focuses the first non-disabled tag in this tag list, or the associated input when there
           * are no eligible tags.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            if (this.disabled) {
              return;
            } // TODO: ARIA says this should focus the first `selected` tag if any are selected.
            // Focus on first element if there's no tagInput inside tag-list


            if (this.tagInput && this.tagInput.focused) {// do nothing
            } else if (this.tags.length > 0) {
              this.keyManager.setFirstItemActive();
              this.stateChanges.next();
            } else {
              this.focusInput();
              this.stateChanges.next();
            }
          }
          /**
           * Attempt to focus an input if we have one.
           * @return {?}
           */

        }, {
          key: "focusInput",
          value: function focusInput() {
            if (this.tagInput) {
              this.tagInput.focus();
            }
          }
          /**
           * Pass events to the keyboard manager. Available here for tests.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "keydown",
          value: function keydown(event) {
            /** @type {?} */
            var target =
            /** @type {?} */
            event.target; // If they are on an empty input and hit backspace, focus the last tag
            // tslint:disable-next-line: deprecation

            if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["BACKSPACE"] && this.isInputEmpty(target)) {
              this.keyManager.setLastItemActive();
              event.preventDefault();
            } else if (target && target.classList.contains('mc-tag')) {
              // tslint:disable-next-line: deprecation
              if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]) {
                this.keyManager.setFirstItemActive();
                event.preventDefault(); // tslint:disable-next-line: deprecation
              } else if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]) {
                this.keyManager.setLastItemActive();
                event.preventDefault();
              } else {
                this.keyManager.onKeydown(event);
              }

              this.stateChanges.next();
            }
          }
          /**
           * @param {?} value
           * @param {?=} isUserInput
           * @return {?}
           */

        }, {
          key: "setSelectionByValue",
          value: function setSelectionByValue(value) {
            var _this65 = this;

            var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            this.clearSelection();
            this.tags.forEach(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.deselect();
            });

            if (Array.isArray(value)) {
              value.forEach(
              /**
              * @param {?} currentValue
              * @return {?}
              */
              function (currentValue) {
                return _this65.selectValue(currentValue, isUserInput);
              });
              this.sortValues();
            } else {
              /** @type {?} */
              var correspondingTag = this.selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple
              // mode, because we don't know what tag the user interacted with last.

              if (correspondingTag && isUserInput) {
                this.keyManager.setActiveItem(correspondingTag);
              }
            }
          }
          /**
           * When blurred, mark the field as touched when focus moved outside the tag list.
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            var _this66 = this;

            if (!this.hasFocusedTag()) {
              this.keyManager.setActiveItem(-1);
            }

            if (!this.disabled) {
              if (this.tagInput) {
                // If there's a tag input, we should check whether the focus moved to tag input.
                // If the focus is not moved to tag input, mark the field as touched. If the focus moved
                // to tag input, do nothing.
                // Timeout is needed to wait for the focus() event trigger on tag input.
                setTimeout(
                /**
                * @return {?}
                */
                function () {
                  if (!_this66.focused) {
                    _this66.markAsTouched();
                  }
                });
              } else {
                // If there's no tag input, then mark the field as touched.
                this.markAsTouched();
              }
            }
          }
          /**
           * Mark the field as touched
           * @return {?}
           */

        }, {
          key: "markAsTouched",
          value: function markAsTouched() {
            this.onTouched();
            this.changeDetectorRef.markForCheck();
            this.stateChanges.next();
          }
          /**
           * Check the tab index as you should not be allowed to focus an empty list.
           * @protected
           * @return {?}
           */

        }, {
          key: "updateTabIndex",
          value: function updateTabIndex() {
            // If we have 0 tags, we should not allow keyboard focus
            this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);
          }
          /**
           * If the amount of tags changed, we need to update the
           * key manager state and focus the next closest tag.
           * @protected
           * @return {?}
           */

        }, {
          key: "updateFocusForDestroyedTags",
          value: function updateFocusForDestroyedTags() {
            if (this.lastDestroyedTagIndex != null) {
              if (this.tags.length) {
                /** @type {?} */
                var newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);
                this.keyManager.setActiveItem(newTagIndex);
              } else {
                this.focusInput();
              }
            }

            this.lastDestroyedTagIndex = null;
          }
          /**
           * Utility to ensure all indexes are valid.
           *
           * @private
           * @param {?} index The index to be checked.
           * @return {?} True if the index is valid for our list of tags.
           */

        }, {
          key: "isValidIndex",
          value: function isValidIndex(index) {
            return index >= 0 && index < this.tags.length;
          }
          /**
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "isInputEmpty",
          value: function isInputEmpty(element) {
            if (element && element.nodeName.toLowerCase() === 'input') {
              /** @type {?} */
              var input =
              /** @type {?} */
              element;
              return !input.value;
            }

            return false;
          }
          /**
           * Finds and selects the tag based on its value.
           * @private
           * @param {?} value
           * @param {?=} isUserInput
           * @return {?} Tag that has the corresponding value.
           */

        }, {
          key: "selectValue",
          value: function selectValue(value) {
            var _this67 = this;

            var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            /** @type {?} */
            var correspondingTag = this.tags.find(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.value != null && _this67._compareWith(tag.value, value);
            });

            if (correspondingTag) {
              if (isUserInput) {
                correspondingTag.selectViaInteraction();
              } else {
                correspondingTag.select();
              }

              this.selectionModel.select(correspondingTag);
            }

            return correspondingTag;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "initializeSelection",
          value: function initializeSelection() {
            var _this68 = this;

            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(
            /**
            * @return {?}
            */
            function () {
              if (_this68.ngControl || _this68._value) {
                _this68.setSelectionByValue(_this68.ngControl ? _this68.ngControl.value : _this68._value, false);

                _this68.stateChanges.next();
              }
            });
          }
          /**
           * Deselects every tag in the list.
           * @private
           * @param {?=} skip Tag that should not be deselected.
           * @return {?}
           */

        }, {
          key: "clearSelection",
          value: function clearSelection(skip) {
            this.selectionModel.clear();
            this.tags.forEach(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              if (tag !== skip) {
                tag.deselect();
              }
            });
            this.stateChanges.next();
          }
          /**
           * Sorts the model values, ensuring that they keep the same
           * order that they have in the panel.
           * @private
           * @return {?}
           */

        }, {
          key: "sortValues",
          value: function sortValues() {
            var _this69 = this;

            if (this._multiple) {
              this.selectionModel.clear();
              this.tags.forEach(
              /**
              * @param {?} tag
              * @return {?}
              */
              function (tag) {
                if (tag.selected) {
                  _this69.selectionModel.select(tag);
                }
              });
              this.stateChanges.next();
            }
          }
          /**
           * Emits change event to set the model value.
           * @private
           * @param {?=} fallbackValue
           * @return {?}
           */
          // todo need rethink this method and selection logic

        }, {
          key: "propagateChanges",
          value: function propagateChanges(fallbackValue) {
            /** @type {?} */
            var valueToEmit = null;

            if (Array.isArray(this.selected)) {
              valueToEmit = this.selected.map(
              /**
              * @param {?} tag
              * @return {?}
              */
              function (tag) {
                return tag.value;
              });
            } else {
              valueToEmit = this.selected ? this.selected.value : fallbackValue;
            }

            this._value = valueToEmit;
            this.change.emit(new McTagListChange(this, valueToEmit));
            this.valueChange.emit(valueToEmit);
            this.onChange(valueToEmit);
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "propagateTagsChanges",
          value: function propagateTagsChanges() {
            /** @type {?} */
            var valueToEmit = this.tags.map(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.value;
            });
            this._value = valueToEmit;
            this.change.emit(new McTagListChange(this, valueToEmit));
            this.valueChange.emit(valueToEmit);
            this.onChange(valueToEmit);
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "resetTags",
          value: function resetTags() {
            this.dropSubscriptions();
            this.listenToTagsFocus();
            this.listenToTagsSelection();
            this.listenToTagsRemoved();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "dropSubscriptions",
          value: function dropSubscriptions() {
            if (this.tagFocusSubscription) {
              this.tagFocusSubscription.unsubscribe();
              this.tagFocusSubscription = null;
            }

            if (this.tagBlurSubscription) {
              this.tagBlurSubscription.unsubscribe();
              this.tagBlurSubscription = null;
            }

            if (this.tagSelectionSubscription) {
              this.tagSelectionSubscription.unsubscribe();
              this.tagSelectionSubscription = null;
            }

            if (this.tagRemoveSubscription) {
              this.tagRemoveSubscription.unsubscribe();
              this.tagRemoveSubscription = null;
            }
          }
          /**
           * Listens to user-generated selection events on each tag.
           * @private
           * @return {?}
           */

        }, {
          key: "listenToTagsSelection",
          value: function listenToTagsSelection() {
            var _this70 = this;

            this.tagSelectionSubscription = this.tagSelectionChanges.subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              if (event.source.selected) {
                _this70.selectionModel.select(event.source);
              } else {
                _this70.selectionModel.deselect(event.source);
              } // For single selection tag list, make sure the deselected value is unselected.


              if (!_this70.multiple) {
                _this70.tags.forEach(
                /**
                * @param {?} tag
                * @return {?}
                */
                function (tag) {
                  if (!_this70.selectionModel.isSelected(tag) && tag.selected) {
                    tag.deselect();
                  }
                });
              }

              if (event.isUserInput) {
                _this70.propagateChanges();
              }
            });
          }
          /**
           * Listens to user-generated selection events on each tag.
           * @private
           * @return {?}
           */

        }, {
          key: "listenToTagsFocus",
          value: function listenToTagsFocus() {
            var _this71 = this;

            this.tagFocusSubscription = this.tagFocusChanges.subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              /** @type {?} */
              var tagIndex = _this71.tags.toArray().indexOf(event.tag);

              if (_this71.isValidIndex(tagIndex)) {
                _this71.keyManager.updateActiveItem(tagIndex);
              }

              _this71.stateChanges.next();
            });
            this.tagBlurSubscription = this.tagBlurChanges.subscribe(
            /**
            * @return {?}
            */
            function () {
              _this71.blur();

              _this71.stateChanges.next();
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "listenToTagsRemoved",
          value: function listenToTagsRemoved() {
            var _this72 = this;

            this.tagRemoveSubscription = this.tagRemoveChanges.subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              /** @type {?} */
              var tag = event.tag;
              /** @type {?} */

              var tagIndex = _this72.tags.toArray().indexOf(event.tag); // In case the tag that will be removed is currently focused, we temporarily store
              // the index in order to be able to determine an appropriate sibling tag that will
              // receive focus.


              if (_this72.isValidIndex(tagIndex) && tag.hasFocus) {
                _this72.lastDestroyedTagIndex = tagIndex;
              } else if (_this72.isValidIndex(tagIndex) && !tag.hasFocus) {
                _this72.focusInput();
              }
            });
          }
          /**
           * Checks whether an event comes from inside a tag element.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "originatesFromTag",
          value: function originatesFromTag(event) {
            /** @type {?} */
            var currentElement =
            /** @type {?} */
            event.target;

            while (currentElement && currentElement !== this.elementRef.nativeElement) {
              if (currentElement.classList.contains('mc-tag')) {
                return true;
              }

              currentElement = currentElement.parentElement;
            }

            return false;
          }
          /**
           * Checks whether any of the tags is focused.
           * @private
           * @return {?}
           */

        }, {
          key: "hasFocusedTag",
          value: function hasFocusedTag() {
            return this.tags.some(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.hasFocus;
            });
          }
          /**
           * Syncs the list's disabled state with the individual tags.
           * @private
           * @return {?}
           */

        }, {
          key: "syncTagsDisabledState",
          value: function syncTagsDisabledState() {
            var _this73 = this;

            if (this.tags) {
              this.tags.forEach(
              /**
              * @param {?} tag
              * @return {?}
              */
              function (tag) {
                tag.disabled = _this73._disabled;
              });
            }
          }
        }, {
          key: "tagSelectionChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"]).apply(void 0, _toConsumableArray(this.tags.map(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.selectionChange;
            })));
          }
          /**
           * Combined stream of all of the child tags' focus change events.
           * @return {?}
           */

        }, {
          key: "tagFocusChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"]).apply(void 0, _toConsumableArray(this.tags.map(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.onFocus;
            })));
          }
          /**
           * Combined stream of all of the child tags' blur change events.
           * @return {?}
           */

        }, {
          key: "tagBlurChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"]).apply(void 0, _toConsumableArray(this.tags.map(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.onBlur;
            })));
          }
          /**
           * Combined stream of all of the child tags' remove change events.
           * @return {?}
           */

        }, {
          key: "tagRemoveChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"]).apply(void 0, _toConsumableArray(this.tags.map(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.destroyed;
            })));
          }
          /**
           * The array of selected tags inside tag list.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];
          }
          /**
           * @return {?}
           */

        }, {
          key: "canShowCleaner",
          get: function get() {
            return this.cleaner && this.tags.length > 0;
          }
          /**
           * Whether the user should be allowed to select multiple tags.
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return this._multiple;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * A function to compare the option values with the selected values. The first argument
           * is a value from an option. The second is a value from the selection. A boolean
           * should be returned.
           * @return {?}
           */

        }, {
          key: "compareWith",
          get: function get() {
            return this._compareWith;
          }
          /**
           * @param {?} fn
           * @return {?}
           */
          ,
          set: function set(fn) {
            this._compareWith = fn;

            if (this.selectionModel) {
              // A different comparator means the selection could change.
              this.initializeSelection();
            }
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.writeValue(value);
            this._value = value;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this.tagInput ? this.tagInput.id : this.uid;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
            this.stateChanges.next();
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "placeholder",
          get: function get() {
            return this.tagInput ? this.tagInput.placeholder : this._placeholder;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._placeholder = value;
            this.stateChanges.next();
          }
          /**
           * Whether any tags or the mcTagInput inside of this tag-list has focus.
           * @return {?}
           */

        }, {
          key: "focused",
          get: function get() {
            return this.tagInput && this.tagInput.focused || this.hasFocusedTag();
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "empty",
          get: function get() {
            return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "shouldLabelFloat",
          get: function get() {
            return !this.empty || this.focused;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this.ngControl ? !!this.ngControl.disabled : this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
            this.syncTagsDisabledState();
          }
          /**
           * Whether or not this tag list is selectable. When a tag list is not selectable,
           * the selected states for all the tags inside the tag list are always ignored.
           * @return {?}
           */

        }, {
          key: "selectable",
          get: function get() {
            return this._selectable;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            var _this74 = this;

            this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            if (this.tags) {
              this.tags.forEach(
              /**
              * @param {?} tag
              * @return {?}
              */
              function (tag) {
                return tag.tagListSelectable = _this74._selectable;
              });
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabIndex",
          get: function get() {
            return this._tabIndex;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.userTabIndex = value;
            this._tabIndex = value;
          }
        }]);

        return McTagList;
      }(McTagListMixinBase);

      McTagList.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-tag-list',
          exportAs: 'mcTagList',
          template: "<div class=\"mc-tags-list__list-container\">\n    <ng-content></ng-content>\n</div>\n\n<div class=\"mc-tags-list__cleaner\"\n     *ngIf=\"canShowCleaner\">\n    <ng-content select=\"mc-cleaner\"></ng-content>\n</div>\n",
          host: {
            "class": 'mc-tag-list',
            '[class.mc-disabled]': 'disabled',
            '[class.mc-invalid]': 'errorState',
            '[attr.tabindex]': 'disabled ? null : tabIndex',
            '[id]': 'uid',
            '(focus)': 'focus()',
            '(blur)': 'blur()',
            '(keydown)': 'keydown($event)'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          providers: [{
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_10__["McFormFieldControl"],
            useExisting: McTagList
          }],
          styles: [".mc-tag-list{display:flex;flex-direction:row}.mc-tag-input{background:transparent;border:none;outline:none}.mc-tags-list__list-container{display:flex;flex:1 1 100%;flex-wrap:wrap;min-height:28px;min-width:0;padding:1px 6px}.mc-tags-list__list-container .mc-tag-input{flex:1 1 auto;height:22px;margin:2px 4px;max-width:100%}.mc-tags-list__cleaner .mc-cleaner{height:30px}"]
        }]
      }];
      /** @nocollapse */

      McTagList.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["ErrorStateMatcher"]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALIDATORS"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["MC_VALIDATION"]]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgForm"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormGroupDirective"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgModel"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControlName"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }];
      };

      McTagList.propDecorators = {
        multiple: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        selectable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        valueChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        errorStateMatcher: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        orientation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['orientation']
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        cleaner: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: ['mcTagListCleaner', {
            "static": true
          }]
        }],
        tags: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [McTag, {
            // Need to use `descendants: true`,
            // Ivy will no longer match indirect descendants if it's left as false.
            descendants: true
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tag-input.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Represents an input event on a `mcTagInput`.
       * @record
       */


      function McTagInputEvent() {}

      if (false) {} // Increasing integer for generating unique ids.

      /** @type {?} */


      var nextUniqueId$1 = 0;
      /**
       * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.
       * May be placed inside or outside of an `<mc-tag-list>`.
       */

      var McTagInput = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} renderer
         * @param {?} defaultOptions
         * @param {?} ngControl
         */
        function McTagInput(elementRef, renderer, defaultOptions, ngControl) {
          _classCallCheck(this, McTagInput);

          this.elementRef = elementRef;
          this.renderer = renderer;
          this.defaultOptions = defaultOptions;
          this.ngControl = ngControl;
          /**
           * Whether the control is focused.
           */

          this.focused = false;
          /**
           * The list of key codes that will trigger a tagEnd event.
           *
           * Defaults to `[ENTER]`.
           */

          this.separatorKeyCodes = this.defaultOptions.separatorKeyCodes;
          /**
           * Emitted when a tag is to be added.
           */

          this.tagEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * The input's placeholder text.
           */

          this.placeholder = '';
          /**
           * Unique id for the input.
           */

          this.id = "mc-tag-list-input-".concat(nextUniqueId$1++);
          this._addOnBlur = true;
          this._disabled = false;
          this.countOfSymbolsForUpdateWidth = 3; // tslint:disable-next-line: no-unnecessary-type-assertion

          this.inputElement =
          /** @type {?} */
          this.elementRef.nativeElement;
          this.setDefaultInputWidth();
        }
        /**
         * Register input for tag list
         * @param {?} value
         * @return {?}
         */


        _createClass(McTagInput, [{
          key: "ngOnChanges",

          /**
           * @return {?}
           */
          value: function ngOnChanges() {
            this._tagList.stateChanges.next();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            if (!this.inputElement.value) {
              this._tagList.keydown(event);
            }

            if (this.isSeparatorKey(event)) {
              this.emitTagEnd();
              event.preventDefault();
            }
          }
          /**
           * Checks to see if the blur should emit the (tagEnd) event.
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            this.focused = false; // Blur the tag list if it is not focused

            if (!this._tagList.focused) {
              this.triggerValidation();

              this._tagList.blur();
            } // tslint:disable-next-line: no-unnecessary-type-assertion


            if (this.addOnBlur) {
              this.emitTagEnd();
            }

            this._tagList.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerValidation",
          value: function triggerValidation() {
            if (!this.hasControl()) {
              return;
            }

            /** @type {?} */
            this.ngControl.statusChanges.emit(this.ngControl.status);
          }
          /**
           * Checks to see if the (tagEnd) event needs to be emitted.
           * @return {?}
           */

        }, {
          key: "emitTagEnd",
          value: function emitTagEnd() {
            if (!this.hasControl() || this.hasControl() && !this.ngControl.invalid) {
              this.tagEnd.emit({
                input: this.inputElement,
                value: this.inputElement.value
              });
              this.updateInputWidth();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onInput",
          value: function onInput() {
            this.updateInputWidth(); // Let tag list know whenever the value changes.

            this._tagList.stateChanges.next();
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onPaste",
          value: function onPaste($event) {
            var _this75 = this;

            if (!$event.clipboardData) {
              return;
            }
            /** @type {?} */


            var data = $event.clipboardData.getData('text');

            if (data && data.length === 0) {
              return;
            }
            /** @type {?} */


            var items = [];

            var _iterator2 = _createForOfIteratorHelper(this.separatorKeyCodes),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var key = _step2.value;

                /** @type {?} */
                var separator = this.separatorKeyToSymbol(key);

                if (data.search(separator) > -1) {
                  items.push.apply(items, _toConsumableArray(data.split(separator)));
                  break;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            if (items.length === 0) {
              items.push(data);
            }

            items.forEach(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return _this75.tagEnd.emit({
                input: _this75.inputElement,
                value: item
              });
            });
            this.updateInputWidth();
            $event.preventDefault();
            $event.stopPropagation();
          }
          /**
           * @return {?}
           */

        }, {
          key: "updateInputWidth",
          value: function updateInputWidth() {
            /** @type {?} */
            var length = this.inputElement.value.length;
            this.renderer.setStyle(this.inputElement, 'max-width', 0);
            this.oneSymbolWidth = this.inputElement.scrollWidth / length;
            this.renderer.setStyle(this.inputElement, 'max-width', '');

            if (length > this.countOfSymbolsForUpdateWidth) {
              this.renderer.setStyle(this.inputElement, 'width', "".concat(length * this.oneSymbolWidth, "px"));
            } else {
              this.setDefaultInputWidth();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onFocus",
          value: function onFocus() {
            this.focused = true;

            this._tagList.stateChanges.next();
          }
          /**
           * Focuses the input.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.inputElement.focus();
          }
          /**
           * @private
           * @param {?} k
           * @return {?}
           */

        }, {
          key: "separatorKeyToSymbol",
          value: function separatorKeyToSymbol(k) {
            var _ptsecurity_cdk_keyco;

            /** @type {?} */
            var sep = (_ptsecurity_cdk_keyco = {}, _defineProperty(_ptsecurity_cdk_keyco, _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"], /\r?\n/), _defineProperty(_ptsecurity_cdk_keyco, _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["TAB"], /\t/), _defineProperty(_ptsecurity_cdk_keyco, _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"], / /), _defineProperty(_ptsecurity_cdk_keyco, _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["COMMA"], /,/), _ptsecurity_cdk_keyco)[k];

            if (sep) {
              return sep;
            }

            return k;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "hasControl",
          value: function hasControl() {
            return !!this.ngControl;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "setDefaultInputWidth",
          value: function setDefaultInputWidth() {
            this.renderer.setStyle(this.inputElement, 'width', '30px');
          }
          /**
           * Checks whether a keycode is one of the configured separators.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "isSeparatorKey",
          value: function isSeparatorKey(event) {
            if (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event)) {
              return false;
            } // tslint:disable-next-line: deprecation


            return this.separatorKeyCodes.indexOf(event.keyCode) > -1;
          }
        }, {
          key: "tagList",
          set: function set(value) {
            if (value) {
              this._tagList = value;

              this._tagList.registerInput(this);
            }
          }
          /**
           * Whether or not the tagEnd event will be emitted when the input is blurred.
           * @return {?}
           */

        }, {
          key: "addOnBlur",
          get: function get() {
            return this._addOnBlur;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._addOnBlur = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether the input is disabled.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || this._tagList && this._tagList.disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether the input is empty.
           * @return {?}
           */

        }, {
          key: "empty",
          get: function get() {
            return !this.inputElement.value;
          }
        }]);

        return McTagInput;
      }();

      McTagInput.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'input[mcTagInputFor]',
          exportAs: 'mcTagInput, mcTagInputFor',
          host: {
            "class": 'mc-tag-input',
            '[id]': 'id',
            '[attr.disabled]': 'disabled || null',
            '[attr.placeholder]': 'placeholder || null',
            '(keydown)': 'onKeydown($event)',
            '(blur)': 'blur()',
            '(focus)': 'onFocus()',
            '(input)': 'onInput()',
            '(paste)': 'onPaste($event)'
          }
        }]
      }];
      /** @nocollapse */

      McTagInput.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MC_TAGS_DEFAULT_OPTIONS]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }];
      };

      McTagInput.propDecorators = {
        separatorKeyCodes: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcTagInputSeparatorKeyCodes']
        }],
        tagEnd: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['mcTagInputTokenEnd']
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        tagList: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcTagInputFor']
        }],
        addOnBlur: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcTagInputAddOnBlur']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tag.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var ɵ0 = {
        separatorKeyCodes: [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]]
      };

      var McTagsModule = function McTagsModule() {
        _classCallCheck(this, McTagsModule);
      };

      McTagsModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]],
          exports: [McTagList, McTag, McTagInput, McTagTrailingIcon, McTagAvatar, McTagRemove],
          declarations: [McTagList, McTag, McTagInput, McTagTrailingIcon, McTagAvatar, McTagRemove],
          providers: [{
            provide: MC_TAGS_DEFAULT_OPTIONS,
            // tslint:disable-next-line: no-object-literal-type-assertion
            useValue:
            /** @type {?} */
            ɵ0
          }]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-tags.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-tags.js.map

      /***/
    },

    /***/
    "A+YV":
    /*!********************************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/component-viewer/component-viewer.template.html ***!
      \********************************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function AYV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"docs-component-viewer\">\n    <div class=\"docs-component-viewer-content\">\n        <router-outlet></router-outlet>\n    </div>\n</div>\n\n\n";
      /***/
    },

    /***/
    "Ae4T":
    /*!************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/navbar/navbar.template.html ***!
      \************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function Ae4T(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<header role=\"header\" class=\"docs-navbar-header docs-navbar-header_fixed\">\n    <div class=\"docs-navbar-logo\">\n        <svg height=\"32\" viewBox=\"0 0 32 32\" width=\"32\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(.96)\"><path d=\"m15.056 0-14.896 5.312 2.272 19.696 12.624 6.992 12.624-6.992 2.272-19.696z\" fill=\"#ca0813\"/><path d=\"m15.04 0v32l12.624-6.992 2.272-19.696z\" fill=\"#a00810\"/><path d=\"m15.04 0 14.88 5.312-2.2695596 19.696-12.6104404 6.992-12.61044039-6.992-2.26955961-19.696zm0 1.5927156-13.2534557 4.73134117 2.04487091 17.74607603 11.20858479 6.2147254 11.2085848-6.2147254 2.0448709-17.74607603z\" fill=\"#ca0813\" fill-rule=\"nonzero\"/><g fill=\"#fff\"><path d=\"m15.04 1.5927156 13.2534557 4.73134117-2.0448709 17.74607603-11.2085848 6.2147254-11.20858479-6.2147254-2.04487091-17.74607603zm0 1.5927156-11.6269114 4.15068235 1.8201822 15.79615205 9.8067292 5.4374509 9.8067292-5.4374509 1.8201822-15.79615205z\" fill-rule=\"nonzero\"/><path d=\"m23.541 19.341.939 2.899h-2.88l-.302-1.017zm-8.584-2.554 1.352 3.035-1.111068 2.418h-.33792l-1.199012-2.541zm-8.498 2.324 2.39 1.38-.529 1.749h-2.88zm16.622-1.191.301.929-2.232 1.872-.829-2.801zm-13.209-.8-.879 2.899-2.382-1.375.496-1.524zm5.589-.383 1.942.706-.827 1.798zm-.964-.097-1.107 2.485-1.172-2.485zm7.407-2.357 1.022 3.157h-2.747l-.405-1.369zm-5.742-.198 2.201 1.271-.759 1.65-2.3397814-.8497417c.0404824-.0979144.0815829-.1969339.1233014-.2970583zm-8.103.115 2.296 1.327-.337 1.113h-2.754zm5.705-.172.79984 1.8312.12316.2928-.0093071.0054281.0003071.0015719h-2.687l-.411-.871zm7.473-1.805.508 1.568-2.12 1.778-.11908-.40676-.07292-.23424.0037867-.0009743-.2972154-1.0355299c-.019996-.0770346-.0386797-.1511599-.0560513-.2223758l-.00452.01088-.294-1.024zm-9.846-.286-.4988449 1.741526c-.0010771-.0031573-.0021421-.0062926-.0031951-.009406l-.39196 1.38488-2.286-1.32.427-1.311zm6.3-1.356 1.0944579 3.811965c-.0667348.1566826-.1417777.330814-.2251286.5223944l-2.2053293-1.2733594zm-5.42.028 1.299 2.976-2.1915156 1.2645235c-.0725851-.1611133-.1380954-.3093488-.1965308-.4447066zm5.777-.523 2.648.467.391 1.209-2.435.43zm-8.55-.304 2.39.422-.35 1.22-2.732.482zm10.11352-2.582.91748 2.837-2.414-.426 1.053-2.411zm-8.82816 0 1.09764 2.515-.766-.135-1.467-.258.69184-2.122z\"/></g></g></svg>\n        <span class=\"docs-navbar-logo__title\">Mosaic</span>\n    </div>\n\n    <div class=\"docs-navbar-version\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"versionDropdown\">\n            Версия {{mosaicVersion}}\n            <i mc-icon=\"mc-angle-down-L_16\" class=\"docs-navbar-version__icon\"></i>\n        </button>\n\n        <mc-dropdown #versionDropdown=\"mcDropdown\" class=\"docs-navbar-version__dropdown\">\n            <button mc-dropdown-item *ngFor=\"let version of versionData; let i = index\"\n                    (click)=\"goToVersion(i)\" [class.mc-selected]=\"version.selected\"\n                    [class.docs-navbar-version_bold]=\"version.number.length < 4\">\n                <span class=\"docs-navbar-version__item\">\n                    <span class=\"docs-navbar-version__num\">{{version.number}}</span>\n                    <span class=\"docs-navbar-version__date\">{{version.date}}</span>\n                </span>\n            </button>\n        </mc-dropdown>\n    </div>\n\n    <div class=\"flex-spacer\"></div>\n\n    <div class=\"docs-navbar-dropdown docs-navbar-dropdown_hidden\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"languageDropdown\">\n           {{languageSwitch.currentValue}}\n            <i mc-icon=\"mc-angle-down-M_16\" class=\"docs-navbar-dropdown__icon\"></i>\n        </button>\n\n        <mc-dropdown #languageDropdown=\"mcDropdown\">\n            <button mc-dropdown-item *ngFor=\"let language of languageSwitch.data; let i = index\"\n                    (click)=\"languageSwitch.setValue(i)\">\n                {{language}}\n            </button>\n        </mc-dropdown>\n    </div>\n\n    <div class=\"docs-navbar-dropdown\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"themeDropdown\">\n            {{themeSwitch.currentValue.name}}\n            <i mc-icon=\"mc-angle-down-M_16\" class=\"docs-navbar-dropdown__icon\"></i>\n        </button>\n\n        <mc-dropdown #themeDropdown=\"mcDropdown\">\n            <button mc-dropdown-item *ngFor=\"let theme of themeSwitch.data; let i = index\"\n                    [class.mc-selected]=\"theme.selected\" (click)=\"themeSwitch.setValue(i)\">\n                {{theme.name}}\n            </button>\n        </mc-dropdown>\n    </div>\n\n    <div class=\"color-picker\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"colorDropdown\">\n            <i mc-icon=\"mc-circle-8_16\" [style.color]='colorSwitch.currentValue.code' class=\"color-picker__icon\"></i>\n            <i mc-icon=\"mc-angle-down-M_16\" class=\"docs-navbar-dropdown__icon\"></i>\n        </button>\n\n        <mc-dropdown #colorDropdown=\"mcDropdown\" class=\"color-picker__dropdown\" [style.margin-top]=\"0\">\n            <div class=\"color-picker__dropdown-content\">\n                <span *ngFor=\"let color of colorSwitch.data; let i = index\"\n                      [class.color-picker__dropdown-item]=\"true\" [class.mc-selected]=\"color.selected\"\n                      (click)=\"colorSwitch.setValue(i)\">\n                    <i mc-icon=\"mc-circle-8_16\" [style.color]='color.code' class=\"color-picker__icon\"></i>\n                </span>\n            </div>\n        </mc-dropdown>\n    </div>\n</header>\n";
      /***/
    },

    /***/
    "Ar9S":
    /*!******************************************************************!*\
      !*** ./packages/docs/src/app/components/footer/footer.module.ts ***!
      \******************************************************************/

    /*! exports provided: FooterModule */

    /***/
    function Ar9S(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FooterModule", function () {
        return FooterModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _footer_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./footer.component */
      "Snh7");

      var FooterModule = function FooterModule() {
        _classCallCheck(this, FooterModule);
      };

      FooterModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
        exports: [_footer_component__WEBPACK_IMPORTED_MODULE_3__["FooterComponent"]],
        declarations: [_footer_component__WEBPACK_IMPORTED_MODULE_3__["FooterComponent"]]
      })], FooterModule);
      /***/
    },

    /***/
    "BTJx":
    /*!****************************************!*\
      !*** ./packages/docs/src/polyfills.ts ***!
      \****************************************/

    /*! no exports provided */

    /***/
    function BTJx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var core_js_es_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! core-js/es/array */
      "l0aJ");
      /* harmony import */


      var core_js_es_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_es_array__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */


      var core_js_es_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! core-js/es/date */
      "ftKg");
      /* harmony import */


      var core_js_es_date__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_es_date__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var core_js_es_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! core-js/es/function */
      "cGxN");
      /* harmony import */


      var core_js_es_function__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_es_function__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var core_js_es_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! core-js/es/map */
      "Xv9K");
      /* harmony import */


      var core_js_es_map__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_es_map__WEBPACK_IMPORTED_MODULE_3__);
      /* harmony import */


      var core_js_es_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! core-js/es/math */
      "6hpn");
      /* harmony import */


      var core_js_es_math__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_es_math__WEBPACK_IMPORTED_MODULE_4__);
      /* harmony import */


      var core_js_es_number__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! core-js/es/number */
      "7sbD");
      /* harmony import */


      var core_js_es_number__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_es_number__WEBPACK_IMPORTED_MODULE_5__);
      /* harmony import */


      var core_js_es_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! core-js/es/object */
      "5P7u");
      /* harmony import */


      var core_js_es_object__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_es_object__WEBPACK_IMPORTED_MODULE_6__);
      /* harmony import */


      var core_js_es_parse_float__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! core-js/es/parse-float */
      "tgv2");
      /* harmony import */


      var core_js_es_parse_float__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_es_parse_float__WEBPACK_IMPORTED_MODULE_7__);
      /* harmony import */


      var core_js_es_parse_int__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! core-js/es/parse-int */
      "CQOm");
      /* harmony import */


      var core_js_es_parse_int__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_es_parse_int__WEBPACK_IMPORTED_MODULE_8__);
      /* harmony import */


      var core_js_es_reflect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! core-js/es/reflect */
      "SkA5");
      /* harmony import */


      var core_js_es_reflect__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_es_reflect__WEBPACK_IMPORTED_MODULE_9__);
      /* harmony import */


      var core_js_es_regexp__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! core-js/es/regexp */
      "Kv9l");
      /* harmony import */


      var core_js_es_regexp__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_es_regexp__WEBPACK_IMPORTED_MODULE_10__);
      /* harmony import */


      var core_js_es_set__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! core-js/es/set */
      "mjWP");
      /* harmony import */


      var core_js_es_set__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_es_set__WEBPACK_IMPORTED_MODULE_11__);
      /* harmony import */


      var core_js_es_string__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! core-js/es/string */
      "mCUB");
      /* harmony import */


      var core_js_es_string__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_es_string__WEBPACK_IMPORTED_MODULE_12__);
      /* harmony import */


      var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! core-js/es/symbol */
      "H0pb");
      /* harmony import */


      var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_es_symbol__WEBPACK_IMPORTED_MODULE_13__);
      /* harmony import */


      var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! zone.js/dist/zone */
      "pDpN");
      /* harmony import */


      var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_14__);
      /* tslint:disable:ordered-imports */
      // tslint:disable:no-import-side-effect
      // This file includes polyfills needed by Angular and is loaded before
      // the app. You can add your own extra polyfills to this file.

      /***/

    },

    /***/
    "BtfD":
    /*!****************************************!*\
      !*** ./packages/docs/src/app/index.ts ***!
      \****************************************/

    /*! exports provided: DocsComponent, AppModule */

    /***/
    function BtfD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _docs_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./docs.component */
      "tVw0");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "DocsComponent", function () {
        return _docs_component__WEBPACK_IMPORTED_MODULE_0__["DocsComponent"];
      });
      /* harmony import */


      var _docs_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./docs.module */
      "gWp9");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "AppModule", function () {
        return _docs_module__WEBPACK_IMPORTED_MODULE_1__["AppModule"];
      });
      /***/

    },

    /***/
    "CYWk":
    /*!**********************************************************************!*\
      !*** ./packages/docs/src/app/containers/homepage/homepage.module.ts ***!
      \**********************************************************************/

    /*! exports provided: HomepageModule */

    /***/
    function CYWk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HomepageModule", function () {
        return HomepageModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _components_navbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../components/navbar */
      "pNyw");
      /* harmony import */


      var _homepage_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./homepage.component */
      "I1VR");

      var HomepageModule = function HomepageModule() {
        _classCallCheck(this, HomepageModule);
      };

      HomepageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"], _components_navbar__WEBPACK_IMPORTED_MODULE_4__["NavbarModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__["McButtonModule"]],
        exports: [_homepage_component__WEBPACK_IMPORTED_MODULE_5__["HomepageComponent"]],
        declarations: [_homepage_component__WEBPACK_IMPORTED_MODULE_5__["HomepageComponent"]]
      })], HomepageModule);
      /***/
    },

    /***/
    "Cb09":
    /*!***********************************************************************!*\
      !*** ./packages/docs/src/app/components/anchors/anchors.component.ts ***!
      \***********************************************************************/

    /*! exports provided: AnchorsComponent */

    /***/
    function Cb09(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnchorsComponent", function () {
        return AnchorsComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_anchors_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./anchors.component.html */
      "Ew7P");
      /* harmony import */


      var _anchors_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./anchors.scss */
      "P19e");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");

      var AnchorsComponent = /*#__PURE__*/function () {
        function AnchorsComponent(router, route, element, ref, document) {
          var _this76 = this;

          _classCallCheck(this, AnchorsComponent);

          this.router = router;
          this.route = route;
          this.element = element;
          this.ref = ref;
          this.document = document;
          this.anchors = [];
          this.headerSelectors = '.mc-display-3.title, .docs-header-link_3';
          this.click = false;
          this.headerHeight = 64; // coef for calculating the distance between anchor and header when scrolling (== headerHeight * anchorHeaderCoef)

          this.anchorHeaderCoef = 2;
          this.noSmoothScrollDebounce = 10;
          this.debounceTime = 15;
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
          this.fragment = '';
          this.activeClass = 'anchors-menu__list-element_active';
          this.isSmoothScrollSupported = 'scrollBehavior' in this.document.documentElement.style;

          if (!this.isSmoothScrollSupported) {
            this.debounceTime = this.noSmoothScrollDebounce;
          }

          this.currentUrl = router.url.split('#')[0];
          localStorage.setItem('PT_nextRoute', this.currentUrl);
          this.container = '.anchors-menu';
          this.pathName = this.router.url;
          this.router.events.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed)).subscribe(function (event) {
            if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_5__["NavigationEnd"]) {
              var rootUrl = router.url.split('#')[0];

              if (rootUrl !== _this76.currentUrl) {
                localStorage.setItem('PT_nextRoute', rootUrl);
                _this76.currentUrl = rootUrl;
                _this76.pathName = _this76.router.url;
              }
            }
          });
        }

        _createClass(AnchorsComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this77 = this;

            // attached to anchor's change in the address bar manually or by clicking on the anchor
            this.route.fragment.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed)).subscribe(function (fragment) {
              _this77.fragment = fragment;

              var index = _this77.getAnchorIndex(fragment);

              if (index) {
                _this77.setFragment(index);
              }
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.next();
            this.destroyed.complete();
          }
        }, {
          key: "getAnchorIndex",
          value: function getAnchorIndex(urlFragment) {
            var index = 0;
            this.anchors.forEach(function (anchor, i) {
              if (anchor.href === "".concat(urlFragment)) {
                index = i;
              }
            });
            return index;
          }
        }, {
          key: "setScrollPosition",
          value: function setScrollPosition() {
            var _this78 = this;

            this.anchors = this.createAnchors();
            this.scrollContainer = this.document || window;
            var target = this.document.getElementById(this.fragment);

            if (target) {
              var index = this.getAnchorIndex(this.fragment);

              if (index) {
                this.setFragment(index);
              }

              target.scrollTop += this.headerHeight;
              target.scrollIntoView();
            }

            if (this.scrollContainer) {
              Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["fromEvent"])(this.scrollContainer, 'scroll').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["debounceTime"])(this.debounceTime)).subscribe(function () {
                return _this78.onScroll();
              });
            }

            this.ref.detectChanges();
          }
          /* TODO Техдолг: при изменении ширины экрана должен переопределяться параметр top
          *   делать это по window:resize нельзя, т.к. изменение ширины контента страницы проиходит после window:resize */

        }, {
          key: "onResize",
          value: function onResize() {
            var headers = Array.from(this.document.querySelectorAll(this.headerSelectors));

            for (var i = 0; i < this.anchors.length; i++) {
              var _headers$i$getBoundin = headers[i].getBoundingClientRect(),
                  top = _headers$i$getBoundin.top;

              this.anchors[i].top = top;
            }

            this.ref.detectChanges();
          }
        }, {
          key: "getScrollOffset",
          value: function getScrollOffset() {
            return window.pageYOffset + this.headerHeight * this.anchorHeaderCoef;
          }
        }, {
          key: "isScrolledToEnd",
          value: function isScrolledToEnd() {
            var documentHeight = this.document.documentElement.scrollHeight;
            var scrollTop = window.pageYOffset || this.document.documentElement.scrollTop || this.document.body.scrollTop;
            var clientHeight = this.document.documentElement.clientHeight;
            var scrollHeight = scrollTop + clientHeight; // scrollHeight should be strictly equal to documentHeight, but in Edge it is slightly larger

            return scrollHeight >= documentHeight;
          }
        }, {
          key: "createAnchors",
          value: function createAnchors() {
            var anchors = [];
            var headers = Array.from(this.document.querySelectorAll(this.headerSelectors));

            if (headers.length) {
              var bodyTop = this.document.body.getBoundingClientRect().top;

              for (var i = 0; i < headers.length; i++) {
                var name = headers[i].innerText.trim();
                var anchorHeader = headers[i].querySelector('span');
                var href = anchorHeader ? "".concat(anchorHeader.id) : '';
                var top = headers[i].getBoundingClientRect().top - bodyTop + this.headerHeight;
                anchors.push({
                  href: href,
                  name: name,
                  active: i === 0,
                  top: top
                });
              }
            }

            if (anchors.length) {
              anchors[0].top = this.headerHeight;
            }

            return anchors;
          }
        }, {
          key: "onScroll",
          value: function onScroll() {
            if (this.isScrolledToEnd()) {
              this.setActiveAnchor(this.anchors.length - 1);
              this.ref.detectChanges();
              return;
            }

            for (var i = 0; i < this.anchors.length; i++) {
              if (this.isLinkActive(this.anchors[i], this.anchors[i + 1])) {
                this.setActiveAnchor(i);
              }
            }

            this.ref.detectChanges();
          }
        }, {
          key: "isLinkActive",
          value: function isLinkActive(currentLink, nextLink) {
            // A link is active if the scroll position is lower than the anchor position + headerHeight*anchorHeaderCoef
            // and above the next anchor
            var scrollOffset = this.getScrollOffset();
            return scrollOffset >= currentLink.top && !(nextLink && nextLink.top < scrollOffset);
          }
        }, {
          key: "setFragment",
          value: function setFragment(index) {
            if (this.isScrolledToEnd()) {
              this.setActiveAnchor(this.anchors.length - 1);
              return;
            }

            this.click = true;
            this.setActiveAnchor(index);
          }
        }, {
          key: "setActiveAnchor",
          value: function setActiveAnchor(index) {
            var _iterator3 = _createForOfIteratorHelper(this.anchors),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var anchor = _step3.value;
                anchor.active = false;
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            this.anchors[index].active = true;
          }
        }]);

        return AnchorsComponent;
      }();

      AnchorsComponent.ctorParameters = function () {
        return [{
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"]
        }, {
          type: Document,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
          }]
        }];
      };

      AnchorsComponent.propDecorators = {
        anchors: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        headerSelectors: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }]
      };
      AnchorsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'anchors',
        template: _raw_loader_anchors_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_anchors_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"], _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"], Document])], AnchorsComponent);
      /***/
    },

    /***/
    "DQSY":
    /*!************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-splitter.js ***!
      \************************************************************/

    /*! exports provided: Direction, McGutterDirective, McSplitterAreaDirective, McSplitterComponent, McSplitterModule */

    /***/
    function DQSY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Direction", function () {
        return Direction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McGutterDirective", function () {
        return McGutterDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSplitterAreaDirective", function () {
        return McSplitterAreaDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSplitterComponent", function () {
        return McSplitterComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSplitterModule", function () {
        return McSplitterModule;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /**
       * @fileoverview added by tsickle
       * Generated from: splitter.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function IArea() {}

      if (false) {}
      /**
       * @record
       */


      function IPoint() {}

      if (false) {}
      /** @enum {string} */


      var StyleProperty = {
        Flex: "flex",
        FlexBasis: "flex-basis",
        FlexDirection: "flex-direction",
        Height: "height",
        MaxWidth: "max-width",
        MinHeight: "min-height",
        MinWidth: "minWidth",
        OffsetHeight: "offsetHeight",
        OffsetWidth: "offsetWidth",
        Order: "order",
        Width: "width"
      };
      /** @enum {string} */

      var Direction = {
        Horizontal: "horizontal",
        Vertical: "vertical"
      };

      var McGutterDirective = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} renderer
         */
        function McGutterDirective(elementRef, renderer) {
          _classCallCheck(this, McGutterDirective);

          this.elementRef = elementRef;
          this.renderer = renderer;
          this._direction = Direction.Vertical;
          this._order = 0;
          this._size = 6;
          this.dragged = false;
        }
        /**
         * @return {?}
         */


        _createClass(McGutterDirective, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.setStyle("flex-basis"
            /* FlexBasis */
            , Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceCssPixelValue"])(this.size));
            this.setStyle(this.isVertical() ? "height"
            /* Height */
            : "width"
            /* Width */
            , Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceCssPixelValue"])(this.size));
            this.setStyle("order"
            /* Order */
            , this.order);

            if (!this.isVertical()) {
              this.setStyle("height"
              /* Height */
              , '100%');
            } // fix IE issue with gutter icon. flex-direction is requied for flex alignment options


            this.setStyle("flex-direction"
            /* FlexDirection */
            , this.isVertical() ? 'row' : 'column');
          }
          /**
           * @return {?}
           */

        }, {
          key: "isVertical",
          value: function isVertical() {
            return this.direction === Direction.Vertical;
          }
          /**
           * @private
           * @param {?} property
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setStyle",
          value: function setStyle(property, value) {
            this.renderer.setStyle(this.elementRef.nativeElement, property, value);
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          }
          /**
           * @param {?} direction
           * @return {?}
           */
          ,
          set: function set(direction) {
            this._direction = direction;
          }
          /**
           * @return {?}
           */

        }, {
          key: "order",
          get: function get() {
            return this._order;
          }
          /**
           * @param {?} order
           * @return {?}
           */
          ,
          set: function set(order) {
            this._order = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(order);
          }
          /**
           * @return {?}
           */

        }, {
          key: "size",
          get: function get() {
            return this._size;
          }
          /**
           * @param {?} size
           * @return {?}
           */
          ,
          set: function set(size) {
            this._size = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(size);
          }
        }]);

        return McGutterDirective;
      }();

      McGutterDirective.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: 'mc-gutter',
          host: {
            "class": 'mc-gutter',
            '[class.mc-gutter_vertical]': 'isVertical()',
            '[class.mc-gutter_dragged]': 'dragged',
            '(mousedown)': 'dragged = true'
          }
        }]
      }];
      /** @nocollapse */

      McGutterDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }];
      };

      McGutterDirective.propDecorators = {
        direction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        order: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        size: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}

      var McSplitterComponent = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} ngZone
         * @param {?} renderer
         */
        function McSplitterComponent(elementRef, changeDetectorRef, ngZone, renderer) {
          _classCallCheck(this, McSplitterComponent);

          this.elementRef = elementRef;
          this.changeDetectorRef = changeDetectorRef;
          this.ngZone = ngZone;
          this.renderer = renderer;
          this.areas = [];
          this.isDragging = false;
          this.areaPositionDivider = 2;
          this.listeners = [];
          this._hideGutters = false;
          this._disabled = false;
          this._gutterSize = 6;
        }
        /**
         * @return {?}
         */


        _createClass(McSplitterComponent, [{
          key: "addArea",

          /**
           * @param {?} area
           * @return {?}
           */
          value: function addArea(area) {
            /** @type {?} */
            var index = this.areas.length;
            /** @type {?} */

            var order = index * this.areaPositionDivider;
            /** @type {?} */

            var size = area.getSize();
            area.setOrder(order);
            this.areas.push({
              area: area,
              index: index,
              order: order,
              initialSize: size
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!this.direction) {
              this.direction = Direction.Horizontal;
            }

            this.setStyle("flex-direction"
            /* FlexDirection */
            , this.isVertical() ? 'column' : 'row');
          }
          /**
           * @param {?} event
           * @param {?} leftAreaIndex
           * @param {?} rightAreaIndex
           * @return {?}
           */

        }, {
          key: "onMouseDown",
          value: function onMouseDown(event, leftAreaIndex, rightAreaIndex) {
            var _this79 = this;

            if (this.disabled) {
              return;
            }

            event.preventDefault();
            /** @type {?} */

            var leftArea = this.areas[leftAreaIndex];
            /** @type {?} */

            var rightArea = this.areas[rightAreaIndex];
            /** @type {?} */

            var startPoint = {
              x: event.screenX,
              y: event.screenY
            };
            leftArea.initialSize = leftArea.area.getSize();
            rightArea.initialSize = rightArea.area.getSize();
            this.areas.forEach(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              /** @type {?} */
              var size = item.area.getSize();
              item.area.disableFlex();
              item.area.setSize(size);
            });
            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              _this79.listeners.push(_this79.renderer.listen('document', 'mouseup',
              /**
              * @return {?}
              */
              function () {
                return _this79.onMouseUp();
              }));
            });
            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              _this79.listeners.push(_this79.renderer.listen('document', 'mousemove',
              /**
              * @param {?} e
              * @return {?}
              */
              function (e) {
                return _this79.onMouseMove(e, startPoint, leftArea, rightArea);
              }));
            });
            this.isDragging = true;
          }
          /**
           * @param {?} area
           * @return {?}
           */

        }, {
          key: "removeArea",
          value: function removeArea(area) {
            /** @type {?} */
            var indexToRemove = -1;
            this.areas.some(
            /**
            * @param {?} item
            * @param {?} index
            * @return {?}
            */
            function (item, index) {
              if (item.area === area) {
                indexToRemove = index;
                return true;
              }

              return false;
            });

            if (indexToRemove === -1) {
              return;
            }

            this.areas.splice(indexToRemove, 1);
          }
          /**
           * @return {?}
           */

        }, {
          key: "isVertical",
          value: function isVertical() {
            return this.direction === Direction.Vertical;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateGutter",
          value: function updateGutter() {
            var _this80 = this;

            this.gutters.forEach(
            /**
            * @param {?} gutter
            * @return {?}
            */
            function (gutter) {
              if (gutter.dragged) {
                gutter.dragged = false;

                _this80.changeDetectorRef.detectChanges();
              }
            });
          }
          /**
           * @private
           * @param {?} event
           * @param {?} startPoint
           * @param {?} leftArea
           * @param {?} rightArea
           * @return {?}
           */

        }, {
          key: "onMouseMove",
          value: function onMouseMove(event, startPoint, leftArea, rightArea) {
            if (!this.isDragging || this.disabled) {
              return;
            }
            /** @type {?} */


            var endPoint = {
              x: event.screenX,
              y: event.screenY
            };
            /** @type {?} */

            var offset = this.isVertical() ? startPoint.y - endPoint.y : startPoint.x - endPoint.x;
            /** @type {?} */

            var newLeftAreaSize = leftArea.initialSize - offset;
            /** @type {?} */

            var newRightAreaSize = rightArea.initialSize + offset;
            /** @type {?} */

            var minLeftAreaSize = leftArea.area.getMinSize();
            /** @type {?} */

            var minRightAreaSize = rightArea.area.getMinSize();

            if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {
              return;
            } else if (newLeftAreaSize <= 0) {
              leftArea.area.setSize(0);
              rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);
            } else if (newRightAreaSize <= 0) {
              leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);
              rightArea.area.setSize(0);
            } else {
              leftArea.area.setSize(newLeftAreaSize);
              rightArea.area.setSize(newRightAreaSize);
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "onMouseUp",
          value: function onMouseUp() {
            while (this.listeners.length > 0) {
              /** @type {?} */
              var unsubscribe = this.listeners.pop();

              if (unsubscribe) {
                unsubscribe();
              }
            }

            this.isDragging = false;
            this.updateGutter();
          }
          /**
           * @private
           * @param {?} property
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setStyle",
          value: function setStyle(property, value) {
            this.renderer.setStyle(this.elementRef.nativeElement, property, value);
          }
        }, {
          key: "hideGutters",
          get: function get() {
            return this._hideGutters;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hideGutters = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          }
          /**
           * @param {?} direction
           * @return {?}
           */
          ,
          set: function set(direction) {
            this._direction = direction;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} disabled
           * @return {?}
           */
          ,
          set: function set(disabled) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(disabled);
          }
          /**
           * @return {?}
           */

        }, {
          key: "gutterSize",
          get: function get() {
            return this._gutterSize;
          }
          /**
           * @param {?} gutterSize
           * @return {?}
           */
          ,
          set: function set(gutterSize) {
            /** @type {?} */
            var size = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(gutterSize);
            this._gutterSize = size > 0 ? size : this.gutterSize;
          }
        }]);

        return McSplitterComponent;
      }();

      McSplitterComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-splitter',
          exportAs: 'mcSplitter',
          host: {
            "class": 'mc-splitter'
          },
          preserveWhitespaces: false,
          template: "<ng-content></ng-content>\n\n<ng-template ngFor let-area [ngForOf]=\"areas\" let-index=\"index\" let-last=\"last\">\n    <mc-gutter *ngIf=\"last === false\"\n               [direction]=\"direction\"\n               [attr.disabled]=\"disabled || null\"\n               [style.display]=\"hideGutters ? 'none' : 'flex'\"\n               [size]=\"gutterSize\"\n               [order]=\"index * 2 + 1\"\n               (mousedown)=\"onMouseDown($event, index, index + 1)\">\n    </mc-gutter>\n</ng-template>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-splitter{align-items:stretch;display:flex;flex-wrap:nowrap}.mc-gutter,.mc-splitter,.mc-splitter .mc-splitter-area{overflow:hidden}.mc-gutter{align-items:center;display:flex;flex-grow:0;flex-shrink:0;justify-content:center}.mc-gutter.mc-gutter_vertical>.mc-icon{transform:rotate(90deg)}"]
        }]
      }];
      /** @nocollapse */

      McSplitterComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }];
      };

      McSplitterComponent.propDecorators = {
        gutters: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"],
          args: [McGutterDirective]
        }],
        hideGutters: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        direction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        gutterSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}

      var McSplitterAreaDirective = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} renderer
         * @param {?} splitter
         */
        function McSplitterAreaDirective(elementRef, renderer, splitter) {
          _classCallCheck(this, McSplitterAreaDirective);

          this.elementRef = elementRef;
          this.renderer = renderer;
          this.splitter = splitter;
        }
        /**
         * @return {?}
         */


        _createClass(McSplitterAreaDirective, [{
          key: "disableFlex",
          value: function disableFlex() {
            this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.splitter.addArea(this);
            this.removeStyle("max-width"
            /* MaxWidth */
            );

            if (this.splitter.direction === Direction.Vertical) {
              this.setStyle("width"
              /* Width */
              , '100%');
              this.removeStyle("height"
              /* Height */
              );
            } else {
              this.setStyle("height"
              /* Height */
              , '100%');
              this.removeStyle("width"
              /* Width */
              );
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.splitter.removeArea(this);
          }
          /**
           * @param {?} order
           * @return {?}
           */

        }, {
          key: "setOrder",
          value: function setOrder(order) {
            this.setStyle("order"
            /* Order */
            , order);
          }
          /**
           * @param {?} size
           * @return {?}
           */

        }, {
          key: "setSize",
          value: function setSize(size) {
            if (size) {
              /** @type {?} */
              var sz = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(size);
              this.setStyle(this.getSizeProperty(), Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceCssPixelValue"])(sz));
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "getSize",
          value: function getSize() {
            return this.elementRef.nativeElement[this.getOffsetSizeProperty()];
          }
          /**
           * @return {?}
           */

        }, {
          key: "getMinSize",
          value: function getMinSize() {
            /** @type {?} */
            var styles = getComputedStyle(this.elementRef.nativeElement);
            return parseFloat(styles[this.getMinSizeProperty()]);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "isVertical",
          value: function isVertical() {
            return this.splitter.direction === Direction.Vertical;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getMinSizeProperty",
          value: function getMinSizeProperty() {
            return this.isVertical() ? "min-height"
            /* MinHeight */
            : "minWidth"
            /* MinWidth */
            ;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getOffsetSizeProperty",
          value: function getOffsetSizeProperty() {
            return this.isVertical() ? "offsetHeight"
            /* OffsetHeight */
            : "offsetWidth"
            /* OffsetWidth */
            ;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getSizeProperty",
          value: function getSizeProperty() {
            return this.isVertical() ? "height"
            /* Height */
            : "width"
            /* Width */
            ;
          }
          /**
           * @private
           * @param {?} style
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setStyle",
          value: function setStyle(style, value) {
            this.renderer.setStyle(this.elementRef.nativeElement, style, value);
          }
          /**
           * @private
           * @param {?} style
           * @return {?}
           */

        }, {
          key: "removeStyle",
          value: function removeStyle(style) {
            this.renderer.removeStyle(this.elementRef.nativeElement, style);
          }
        }]);

        return McSplitterAreaDirective;
      }();

      McSplitterAreaDirective.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mc-splitter-area]',
          host: {
            "class": 'mc-splitter-area'
          }
        }]
      }];
      /** @nocollapse */

      McSplitterAreaDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]
        }, {
          type: McSplitterComponent
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: splitter.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McSplitterModule = function McSplitterModule() {
        _classCallCheck(this, McSplitterModule);
      };

      McSplitterModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__["McIconModule"]],
          exports: [McGutterDirective, McSplitterAreaDirective, McSplitterComponent],
          declarations: [McGutterDirective, McSplitterAreaDirective, McSplitterComponent]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-splitter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-splitter.js.map

      /***/
    },

    /***/
    "E6iK":
    /*!********************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-progress-spinner.js ***!
      \********************************************************************/

    /*! exports provided: McProgressSpinner, McProgressSpinnerBase, McProgressSpinnerMixinBase, McProgressSpinnerModule */

    /***/
    function E6iK(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressSpinner", function () {
        return McProgressSpinner;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressSpinnerBase", function () {
        return McProgressSpinnerBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressSpinnerMixinBase", function () {
        return McProgressSpinnerMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressSpinnerModule", function () {
        return McProgressSpinnerModule;
      });
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /**
       * @fileoverview added by tsickle
       * Generated from: progress-spinner.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var idIterator = 0;
      /** @type {?} */

      var MIN_PERCENT = 0;
      /** @type {?} */

      var MAX_PERCENT = 100;

      var McProgressSpinnerBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McProgressSpinnerBase(_elementRef) {
        _classCallCheck(this, McProgressSpinnerBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McProgressSpinnerMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(McProgressSpinnerBase, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ThemePalette"].Primary);
      /** @type {?} */

      var MAX_DASH_ARRAY = 273;

      var McProgressSpinner = /*#__PURE__*/function (_McProgressSpinnerMix) {
        _inherits(McProgressSpinner, _McProgressSpinnerMix);

        var _super22 = _createSuper(McProgressSpinner);

        /**
         * @param {?} elementRef
         */
        function McProgressSpinner(elementRef) {
          var _this81;

          _classCallCheck(this, McProgressSpinner);

          _this81 = _super22.call(this, elementRef);
          _this81.id = "mc-progress-spinner-".concat(idIterator++);
          _this81.value = 0;
          _this81.mode = 'determinate';
          return _this81;
        }
        /**
         * @return {?}
         */


        _createClass(McProgressSpinner, [{
          key: "percentage",
          get: function get() {
            return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;
          }
          /**
           * @return {?}
           */

        }, {
          key: "dashOffsetPercent",
          get: function get() {
            return "".concat(MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY, "%");
          }
        }]);

        return McProgressSpinner;
      }(McProgressSpinnerMixinBase);

      McProgressSpinner.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-progress-spinner',
          template: "<div class=\"mc-progress-spinner__inner\"\n     [ngClass]=\"{'mc-progress-spinner__inner--indeterminate': mode === 'indeterminate'}\">\n    <svg focusable=\"false\"\n         preserveAspectRatio=\"xMidYMid meet\"\n         viewBox=\"0 0 100 100\"\n         class=\"mc-progress-spinner__svg\">\n        <circle cx=\"50%\"\n                cy=\"50%\"\n                r=\"42.5%\"\n                class=\"mc-progress-spinner__circle\"\n                [ngStyle]=\"{'stroke-dashoffset': mode === 'determinate' ? dashOffsetPercent : null}\">\n        </circle>\n    </svg>\n</div>\n\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          inputs: ['color'],
          host: {
            "class": 'mc-progress-spinner',
            '[attr.id]': 'id'
          },
          styles: ["@-webkit-keyframes mc-progress-spinner-indeterminate{to{transform:rotate(270deg)}}@keyframes mc-progress-spinner-indeterminate{to{transform:rotate(270deg)}}.mc-progress-spinner{display:inline-block;height:16px;overflow:hidden;width:16px}.mc-progress-spinner__circle{fill:none;stroke:#000;stroke-dasharray:273%;stroke-width:13%;transform-origin:center center;transition:stroke-dashoffset .3s}.mc-progress-spinner__inner{height:100%;transform:rotate(-90deg);width:100%}.mc-progress-spinner__inner--indeterminate{-webkit-animation:mc-progress-spinner-indeterminate 1.5s cubic-bezier(.455,.03,.515,.955) infinite;animation:mc-progress-spinner-indeterminate 1.5s cubic-bezier(.455,.03,.515,.955) infinite}.mc-progress-spinner__inner--indeterminate .mc-progress-spinner__circle{stroke-dashoffset:80%}.mc-progress-spinner__svg{height:100%;width:100%}"]
        }]
      }];
      /** @nocollapse */

      McProgressSpinner.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }];
      };

      McProgressSpinner.propDecorators = {
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mode: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: progress-spinner.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McProgressSpinnerModule = function McProgressSpinnerModule() {
        _classCallCheck(this, McProgressSpinnerModule);
      };

      McProgressSpinnerModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]],
          exports: [McProgressSpinner],
          declarations: [McProgressSpinner]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-progress-spinner.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-progress-spinner.js.map

      /***/
    },

    /***/
    "EQR/":
    /*!********************************************************************!*\
      !*** ./packages/docs/src/app/components/sidenav/sidenav.module.ts ***!
      \********************************************************************/

    /*! exports provided: SidenavModule */

    /***/
    function EQR(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SidenavModule", function () {
        return SidenavModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/accordion */
      "GF+f");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../shared/documentation-items/documentation-items */
      "rMhK");
      /* harmony import */


      var _sidenav_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./sidenav.component */
      "m73n");

      var SidenavModule = function SidenavModule() {
        _classCallCheck(this, SidenavModule);
      };

      SidenavModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"], _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__["CdkAccordionModule"]],
        exports: [_sidenav_component__WEBPACK_IMPORTED_MODULE_7__["ComponentSidenav"]],
        declarations: [_sidenav_component__WEBPACK_IMPORTED_MODULE_7__["ComponentSidenav"]],
        providers: [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__["DocumentationItems"]]
      })], SidenavModule);
      /***/
    },

    /***/
    "Ew7P":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/anchors/anchors.component.html ***!
      \***************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function Ew7P(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div  class=\"anchors-menu\">\n    <div class=\"anchors-menu__container\">\n        <div class=\"anchors-menu__list\">\n            <div *ngFor=\"let anchor of anchors; let i = index\" class=\"anchors-menu__list-element {{anchors[i].active? activeClass: null}}\">\n                <a [routerLink]=\"[this.pathName]\" fragment=\"{{anchor.href}}\" (click)=\"setFragment(i)\" class=\"anchors-menu__link\">{{anchor.name}}</a>\n            </div>\n        </div>\n    </div>\n</div>\n";
      /***/
    },

    /***/
    "F8q5":
    /*!********************************************************************!*\
      !*** ./packages/docs/$$_lazy_route_resource lazy namespace object ***!
      \********************************************************************/

    /*! no static exports found */

    /***/
    function F8q5(module, exports) {
      function webpackEmptyAsyncContext(req) {
        // Here Promise.resolve().then() is used instead of new Promise() to prevent
        // uncaught exception popping up in devtools
        return Promise.resolve().then(function () {
          var e = new Error("Cannot find module '" + req + "'");
          e.code = 'MODULE_NOT_FOUND';
          throw e;
        });
      }

      webpackEmptyAsyncContext.keys = function () {
        return [];
      };

      webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
      module.exports = webpackEmptyAsyncContext;
      webpackEmptyAsyncContext.id = "F8q5";
      /***/
    },

    /***/
    "G+fD":
    /*!**********************************************************************!*\
      !*** ./packages/docs/src/app/shared/doc-viewer/doc-viewer-module.ts ***!
      \**********************************************************************/

    /*! exports provided: DocViewerModule */

    /***/
    function GFD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DocViewerModule", function () {
        return DocViewerModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tabs */
      "6AiE");
      /* harmony import */


      var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tooltip */
      "YK9X");
      /* harmony import */


      var _copier_copier_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../copier/copier.service */
      "bLap");
      /* harmony import */


      var _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ../example-viewer/example-viewer */
      "iw/G");
      /* harmony import */


      var _stackblitz_stackblitz_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../stackblitz/stackblitz-button */
      "waD+");
      /* harmony import */


      var _doc_viewer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ./doc-viewer */
      "RuMu"); // ExampleViewer is included in the DocViewerModule because they have a circular dependency.


      var DocViewerModule = function DocViewerModule() {
        _classCallCheck(this, DocViewerModule);
      };

      DocViewerModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__["McButtonModule"], _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_5__["McTabsModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _stackblitz_stackblitz_button__WEBPACK_IMPORTED_MODULE_9__["StackblitzButtonModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalModule"], _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__["McToolTipModule"]],
        providers: [_copier_copier_service__WEBPACK_IMPORTED_MODULE_7__["CopierService"]],
        declarations: [_doc_viewer__WEBPACK_IMPORTED_MODULE_10__["DocViewer"], _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__["ExampleViewer"]],
        entryComponents: [_example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__["ExampleViewer"]],
        exports: [_doc_viewer__WEBPACK_IMPORTED_MODULE_10__["DocViewer"], _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__["ExampleViewer"]]
      })], DocViewerModule);
      /***/
    },

    /***/
    "GEIk":
    /*!**********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-toggle.js ***!
      \**********************************************************/

    /*! exports provided: McToggleBase, McToggleChange, McToggleComponent, McToggleMixinBase, McToggleModule */

    /***/
    function GEIk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McToggleBase", function () {
        return McToggleBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McToggleChange", function () {
        return McToggleChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McToggleComponent", function () {
        return McToggleComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McToggleMixinBase", function () {
        return McToggleMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McToggleModule", function () {
        return McToggleModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /**
       * @fileoverview added by tsickle
       * Generated from: toggle.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var nextUniqueId = 0;

      var McToggleBase = // tslint:disable-next-line: naming-convention

      /**
       * @param {?} _elementRef
       */
      function McToggleBase(_elementRef) {
        _classCallCheck(this, McToggleBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line: naming-convention

      /** @type {?} */


      var McToggleMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McToggleBase), _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ThemePalette"].Primary));

      var McToggleChange = function McToggleChange() {
        _classCallCheck(this, McToggleChange);
      };

      if (false) {}

      var McToggleComponent = /*#__PURE__*/function (_McToggleMixinBase) {
        _inherits(McToggleComponent, _McToggleMixinBase);

        var _super23 = _createSuper(McToggleComponent);

        /**
         * @param {?} _elementRef
         * @param {?} _focusMonitor
         * @param {?} _changeDetectorRef
         */
        function McToggleComponent(_elementRef, _focusMonitor, _changeDetectorRef) {
          var _this82;

          _classCallCheck(this, McToggleComponent);

          _this82 = _super23.call(this, _elementRef);
          _this82._elementRef = _elementRef;
          _this82._focusMonitor = _focusMonitor;
          _this82._changeDetectorRef = _changeDetectorRef;
          _this82.labelPosition = 'right';
          _this82.ariaLabel = '';
          _this82.ariaLabelledby = null;
          _this82.name = null;
          _this82._disabled = false;
          _this82._checked = false;
          _this82.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this82.uniqueId = "mc-toggle-".concat(++nextUniqueId); // tslint:disable-next-line:no-empty

          _this82.onTouchedCallback =
          /**
          * @return {?}
          */
          function () {}; // tslint:disable-next-line:no-empty


          _this82.onChangeCallback =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};

          _this82.id = _this82.uniqueId;

          _this82._focusMonitor.monitor(_this82._elementRef.nativeElement, true);

          return _this82;
        }
        /**
         * @return {?}
         */


        _createClass(McToggleComponent, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');
          }
          /**
           * @return {?}
           */

        }, {
          key: "getAriaChecked",
          value: function getAriaChecked() {
            return this.checked;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onChangeEvent",
          value: function onChangeEvent(event) {
            event.stopPropagation();
            this.updateModelValue();
            this.emitChangeEvent();
          }
          /**
           * @return {?}
           */

        }, {
          key: "onLabelTextChange",
          value: function onLabelTextChange() {
            this._changeDetectorRef.markForCheck();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onInputClick",
          value: function onInputClick(event) {
            event.stopPropagation();
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.checked = !!value;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChangeCallback = fn;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouchedCallback = fn;
          }
          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateModelValue",
          value: function updateModelValue() {
            this._checked = !this.checked;
            this.onTouchedCallback();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent() {
            /** @type {?} */
            var event = new McToggleChange();
            event.source = this;
            event.checked = this.checked;
            this.onChangeCallback(this.checked);
            this.change.emit(event);
          }
        }, {
          key: "inputId",
          get: function get() {
            return "".concat(this.id || this.uniqueId, "-input");
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this._disabled) {
              this._disabled = value;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "checked",
          get: function get() {
            return this._checked;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this._checked) {
              this._checked = value;

              this._changeDetectorRef.markForCheck();
            }
          }
        }]);

        return McToggleComponent;
      }(McToggleMixinBase);

      McToggleComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-toggle',
          exportAs: 'mcToggle',
          template: "<label [attr.for]=\"inputId\" class=\"mc-toggle-layout\">\n    <div class=\"mc-toggle__container\" [class.left]=\"labelPosition === 'left'\">\n        <input #input\n               type=\"checkbox\"\n               role=\"switch\"\n               class=\"mc-toggle-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (click)=\"onInputClick($event)\"\n               (change)=\"onChangeEvent($event)\"/>\n        <div class=\"mc-toggle-bar-container\">\n            <div class=\"mc-toggle__overlay\"></div>\n            <div class=\"mc-toggle-bar\">\n                <div class=\"mc-toggle__circle\" [@switch]=\"checked\"></div>\n            </div>\n        </div>\n        <div class=\"mc-toggle__content\"\n             [class.left]=\"labelPosition === 'left'\"\n             [class.right]=\"labelPosition === 'right'\">\n            <span class=\"mc-toggle-label\" (cdkObserveContent)=\"onLabelTextChange()\">\n                <ng-content></ng-content>\n            </span>\n        </div>\n    </div>\n</label>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          inputs: ['color', 'tabIndex'],
          host: {
            "class": 'mc-toggle',
            '[id]': 'id',
            '[attr.id]': 'id',
            '[class.mc-disabled]': 'disabled',
            '[class.mc-active]': 'checked'
          },
          animations: [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('switch', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
            left: '50%'
          })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
            left: '1px'
          })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('true <=> false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('150ms'))])],
          providers: [{
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return McToggleComponent;
            }),
            multi: true
          }],
          styles: [".mc-toggle{display:inline-block}.mc-toggle .mc-toggle-layout{align-items:baseline;cursor:inherit;display:inline-flex;vertical-align:middle;white-space:nowrap}.mc-toggle .mc-toggle-bar{border-style:solid;border-width:1px;position:relative}.mc-toggle .mc-toggle-bar.mc-toggle-label-position-left{order:1}.mc-toggle .mc-toggle-bar-container{position:relative}.mc-toggle__container{align-items:center;display:flex;position:relative}.mc-toggle__container.left{flex-direction:row-reverse}.mc-toggle__content.left{margin-right:8px}.mc-toggle__content.right{margin-left:8px}.mc-toggle__circle{border-radius:100%;border-style:solid;border-width:1px;margin-left:-1px;margin-top:-1px;position:absolute;transform:translateX(-1px)}.mc-toggle__overlay{left:0;position:absolute;top:0;z-index:1}.mc-toggle:not(.mc-toggle_small) .mc-toggle-bar{border-radius:9px;height:16px;width:28px}.mc-toggle:not(.mc-toggle_small) .mc-toggle__overlay{border-radius:9px;height:16px;width:28px}.mc-toggle:not(.mc-toggle_small) .mc-toggle__circle{height:16px;width:16px}.mc-toggle.mc-toggle_small .mc-toggle-bar,.mc-toggle.mc-toggle_small .mc-toggle__overlay{border-radius:8px;height:14px;width:24px}.mc-toggle.mc-toggle_small .mc-toggle__circle{height:14px;width:14px}.mc-toggle:not(.mc-disabled){cursor:pointer}"]
        }]
      }];
      /** @nocollapse */

      McToggleComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }];
      };

      McToggleComponent.propDecorators = {
        inputElement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['input', {
            "static": false
          }]
        }],
        labelPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        ariaLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-label']
        }],
        ariaLabelledby: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['aria-labelledby']
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        checked: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: toggle.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McToggleModule = function McToggleModule() {
        _classCallCheck(this, McToggleModule);
      };

      McToggleModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"]],
          exports: [McToggleComponent],
          declarations: [McToggleComponent]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-toggle.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-toggle.js.map

      /***/
    },

    /***/
    "Gncw":
    /*!************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-textarea.js ***!
      \************************************************************/

    /*! exports provided: MC_TEXTAREA_VALUE_ACCESSOR, McTextarea, McTextareaBase, McTextareaMixinBase, McTextareaModule */

    /***/
    function Gncw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TEXTAREA_VALUE_ACCESSOR", function () {
        return MC_TEXTAREA_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTextarea", function () {
        return McTextarea;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTextareaBase", function () {
        return McTextareaBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTextareaMixinBase", function () {
        return McTextareaMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTextareaModule", function () {
        return McTextareaModule;
      });
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /**
       * @fileoverview added by tsickle
       * Generated from: textarea.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var MC_TEXTAREA_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MC_TEXTAREA_VALUE_ACCESSOR');
      /** @type {?} */

      var nextUniqueId = 0;

      var McTextareaBase =
      /**
       * @param {?} defaultErrorStateMatcher
       * @param {?} parentForm
       * @param {?} parentFormGroup
       * @param {?} ngControl
       */
      function McTextareaBase(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        _classCallCheck(this, McTextareaBase);

        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTextareaMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinErrorState"])(McTextareaBase);

      var McTextarea = /*#__PURE__*/function (_McTextareaMixinBase) {
        _inherits(McTextarea, _McTextareaMixinBase);

        var _super24 = _createSuper(McTextarea);

        /**
         * @param {?} elementRef
         * @param {?} ngControl
         * @param {?} parentForm
         * @param {?} parentFormGroup
         * @param {?} defaultErrorStateMatcher
         * @param {?} inputValueAccessor
         * @param {?} ngZone
         */
        function McTextarea(elementRef, ngControl, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor, ngZone) {
          var _this83;

          _classCallCheck(this, McTextarea);

          _this83 = _super24.call(this, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
          _this83.elementRef = elementRef;
          _this83.ngControl = ngControl;
          _this83.ngZone = ngZone;
          _this83.canGrow = true;
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          _this83.focused = false;
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          _this83.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          _this83.controlType = 'mc-textarea';
          _this83.uid = "mc-textsrea-".concat(nextUniqueId++);
          _this83._disabled = false;
          _this83._required = false;
          _this83.lineHeight = 0;
          _this83.freeRowsHeight = 0;
          _this83.minHeight = 0; // If no input value accessor was explicitly specified, use the element as the textarea value
          // accessor.

          _this83.valueAccessor = inputValueAccessor || _this83.elementRef.nativeElement;
          _this83.previousNativeValue = _this83.value; // Force setter to be called in case id was not specified.

          _this83.id = _this83.id;
          /** @type {?} */

          var growObserver = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(elementRef.nativeElement, 'input');
          _this83.growSubscription = growObserver.subscribe(_this83.grow.bind(_assertThisInitialized(_this83)));
          return _this83;
        }
        /**
         * Implemented as part of McFormFieldControl.
         * \@docs-private
         * @return {?}
         */


        _createClass(McTextarea, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            var _this84 = this;

            setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this84.grow();
            }, 0);
            this.lineHeight = parseInt(
            /** @type {?} */
            getComputedStyle(this.elementRef.nativeElement).lineHeight, 10);
            /** @type {?} */

            var paddingTop = parseInt(
            /** @type {?} */
            getComputedStyle(this.elementRef.nativeElement).paddingTop, 10);
            /** @type {?} */

            var paddingBottom = parseInt(
            /** @type {?} */
            getComputedStyle(this.elementRef.nativeElement).paddingBottom, 10); // tslint:disable-next-line:no-magic-numbers

            this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;
            this.freeRowsHeight = this.lineHeight;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges() {
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.stateChanges.complete();
            this.growSubscription.unsubscribe();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.ngControl) {
              // We need to re-evaluate this on every change detection cycle, because there are some
              // error triggers that we can't subscribe to (e.g. parent form submissions). This means
              // that whatever logic is in here has to be super lean or we risk destroying the performance.
              this.updateErrorState();
            } // We need to dirty-check the native element's value, because there are some cases where
            // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
            // updating the value using `emitEvent: false`).


            this.dirtyCheckNativeValue();
          }
          /**
           * Grow textarea height to avoid vertical scroll
           * @return {?}
           */

        }, {
          key: "grow",
          value: function grow() {
            var _this85 = this;

            if (!this.canGrow) {
              return;
            }

            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var textarea = _this85.elementRef.nativeElement;
              /** @type {?} */

              var outerHeight = parseInt(
              /** @type {?} */
              window.getComputedStyle(textarea).height, 10);
              /** @type {?} */

              var diff = outerHeight - textarea.clientHeight;
              textarea.style.minHeight = 0; // this line is important to height recalculation
              // this line is important to height recalculation

              /** @type {?} */

              var height = Math.max(_this85.minHeight, +textarea.scrollHeight + diff + _this85.freeRowsHeight);
              textarea.style.minHeight = "".concat(height, "px");
            });
          }
          /**
           * Focuses the textarea.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
          /**
           * Callback for the cases where the focused state of the textarea changes.
           * @param {?} isFocused
           * @return {?}
           */

        }, {
          key: "focusChanged",
          value: function focusChanged(isFocused) {
            if (isFocused !== this.focused) {
              this.focused = isFocused;
              this.stateChanges.next();
            }
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "onContainerClick",

          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */
          value: function onContainerClick() {
            this.focus();
          }
          /**
           * Does some manual dirty checking on the native textarea `value` property.
           * @protected
           * @return {?}
           */

        }, {
          key: "dirtyCheckNativeValue",
          value: function dirtyCheckNativeValue() {
            /** @type {?} */
            var newValue = this.value;

            if (this.previousNativeValue !== newValue) {
              this.previousNativeValue = newValue;
              this.stateChanges.next();
            }
          }
          /**
           * Checks whether the textarea is invalid based on the native validation.
           * @protected
           * @return {?}
           */

        }, {
          key: "isBadInput",
          value: function isBadInput() {
            // The `validity` property won't be present on platform-server.

            /** @type {?} */
            var validity =
            /** @type {?} */
            this.elementRef.nativeElement.validity;
            return validity && validity.badInput;
          }
        }, {
          key: "disabled",
          get: function get() {
            if (this.ngControl && this.ngControl.disabled !== null) {
              return this.ngControl.disabled;
            }

            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);

            if (this.focused) {
              this.focused = false;
              this.stateChanges.next();
            }
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._id = value || this.uid;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this.valueAccessor.value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.value) {
              this.valueAccessor.value = value;
              this.stateChanges.next();
            }
          }
        }, {
          key: "empty",
          get: function get() {
            return !this.elementRef.nativeElement.value && !this.isBadInput();
          }
        }]);

        return McTextarea;
      }(McTextareaMixinBase);

      McTextarea.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: 'textarea[mcTextarea]',
          exportAs: 'mcTextarea',
          host: {
            "class": 'mc-textarea',
            '[class.mc-textarea-resizable]': '!canGrow',
            '[attr.id]': 'id',
            '[attr.placeholder]': 'placeholder',
            '[attr.aria-invalid]': 'errorState',
            '[attr.disabled]': 'disabled || null',
            '[attr.required]': 'required',
            '(blur)': 'focusChanged(false)',
            '(focus)': 'focusChanged(true)'
          },
          providers: [{
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormFieldControl"],
            useExisting: McTextarea
          }]
        }]
      }];
      /** @nocollapse */

      McTextarea.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgForm"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroupDirective"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_TEXTAREA_VALUE_ACCESSOR]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }];
      };

      McTextarea.propDecorators = {
        canGrow: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        errorStateMatcher: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: textarea.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTextareaModule = function McTextareaModule() {
        _classCallCheck(this, McTextareaModule);
      };

      McTextareaModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]],
          exports: [McTextarea],
          declarations: [McTextarea]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-textarea.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-textarea.js.map

      /***/
    },

    /***/
    "HEAX":
    /*!*************************************************************************!*\
      !*** ./packages/docs/src/app/shared/example-viewer/example-viewer.scss ***!
      \*************************************************************************/

    /*! exports provided: default */

    /***/
    function HEAX(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ":host {\n  display: block;\n  padding: 20px 0 0;\n}\n\n.docs-example-source__show {\n  text-align: center;\n  padding: 8px;\n}\n\n.docs-example-source__hide {\n  display: none;\n}\n\n.docs-example-source-copy {\n  display: flex;\n  position: absolute;\n  top: 40px;\n  right: 0;\n  z-index: 10;\n  padding: 6px 6px;\n}\n\n.docs-example-source-copy .code-copy__copied {\n  display: none;\n  font-size: 14px;\n}\n\n.docs-example-source-copy_success .code-copy__copied {\n  display: block;\n}\n\n.docs-example-source-copy_success .code-copy__icon {\n  display: none;\n}\n\n.docs-example-viewer-title {\n  align-content: center;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  padding: 8px 20px;\n}\n\n.docs-example-viewer-title-spacer {\n  flex: 1 1 auto;\n}\n\n.docs-example-source-wrapper {\n  min-height: 201px;\n  display: flex;\n}\n\n.docs-example-source-wrapper:hover .docs-example-source-copy {\n  display: inline-block;\n}\n\n.docs-example-viewer__source_hidden .docs-example-source-wrapper {\n  height: 201px;\n  overflow-y: hidden;\n}\n\n.docs-example-numbers {\n  text-align: right;\n  width: 44px;\n  padding: 12px 8px;\n  margin: 0;\n}\n\n.docs-example-source {\n  position: relative;\n  overflow-y: hidden;\n  display: flex;\n  margin: 0;\n  flex-grow: 1;\n  padding: 12px;\n  min-height: 150px;\n}\n\n.docs-example-source-viewer {\n  position: absolute;\n  left: 12px;\n  top: 12px;\n}\n\n.docs-example-viewer-body {\n  padding: 16px;\n  overflow: auto;\n}\n\n.docs-example-source__switcher_hide {\n  visibility: hidden;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9zaGFyZWQvZXhhbXBsZS12aWV3ZXIvZXhhbXBsZS12aWV3ZXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGNBQWM7RUFDZCxpQkFBaUI7QUFDckI7O0FBRUE7RUFDSSxrQkFBa0I7RUFDbEIsWUFBWTtBQUNoQjs7QUFFQTtFQUNJLGFBQWE7QUFDakI7O0FBRUE7RUFDSSxhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxRQUFRO0VBQ1IsV0FBVztFQUNYLGdCQUFnQjtBQUNwQjs7QUFQQTtFQVNRLGFBQWE7RUFDYixlQUFlO0FBRXZCOztBQUNLO0VBRU8sY0FBYztBQUMxQjs7QUFISztFQU1PLGFBQWE7QUFDekI7O0FBSUE7RUFDSSxxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsaUJBQWlCO0FBRHJCOztBQUlBO0VBQ0ksY0FBYztBQURsQjs7QUFJQTtFQUNJLGlCQUFpQjtFQUNqQixhQUFhO0FBRGpCOztBQUlBO0VBRVEscUJBQXFCO0FBRjdCOztBQU1BO0VBRVEsYUFBYTtFQUNiLGtCQUFrQjtBQUoxQjs7QUFRQTtFQUNJLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLFNBQVM7QUFMYjs7QUFRQTtFQUNJLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLFNBQVM7RUFDVCxZQUFZO0VBQ1osYUFBYTtFQUNiLGlCQUFpQjtBQUxyQjs7QUFRQTtFQUNJLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsU0FBUztBQUxiOztBQVFBO0VBQ0ksYUFBYTtFQUViLGNBQWM7QUFObEI7O0FBU0E7RUFDSSxrQkFBa0I7QUFOdEIiLCJmaWxlIjoicGFja2FnZXMvZG9jcy9zcmMvYXBwL3NoYXJlZC9leGFtcGxlLXZpZXdlci9leGFtcGxlLXZpZXdlci5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBhZGRpbmc6IDIwcHggMCAwO1xufVxuXG4uZG9jcy1leGFtcGxlLXNvdXJjZV9fc2hvdyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBhZGRpbmc6IDhweDtcbn1cblxuLmRvY3MtZXhhbXBsZS1zb3VyY2VfX2hpZGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5kb2NzLWV4YW1wbGUtc291cmNlLWNvcHkge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNDBweDtcbiAgICByaWdodDogMDtcbiAgICB6LWluZGV4OiAxMDtcbiAgICBwYWRkaW5nOiA2cHggNnB4O1xuXG4gICAgLmNvZGUtY29weV9fY29waWVkIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgICZfc3VjY2VzcyB7XG4gICAgICAgIC5jb2RlLWNvcHlfX2NvcGllZCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgfVxuXG4gICAgICAgIC5jb2RlLWNvcHlfX2ljb24ge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLmRvY3MtZXhhbXBsZS12aWV3ZXItdGl0bGUge1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgcGFkZGluZzogOHB4IDIwcHg7XG59XG5cbi5kb2NzLWV4YW1wbGUtdmlld2VyLXRpdGxlLXNwYWNlciB7XG4gICAgZmxleDogMSAxIGF1dG87XG59XG5cbi5kb2NzLWV4YW1wbGUtc291cmNlLXdyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDIwMXB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5kb2NzLWV4YW1wbGUtc291cmNlLXdyYXBwZXI6aG92ZXIge1xuICAgIC5kb2NzLWV4YW1wbGUtc291cmNlLWNvcHkge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxufVxuXG4uZG9jcy1leGFtcGxlLXZpZXdlcl9fc291cmNlX2hpZGRlbiB7XG4gICAgLmRvY3MtZXhhbXBsZS1zb3VyY2Utd3JhcHBlciB7XG4gICAgICAgIGhlaWdodDogMjAxcHg7XG4gICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICB9XG59XG5cbi5kb2NzLWV4YW1wbGUtbnVtYmVycyB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgd2lkdGg6IDQ0cHg7XG4gICAgcGFkZGluZzogMTJweCA4cHg7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uZG9jcy1leGFtcGxlLXNvdXJjZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbjogMDtcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAgcGFkZGluZzogMTJweDtcbiAgICBtaW4taGVpZ2h0OiAxNTBweDtcbn1cblxuLmRvY3MtZXhhbXBsZS1zb3VyY2Utdmlld2VyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMTJweDtcbiAgICB0b3A6IDEycHg7XG59XG5cbi5kb2NzLWV4YW1wbGUtdmlld2VyLWJvZHkge1xuICAgIHBhZGRpbmc6IDE2cHg7XG5cbiAgICBvdmVyZmxvdzogYXV0bztcbn1cblxuLmRvY3MtZXhhbXBsZS1zb3VyY2VfX3N3aXRjaGVyX2hpZGUge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbiJdfQ== */";
      /***/
    },

    /***/
    "I1VR":
    /*!*************************************************************************!*\
      !*** ./packages/docs/src/app/containers/homepage/homepage.component.ts ***!
      \*************************************************************************/

    /*! exports provided: HomepageComponent */

    /***/
    function I1VR(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HomepageComponent", function () {
        return HomepageComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_homepage_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./homepage.template.html */
      "d+MJ");
      /* harmony import */


      var _homepage_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./homepage.scss */
      "JiF1");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var HomepageComponent = function HomepageComponent() {
        _classCallCheck(this, HomepageComponent);
      };

      HomepageComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-homepage',
        template: _raw_loader_homepage_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_homepage_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      })], HomepageComponent);
      /***/
    },

    /***/
    "JEqS":
    /*!****************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-progress-bar.js ***!
      \****************************************************************/

    /*! exports provided: McProgressBar, McProgressBarBase, McProgressBarMixinBase, McProgressBarModule */

    /***/
    function JEqS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressBar", function () {
        return McProgressBar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressBarBase", function () {
        return McProgressBarBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressBarMixinBase", function () {
        return McProgressBarMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McProgressBarModule", function () {
        return McProgressBarModule;
      });
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /**
       * @fileoverview added by tsickle
       * Generated from: progress-bar.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var idIterator = 0;
      /** @type {?} */

      var MIN_PERCENT = 0;
      /** @type {?} */

      var MAX_PERCENT = 100;

      var McProgressBarBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McProgressBarBase(_elementRef) {
        _classCallCheck(this, McProgressBarBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McProgressBarMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(McProgressBarBase, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ThemePalette"].Primary);

      var McProgressBar = /*#__PURE__*/function (_McProgressBarMixinBa) {
        _inherits(McProgressBar, _McProgressBarMixinBa);

        var _super25 = _createSuper(McProgressBar);

        /**
         * @param {?} elementRef
         */
        function McProgressBar(elementRef) {
          var _this86;

          _classCallCheck(this, McProgressBar);

          _this86 = _super25.call(this, elementRef);
          _this86.id = "mc-progress-bar-".concat(idIterator++);
          _this86.value = 0;
          _this86.mode = 'determinate';
          return _this86;
        }
        /**
         * @return {?}
         */


        _createClass(McProgressBar, [{
          key: "percentage",
          get: function get() {
            return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;
          }
        }]);

        return McProgressBar;
      }(McProgressBarMixinBase);

      McProgressBar.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-progress-bar',
          template: "\n<div class=\"mc-progress-bar__inner\" [ngSwitch]=\"mode\" [id]=\"id\">\n    <div\n        *ngSwitchCase=\"'indeterminate'\"\n        class=\"mc-progress-bar__line mc-progress-bar__line--indeterminate\">\n    </div>\n    <div\n        *ngSwitchDefault\n        class=\"mc-progress-bar__line mc-progress-bar__line--determinate\"\n        [ngStyle]=\"{transform: 'scaleX(' + percentage + ')'}\">\n    </div>\n</div>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          inputs: ['color'],
          host: {
            "class": 'mc-progress-bar',
            '[attr.id]': 'id'
          },
          styles: ["@-webkit-keyframes mc-progress-bar-indeterminate{0%{transform:scaleX(.25) translateX(-150%)}to{transform:scaleX(.4) translateX(250%)}}@keyframes mc-progress-bar-indeterminate{0%{transform:scaleX(.25) translateX(-150%)}to{transform:scaleX(.4) translateX(250%)}}.mc-progress-bar{display:block;height:4px;overflow:hidden}.mc-progress-bar__inner{height:100%}.mc-progress-bar__line{height:100%;transform-origin:top left}.mc-progress-bar__line--determinate{transition:transform .3s}.mc-progress-bar__line--indeterminate{-webkit-animation:mc-progress-bar-indeterminate 2.1s cubic-bezier(.455,.03,.515,.955) infinite;animation:mc-progress-bar-indeterminate 2.1s cubic-bezier(.455,.03,.515,.955) infinite}"]
        }]
      }];
      /** @nocollapse */

      McProgressBar.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }];
      };

      McProgressBar.propDecorators = {
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mode: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: progress-bar.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McProgressBarModule = function McProgressBarModule() {
        _classCallCheck(this, McProgressBarModule);
      };

      McProgressBarModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]],
          exports: [McProgressBar],
          declarations: [McProgressBar]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-progress-bar.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-progress-bar.js.map

      /***/
    },

    /***/
    "JiF1":
    /*!*****************************************************************!*\
      !*** ./packages/docs/src/app/containers/homepage/homepage.scss ***!
      \*****************************************************************/

    /*! exports provided: default */

    /***/
    function JiF1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".section {\n  width: 100%;\n}\n\n.section .container {\n  max-width: 1140px;\n  margin: 0 auto;\n}\n\n.section-banner {\n  text-align: center;\n}\n\n.section-banner .logo {\n  margin: 200px auto 0;\n  width: 160px;\n}\n\n.section-banner .btn-container {\n  margin-top: 72px;\n}\n\n.section-banner .btn-container .btn {\n  display: inline-block;\n  margin: 0 18px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb250YWluZXJzL2hvbWVwYWdlL2hvbWVwYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxXQUFXO0FBQWY7O0FBREE7RUFJUSxpQkFBaUI7RUFDakIsY0FBYztBQUN0Qjs7QUFHQTtFQUNJLGtCQUFrQjtBQUF0Qjs7QUFEQTtFQUlRLG9CQUFvQjtFQUNwQixZQUFZO0FBQ3BCOztBQU5BO0VBU1EsZ0JBQWdCO0FBQ3hCOztBQVZBO0VBWVkscUJBQXFCO0VBQ3JCLGNBQWM7QUFFMUIiLCJmaWxlIjoicGFja2FnZXMvZG9jcy9zcmMvYXBwL2NvbnRhaW5lcnMvaG9tZXBhZ2UvaG9tZXBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLnNlY3Rpb24ge1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgLmNvbnRhaW5lciB7XG4gICAgICAgIG1heC13aWR0aDogMTE0MHB4O1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICB9XG59XG5cbi5zZWN0aW9uLWJhbm5lciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgLmxvZ28ge1xuICAgICAgICBtYXJnaW46IDIwMHB4IGF1dG8gMDtcbiAgICAgICAgd2lkdGg6IDE2MHB4O1xuICAgIH1cblxuICAgIC5idG4tY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLXRvcDogNzJweDtcblxuICAgICAgICAuYnRuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIG1hcmdpbjogMCAxOHB4O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19 */";
      /***/
    },

    /***/
    "K0rj":
    /*!*****************************************!*\
      !*** ./packages/docs/src/app/docs.scss ***!
      \*****************************************/

    /*! exports provided: default */

    /***/
    function K0rj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWNrYWdlcy9kb2NzL3NyYy9hcHAvZG9jcy5zY3NzIn0= */";
      /***/
    },

    /***/
    "LyUW":
    /*!************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-checkbox.js ***!
      \************************************************************/

    /*! exports provided: MC_CHECKBOX_CLICK_ACTION, MC_CHECKBOX_CONTROL_VALUE_ACCESSOR, MC_CHECKBOX_REQUIRED_VALIDATOR, McCheckbox, McCheckboxBase, McCheckboxChange, McCheckboxMixinBase, McCheckboxModule, McCheckboxRequiredValidator, TransitionCheckState */

    /***/
    function LyUW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_CHECKBOX_CLICK_ACTION", function () {
        return MC_CHECKBOX_CLICK_ACTION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_CHECKBOX_CONTROL_VALUE_ACCESSOR", function () {
        return MC_CHECKBOX_CONTROL_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_CHECKBOX_REQUIRED_VALIDATOR", function () {
        return MC_CHECKBOX_REQUIRED_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCheckbox", function () {
        return McCheckbox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCheckboxBase", function () {
        return McCheckboxBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCheckboxChange", function () {
        return McCheckboxChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCheckboxMixinBase", function () {
        return McCheckboxMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCheckboxModule", function () {
        return McCheckboxModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McCheckboxRequiredValidator", function () {
        return McCheckboxRequiredValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TransitionCheckState", function () {
        return TransitionCheckState;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /**
       * @fileoverview added by tsickle
       * Generated from: checkbox-config.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that can be used to specify the checkbox click behavior.
       * @type {?}
       */


      var MC_CHECKBOX_CLICK_ACTION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-checkbox-click-action');
      /**
       * @fileoverview added by tsickle
       * Generated from: checkbox.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Increasing integer for generating unique ids for checkbox components.

      /** @type {?} */

      var nextUniqueId = 0;
      /**
       * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.
       * This allows it to support [(ngModel)].
       * \@docs-private
       * @type {?}
       */

      var MC_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McCheckbox;
        }),
        multi: true
      };
      /** @enum {number} */

      var TransitionCheckState = {
        /** The initial state of the component before any user interaction. */
        Init: 0,

        /** The state representing the component when it's becoming checked. */
        Checked: 1,

        /** The state representing the component when it's becoming unchecked. */
        Unchecked: 2,

        /** The state representing the component when it's becoming indeterminate. */
        Indeterminate: 3
      };
      TransitionCheckState[TransitionCheckState.Init] = 'Init';
      TransitionCheckState[TransitionCheckState.Checked] = 'Checked';
      TransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';
      TransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';
      /**
       * Change event object emitted by McCheckbox.
       */

      var McCheckboxChange = function McCheckboxChange() {
        _classCallCheck(this, McCheckboxChange);
      };

      if (false) {} // Boilerplate for applying mixins to McCheckbox.

      /**
       * \@docs-private
       */


      var McCheckboxBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McCheckboxBase(_elementRef) {
        _classCallCheck(this, McCheckboxBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McCheckboxMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McCheckboxBase)));
      /**
       * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,
       * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or
       * disabled. Note that all additional accessibility attributes are taken care of by the component,
       * so there is no need to provide them yourself. However, if you want to omit a label and still
       * have the checkbox be accessible, you may supply an [aria-label] input.
       */

      var McCheckbox = /*#__PURE__*/function (_McCheckboxMixinBase) {
        _inherits(McCheckbox, _McCheckboxMixinBase);

        var _super26 = _createSuper(McCheckbox);

        /**
         * @param {?} elementRef
         * @param {?} _changeDetectorRef
         * @param {?} _focusMonitor
         * @param {?} _clickAction
         */
        function McCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _clickAction) {
          var _this87;

          _classCallCheck(this, McCheckbox);

          _this87 = _super26.call(this, elementRef);
          _this87._changeDetectorRef = _changeDetectorRef;
          _this87._focusMonitor = _focusMonitor;
          _this87._clickAction = _clickAction;
          /**
           * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
           * take precedence so this may be omitted.
           */

          _this87.ariaLabel = '';
          /**
           * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
           */

          _this87.ariaLabelledby = null;
          /**
           * Whether the label should appear after or before the checkbox. Defaults to 'after'
           */

          _this87.labelPosition = 'after';
          /**
           * Name value will be applied to the input element if present
           */

          _this87.name = null;
          /**
           * Event emitted when the checkbox's `checked` value changes.
           */

          _this87.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * Event emitted when the checkbox's `indeterminate` value changes.
           */

          _this87.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          _this87._checked = false;
          _this87._disabled = false;
          _this87._indeterminate = false;
          _this87.uniqueId = "mc-checkbox-".concat(++nextUniqueId);
          _this87.currentAnimationClass = '';
          _this87.currentCheckState = TransitionCheckState.Init;
          /**
           * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
           * \@docs-private
           */
          // tslint:disable-next-line:no-empty

          _this87.onTouched =
          /**
          * @return {?}
          */
          function () {}; // tslint:disable-next-line:no-empty


          _this87.controlValueAccessorChangeFn =
          /**
          * @return {?}
          */
          function () {};

          _this87.id = _this87.uniqueId;
          return _this87;
        }
        /**
         * Returns the unique id for the visual hidden input.
         * @return {?}
         */


        _createClass(McCheckbox, [{
          key: "ngAfterViewInit",

          /**
           * @return {?}
           */
          value: function ngAfterViewInit() {
            var _this88 = this;

            this._focusMonitor.monitor(this.inputElement.nativeElement).subscribe(
            /**
            * @param {?} focusOrigin
            * @return {?}
            */
            function (focusOrigin) {
              return _this88.onInputFocusChange(focusOrigin);
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);
          }
          /**
           * Method being called whenever the label text changes.
           * @return {?}
           */

        }, {
          key: "onLabelTextChange",
          value: function onLabelTextChange() {
            // This method is getting called whenever the label of the checkbox changes.
            // Since the checkbox uses the OnPush strategy we need to notify it about the change
            // that has been recognized by the cdkObserveContent directive.
            this._changeDetectorRef.markForCheck();
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.checked = !!value;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.controlValueAccessorChangeFn = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getAriaChecked",
          value: function getAriaChecked() {
            return this.checked ? 'true' : this.indeterminate ? 'mixed' : 'false';
          }
          /**
           * Toggles the `checked` state of the checkbox.
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.checked = !this.checked;
          }
          /**
           * Event handler for checkbox input element.
           * Toggles checked state if element is not disabled.
           * Do not toggle on (change) event since IE doesn't fire change event when
           *   indeterminate checkbox is clicked.
           * @param {?} event Input click event
           * @return {?}
           */

        }, {
          key: "onInputClick",
          value: function onInputClick(event) {
            var _this89 = this;

            // We have to stop propagation for click events on the visual hidden input element.
            // By default, when a user clicks on a label element, a generated click event will be
            // dispatched on the associated input element. Since we are using a label element as our
            // root container, the click event on the `checkbox` will be executed twice.
            // The real click event will bubble up, and the generated click event also tries to bubble up.
            // This will lead to multiple click events.
            // Preventing bubbling for the second event will solve that issue.
            event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click

            if (!this.disabled && this._clickAction !== 'noop') {
              // When user manually click on the checkbox, `indeterminate` is set to false.
              if (this.indeterminate && this._clickAction !== 'check') {
                Promise.resolve().then(
                /**
                * @return {?}
                */
                function () {
                  _this89._indeterminate = false;

                  _this89.indeterminateChange.emit(_this89._indeterminate);
                });
              }

              this.toggle();
              this.transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked); // Emit our custom change event if the native input emitted one.
              // It is important to only emit it, if the native input triggered one, because
              // we don't want to trigger a change event, when the `checked` variable changes for example.

              this.emitChangeEvent();
            } else if (!this.disabled && this._clickAction === 'noop') {
              // Reset native input when clicked with noop. The native checkbox becomes checked after
              // click, reset it to be align with `checked` value of `mc-checkbox`.
              this.inputElement.nativeElement.checked = this.checked;
              this.inputElement.nativeElement.indeterminate = this.indeterminate;
            }
          }
          /**
           * Focuses the checkbox.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onInteractionEvent",
          value: function onInteractionEvent(event) {
            // We always have to stop propagation on the change event.
            // Otherwise the change event, from the input element, will bubble up and
            // emit its event object to the `change` output.
            event.stopPropagation();
          }
          /**
           * @private
           * @param {?} newState
           * @return {?}
           */

        }, {
          key: "transitionCheckState",
          value: function transitionCheckState(newState) {
            /** @type {?} */
            var oldState = this.currentCheckState;
            /** @type {?} */

            var element = this._elementRef.nativeElement;

            if (oldState === newState) {
              return;
            }

            if (this.currentAnimationClass.length > 0) {
              element.classList.remove(this.currentAnimationClass);
            }

            this.currentCheckState = newState;

            if (this.currentAnimationClass.length > 0) {
              element.classList.add(this.currentAnimationClass);
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent() {
            /** @type {?} */
            var event = new McCheckboxChange();
            event.source = this;
            event.checked = this.checked;
            this.controlValueAccessorChangeFn(this.checked);
            this.change.emit(event);
          }
          /**
           * Function is called whenever the focus changes for the input element.
           * @private
           * @param {?} focusOrigin
           * @return {?}
           */

        }, {
          key: "onInputFocusChange",
          value: function onInputFocusChange(focusOrigin) {
            if (focusOrigin) {
              this.onTouched();
            }
          }
        }, {
          key: "inputId",
          get: function get() {
            return "".concat(this.id || this.uniqueId, "-input");
          }
          /**
           * Whether the checkbox is required.
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
          }
          /**
           * Whether the checkbox is checked.
           * @return {?}
           */

        }, {
          key: "checked",
          get: function get() {
            return this._checked;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.checked) {
              this._checked = value;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * Whether the checkbox is disabled. This fully overrides the implementation provided by
           * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.disabled) {
              this._disabled = value;

              this._changeDetectorRef.markForCheck();
            }
          }
          /**
           * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
           * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
           * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately
           * set to false.
           * @return {?}
           */

        }, {
          key: "indeterminate",
          get: function get() {
            return this._indeterminate;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var changed = value !== this._indeterminate;
            this._indeterminate = value;

            if (changed) {
              if (this._indeterminate) {
                this.transitionCheckState(TransitionCheckState.Indeterminate);
              } else {
                this.transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
              }

              this.indeterminateChange.emit(this._indeterminate);
            }
          }
        }]);

        return McCheckbox;
      }(McCheckboxMixinBase);

      McCheckbox.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-checkbox',
          exportAs: 'mcCheckbox',
          template: "<label [attr.for]=\"inputId\" class=\"mc-checkbox-layout\" #label>\n    <div class=\"mc-checkbox-inner-container\"\n         [class.mc-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n        <input #input\n               type=\"checkbox\"\n               class=\"mc-checkbox-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (change)=\"onInteractionEvent($event)\"\n               (click)=\"onInputClick($event)\">\n        <div class=\"mc-checkbox-frame\">\n            <i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n            <i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n        </div>\n    </div>\n\n    <span class=\"mc-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"onLabelTextChange()\">\n    <ng-content></ng-content>\n  </span>\n</label>\n",
          host: {
            "class": 'mc-checkbox',
            '[id]': 'id',
            '[attr.id]': 'id',
            '[class.mc-indeterminate]': 'indeterminate',
            '[class.mc-checked]': 'checked',
            '[class.mc-disabled]': 'disabled',
            '[class.mc-checkbox-label-before]': 'labelPosition == "before"'
          },
          providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],
          inputs: ['color', 'tabIndex'],
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          styles: [".mc-checkbox-frame{border-radius:3px;bottom:0;box-sizing:border-box;left:0;pointer-events:none;position:absolute;right:0;top:0}.mc-checkbox-checkmark,.mc-checkbox-mixedmark{bottom:0;display:none;left:-1px;position:absolute;right:0;top:-1px}.mc-checkbox-frame{background-color:transparent;border-style:solid;border-width:1px;box-shadow:inset 0 0 1px 0 rgba(0,0,0,.2)}.mc-checkbox{-webkit-tap-highlight-color:transparent;cursor:pointer;display:inline-block}.mc-checkbox.mc-checked .mc-checkbox-checkmark{display:block}.mc-checkbox.mc-checked .mc-checkbox-mixedmark,.mc-checkbox.mc-indeterminate .mc-checkbox-checkmark{display:none}.mc-checkbox.mc-indeterminate .mc-checkbox-mixedmark{display:block}.mc-checkbox.mc-disabled{cursor:default}.mc-checkbox.mc-disabled .mc-checkbox-frame{box-shadow:none}.mc-checkbox-layout{align-items:baseline;cursor:inherit;display:inline-flex;vertical-align:middle;white-space:nowrap;width:100%}.mc-checkbox-inner-container{-ms-grid-row-align:center;align-self:center;display:inline-block;flex-shrink:0;height:16px;line-height:0;margin-right:8px;order:0;position:relative;white-space:nowrap;width:16px}[dir=rtl] .mc-checkbox-inner-container{margin-left:8px;margin-right:auto}.mc-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mc-checkbox-label-before .mc-checkbox-inner-container{margin-left:8px;margin-right:auto;order:1}[dir=rtl] .mc-checkbox-label-before .mc-checkbox-inner-container{margin-left:auto;margin-right:8px}"]
        }]
      }];
      /** @nocollapse */

      McCheckbox.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_CHECKBOX_CLICK_ACTION]
          }]
        }];
      };

      McCheckbox.propDecorators = {
        ariaLabel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['aria-label']
        }],
        ariaLabelledby: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['aria-labelledby']
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        labelPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        indeterminateChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        inputElement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
          args: ['input', {
            "static": false
          }]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        checked: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        indeterminate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: checkbox-required-validator.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var MC_CHECKBOX_REQUIRED_VALIDATOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALIDATORS"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McCheckboxRequiredValidator;
        }),
        multi: true
      };
      /**
       * Validator for Mosaic checkbox's required attribute in template-driven checkbox.
       * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not
       * work with `mc-checkbox`.
       */

      var McCheckboxRequiredValidator = /*#__PURE__*/function (_angular_forms__WEBPA) {
        _inherits(McCheckboxRequiredValidator, _angular_forms__WEBPA);

        var _super27 = _createSuper(McCheckboxRequiredValidator);

        function McCheckboxRequiredValidator() {
          _classCallCheck(this, McCheckboxRequiredValidator);

          return _super27.apply(this, arguments);
        }

        return McCheckboxRequiredValidator;
      }(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["CheckboxRequiredValidator"]);

      McCheckboxRequiredValidator.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: "mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]",
          providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],
          host: {
            '[attr.required]': 'required ? "" : null'
          }
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: checkbox-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McCheckboxModule = function McCheckboxModule() {
        _classCallCheck(this, McCheckboxModule);
      };

      McCheckboxModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"]],
          exports: [McCheckbox, McCheckboxRequiredValidator],
          declarations: [McCheckbox, McCheckboxRequiredValidator]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-checkbox.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-checkbox.js.map

      /***/
    },

    /***/
    "NlUg":
    /*!*****************************************************************************************!*\
      !*** ./dist/mosaic-moment-adapter/fesm2015/ptsecurity-mosaic-moment-adapter-adapter.js ***!
      \*****************************************************************************************/

    /*! exports provided: MC_MOMENT_DATE_ADAPTER_OPTIONS, MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MC_MOMENT_DATE_FORMATS, McMomentDateModule, MomentDateAdapter, MomentDateModule */

    /***/
    function NlUg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_MOMENT_DATE_ADAPTER_OPTIONS", function () {
        return MC_MOMENT_DATE_ADAPTER_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY", function () {
        return MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_MOMENT_DATE_FORMATS", function () {
        return MC_MOMENT_DATE_FORMATS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McMomentDateModule", function () {
        return McMomentDateModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MomentDateAdapter", function () {
        return MomentDateAdapter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MomentDateModule", function () {
        return MomentDateModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ptsecurity/cdk/datetime */
      "5vLs");
      /* harmony import */


      var messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! messageformat */
      "qkWt");
      /* harmony import */


      var messageformat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(messageformat__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! moment */
      "wd/R");
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
      /**
       * @fileoverview added by tsickle
       * Generated from: locales/en-US.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var enUS = {
        variables: {
          SECONDS: 's',
          MILLISECONDS: '.SSS',
          MICROSECONDS: '.SSSSSS',
          MINUTES: 'm',
          TIME: 'HH:mm',
          DAY: 'D',
          MONTH: 'MMM',
          YEAR: 'YYYY',
          DATE: "MMMM\xA0D",
          SHORT_DATE: "MMM\xA0D",
          DASH: "\u2013",
          LONG_DASH: "\u202F\u2013\u2009",
          NBSP: "\xA0"
        },
        monthNames: {
          "long": ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
          "short": {
            standalone: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            formatted: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
          },
          narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
        },
        dayOfWeekNames: {
          "long": ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
          "short": ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
          narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
        },
        relativeTemplates: {
          "short": {
            SECONDS_AGO: 'Just now',
            MINUTES_AGO: '{MINUTES_PASSED}{NBSP}min ago',
            TODAY: '{TIME}',
            YESTERDAY: 'Yesterday, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{SHORT_DATE}, {TIME}} other{{SHORT_DATE}, {YEAR}}}'
          },
          "long": {
            SECONDS_AGO: 'Just now',
            MINUTES_AGO: '{MINUTES_PASSED, plural, =1{#{NBSP}minute} other{#{NBSP}minutes}} ago',
            TODAY: '{TIME}',
            YESTERDAY: 'Yesterday, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{DATE}, {TIME}} other{{DATE}, {YEAR}}}'
          }
        },
        absoluteTemplates: {
          "short": {
            DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE}, {YEAR}}}',
            DATETIME: "{\n                CURRENT_YEAR,\n                select,\n                    yes{{SHORT_DATE}, {TIME}}\n                    other{{SHORT_DATE}, {YEAR}, {TIME}}\n            }{\n                SHOW_MILLISECONDS,\n                select,\n                    yes{{MILLISECONDS}}\n                    other{}\n            }{\n                SHOW_MICROSECONDS,\n                    select,\n                        yes{{MICROSECONDS}}\n                        other{}\n            }"
          },
          "long": {
            DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE}, {YEAR}}}',
            DATETIME: "{\n                CURRENT_YEAR,\n                select,\n                    yes{{DATE}, {TIME}}\n                    other{{DATE}, {YEAR}, {TIME}}\n            }{\n                SHOW_MILLISECONDS,\n                select,\n                    yes{{MILLISECONDS}}\n                    other{}\n            }{\n                SHOW_MICROSECONDS,\n                select,\n                    yes{{MICROSECONDS}}\n                    other{}\n            }"
          }
        },
        rangeTemplates: {
          closedRange: {
            "short": {
              START_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE}, {YEAR}}}',
              END_DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{DAY}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{SHORT_DATE}}\n                                other{{SHORT_DATE}, {YEAR}}\n                        }}\n                }",
              DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{START_DATE}{DASH}{END_DATE}}\n                        other{{START_DATE}{LONG_DASH}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{TIME}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{SHORT_DATE}, {TIME}}\n                                other{{SHORT_DATE}, {YEAR}, {TIME}}\n                        }}\n                }",
              END_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{TIME}, {SHORT_DATE}}\n                                other{{TIME}, {SHORT_DATE}, {YEAR}}\n                        }}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{SHORT_DATE}, {TIME}}\n                                other{{SHORT_DATE}, {YEAR}, {TIME}}\n                        }}\n                }",
              DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{START_DATETIME}{DASH}{END_DATETIME}}\n                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}\n                }"
            },
            middle: {
              START_DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{DAY}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}}\n                                other{{DATE}, {YEAR}}\n                        }}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE}, {YEAR}}}',
              DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{START_DATE}{DASH}{END_DATE}}\n                        other{{START_DATE}{LONG_DASH}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{TIME}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE}, {YEAR}, {TIME}}\n                        }}\n                }",
              END_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{TIME}, {DATE}}\n                                other{{TIME}, {DATE}, {YEAR}}\n                        }}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE}, {YEAR}, {TIME}}\n                        }}\n                }",
              DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{START_DATETIME}{DASH}{END_DATETIME}}\n                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}\n                }"
            },
            "long": {
              START_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE}, {YEAR}}}',
              END_DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{DAY}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}}\n                                other{{DATE}, {YEAR}}\n                        }}\n                }",
              DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{START_DATE}{DASH}{END_DATE}}\n                        other{{START_DATE}{LONG_DASH}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, from{NBSP}{TIME}}\n                                other{{DATE}, {YEAR}, from{NBSP}{TIME}}\n                        }}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE}, {YEAR}, {TIME}}\n                        }}\n                }",
              END_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{to{NBSP}{TIME}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE}, {YEAR}, {TIME}}\n                        }}\n                }",
              DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{START_DATETIME} {END_DATETIME}}\n                        other{From {START_DATETIME} to{NBSP}{END_DATETIME}}\n                }"
            }
          },
          openedRange: {
            "short": {
              START_DATE: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{SHORT_DATE}}\n                        other{{SHORT_DATE} {YEAR}}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
              DATE: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{From{NBSP}{START_DATE}}\n                        other{Until{NBSP}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{SHORT_DATE}, {TIME}}\n                        other{{SHORT_DATE} {YEAR}, {TIME}}\n                }",
              END_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{SHORT_DATE}, {TIME}}\n                        other{{SHORT_DATE} {YEAR}, {TIME}}\n                }",
              DATETIME: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{From{NBSP}{START_DATETIME}}\n                        other{Until{NBSP}{END_DATETIME}}\n                }"
            },
            "long": {
              START_DATE: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{DATE}}\n                        other{{DATE} {YEAR}}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
              DATE: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{From{NBSP}{START_DATE}}\n                        other{Until{NBSP}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{DATE}, {TIME}}\n                        other{{DATE} {YEAR}, {TIME}}\n                }",
              END_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{DATE}, {TIME}}\n                        other{{DATE} {YEAR}, {TIME}}\n                }",
              DATETIME: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{From{NBSP}{START_DATETIME}}\n                        other{Until{NBSP}{END_DATETIME}}\n                }"
            }
          }
        }
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: locales/ru-RU.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var ruRU = {
        variables: {
          SECONDS: 's',
          MILLISECONDS: ',SSS',
          MICROSECONDS: ',SSSSSS',
          MINUTES: 'm',
          TIME: 'HH:mm',
          DAY: 'D',
          MONTH: 'MMM',
          YEAR: 'YYYY',
          DATE: "D\xA0MMMM",
          SHORT_DATE: "D\xA0MMM",
          DASH: "\u2013",
          LONG_DASH: "\u202F\u2014\u2009",
          NBSP: "\xA0"
        },
        monthNames: {
          "long": ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
          "short": {
            standalone: ['янв', 'фев', 'март', 'апр', 'май', 'июнь', 'июль', 'авг', 'сен', 'окт', 'ноя', 'дек'],
            formatted: ['янв', 'фев', 'мар', 'апр', 'мая', 'июня', 'июля', 'авг', 'сен', 'окт', 'ноя', 'дек']
          },
          narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д']
        },
        dayOfWeekNames: {
          "long": ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
          "short": ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
          narrow: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С']
        },
        relativeTemplates: {
          "short": {
            SECONDS_AGO: 'Только что',
            MINUTES_AGO: '{MINUTES_PASSED}{NBSP}мин назад',
            TODAY: '{TIME}',
            YESTERDAY: 'Вчера, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{SHORT_DATE}, {TIME}} other{{SHORT_DATE}, {YEAR}}}'
          },
          "long": {
            SECONDS_AGO: 'Только что',
            MINUTES_AGO: '{MINUTES_PASSED, plural, =1{#{NBSP}минуту} =2{#{NBSP}минуты} other{#{NBSP}минут}} назад',
            TODAY: '{TIME}',
            YESTERDAY: 'Вчера, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{DATE}, {TIME}} other{{DATE}, {YEAR}}}'
          }
        },
        absoluteTemplates: {
          "short": {
            DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
            DATETIME: "{\n                CURRENT_YEAR,\n                select,\n                    yes{{SHORT_DATE}, {TIME}}\n                    other{{SHORT_DATE} {YEAR}, {TIME}}\n            }{\n                SHOW_MILLISECONDS,\n                select,\n                    yes{{MILLISECONDS}}\n                    other{}\n            }{\n                SHOW_MICROSECONDS,\n                select,\n                    yes{{MICROSECONDS}}\n                    other{}\n            }"
          },
          "long": {
            DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
            DATETIME: "{\n                CURRENT_YEAR,\n                select,\n                    yes{{DATE}, {TIME}}\n                    other{{DATE} {YEAR}, {TIME}}\n            }{\n                SHOW_MILLISECONDS,\n                select,\n                    yes{{MILLISECONDS}}\n                    other{}\n            }{\n                SHOW_MICROSECONDS,\n                select,\n                    yes{{MICROSECONDS}}\n                    other{}\n            }"
          }
        },
        rangeTemplates: {
          closedRange: {
            "short": {
              START_DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{DAY}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{SHORT_DATE}}\n                                other{{SHORT_DATE} {YEAR}}\n                        }}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
              DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{START_DATE}{DASH}{END_DATE}}\n                        other{{START_DATE}{LONG_DASH}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{TIME}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{SHORT_DATE}, {TIME}}\n                                other{{SHORT_DATE} {YEAR}, {TIME}}\n                        }}\n                }",
              END_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{TIME}, {SHORT_DATE}}\n                                other{{TIME}, {SHORT_DATE} {YEAR}}\n                        }}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{SHORT_DATE}, {TIME}}\n                                other{{SHORT_DATE} {YEAR}, {TIME}}\n                        }}\n                }",
              DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{START_DATETIME}{DASH}{END_DATETIME}}\n                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}\n                }"
            },
            middle: {
              START_DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{DAY}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}}\n                                other{{DATE} {YEAR}}\n                        }}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
              DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{START_DATE}{DASH}{END_DATE}}\n                        other{{START_DATE}{LONG_DASH}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{TIME}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE} {YEAR}, {TIME}}\n                        }}\n                }",
              END_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{TIME}, {DATE}}\n                                other{{TIME}, {DATE} {YEAR}}\n                        }}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE} {YEAR}, {TIME}}\n                        }}\n                }",
              DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{START_DATETIME}{DASH}{END_DATETIME}}\n                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}\n                }"
            },
            "long": {
              START_DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{DAY}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}}\n                                other{{DATE} {YEAR}}\n                        }}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
              DATE: "{\n                    SAME_MONTH,\n                    select,\n                        yes{{START_DATE}{DASH}{END_DATE}}\n                        other{{START_DATE}{LONG_DASH}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, \u0441{NBSP}{TIME}}\n                                other{{DATE} {YEAR}, \u0441{NBSP}{TIME}}\n                        }}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE} {YEAR}, {TIME}}\n                        }}\n                }",
              END_DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{\u043F\u043E{NBSP}{TIME}}\n                        other{{\n                            CURRENT_YEAR,\n                            select,\n                                yes{{DATE}, {TIME}}\n                                other{{DATE} {YEAR}, {TIME}}\n                        }}\n                }",
              DATETIME: "{\n                    SAME_DAY,\n                    select,\n                        yes{{START_DATETIME} {END_DATETIME}}\n                        other{\u0421{NBSP}{START_DATETIME} \u043F\u043E{NBSP}{END_DATETIME}}\n                }"
            }
          },
          openedRange: {
            "short": {
              START_DATE: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{SHORT_DATE}}\n                        other{{SHORT_DATE} {YEAR}}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
              DATE: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{\u0421{NBSP}{START_DATE}}\n                        other{\u041F\u043E{NBSP}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{SHORT_DATE}, {TIME}}\n                        other{{SHORT_DATE} {YEAR}, {TIME}}\n                }",
              END_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{SHORT_DATE}, {TIME}}\n                        other{{SHORT_DATE} {YEAR}, {TIME}}\n                }",
              DATETIME: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{\u0421{NBSP}{START_DATETIME}}\n                        other{\u041F\u043E{NBSP}{END_DATETIME}}\n                }"
            },
            "long": {
              START_DATE: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{DATE}}\n                        other{{DATE} {YEAR}}\n                }",
              END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
              DATE: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{\u0421{NBSP}{START_DATE}}\n                        other{\u041F\u043E{NBSP}{END_DATE}}\n                }",
              START_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{DATE}, {TIME}}\n                        other{{DATE} {YEAR}, {TIME}}\n                }",
              END_DATETIME: "{\n                    CURRENT_YEAR,\n                    select,\n                        yes{{DATE}, {TIME}}\n                        other{{DATE} {YEAR}, {TIME}}\n                }",
              DATETIME: "{\n                    RANGE_TYPE,\n                    select,\n                        onlyStart{\u0421{NBSP}{START_DATETIME}}\n                        other{\u041F\u043E{NBSP}{END_DATETIME}}\n                }"
            }
          }
        }
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: moment-date-adapter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var moment = moment__WEBPACK_IMPORTED_MODULE_3___default.a || moment__WEBPACK_IMPORTED_MODULE_3__;
      /**
       * Configurable options for {\@see MomentDateAdapter}.
       * @record
       */

      function IMcMomentDateAdapterOptions() {}

      if (false) {}
      /**
       * InjectionToken for moment date adapter to configure options.
       * @type {?}
       */


      var MC_MOMENT_DATE_ADAPTER_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MC_MOMENT_DATE_ADAPTER_OPTIONS', {
        providedIn: 'root',
        factory: MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */
      // tslint:disable:naming-convention

      function MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {
        return {
          useUtc: false,
          findDateFormat: false
        };
      }
      /**
       * Creates an array and fills it with values.
       * @template T
       * @param {?} length
       * @param {?} valueFunction
       * @return {?}
       */


      function range(length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);

        for (var i = 0; i < length; i++) {
          valuesArray[i] = valueFunction(i);
        }

        return valuesArray;
      }

      var MomentDateAdapter = /*#__PURE__*/function (_ptsecurity_cdk_datet) {
        _inherits(MomentDateAdapter, _ptsecurity_cdk_datet);

        var _super28 = _createSuper(MomentDateAdapter);

        /**
         * @param {?} dateLocale
         * @param {?=} options
         */
        function MomentDateAdapter(dateLocale, options) {
          var _this90;

          _classCallCheck(this, MomentDateAdapter);

          _this90 = _super28.call(this);
          _this90.options = options;
          _this90.invalidDateErrorText = 'Invalid date';

          _this90.setLocale(dateLocale || moment.locale());

          _this90.configureTranslator(_this90.locale);

          return _this90;
        }
        /**
         * @private
         * @return {?}
         */


        _createClass(MomentDateAdapter, [{
          key: "setLocale",

          /**
           * @param {?} locale
           * @return {?}
           */
          value: function setLocale(locale) {
            var _this91 = this;

            _get(_getPrototypeOf(MomentDateAdapter.prototype), "setLocale", this).call(this, locale);
            /** @type {?} */


            var momentLocaleData = moment.localeData(locale); // This is our customs translations

            /** @type {?} */

            var i18nLocals = ['en', 'ru'];

            if (i18nLocals.indexOf(locale) !== -1) {
              this.formatterConfig = locale === 'en' ? enUS : ruRU;
              momentLocaleData = moment.updateLocale(locale, {
                monthsShort: {
                  format: this.formatterConfig.monthNames["short"].formatted,
                  standalone: this.formatterConfig.monthNames["short"].standalone
                },
                weekdaysShort: this.formatterConfig.dayOfWeekNames["short"],
                weekdays: this.formatterConfig.dayOfWeekNames["long"]
              });
            }

            this.localeData = {
              firstDayOfWeek: momentLocaleData.firstDayOfWeek(),
              longMonths: momentLocaleData.months(),
              shortMonths: momentLocaleData.monthsShort(),
              dates: range(31,
              /**
              * @param {?} i
              * @return {?}
              */
              function (i) {
                return _this91.createDate(2017, 0, i + 1).format('D');
              }),
              longDaysOfWeek: momentLocaleData.weekdays(),
              shortDaysOfWeek: momentLocaleData.weekdaysShort(),
              narrowDaysOfWeek: momentLocaleData.weekdaysMin()
            };
          }
          /**
           * @return {?}
           */

        }, {
          key: "getLocaleData",
          value: function getLocaleData() {
            return this.localeData;
          }
          /**
           * @param {?} localeData
           * @return {?}
           */

        }, {
          key: "setLocaleData",
          value: function setLocaleData(localeData) {
            this.localeData = localeData;
          }
          /**
           * @param {?} localeData
           * @return {?}
           */

        }, {
          key: "updateLocaleData",
          value: function updateLocaleData(localeData) {
            this.localeData = Object.assign(Object.assign({}, this.localeData), localeData);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getYear",
          value: function getYear(date) {
            return this.clone(date).year();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getMonth",
          value: function getMonth(date) {
            return this.clone(date).month();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getDate",
          value: function getDate(date) {
            return this.clone(date).date();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getHours",
          value: function getHours(date) {
            return this.clone(date).hours();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getMinutes",
          value: function getMinutes(date) {
            return this.clone(date).minutes();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getSeconds",
          value: function getSeconds(date) {
            return this.clone(date).seconds();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getMilliseconds",
          value: function getMilliseconds(date) {
            return this.clone(date).milliseconds();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getTime",
          value: function getTime(date) {
            return date.valueOf();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getDayOfWeek",
          value: function getDayOfWeek(date) {
            return this.clone(date).day();
          }
          /**
           * @param {?} style
           * @return {?}
           */

        }, {
          key: "getMonthNames",
          value: function getMonthNames(style) {
            // Moment.js doesn't support narrow month names
            return style === 'long' ? this.localeData.longMonths : this.localeData.shortMonths;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getDateNames",
          value: function getDateNames() {
            return this.localeData.dates;
          }
          /**
           * @param {?} style
           * @return {?}
           */

        }, {
          key: "getDayOfWeekNames",
          value: function getDayOfWeekNames(style) {
            if (style === 'long') {
              return this.localeData.longDaysOfWeek;
            }

            if (style === 'short') {
              return this.localeData.shortDaysOfWeek;
            }

            return this.localeData.narrowDaysOfWeek;
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getYearName",
          value: function getYearName(date) {
            return this.clone(date).format('YYYY');
          }
          /**
           * @return {?}
           */

        }, {
          key: "getFirstDayOfWeek",
          value: function getFirstDayOfWeek() {
            return this.localeData.firstDayOfWeek;
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "getNumDaysInMonth",
          value: function getNumDaysInMonth(date) {
            return this.clone(date).daysInMonth();
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "clone",
          value: function clone(date) {
            return date.clone().locale(this.locale);
          }
          /**
           * @param {?} year
           * @param {?} month
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "createDate",
          value: function createDate(year, month, date) {
            // Moment.js will create an invalid date if any of the components are out of bounds, but we
            // explicitly check each case so we can throw more descriptive errors.
            if (month < 0 || month > 11) {
              throw Error("Invalid month index \"".concat(month, "\". Month index has to be between 0 and 11."));
            }

            if (date < 1) {
              throw Error("Invalid date \"".concat(date, "\". Date has to be greater than 0."));
            }
            /** @type {?} */


            var result = this.createMoment({
              year: year,
              month: month,
              date: date
            }).locale(this.locale); // If the result isn't valid, the date must have been out of bounds for this month.

            if (!result.isValid()) {
              throw Error("Invalid date \"".concat(date, "\" for month with index \"").concat(month, "\"."));
            }

            return result;
          }
          /**
           * @param {?} year
           * @param {?} month
           * @param {?} date
           * @param {?} hours
           * @param {?} minutes
           * @param {?} seconds
           * @param {?} milliseconds
           * @return {?}
           */

        }, {
          key: "createDateTime",
          value: function createDateTime(year, month, date, hours, minutes, seconds, milliseconds) {
            /** @type {?} */
            var newDate = this.createDate(year, month, date);
            newDate.hours(hours);
            newDate.minutes(minutes);
            newDate.seconds(seconds);
            newDate.milliseconds(milliseconds);
            return newDate;
          }
          /**
           * @return {?}
           */

        }, {
          key: "today",
          value: function today() {
            return this.createMoment().locale(this.locale);
          }
          /**
           * @param {?} value
           * @param {?} parseFormat
           * @return {?}
           */

        }, {
          key: "parse",
          value: function parse(value, parseFormat) {
            if (value) {
              if (value && typeof value === 'string') {
                if (this.options && this.options.findDateFormat) {
                  return this.findFormat(value);
                }

                return parseFormat ? this.createMoment(value, parseFormat, this.locale) : this.createMoment(value).locale(this.locale);
              }

              return this.createMoment(value).locale(this.locale);
            }

            return null;
          }
          /**
           * @param {?} date
           * @param {?} displayFormat
           * @return {?}
           */

        }, {
          key: "format",
          value: function format(date, displayFormat) {
            // tslint:disable:no-parameter-reassignment
            date = this.clone(date);

            if (!this.isValid(date)) {
              throw Error('MomentDateAdapter: Cannot format invalid date.');
            }

            return date.format(displayFormat);
          }
          /**
           * @param {?} date
           * @param {?} years
           * @return {?}
           */

        }, {
          key: "addCalendarYears",
          value: function addCalendarYears(date, years) {
            return this.clone(date).add({
              years: years
            });
          }
          /**
           * @param {?} date
           * @param {?} months
           * @return {?}
           */

        }, {
          key: "addCalendarMonths",
          value: function addCalendarMonths(date, months) {
            return this.clone(date).add({
              months: months
            });
          }
          /**
           * @param {?} date
           * @param {?} days
           * @return {?}
           */

        }, {
          key: "addCalendarDays",
          value: function addCalendarDays(date, days) {
            return this.clone(date).add({
              days: days
            });
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "toIso8601",
          value: function toIso8601(date) {
            return this.clone(date).format();
          }
          /**
           * https://www.ietf.org/rfc/rfc3339.txt
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "deserialize",
          value: function deserialize(value) {
            /** @type {?} */
            var date;

            if (value instanceof Date) {
              date = this.createMoment(value).locale(this.locale);
            } else if (this.isDateInstance(value)) {
              // Note: assumes that cloning also sets the correct locale.
              return this.clone(value);
            }

            if (typeof value === 'string') {
              if (!value) {
                return null;
              }

              date = this.createMoment(value, moment.ISO_8601).locale(this.locale);
            }

            if (date && this.isValid(date)) {
              return this.createMoment(date).locale(this.locale);
            }

            return _get(_getPrototypeOf(MomentDateAdapter.prototype), "deserialize", this).call(this, value);
          }
          /**
           * @param {?} obj
           * @return {?}
           */

        }, {
          key: "isDateInstance",
          value: function isDateInstance(obj) {
            return moment.isMoment(obj);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "isValid",
          value: function isValid(date) {
            return this.clone(date).isValid();
          }
          /**
           * @return {?}
           */

        }, {
          key: "invalid",
          value: function invalid() {
            return moment.invalid();
          }
          /**
           * @param {?} date
           * @param {?} template
           * @return {?}
           */

        }, {
          key: "relativeDate",
          value: function relativeDate(date, template) {
            if (!this.isDateInstance(date)) {
              throw new Error(this.invalidDateErrorText);
            }
            /** @type {?} */


            var now = this.momentWithLocale;
            /** @type {?} */

            var totalSeconds = now.diff(date, 'seconds');
            /** @type {?} */

            var totalMinutes = now.diff(date, 'minutes');
            /** @type {?} */

            var isToday = now.isSame(date, 'day');
            /** @type {?} */

            var isYesterday = now.add(-1, 'days').isSame(date, 'day');
            /** @type {?} */

            var templateVariables = Object.assign(Object.assign({}, this.formatterConfig.variables), template.variables);
            /** @type {?} */

            var variables = this.compileVariables(date, templateVariables);
            /** @type {?} */

            var newTemplate;

            if (totalSeconds <= 59) {
              // seconds ago
              variables.SECONDS_PASSED = totalSeconds;
              newTemplate = template.SECONDS_AGO;
            } else if (totalMinutes <= 59) {
              // minutes ago
              variables.MINUTES_PASSED = totalMinutes;
              newTemplate = template.MINUTES_AGO;
            } else if (isToday) {
              // today
              newTemplate = template.TODAY;
            } else if (isYesterday) {
              // yesterday
              newTemplate = template.YESTERDAY;
            } else {
              // before yesterday
              newTemplate = template.BEFORE_YESTERDAY;
            }

            return this.messageformat.compile(newTemplate)(variables);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "relativeShortDate",
          value: function relativeShortDate(date) {
            return this.relativeDate(date, this.formatterConfig.relativeTemplates["short"]);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "relativeLongDate",
          value: function relativeLongDate(date) {
            return this.relativeDate(date, this.formatterConfig.relativeTemplates["long"]);
          }
          /**
           * @param {?} date
           * @param {?} params
           * @param {?=} datetime
           * @param {?=} milliseconds
           * @param {?=} microseconds
           * @return {?}
           */

        }, {
          key: "absoluteDate",
          value: function absoluteDate(date, params) {
            var datetime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var milliseconds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var microseconds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            if (!this.isDateInstance(date)) {
              throw new Error(this.invalidDateErrorText);
            }
            /** @type {?} */


            var variables = this.compileVariables(date, Object.assign(Object.assign({}, this.formatterConfig.variables), params.variables));
            variables.SHOW_MILLISECONDS = milliseconds ? 'yes' : 'no';
            variables.SHOW_MICROSECONDS = microseconds ? 'yes' : 'no';
            /** @type {?} */

            var template = datetime ? params.DATETIME : params.DATE;
            return this.messageformat.compile(template)(variables);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "absoluteShortDate",
          value: function absoluteShortDate(date) {
            return this.absoluteDate(date, this.formatterConfig.absoluteTemplates["short"]);
          }
          /**
           * @param {?} date
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "absoluteShortDateTime",
          value: function absoluteShortDateTime(date, options) {
            return this.absoluteDate(date, this.formatterConfig.absoluteTemplates["short"], true, options === null || options === void 0 ? void 0 : options.milliseconds, options === null || options === void 0 ? void 0 : options.microseconds);
          }
          /**
           * @param {?} date
           * @return {?}
           */

        }, {
          key: "absoluteLongDate",
          value: function absoluteLongDate(date) {
            return this.absoluteDate(date, this.formatterConfig.absoluteTemplates["long"]);
          }
          /**
           * @param {?} date
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "absoluteLongDateTime",
          value: function absoluteLongDateTime(date, options) {
            return this.absoluteDate(date, this.formatterConfig.absoluteTemplates["long"], true, options === null || options === void 0 ? void 0 : options.milliseconds, options === null || options === void 0 ? void 0 : options.microseconds);
          }
          /**
           * @param {?} startDate
           * @param {?} endDate
           * @param {?} template
           * @return {?}
           */

        }, {
          key: "openedRangeDate",
          value: function openedRangeDate(startDate, endDate, template) {
            if (!moment.isMoment(startDate) && !moment.isMoment(endDate)) {
              throw new Error(this.invalidDateErrorText);
            }
            /** @type {?} */


            var variables = Object.assign(Object.assign({}, this.formatterConfig.variables), template.variables);
            /** @type {?} */

            var params = {};

            if (startDate) {
              /** @type {?} */
              var startDateVariables = this.compileVariables(startDate, variables);
              params = Object.assign(Object.assign({}, variables), {
                START_DATE: this.messageformat.compile(template.START_DATE)(startDateVariables),
                RANGE_TYPE: 'onlyStart'
              });
            } else if (endDate) {
              /** @type {?} */
              var endDateVariables = this.compileVariables(endDate, variables);
              params = Object.assign(Object.assign({}, variables), {
                END_DATE: this.messageformat.compile(template.END_DATE)(endDateVariables),
                RANGE_TYPE: 'onlyEnd'
              });
            }

            return this.messageformat.compile(template.DATE)(params);
          }
          /**
           * @param {?} startDate
           * @param {?} endDate
           * @param {?} template
           * @return {?}
           */

        }, {
          key: "openedRangeDateTime",
          value: function openedRangeDateTime(startDate, endDate, template) {
            if (!moment.isMoment(startDate) && !moment.isMoment(endDate)) {
              throw new Error(this.invalidDateErrorText);
            }
            /** @type {?} */


            var variables = Object.assign(Object.assign({}, this.formatterConfig.variables), template.variables);
            /** @type {?} */

            var params = {};

            if (startDate) {
              /** @type {?} */
              var startDateVariables = this.compileVariables(startDate, variables);
              params = Object.assign(Object.assign({}, variables), {
                START_DATETIME: this.messageformat.compile(template.START_DATETIME)(startDateVariables),
                RANGE_TYPE: 'onlyStart'
              });
            } else if (endDate) {
              /** @type {?} */
              var endDateVariables = this.compileVariables(endDate, variables);
              params = Object.assign(Object.assign({}, variables), {
                END_DATETIME: this.messageformat.compile(template.END_DATETIME)(endDateVariables),
                RANGE_TYPE: 'onlyEnd'
              });
            }

            return this.messageformat.compile(template.DATETIME)(params);
          }
          /**
           * @param {?} startDate
           * @param {?} endDate
           * @param {?} template
           * @return {?}
           */

        }, {
          key: "rangeDate",
          value: function rangeDate(startDate, endDate, template) {
            if (!this.isDateInstance(startDate) || !this.isDateInstance(endDate)) {
              throw new Error(this.invalidDateErrorText);
            }
            /** @type {?} */


            var variables = Object.assign(Object.assign({}, this.formatterConfig.variables), template.variables);
            /** @type {?} */

            var sameMonth = this.isSame('month', startDate, endDate);
            /** @type {?} */

            var startDateVariables = this.compileVariables(startDate, variables);
            startDateVariables.SAME_MONTH = sameMonth;
            /** @type {?} */

            var endDateVariables = this.compileVariables(endDate, variables);
            endDateVariables.SAME_MONTH = sameMonth;
            /** @type {?} */

            var bothCurrentYear = startDateVariables.CURRENT_YEAR === 'yes' && endDateVariables.CURRENT_YEAR === 'yes';
            startDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
            endDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
            /** @type {?} */

            var params = Object.assign(Object.assign({}, variables), {
              START_DATE: this.messageformat.compile(template.START_DATE)(startDateVariables),
              END_DATE: this.messageformat.compile(template.END_DATE)(endDateVariables),
              SAME_MONTH: sameMonth
            });
            return this.messageformat.compile(template.DATE)(params);
          }
          /**
           * @param {?} startDate
           * @param {?} endDate
           * @param {?} template
           * @return {?}
           */

        }, {
          key: "rangeDateTime",
          value: function rangeDateTime(startDate, endDate, template) {
            if (!this.isDateInstance(startDate) || !this.isDateInstance(endDate)) {
              throw new Error(this.invalidDateErrorText);
            }
            /** @type {?} */


            var variables = Object.assign(Object.assign({}, this.formatterConfig.variables), template.variables);
            /** @type {?} */

            var sameMonth = this.isSame('month', startDate, endDate);
            /** @type {?} */

            var sameDay = this.isSame('day', startDate, endDate);
            /** @type {?} */

            var startDateVariables = this.compileVariables(startDate, variables);
            startDateVariables.SAME_MONTH = sameMonth;
            startDateVariables.SAME_DAY = sameDay;
            /** @type {?} */

            var endDateVariables = this.compileVariables(endDate, variables);
            endDateVariables.SAME_MONTH = sameMonth;
            endDateVariables.SAME_DAY = sameDay;
            /** @type {?} */

            var bothCurrentYear = startDateVariables.CURRENT_YEAR === 'yes' && endDateVariables.CURRENT_YEAR === 'yes';
            startDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
            endDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
            /** @type {?} */

            var params = Object.assign(Object.assign({}, variables), {
              START_DATETIME: this.messageformat.compile(template.START_DATETIME)(startDateVariables),
              END_DATETIME: this.messageformat.compile(template.END_DATETIME)(endDateVariables),
              SAME_MONTH: sameMonth,
              SAME_DAY: sameDay
            });
            return this.messageformat.compile(template.DATETIME)(params);
          }
          /**
           * @param {?} startDate
           * @param {?=} endDate
           * @return {?}
           */

        }, {
          key: "rangeShortDate",
          value: function rangeShortDate(startDate, endDate) {
            /** @type {?} */
            var rangeTemplates = this.formatterConfig.rangeTemplates;

            if (startDate && endDate) {
              return this.rangeDate(startDate, endDate, rangeTemplates.closedRange["short"]);
            }

            return this.openedRangeDate(startDate, endDate || null, rangeTemplates.openedRange["short"]);
          }
          /**
           * @param {?} startDate
           * @param {?=} endDate
           * @return {?}
           */

        }, {
          key: "rangeShortDateTime",
          value: function rangeShortDateTime(startDate, endDate) {
            /** @type {?} */
            var rangeTemplates = this.formatterConfig.rangeTemplates;

            if (startDate && endDate) {
              return this.rangeDateTime(startDate, endDate, rangeTemplates.closedRange["short"]);
            }

            return this.openedRangeDateTime(startDate, endDate || null, rangeTemplates.openedRange["short"]);
          }
          /**
           * @param {?} startDate
           * @param {?=} endDate
           * @return {?}
           */

        }, {
          key: "rangeLongDate",
          value: function rangeLongDate(startDate, endDate) {
            /** @type {?} */
            var rangeTemplates = this.formatterConfig.rangeTemplates;

            if (startDate && endDate) {
              return this.rangeDate(startDate, endDate, rangeTemplates.closedRange["long"]);
            }

            return this.openedRangeDate(startDate, endDate || null, rangeTemplates.openedRange["long"]);
          }
          /**
           * @param {?} startDate
           * @param {?=} endDate
           * @return {?}
           */

        }, {
          key: "rangeLongDateTime",
          value: function rangeLongDateTime(startDate, endDate) {
            /** @type {?} */
            var rangeTemplates = this.formatterConfig.rangeTemplates;

            if (startDate && endDate) {
              return this.rangeDateTime(startDate, endDate, rangeTemplates.closedRange["long"]);
            }

            return this.openedRangeDateTime(startDate, endDate || null, rangeTemplates.openedRange["long"]);
          }
          /**
           * @param {?} startDate
           * @param {?} endDate
           * @return {?}
           */

        }, {
          key: "rangeMiddleDateTime",
          value: function rangeMiddleDateTime(startDate, endDate) {
            return this.rangeDateTime(startDate, endDate, this.formatterConfig.rangeTemplates.closedRange.middle);
          }
          /**
           * Creates a Moment instance while respecting the current UTC settings.
           * @private
           * @param {...?} args
           * @return {?}
           */

        }, {
          key: "createMoment",
          value: function createMoment() {
            return this.options && this.options.useUtc ? moment.utc.apply(moment, arguments) : moment.apply(void 0, arguments);
          }
          /**
           * @private
           * @param {?} date
           * @param {?} variables
           * @return {?}
           */

        }, {
          key: "compileVariables",
          value: function compileVariables(date, variables) {
            /** @type {?} */
            var compiledVariables = {}; // tslint:disable-next-line:no-for-in

            for (var key in variables) {
              if (!variables.hasOwnProperty(key)) {
                continue;
              }
              /** @type {?} */


              var value = variables[key];
              compiledVariables[key] = date.format(value);
            }

            compiledVariables.CURRENT_YEAR = this.isCurrentYear(date);
            return compiledVariables;
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isCurrentYear",
          value: function isCurrentYear(value) {
            return this.momentWithLocale.isSame(value, 'year') ? 'yes' : 'no';
          }
          /**
           * @private
           * @param {?} unit
           * @param {?} startDate
           * @param {?} endDate
           * @return {?}
           */

        }, {
          key: "isSame",
          value: function isSame(unit, startDate, endDate) {
            return startDate.isSame(endDate, unit) ? 'yes' : 'no';
          }
          /**
           * @private
           * @param {?} locale
           * @return {?}
           */

        }, {
          key: "configureTranslator",
          value: function configureTranslator(locale) {
            this.messageformat = new messageformat__WEBPACK_IMPORTED_MODULE_2__(locale);
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isNumeric",
          value: function isNumeric(value) {
            return !isNaN(parseFloat(value)) && isFinite(value);
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "findFormat",
          value: function findFormat(value) {
            if (!value) {
              return null;
            } // default test - iso

            /** @type {?} */


            var isoDate = this.createMoment(value, moment.ISO_8601, this.locale);

            if (isoDate.isValid()) {
              return isoDate;
            }

            if (this.isNumeric(value)) {
              // unix time sec
              return this.createMoment(value, 'X', this.locale);
            } // long months naming: D MMM YYYY, MMM Do YYYY with short case support


            if (/^\d{1,2}\s\S+\s(\d{2}|\d{4})$/.test(value.trim()) || /^\S+\s\d{1,2}[a-z]{2}\s(\d{2}|\d{4})$/.test(value.trim())) {
              return this.parseWithSpace(value);
            } // slash notation: DD/MM/YYYY, MM/DD/YYYY with short case support


            if (/^\d{1,2}\/\d{1,2}\/(\d{2}|\d{4})$/.test(value)) {
              return this.parseWithSlash(value);
            } // dash notation: DD-MM-YYYY, YYYY-DD-MM with short case support


            if (/(^(\d{1,2}|\d{4})-\d{1,2}-\d{1,2}$)|(^\d{1,2}-\d{1,2}-(\d{2}|\d{4})$)/.test(value)) {
              return this.parseWithDash(value);
            } // dot notation: DD.MM.YYYY with short case support


            if (/^\d{1,2}\.\d{1,2}\.(\d{2}|\d{4})$/.test(value)) {
              return this.parseWithDot(value);
            }

            return null;
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "parseWithSpace",
          value: function parseWithSpace(value) {
            switch (this.locale) {
              case 'ru':
                return this.createMoment(value, 'DD MMMM YYYY', this.locale);

              case 'en':
                // 16 Feb 2019 vs Feb 16th 2019, covers Feb and February cases
                if (this.isNumeric(value[0])) {
                  return this.createMoment(value, 'D MMMM YYYY', this.locale);
                }

                return this.createMoment(value, 'MMMM Do YYYY', this.locale);

              default:
                throw new Error("Locale ".concat(this.locale, " is not supported"));
            }
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "parseWithSlash",
          value: function parseWithSlash(value) {
            switch (this.locale) {
              case 'ru':
                return this.createMoment(value, 'DD/MM/YYYY', this.locale);
              // todo do we use generalized locales? en vs en-US; until not we try to guess

              case 'en':
                // US vs UK

                /** @type {?} */
                var parts = value.split('/');
                /** @type {?} */

                var datePartsCount = 3;

                if (parts.length !== datePartsCount) {
                  return null;
                }
                /** @type {?} */


                var firstPart = parts[0].trim();
                /** @type {?} */

                var secondPart = parts[1].trim();

                if (!this.isNumeric(firstPart) || !this.isNumeric(secondPart)) {
                  return null;
                }
                /** @type {?} */


                var monthsInYears = 12;
                /** @type {?} */

                var canFirstBeMonth = +firstPart <= monthsInYears;
                /** @type {?} */

                var canSecondByMonth = +secondPart <= monthsInYears; // first two parts cannot be month

                if (!canFirstBeMonth && !canSecondByMonth) {
                  return null;
                }
                /** @type {?} */


                var canDetermineWhereMonth = canFirstBeMonth && canSecondByMonth; // use US format by default

                if (canDetermineWhereMonth) {
                  return this.createMoment(value, 'MM/DD/YYYY', this.locale);
                }

                return canFirstBeMonth && !canSecondByMonth ? this.createMoment(value, 'MM/DD/YYYY', this.locale) : this.createMoment(value, 'DD/MM/YYYY', this.locale);

              default:
                throw new Error("Locale ".concat(this.locale, " is not supported"));
            }
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "parseWithDash",
          value: function parseWithDash(value) {
            // leading year vs finishing year

            /** @type {?} */
            var parts = value.split('-');

            if (parts[0].length === 0) {
              return null;
            }
            /** @type {?} */


            var maxDayOrMonthCharsCount = 2;
            return parts[0].length <= maxDayOrMonthCharsCount ? this.createMoment(value, 'DD-MM-YYYY', this.locale) : this.createMoment(value, 'YYYY-MM-DD', this.locale);
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "parseWithDot",
          value: function parseWithDot(value) {
            // covers two cases YYYY and YY (for current year)
            return this.createMoment(value, 'DD.MM.YYYY', this.locale);
          }
        }, {
          key: "momentWithLocale",
          get: function get() {
            return moment().locale(this.locale);
          }
        }]);

        return MomentDateAdapter;
      }(_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["DateAdapter"]);

      MomentDateAdapter.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
      }];
      /** @nocollapse */

      MomentDateAdapter.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_LOCALE"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [MC_MOMENT_DATE_ADAPTER_OPTIONS]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: moment-date-formats.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var MC_MOMENT_DATE_FORMATS = {
        parse: {
          dateInput: 'L'
        },
        display: {
          dateInput: 'L',
          monthYearLabel: 'MMM YYYY',
          dateA11yLabel: 'LL',
          monthYearA11yLabel: 'MMMM YYYY'
        }
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var MomentDateModule = function MomentDateModule() {
        _classCallCheck(this, MomentDateModule);
      };

      MomentDateModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          providers: [{
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["DateAdapter"],
            useClass: MomentDateAdapter,
            deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_LOCALE"], MC_MOMENT_DATE_ADAPTER_OPTIONS]
          }]
        }]
      }];
      var ɵ0 = MC_MOMENT_DATE_FORMATS;

      var McMomentDateModule = function McMomentDateModule() {
        _classCallCheck(this, McMomentDateModule);
      };

      McMomentDateModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [MomentDateModule],
          providers: [{
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_FORMATS"],
            useValue: ɵ0
          }]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-moment-adapter-adapter.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-moment-adapter-adapter.js.map

      /***/
    },

    /***/
    "Nr+a":
    /*!*********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-modal.js ***!
      \*********************************************************/

    /*! exports provided: McModalComponent, McModalModule, McModalRef, McModalService, ɵa, ɵb, ɵc, ɵd, ɵe */

    /***/
    function NrA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McModalComponent", function () {
        return McModalComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McModalModule", function () {
        return McModalModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McModalRef", function () {
        return McModalRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McModalService", function () {
        return McModalService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return McModalControlService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return McModalTitle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return McModalBody;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵd", function () {
        return McModalFooter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵe", function () {
        return CssUnitPipe;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: modal-control.service.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function IRegisteredMeta() {}

      if (false) {}

      var McModalControlService = /*#__PURE__*/function () {
        /**
         * @param {?} parentService
         */
        function McModalControlService(parentService) {
          _classCallCheck(this, McModalControlService);

          this.parentService = parentService; // @ts-ignore

          this.rootOpenModals = this.parentService ? null : []; // @ts-ignore

          this.rootAfterAllClose = this.parentService ? null : new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"](); // @ts-ignore

          this.rootRegisteredMetaMap = this.parentService ? null : new Map();
        } // Track singleton afterAllClose through over the injection tree

        /**
         * @return {?}
         */


        _createClass(McModalControlService, [{
          key: "registerModal",
          // Register a modal to listen its open/close

          /**
           * @param {?} modalRef
           * @return {?}
           */
          value: function registerModal(modalRef) {
            var _this92 = this;

            if (!this.hasRegistered(modalRef)) {
              /** @type {?} */
              var afterOpenSubscription = modalRef.afterOpen.subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this92.openModals.push(modalRef);
              });
              /** @type {?} */

              var afterCloseSubscription = modalRef.afterClose.subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this92.removeOpenModal(modalRef);
              });
              this.registeredMetaMap.set(modalRef, {
                modalRef: modalRef,
                afterOpenSubscription: afterOpenSubscription,
                afterCloseSubscription: afterCloseSubscription
              });
            }
          }
          /**
           * @param {?} modalRef
           * @return {?}
           */

        }, {
          key: "hasRegistered",
          value: function hasRegistered(modalRef) {
            return this.registeredMetaMap.has(modalRef);
          } // Close all registered opened modals

          /**
           * @return {?}
           */

        }, {
          key: "closeAll",
          value: function closeAll() {
            /** @type {?} */
            var i = this.openModals.length;

            while (i--) {
              this.openModals[i].close();
            }
          }
          /**
           * @private
           * @param {?} modalRef
           * @return {?}
           */

        }, {
          key: "removeOpenModal",
          value: function removeOpenModal(modalRef) {
            /** @type {?} */
            var index = this.openModals.indexOf(modalRef);

            if (index > -1) {
              this.openModals.splice(index, 1);

              if (!this.openModals.length) {
                this.afterAllClose.next();
              }
            }
          }
        }, {
          key: "afterAllClose",
          get: function get() {
            return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;
          } // Track singleton openModals array through over the injection tree

          /**
           * @return {?}
           */

        }, {
          key: "openModals",
          get: function get() {
            return this.parentService ? this.parentService.openModals : this.rootOpenModals;
          } // Registered modal for later usage

          /**
           * @private
           * @return {?}
           */

        }, {
          key: "registeredMetaMap",
          get: function get() {
            return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;
          }
        }]);

        return McModalControlService;
      }();

      McModalControlService.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"]
      }];
      /** @nocollapse */

      McModalControlService.ctorParameters = function () {
        return [{
          type: McModalControlService,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["SkipSelf"]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: modal-ref.class.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * API class that public to users to handle the modal instance.
       * McModalRef is aim to avoid accessing to the modal instance directly by users.
       * @abstract
       * @template T, R
       */
      // tslint:disable-next-line:naming-convention


      var McModalRef = function McModalRef() {
        _classCallCheck(this, McModalRef);
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: modal-util.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function IClickPosition() {}

      if (false) {}

      var ModalUtil = /*#__PURE__*/function () {
        /**
         * @param {?} document
         */
        function ModalUtil(document) {
          _classCallCheck(this, ModalUtil);

          this.document = document;
          this.lastPosition = {
            x: -1,
            y: -1
          };
          this.listenDocumentClick();
        }
        /**
         * @return {?}
         */


        _createClass(ModalUtil, [{
          key: "getLastClickPosition",
          value: function getLastClickPosition() {
            return this.lastPosition;
          }
          /**
           * @return {?}
           */

        }, {
          key: "listenDocumentClick",
          value: function listenDocumentClick() {
            var _this93 = this;

            this.document.addEventListener('click',
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              _this93.lastPosition = {
                x: event.clientX,
                y: event.clientY
              };
            });
          }
        }]);

        return ModalUtil;
      }();

      if (false) {}
      /** @type {?} */


      var modalUtilObject = new ModalUtil(document);
      /**
       * @fileoverview added by tsickle
       * Generated from: modal.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Duration when perform animations (ms)

      /** @type {?} */

      var MODAL_ANIMATE_DURATION = 200;
      /**
       * @template T, R
       */

      var McModalComponent = /*#__PURE__*/function (_McModalRef) {
        _inherits(McModalComponent, _McModalRef);

        var _super29 = _createSuper(McModalComponent);

        /**
         * @param {?} overlay
         * @param {?} renderer
         * @param {?} cfr
         * @param {?} elementRef
         * @param {?} viewContainer
         * @param {?} modalControl
         * @param {?} changeDetector
         * @param {?} document
         */
        function McModalComponent(overlay, renderer, cfr, elementRef, viewContainer, modalControl, changeDetector, document) {
          var _this94;

          _classCallCheck(this, McModalComponent);

          _this94 = _super29.call(this);
          _this94.overlay = overlay;
          _this94.renderer = renderer;
          _this94.cfr = cfr;
          _this94.elementRef = elementRef;
          _this94.viewContainer = viewContainer;
          _this94.modalControl = modalControl;
          _this94.changeDetector = changeDetector;
          _this94.document = document;
          _this94.mcModalType = 'default';
          _this94._mcVisible = false;
          _this94.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this94.mcZIndex = 1000;
          _this94.mcWidth = 480;
          _this94.mcCloseByESC = true;
          _this94._mcClosable = true;
          _this94._mcMask = true;
          _this94._mcMaskClosable = false; // Trigger when modal open(visible) after animations

          _this94.mcAfterOpen = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"](); // Trigger when modal leave-animation over

          _this94.mcAfterClose = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this94.mcOkType = 'primary';
          _this94._mcOkLoading = false;
          _this94.mcOnOk = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this94._mcCancelLoading = false;
          _this94.mcOnCancel = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"](); // The origin point that animation based on

          _this94.transformOrigin = '0px 0px 0px';

          _this94.mcGetContainer =
          /**
          * @return {?}
          */
          function () {
            return _this94.overlay.create();
          };

          return _this94;
        }
        /**
         * @return {?}
         */


        _createClass(McModalComponent, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            // Create component along without View
            if (this.isComponent(this.mcContent)) {
              this.createDynamicComponent(
              /** @type {?} */
              this.mcContent);
            } // Setup default button options


            if (this.isModalButtons(this.mcFooter)) {
              this.mcFooter = this.formatModalButtons(
              /** @type {?} */
              this.mcFooter);
            }

            if (this.isComponent(this.mcComponent)) {
              this.createDynamicComponent(this.mcComponent);
            } // Place the modal dom to elsewhere


            this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;

            if (this.container instanceof HTMLElement) {
              this.container.appendChild(this.elementRef.nativeElement);
            } else if (this.container instanceof _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayRef"]) {
              // NOTE: only attach the dom to overlay, the view container is not changed actually
              this.container.overlayElement.appendChild(this.elementRef.nativeElement);
            } // Register modal when afterOpen/afterClose is stable


            this.modalControl.registerModal(this);
          } // [NOTE] NOT available when using by service!
          // Because ngOnChanges never be called when using by service,
          // here we can't support "mcContent"(Component) etc. as inputs that initialized dynamically.
          // BUT: User also can change "mcContent" dynamically to trigger UI changes
          // (provided you don't use Component that needs initializations)

          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (changes.mcVisible) {
              // Do not trigger animation while initializing
              this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            // If using Component, it is the time to attach View while bodyContainer is ready
            if (this.contentComponentRef) {
              this.bodyContainer.insert(this.contentComponentRef.hostView);
            }

            var _iterator4 = _createForOfIteratorHelper(this.autoFocusedButtons.toArray()),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var autoFocusedButton = _step4.value;

                if (autoFocusedButton.nativeElement.autofocus) {
                  /** @type {?} */
                  autoFocusedButton.nativeElement.focus();
                  break;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.container instanceof _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayRef"]) {
              this.container.dispose();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "open",
          value: function open() {
            this.changeVisibleFromInside(true);
          }
          /**
           * @param {?=} result
           * @return {?}
           */

        }, {
          key: "close",
          value: function close(result) {
            this.changeVisibleFromInside(false, result);
          } // Destroy equals Close

          /**
           * @param {?=} result
           * @return {?}
           */

        }, {
          key: "destroy",
          value: function destroy(result) {
            this.close(result);
          }
          /**
           * @return {?}
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            this.changeDetector.markForCheck();
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerOk",
          value: function triggerOk() {
            this.onClickOkCancel('ok');
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerCancel",
          value: function triggerCancel() {
            this.onClickOkCancel('cancel');
          }
          /**
           * @return {?}
           */

        }, {
          key: "getInstance",
          value: function getInstance() {
            return this;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getContentComponentRef",
          value: function getContentComponentRef() {
            return this.contentComponentRef;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getContentComponent",
          value: function getContentComponent() {
            return this.contentComponentRef && this.contentComponentRef.instance;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getElement",
          value: function getElement() {
            return this.elementRef && this.elementRef.nativeElement;
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onClickMask",
          value: function onClickMask($event) {
            if (this.mcMask && this.mcMaskClosable &&
            /** @type {?} */
            $event.target.classList.contains('mc-modal-wrap') && this.mcVisible) {
              this.onClickOkCancel('cancel');
            }
          } // tslint:disable-next-line: no-reserved-keywords

          /**
           * @param {?} type
           * @return {?}
           */

        }, {
          key: "isModalType",
          value: function isModalType(type) {
            return this.mcModalType === type;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            // tslint:disable-next-line:deprecation .key isn't supported in Edge
            if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] && this.container && this.container instanceof _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayRef"]) {
              this.close();
              event.preventDefault();
            }
          } // AoT

          /**
           * @return {?}
           */

        }, {
          key: "onClickCloseBtn",
          value: function onClickCloseBtn() {
            if (this.mcVisible) {
              this.onClickOkCancel('cancel');
            }
          } // AoT
          // tslint:disable-next-line: no-reserved-keywords

          /**
           * @param {?} type
           * @return {?}
           */

        }, {
          key: "onClickOkCancel",
          value: function onClickOkCancel(type) {
            var _this95 = this;

            /** @type {?} */
            var trigger = {
              ok: this.mcOnOk,
              cancel: this.mcOnCancel
            }[type];
            /** @type {?} */

            var loadingKey = {
              ok: 'mcOkLoading',
              cancel: 'mcCancelLoading'
            }[type];

            if (trigger instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]) {
              trigger.emit(this.getContentComponent());
            } else if (typeof trigger === 'function') {
              /** @type {?} */
              var result = trigger(this.getContentComponent()); // Users can return "false" to prevent closing by default

              /** @type {?} */

              var caseClose =
              /**
              * @param {?} doClose
              * @return {?}
              */
              function caseClose(doClose) {
                return doClose !== false && _this95.close(
                /** @type {?} */
                doClose);
              };

              if (isPromise(result)) {
                this[loadingKey] = true;
                /** @type {?} */

                var handleThen =
                /**
                * @param {?} doClose
                * @return {?}
                */
                function handleThen(doClose) {
                  _this95[loadingKey] = false;
                  caseClose(doClose);
                };

                /** @type {?} */
                result.then(handleThen)["catch"](handleThen);
              } else {
                caseClose(result);
              }
            }
          } // AoT

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isNonEmptyString",
          value: function isNonEmptyString(value) {
            return typeof value === 'string' && value !== '';
          } // AoT

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isTemplateRef",
          value: function isTemplateRef(value) {
            return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"];
          } // AoT

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isComponent",
          value: function isComponent(value) {
            return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["Type"];
          } // AoT

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isModalButtons",
          value: function isModalButtons(value) {
            return Array.isArray(value) && value.length > 0;
          } // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.
          // AoT

          /**
           * @param {?} options
           * @param {?} prop
           * @return {?}
           */

        }, {
          key: "getButtonCallableProp",
          value: function getButtonCallableProp(options, prop) {
            /** @type {?} */
            var value = options[prop];
            /** @type {?} */

            var args = [];

            if (this.contentComponentRef) {
              args.push(this.contentComponentRef.instance);
            }

            return typeof value === 'function' ? value.apply(options, args) : value;
          } // On mcFooter's modal button click
          // AoT

          /**
           * @param {?} button
           * @return {?}
           */

        }, {
          key: "onButtonClick",
          value: function onButtonClick(button) {
            // Call onClick directly
            // tslint:disable-next-line:no-inferred-empty-object-type  rule seems to be broken

            /** @type {?} */
            var result = this.getButtonCallableProp(button, 'onClick');

            if (isPromise(result)) {
              button.loading = true;

              /** @type {?} */
              result.then(
              /**
              * @return {?}
              */
              function () {
                return button.loading = false;
              })["catch"](
              /**
              * @return {?}
              */
              function () {
                return button.loading = false;
              });
            }
          } // Do rest things when visible state changed

          /**
           * @private
           * @param {?} visible
           * @param {?=} animation
           * @param {?=} closeResult
           * @return {?}
           */

        }, {
          key: "handleVisibleStateChange",
          value: function handleVisibleStateChange(visible) {
            var _this96 = this;

            var animation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var closeResult = arguments.length > 2 ? arguments[2] : undefined;

            // Hide scrollbar at the first time when shown up
            if (visible) {
              this.changeBodyOverflow(1);
            }

            return Promise.resolve(animation && this.animateTo(visible)) // Emit open/close event after animations over
            .then(
            /**
            * @return {?}
            */
            function () {
              if (visible) {
                _this96.mcAfterOpen.emit();
              } else {
                _this96.mcAfterClose.emit(closeResult); // Show/hide scrollbar when animation is over


                _this96.changeBodyOverflow();
              }
            });
          } // Change mcVisible from inside

          /**
           * @private
           * @param {?} visible
           * @param {?=} closeResult
           * @return {?}
           */

        }, {
          key: "changeVisibleFromInside",
          value: function changeVisibleFromInside(visible, closeResult) {
            if (this.mcVisible !== visible) {
              // Change mcVisible value immediately
              this.mcVisible = visible;
              this.mcVisibleChange.emit(visible);
              return this.handleVisibleStateChange(visible, true, closeResult);
            }

            return Promise.resolve();
          }
          /**
           * @private
           * @param {?} state
           * @return {?}
           */

        }, {
          key: "changeAnimationState",
          value: function changeAnimationState(state) {
            this.animationState = state;

            if (state) {
              var _this$maskAnimationCl, _this$modalAnimationC;

              this.maskAnimationClassMap = (_this$maskAnimationCl = {}, _defineProperty(_this$maskAnimationCl, "fade-".concat(state), true), _defineProperty(_this$maskAnimationCl, "fade-".concat(state, "-active"), true), _this$maskAnimationCl);
              this.modalAnimationClassMap = (_this$modalAnimationC = {}, _defineProperty(_this$modalAnimationC, "zoom-".concat(state), true), _defineProperty(_this$modalAnimationC, "zoom-".concat(state, "-active"), true), _this$modalAnimationC);
            } else {
              // @ts-ignore
              this.maskAnimationClassMap = this.modalAnimationClassMap = null;
            }

            if (this.contentComponentRef) {
              this.contentComponentRef.changeDetectorRef.markForCheck();
            } else {
              this.changeDetector.markForCheck();
            }
          }
          /**
           * @private
           * @param {?} isVisible
           * @return {?}
           */

        }, {
          key: "animateTo",
          value: function animateTo(isVisible) {
            var _this97 = this;

            // Figure out the lastest click position when shows up
            if (isVisible) {
              // [NOTE] Using timeout due to the document.click event is fired later than visible change,
              // so if not postponed to next event-loop, we can't get the lastest click position
              window.setTimeout(
              /**
              * @return {?}
              */
              function () {
                return _this97.updateTransformOrigin();
              });
            }

            this.changeAnimationState(isVisible ? 'enter' : 'leave'); // Return when animation is over

            return new Promise(
            /**
            * @param {?} resolve
            * @return {?}
            */
            function (resolve) {
              return window.setTimeout(
              /**
              * @return {?}
              */
              function () {
                _this97.changeAnimationState(null);

                resolve();
              }, MODAL_ANIMATE_DURATION);
            });
          }
          /**
           * @private
           * @param {?} buttons
           * @return {?}
           */

        }, {
          key: "formatModalButtons",
          value: function formatModalButtons(buttons) {
            return buttons.map(
            /**
            * @param {?} button
            * @return {?}
            */
            function (button) {
              return Object.assign({
                type: 'default',
                size: 'default',
                autoLoading: true,
                show: true,
                loading: false,
                disabled: false
              }, button);
            });
          }
          /**
           * Create a component dynamically but not attach to any View
           * (this action will be executed when bodyContainer is ready)
           * @private
           * @param {?} component Component class
           * @return {?}
           */

        }, {
          key: "createDynamicComponent",
          value: function createDynamicComponent(component) {
            /** @type {?} */
            var factory = this.cfr.resolveComponentFactory(component);
            /** @type {?} */

            var childInjector = _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injector"].create({
              providers: [{
                provide: McModalRef,
                useValue: this
              }],
              parent: this.viewContainer.injector
            });

            this.contentComponentRef = factory.create(childInjector);

            if (this.mcComponentParams) {
              Object.assign(this.contentComponentRef.instance, this.mcComponentParams);
            } // Do the first change detection immediately
            // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)


            this.contentComponentRef.changeDetectorRef.detectChanges();
          } // Update transform-origin to the last click position on document

          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateTransformOrigin",
          value: function updateTransformOrigin() {
            /** @type {?} */
            var modalElement =
            /** @type {?} */
            this.modalContainer.nativeElement;
            /** @type {?} */

            var lastPosition = modalUtilObject.getLastClickPosition();

            if (lastPosition) {
              this.transformOrigin = "".concat(lastPosition.x - modalElement.offsetLeft, "px ").concat(lastPosition.y - modalElement.offsetTop, "px 0px");
            }
          }
          /**
           * Take care of the body's overflow to decide the existense of scrollbar
           * @private
           * @param {?=} plusNum The number that the openModals.length will increase soon
           * @return {?}
           */

        }, {
          key: "changeBodyOverflow",
          value: function changeBodyOverflow() {
            var plusNum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            /** @type {?} */
            var openModals = this.modalControl.openModals;

            if (openModals.length + plusNum > 0) {
              this.renderer.setStyle(this.document.body, 'overflow', 'hidden');
            } else {
              this.renderer.removeStyle(this.document.body, 'overflow');
            }
          }
        }, {
          key: "mcVisible",
          get: function get() {
            return this._mcVisible;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcVisible = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcClosable",
          get: function get() {
            return this._mcClosable;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcClosable = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcMask",
          get: function get() {
            return this._mcMask;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcMask = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcMaskClosable",
          get: function get() {
            return this._mcMaskClosable;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcMaskClosable = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcOkLoading",
          get: function get() {
            return this._mcOkLoading;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcOkLoading = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcCancelLoading",
          get: function get() {
            return this._mcCancelLoading;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcCancelLoading = value;
          } // Observable alias for mcAfterOpen

          /**
           * @return {?}
           */

        }, {
          key: "afterOpen",
          get: function get() {
            return this.mcAfterOpen.asObservable();
          } // Observable alias for mcAfterClose

          /**
           * @return {?}
           */

        }, {
          key: "afterClose",
          get: function get() {
            return this.mcAfterClose.asObservable();
          }
          /**
           * @return {?}
           */

        }, {
          key: "okText",
          get: function get() {
            return this.mcOkText;
          }
          /**
           * @return {?}
           */

        }, {
          key: "cancelText",
          get: function get() {
            return this.mcCancelText;
          } // Indicate whether this dialog should hidden

          /**
           * @return {?}
           */

        }, {
          key: "hidden",
          get: function get() {
            return !this.mcVisible && !this.animationState;
          }
        }]);

        return McModalComponent;
      }(McModalRef);

      McModalComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-modal',
          template: "<!-- Compatible: the <ng-content> can appear only once -->\n<ng-template #tplOriginContent>\n    <ng-content></ng-content>\n</ng-template>\n\n<div>\n    <div *ngIf=\"mcMask\"\n         class=\"mc-modal-mask\"\n         [ngClass]=\"maskAnimationClassMap\"\n         [class.mc-modal-mask-hidden]=\"hidden\"\n         [ngStyle]=\"mcMaskStyle\"\n         [style.zIndex]=\"mcZIndex\"\n    ></div>\n    <div\n        (mousedown)=\"onClickMask($event)\"\n        class=\"mc-modal-wrap {{ mcWrapClassName }}\"\n        [style.zIndex]=\"mcZIndex\"\n        [style.display]=\"hidden ? 'none' : ''\"\n        tabindex=\"-1\"\n        role=\"dialog\"\n    >\n        <div #modalContainer\n             class=\"mc-modal {{ mcClassName }}\"\n             [ngClass]=\"modalAnimationClassMap\"\n             [ngStyle]=\"mcStyle\"\n             [style.width]=\"mcWidth | toCssUnit\"\n             [style.transform-origin]=\"transformOrigin\"\n             role=\"document\"\n        >\n            <div class=\"mc-modal-content\" cdkTrapFocus>\n                <button *ngIf=\"mcClosable\"\n                        mc-button\n                        (click)=\"onClickCloseBtn()\"\n                        class=\"mc-modal-close mc-button_transparent\"\n                        aria-label=\"Close\">\n                    <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n                </button>\n                <ng-container [ngSwitch]=\"true\">\n                    <ng-container *ngSwitchCase=\"isModalType('default')\"\n                                  [ngTemplateOutlet]=\"tplContentDefault\"></ng-container>\n                    <ng-container *ngSwitchCase=\"isModalType('confirm')\"\n                                  [ngTemplateOutlet]=\"tplContentConfirm\"></ng-container>\n                    <ng-container *ngSwitchCase=\"isModalType('custom')\"\n                                  [ngTemplateOutlet]=\"tplContentCustom\"></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #tplContentCustom>\n    <ng-container #bodyContainer></ng-container>\n</ng-template>\n\n\n<!-- [Predefined] Default Modal Content -->\n<ng-template #tplContentDefault>\n    <div *ngIf=\"mcTitle\" class=\"mc-modal-header\">\n        <div class=\"mc-modal-title\">\n            <ng-container [ngSwitch]=\"true\">\n                <ng-container *ngSwitchCase=\"isTemplateRef(mcTitle)\" [ngTemplateOutlet]=\"mcTitle\"></ng-container>\n                <ng-container *ngSwitchCase=\"isNonEmptyString(mcTitle)\">\n                    <div [innerHTML]=\"mcTitle\"></div>\n                </ng-container>\n            </ng-container>\n        </div>\n    </div>\n    <div class=\"mc-modal-body\" [ngStyle]=\"mcBodyStyle\">\n        <ng-container #bodyContainer>\n            <ng-container *ngIf=\"!isComponent(mcContent)\" [ngSwitch]=\"true\">\n                <ng-container *ngSwitchCase=\"isTemplateRef(mcContent)\" [ngTemplateOutlet]=\"mcContent\"></ng-container>\n                <ng-container *ngSwitchCase=\"isNonEmptyString(mcContent)\">\n                    <div [innerHTML]=\"mcContent\"></div>\n                </ng-container>\n                <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"tplOriginContent\"></ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n    <div *ngIf=\"mcFooter !== null\" class=\"mc-modal-footer\">\n        <ng-container [ngSwitch]=\"true\">\n            <ng-container *ngSwitchCase=\"isTemplateRef(mcFooter)\" [ngTemplateOutlet]=\"mcFooter\"></ng-container>\n            <ng-container *ngSwitchCase=\"isNonEmptyString(mcFooter)\">\n                <div [innerHTML]=\"mcFooter\"></div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"isModalButtons(mcFooter)\">\n                <ng-container *ngFor=\"let button of mcFooter\">\n                    <button\n                        mc-button\n                        #autoFocusedButton\n                        [attr.autofocus]=\"button.autoFocus\"\n                        *ngIf=\"getButtonCallableProp(button, 'show')\"\n                        [disabled]=\"getButtonCallableProp(button, 'disabled')\"\n                        [class.mc-progress]=\"getButtonCallableProp(button, 'loading')\"\n                        (click)=\"onButtonClick(button)\"\n                        [color]=\"button.type\">\n                        {{ button.label }}\n                    </button>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <button\n                    #autoFocusedButton\n                    [attr.autofocus]=\"true\"\n                    *ngIf=\"mcOkText !== null\"\n                    mc-button\n                    color=\"primary\"\n                    (click)=\"onClickOkCancel('ok')\">\n\n                    {{ okText }}\n                </button>\n                <button *ngIf=\"mcCancelText!==null\" mc-button (click)=\"onClickOkCancel('cancel')\">\n                    {{ cancelText }}\n                </button>\n            </ng-container>\n        </ng-container>\n    </div>\n</ng-template>\n<!-- /[Predefined] Default Modal Content -->\n\n<!-- [Predefined] Confirm Modal Content -->\n<ng-template #tplContentConfirm>\n    <div class=\"mc-modal-body\" [ngStyle]=\"mcBodyStyle\">\n        <div class=\"mc-confirm-body-wrapper\">\n            <div class=\"mc-confirm-body\">\n                <div class=\"mc-confirm-content\">\n                    <ng-container #bodyContainer>\n                        <ng-container *ngIf=\"!isComponent(mcContent)\" [ngSwitch]=\"true\">\n                            <ng-container *ngSwitchCase=\"isTemplateRef(mcContent)\"\n                                          [ngTemplateOutlet]=\"mcContent\"></ng-container>\n                            <ng-container *ngSwitchCase=\"isNonEmptyString(mcContent)\">\n                                <div [innerHTML]=\"mcContent\"></div>\n                            </ng-container>\n                            <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"tplOriginContent\"></ng-container>\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </div>\n        </div> <!-- /.mc-confirm-body-wrapper -->\n    </div>\n    <div class=\"mc-confirm-btns\">\n        <button\n            mc-button\n            #autoFocusedButton\n            [color]=\"mcOkType\"\n            [attr.autofocus]=\"true\"\n            *ngIf=\"mcOkText !== ''\"\n            (click)=\"onClickOkCancel('ok')\">\n\n            {{ okText }}\n        </button>\n        <button mc-button color=\"second\" *ngIf=\"mcCancelText!==''\" (click)=\"onClickOkCancel('cancel')\">\n            {{ cancelText }}\n        </button>\n    </div>\n</ng-template>\n<!-- /[Predefined] Confirm Modal Content -->\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          host: {
            '(keydown)': 'onKeyDown($event)'
          },
          styles: ["@-webkit-keyframes mcFadeIn{0%{opacity:0}to{opacity:1}}@keyframes mcFadeIn{0%{opacity:0}to{opacity:1}}@-webkit-keyframes mcFadeOut{0%{opacity:1}to{opacity:0}}@keyframes mcFadeOut{0%{opacity:1}to{opacity:0}}@-webkit-keyframes mcZoomIn{0%{opacity:0;transform:translateY(-25%)}to{opacity:1;transform:scale(1)}}@keyframes mcZoomIn{0%{opacity:0;transform:translateY(-25%)}to{opacity:1;transform:scale(1)}}@-webkit-keyframes mcZoomOut{0%{transform:scale(1)}to{opacity:0;transform:translateY(-30%)}}@keyframes mcZoomOut{0%{transform:scale(1)}to{opacity:0;transform:translateY(-30%)}}.fade-appear,.fade-enter,.fade-leave{-webkit-animation-duration:.3s;-webkit-animation-fill-mode:both;-webkit-animation-play-state:paused;animation-duration:.3s;animation-fill-mode:both;animation-play-state:paused}.fade-appear.fade-appear-active,.fade-enter.fade-enter-active{-webkit-animation-name:mcFadeIn;-webkit-animation-play-state:running;animation-name:mcFadeIn;animation-play-state:running}.fade-leave.fade-leave-active{-webkit-animation-name:mcFadeOut;-webkit-animation-play-state:running;animation-name:mcFadeOut;animation-play-state:running;pointer-events:none}.className-appear,.className-enter{opacity:0}.className-appear,.className-enter,.className-leave{-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}.zoom-appear,.zoom-enter,.zoom-leave{-webkit-animation-duration:.3s;-webkit-animation-fill-mode:both;-webkit-animation-play-state:paused;animation-duration:.3s;animation-fill-mode:both;animation-play-state:paused}.zoom-appear.zoom-appear-active,.zoom-enter.zoom-enter-active{-webkit-animation-name:mcZoomIn;-webkit-animation-play-state:running;animation-name:mcZoomIn;animation-play-state:running}.zoom-leave.zoom-leave-active{-webkit-animation-name:mcZoomOut;-webkit-animation-play-state:running;animation-name:mcZoomOut;animation-play-state:running;pointer-events:none}.className-appear,.className-enter{-webkit-animation-timing-function:cubic-bezier(.075,.82,.165,1);animation-timing-function:cubic-bezier(.075,.82,.165,1);transform:translateY(-25%)}.className-leave{-webkit-animation-timing-function:cubic-bezier(.785,.135,.15,.86);animation-timing-function:cubic-bezier(.785,.135,.15,.86);transform:translate(0)}.mc-confirm .mc-modal-close,.mc-confirm .mc-modal-header{display:none}.mc-confirm .mc-modal-body{padding:24px}.mc-confirm-body-wrapper{zoom:1}.mc-confirm-body-wrapper:after,.mc-confirm-body-wrapper:before{content:\"\";display:table}.mc-confirm-body-wrapper:after{clear:both}.mc-confirm-body .mc-confirm-title{display:block;overflow:auto}.mc-confirm .mc-confirm-btns{border-radius:0 0 4px 4px;text-align:right}.mc-confirm .mc-confirm-btns button+button{margin:16px}.mc-modal{box-sizing:border-box;list-style:none;margin:0 auto;padding:0 0 24px;position:relative;top:48px;width:auto}.mc-modal.zoom-appear,.mc-modal.zoom-enter{-webkit-animation-duration:.3s;animation-duration:.3s;opacity:0;transform:none}.mc-modal .mc-modal-close{height:56px;position:absolute;right:0;top:0;width:56px;z-index:10}.mc-modal-wrap{-webkit-overflow-scrolling:touch;bottom:0;left:0;outline:0;overflow:auto;position:fixed;right:0;top:0;z-index:1000}.mc-modal-title{margin:0}.mc-modal-content{background-clip:padding-box;background-color:#fff;border-radius:4px;position:relative}.mc-modal-header{border-radius:4px 4px 0 0;display:block;padding:14px 16px}.mc-modal-body{display:block;max-height:calc(100vh - 260px);overflow-y:auto;padding:16px 24px 24px;word-wrap:break-word}.mc-modal-footer{border-radius:0 0 4px 4px;display:block;padding:16px;text-align:right}.mc-modal-footer button+button{margin-bottom:0;margin-left:16px}.mc-modal-mask{bottom:0;height:100%;left:0;position:fixed;right:0;top:0;z-index:1000}.mc-modal-mask.mc-modal-mask-hidden{display:none}.mc-modal-open{overflow:hidden}"]
        }]
      }];
      /** @nocollapse */

      McModalComponent.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"]
        }, {
          type: McModalControlService
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }];
      };

      McModalComponent.propDecorators = {
        mcModalType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcComponent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcComponentParams: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcFooter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcVisible: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcVisibleChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        mcZIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcWrapClassName: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcClassName: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcStyle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcTitle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcCloseByESC: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcClosable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcMask: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcMaskClosable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcMaskStyle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcBodyStyle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcAfterOpen: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        mcAfterClose: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        mcOkText: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcOkType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcOkLoading: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcOnOk: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        mcCancelText: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcCancelLoading: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcOnCancel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        modalContainer: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['modalContainer', {
            "static": true
          }]
        }],
        bodyContainer: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['bodyContainer', {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"],
            "static": false
          }]
        }],
        autoFocusedButtons: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"],
          args: ['autoFocusedButton', {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
          }]
        }],
        mcGetContainer: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {} ////////////

      /**
       * @param {?} obj
       * @return {?}
       */


      function isPromise(obj) {
        // tslint:disable-next-line: no-unbound-method
        return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof
        /** @type {?} */
        obj.then === 'function' && typeof
        /** @type {?} */
        obj["catch"] === 'function';
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: css-unit.pipe.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var CssUnitPipe = /*#__PURE__*/function () {
        function CssUnitPipe() {
          _classCallCheck(this, CssUnitPipe);
        }

        _createClass(CssUnitPipe, [{
          key: "transform",

          /**
           * @param {?} value
           * @param {?=} defaultUnit
           * @return {?}
           */
          value: function transform(value) {
            var defaultUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';

            /** @type {?} */
            var formatted = +value;
            return isNaN(formatted) ? "".concat(value) : "".concat(formatted).concat(defaultUnit);
          }
        }]);

        return CssUnitPipe;
      }();

      CssUnitPipe.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Pipe"],
        args: [{
          name: 'toCssUnit'
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: modal.directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McModalTitle = function McModalTitle() {
        _classCallCheck(this, McModalTitle);
      };

      McModalTitle.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: "[mc-modal-title], mc-modal-title, [mcModalTitle]",
          host: {
            "class": 'mc-modal-header mc-modal-title'
          }
        }]
      }];

      var McModalBody = function McModalBody() {
        _classCallCheck(this, McModalBody);
      };

      McModalBody.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: "[mc-modal-body], mc-modal-body, [mcModalBody]",
          host: {
            "class": 'mc-modal-body'
          }
        }]
      }];

      var McModalFooter = function McModalFooter() {
        _classCallCheck(this, McModalFooter);
      };

      McModalFooter.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: "[mc-modal-footer], mc-modal-footer, [mcModalFooter]",
          host: {
            "class": 'mc-modal-footer'
          }
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: modal.service.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // A builder used for managing service creating modals

      var ModalBuilderForService = /*#__PURE__*/function () {
        /**
         * @param {?} overlay
         * @param {?=} options
         */
        function ModalBuilderForService(overlay) {
          var _this98 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, ModalBuilderForService);

          this.overlay = overlay;
          this.createModal();

          if (!('mcGetContainer' in options)) {
            options.mcGetContainer = undefined;
          }

          this.changeProps(options);

          /** @type {?} */
          this.modalRef.instance.open();

          /** @type {?} */
          this.modalRef.instance.mcAfterClose.subscribe(
          /**
          * @return {?}
          */
          function () {
            return _this98.destroyModal();
          });
          this.overlayRef.keydownEvents() // @ts-ignore
          .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            // tslint:disable-next-line:deprecation replacement .key isn't supported in Edge
            return event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] && options.mcCloseByESC;
          })).subscribe(
          /**
          * @return {?}
          */
          function () {
            return (
              /** @type {?} */
              _this98.modalRef.instance.close()
            );
          });
        }
        /**
         * @return {?}
         */


        _createClass(ModalBuilderForService, [{
          key: "getInstance",
          value: function getInstance() {
            return this.modalRef && this.modalRef.instance;
          }
          /**
           * @return {?}
           */

        }, {
          key: "destroyModal",
          value: function destroyModal() {
            if (this.modalRef) {
              this.overlayRef.dispose();
              this.modalRef = null;
            }
          }
          /**
           * @private
           * @param {?} options
           * @return {?}
           */

        }, {
          key: "changeProps",
          value: function changeProps(options) {
            if (this.modalRef) {
              // here not limit user's inputs at runtime
              Object.assign(this.modalRef.instance, options);
            }
          } // Create component to ApplicationRef

          /**
           * @private
           * @return {?}
           */

        }, {
          key: "createModal",
          value: function createModal() {
            this.overlayRef = this.overlay.create();
            this.modalRef = this.overlayRef.attach(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["ComponentPortal"](McModalComponent));
          }
        }]);

        return ModalBuilderForService;
      }();

      if (false) {}

      var McModalService = /*#__PURE__*/function () {
        /**
         * @param {?} overlay
         * @param {?} modalControl
         */
        function McModalService(overlay, modalControl) {
          _classCallCheck(this, McModalService);

          this.overlay = overlay;
          this.modalControl = modalControl;
        } // Track of the current close modals (we assume invisible is close this time)

        /**
         * @return {?}
         */


        _createClass(McModalService, [{
          key: "closeAll",
          // Closes all of the currently-open dialogs

          /**
           * @return {?}
           */
          value: function closeAll() {
            this.modalControl.closeAll();
          }
          /**
           * @template T
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "create",
          value: function create() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (typeof options.mcOnCancel !== 'function') {
              // Leave a empty function to close this modal by default
              // tslint:disable-next-line
              options.mcOnCancel =
              /**
              * @return {?}
              */
              function () {};
            }

            if (!('mcCloseByESC' in options)) {
              options.mcCloseByESC = true;
            }

            if (!('mcWidth' in options)) {
              // tslint:disable-next-line
              options.mcWidth = 480;
            }

            return (
              /** @type {?} */
              new ModalBuilderForService(this.overlay, options).getInstance()
            );
          }
          /**
           * @template T
           * @param {?=} options
           * @param {?=} confirmType
           * @return {?}
           */

        }, {
          key: "confirm",
          value: function confirm() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var confirmType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'confirm';

            if ('mcFooter' in options) {
              console.warn("The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.");
            } // NOTE: only support function currently by calling confirm()


            if (typeof options.mcOnOk !== 'function') {
              // Leave a empty function to close this modal by default
              // tslint:disable-next-line
              options.mcOnOk =
              /**
              * @return {?}
              */
              function () {};
            }

            options.mcModalType = 'confirm';
            options.mcClassName = "mc-confirm mc-confirm-".concat(confirmType, " ").concat(options.mcClassName || '');
            return this.create(options);
          }
          /**
           * @template T
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "open",
          value: function open() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            options.mcModalType = 'custom';
            return this.create(options);
          }
          /**
           * @template T
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "success",
          value: function success() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return this.simpleConfirm(options, 'success');
          } // tslint:disable-next-line: no-reserved-keywords

          /**
           * @template T
           * @param {?=} options
           * @return {?}
           */

        }, {
          key: "delete",
          value: function _delete() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return this.simpleConfirm(options, 'warn');
          }
          /**
           * @private
           * @template T
           * @param {?=} options
           * @param {?=} confirmType
           * @return {?}
           */

        }, {
          key: "simpleConfirm",
          value: function simpleConfirm() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var confirmType = arguments.length > 1 ? arguments[1] : undefined;

            // Remove the Cancel button if the user not specify a Cancel button
            if (!('mcCancelText' in options)) {
              // @ts-ignore
              options.mcCancelText = null;
            }

            return this.confirm(options, confirmType);
          }
        }, {
          key: "openModals",
          get: function get() {
            return this.modalControl.openModals;
          }
          /**
           * @return {?}
           */

        }, {
          key: "afterAllClose",
          get: function get() {
            return this.modalControl.afterAllClose.asObservable();
          }
        }]);

        return McModalService;
      }();

      McModalService.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"]
      }];
      /** @nocollapse */

      McModalService.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
        }, {
          type: McModalControlService
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: modal.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McModalModule = function McModalModule() {
        _classCallCheck(this, McModalModule);
      };

      McModalModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["A11yModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_6__["McButtonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_7__["McIconModule"]],
          exports: [McModalComponent, McModalTitle, McModalBody, McModalFooter],
          declarations: [McModalComponent, McModalTitle, McModalBody, McModalFooter, CssUnitPipe],
          entryComponents: [McModalComponent],
          providers: [McModalControlService, McModalService]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: modal.type.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       * @template T, R
       */

      function IModalOptions() {}

      if (false) {}
      /**
       * @record
       * @template T
       */


      function IModalOptionsForService() {}

      if (false) {}
      /**
       * @record
       * @template T
       */


      function IModalButtonOptions() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-modal.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-modal.js.map

      /***/

    },

    /***/
    "P19e":
    /*!***************************************************************!*\
      !*** ./packages/docs/src/app/components/anchors/anchors.scss ***!
      \***************************************************************/

    /*! exports provided: default */

    /***/
    function P19e(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".anchors-menu {\n  position: fixed;\n  top: 64px;\n  width: 300px;\n  right: 0;\n  bottom: 0;\n}\n\n.anchors-menu__list {\n  display: flex;\n  flex-direction: column;\n  margin-top: 25px;\n}\n\n.anchors-menu__list-element {\n  list-style-type: none;\n  padding: 6px 16px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2FuY2hvcnMvYW5jaG9ycy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBZTtFQUNmLFNBQVM7RUFDVCxZQUFZO0VBQ1osUUFBUTtFQUNSLFNBQVM7QUFDYjs7QUFDSTtFQUNJLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsZ0JBQWdCO0FBRXhCOztBQUNJO0VBQ0kscUJBQXFCO0VBQ3JCLGlCQUFpQjtBQUV6QiIsImZpbGUiOiJwYWNrYWdlcy9kb2NzL3NyYy9hcHAvY29tcG9uZW50cy9hbmNob3JzL2FuY2hvcnMuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5hbmNob3JzLW1lbnUge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDY0cHg7XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcblxuICAgICZfX2xpc3Qge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBtYXJnaW4tdG9wOiAyNXB4O1xuICAgIH1cblxuICAgICZfX2xpc3QtZWxlbWVudCB7XG4gICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICAgICAgcGFkZGluZzogNnB4IDE2cHg7XG4gICAgfVxufVxuXG4iXX0= */";
      /***/
    },

    /***/
    "RfXV":
    /*!****************************************************************************!*\
      !*** ./packages/docs/src/app/components/main-layout/main-layout.module.ts ***!
      \****************************************************************************/

    /*! exports provided: MainLayoutModule */

    /***/
    function RfXV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MainLayoutModule", function () {
        return MainLayoutModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/dropdown */
      "kGUy");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tree */
      "wd6P");
      /* harmony import */


      var _anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ../anchors/anchors.module */
      "3Xtq");
      /* harmony import */


      var _footer_footer_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ../footer/footer.module */
      "Ar9S");
      /* harmony import */


      var _navbar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ../navbar */
      "pNyw");
      /* harmony import */


      var _sidenav_sidenav_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ../sidenav/sidenav.module */
      "EQR/");
      /* harmony import */


      var _main_layout_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ./main-layout.component */
      "0PwA");

      var MainLayoutModule = function MainLayoutModule() {
        _classCallCheck(this, MainLayoutModule);
      };

      MainLayoutModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__["AnchorsModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"], _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__["McTreeModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__["McButtonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__["McIconModule"], _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_5__["McDropdownModule"], _navbar__WEBPACK_IMPORTED_MODULE_10__["NavbarModule"], _sidenav_sidenav_module__WEBPACK_IMPORTED_MODULE_11__["SidenavModule"], _footer_footer_module__WEBPACK_IMPORTED_MODULE_9__["FooterModule"]],
        exports: [_main_layout_component__WEBPACK_IMPORTED_MODULE_12__["MainLayoutComponent"]],
        declarations: [_main_layout_component__WEBPACK_IMPORTED_MODULE_12__["MainLayoutComponent"]]
      })], MainLayoutModule);
      /***/
    },

    /***/
    "RnhZ":
    /*!**************************************************!*\
      !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
      \**************************************************/

    /*! no static exports found */

    /***/
    function RnhZ(module, exports, __webpack_require__) {
      var map = {
        "./af": "K/tc",
        "./af.js": "K/tc",
        "./ar": "jnO4",
        "./ar-dz": "o1bE",
        "./ar-dz.js": "o1bE",
        "./ar-kw": "Qj4J",
        "./ar-kw.js": "Qj4J",
        "./ar-ly": "HP3h",
        "./ar-ly.js": "HP3h",
        "./ar-ma": "CoRJ",
        "./ar-ma.js": "CoRJ",
        "./ar-sa": "gjCT",
        "./ar-sa.js": "gjCT",
        "./ar-tn": "bYM6",
        "./ar-tn.js": "bYM6",
        "./ar.js": "jnO4",
        "./az": "SFxW",
        "./az.js": "SFxW",
        "./be": "H8ED",
        "./be.js": "H8ED",
        "./bg": "hKrs",
        "./bg.js": "hKrs",
        "./bm": "p/rL",
        "./bm.js": "p/rL",
        "./bn": "kEOa",
        "./bn.js": "kEOa",
        "./bo": "0mo+",
        "./bo.js": "0mo+",
        "./br": "aIdf",
        "./br.js": "aIdf",
        "./bs": "JVSJ",
        "./bs.js": "JVSJ",
        "./ca": "1xZ4",
        "./ca.js": "1xZ4",
        "./cs": "PA2r",
        "./cs.js": "PA2r",
        "./cv": "A+xa",
        "./cv.js": "A+xa",
        "./cy": "l5ep",
        "./cy.js": "l5ep",
        "./da": "DxQv",
        "./da.js": "DxQv",
        "./de": "tGlX",
        "./de-at": "s+uk",
        "./de-at.js": "s+uk",
        "./de-ch": "u3GI",
        "./de-ch.js": "u3GI",
        "./de.js": "tGlX",
        "./dv": "WYrj",
        "./dv.js": "WYrj",
        "./el": "jUeY",
        "./el.js": "jUeY",
        "./en-au": "Dmvi",
        "./en-au.js": "Dmvi",
        "./en-ca": "OIYi",
        "./en-ca.js": "OIYi",
        "./en-gb": "Oaa7",
        "./en-gb.js": "Oaa7",
        "./en-ie": "4dOw",
        "./en-ie.js": "4dOw",
        "./en-il": "czMo",
        "./en-il.js": "czMo",
        "./en-nz": "b1Dy",
        "./en-nz.js": "b1Dy",
        "./eo": "Zduo",
        "./eo.js": "Zduo",
        "./es": "iYuL",
        "./es-do": "CjzT",
        "./es-do.js": "CjzT",
        "./es-us": "Vclq",
        "./es-us.js": "Vclq",
        "./es.js": "iYuL",
        "./et": "7BjC",
        "./et.js": "7BjC",
        "./eu": "D/JM",
        "./eu.js": "D/JM",
        "./fa": "jfSC",
        "./fa.js": "jfSC",
        "./fi": "gekB",
        "./fi.js": "gekB",
        "./fo": "ByF4",
        "./fo.js": "ByF4",
        "./fr": "nyYc",
        "./fr-ca": "2fjn",
        "./fr-ca.js": "2fjn",
        "./fr-ch": "Dkky",
        "./fr-ch.js": "Dkky",
        "./fr.js": "nyYc",
        "./fy": "cRix",
        "./fy.js": "cRix",
        "./gd": "9rRi",
        "./gd.js": "9rRi",
        "./gl": "iEDd",
        "./gl.js": "iEDd",
        "./gom-latn": "DKr+",
        "./gom-latn.js": "DKr+",
        "./gu": "4MV3",
        "./gu.js": "4MV3",
        "./he": "x6pH",
        "./he.js": "x6pH",
        "./hi": "3E1r",
        "./hi.js": "3E1r",
        "./hr": "S6ln",
        "./hr.js": "S6ln",
        "./hu": "WxRl",
        "./hu.js": "WxRl",
        "./hy-am": "1rYy",
        "./hy-am.js": "1rYy",
        "./id": "UDhR",
        "./id.js": "UDhR",
        "./is": "BVg3",
        "./is.js": "BVg3",
        "./it": "bpih",
        "./it.js": "bpih",
        "./ja": "B55N",
        "./ja.js": "B55N",
        "./jv": "tUCv",
        "./jv.js": "tUCv",
        "./ka": "IBtZ",
        "./ka.js": "IBtZ",
        "./kk": "bXm7",
        "./kk.js": "bXm7",
        "./km": "6B0Y",
        "./km.js": "6B0Y",
        "./kn": "PpIw",
        "./kn.js": "PpIw",
        "./ko": "Ivi+",
        "./ko.js": "Ivi+",
        "./ku": "JCF/",
        "./ku.js": "JCF/",
        "./ky": "lgnt",
        "./ky.js": "lgnt",
        "./lb": "RAwQ",
        "./lb.js": "RAwQ",
        "./lo": "sp3z",
        "./lo.js": "sp3z",
        "./lt": "JvlW",
        "./lt.js": "JvlW",
        "./lv": "uXwI",
        "./lv.js": "uXwI",
        "./me": "KTz0",
        "./me.js": "KTz0",
        "./mi": "aIsn",
        "./mi.js": "aIsn",
        "./mk": "aQkU",
        "./mk.js": "aQkU",
        "./ml": "AvvY",
        "./ml.js": "AvvY",
        "./mn": "lYtQ",
        "./mn.js": "lYtQ",
        "./mr": "Ob0Z",
        "./mr.js": "Ob0Z",
        "./ms": "6+QB",
        "./ms-my": "ZAMP",
        "./ms-my.js": "ZAMP",
        "./ms.js": "6+QB",
        "./mt": "G0Uy",
        "./mt.js": "G0Uy",
        "./my": "honF",
        "./my.js": "honF",
        "./nb": "bOMt",
        "./nb.js": "bOMt",
        "./ne": "OjkT",
        "./ne.js": "OjkT",
        "./nl": "+s0g",
        "./nl-be": "2ykv",
        "./nl-be.js": "2ykv",
        "./nl.js": "+s0g",
        "./nn": "uEye",
        "./nn.js": "uEye",
        "./pa-in": "8/+R",
        "./pa-in.js": "8/+R",
        "./pl": "jVdC",
        "./pl.js": "jVdC",
        "./pt": "8mBD",
        "./pt-br": "0tRk",
        "./pt-br.js": "0tRk",
        "./pt.js": "8mBD",
        "./ro": "lyxo",
        "./ro.js": "lyxo",
        "./ru": "lXzo",
        "./ru.js": "lXzo",
        "./sd": "Z4QM",
        "./sd.js": "Z4QM",
        "./se": "//9w",
        "./se.js": "//9w",
        "./si": "7aV9",
        "./si.js": "7aV9",
        "./sk": "e+ae",
        "./sk.js": "e+ae",
        "./sl": "gVVK",
        "./sl.js": "gVVK",
        "./sq": "yPMs",
        "./sq.js": "yPMs",
        "./sr": "zx6S",
        "./sr-cyrl": "E+lV",
        "./sr-cyrl.js": "E+lV",
        "./sr.js": "zx6S",
        "./ss": "Ur1D",
        "./ss.js": "Ur1D",
        "./sv": "X709",
        "./sv.js": "X709",
        "./sw": "dNwA",
        "./sw.js": "dNwA",
        "./ta": "PeUW",
        "./ta.js": "PeUW",
        "./te": "XLvN",
        "./te.js": "XLvN",
        "./tet": "V2x9",
        "./tet.js": "V2x9",
        "./tg": "Oxv6",
        "./tg.js": "Oxv6",
        "./th": "EOgW",
        "./th.js": "EOgW",
        "./tl-ph": "Dzi0",
        "./tl-ph.js": "Dzi0",
        "./tlh": "z3Vd",
        "./tlh.js": "z3Vd",
        "./tr": "DoHr",
        "./tr.js": "DoHr",
        "./tzl": "z1FC",
        "./tzl.js": "z1FC",
        "./tzm": "wQk9",
        "./tzm-latn": "tT3J",
        "./tzm-latn.js": "tT3J",
        "./tzm.js": "wQk9",
        "./ug-cn": "YRex",
        "./ug-cn.js": "YRex",
        "./uk": "raLr",
        "./uk.js": "raLr",
        "./ur": "UpQW",
        "./ur.js": "UpQW",
        "./uz": "Loxo",
        "./uz-latn": "AQ68",
        "./uz-latn.js": "AQ68",
        "./uz.js": "Loxo",
        "./vi": "KSF8",
        "./vi.js": "KSF8",
        "./x-pseudo": "/X5v",
        "./x-pseudo.js": "/X5v",
        "./yo": "fzPg",
        "./yo.js": "fzPg",
        "./zh-cn": "XDpg",
        "./zh-cn.js": "XDpg",
        "./zh-hk": "SatO",
        "./zh-hk.js": "SatO",
        "./zh-tw": "kOpN",
        "./zh-tw.js": "kOpN"
      };

      function webpackContext(req) {
        var id = webpackContextResolve(req);
        return __webpack_require__(id);
      }

      function webpackContextResolve(req) {
        if (!__webpack_require__.o(map, req)) {
          var e = new Error("Cannot find module '" + req + "'");
          e.code = 'MODULE_NOT_FOUND';
          throw e;
        }

        return map[req];
      }

      webpackContext.keys = function webpackContextKeys() {
        return Object.keys(map);
      };

      webpackContext.resolve = webpackContextResolve;
      module.exports = webpackContext;
      webpackContext.id = "RnhZ";
      /***/
    },

    /***/
    "RtxV":
    /*!****************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-autocomplete.js ***!
      \****************************************************************/

    /*! exports provided: AUTOCOMPLETE_BORDER_WIDTH, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MC_AUTOCOMPLETE_DEFAULT_OPTIONS, MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MC_AUTOCOMPLETE_SCROLL_STRATEGY, MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, McAutocomplete, McAutocompleteModule, McAutocompleteOrigin, McAutocompleteSelectedEvent, McAutocompleteTrigger, getMcAutocompleteMissingPanelError */

    /***/
    function RtxV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_BORDER_WIDTH", function () {
        return AUTOCOMPLETE_BORDER_WIDTH;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_OPTION_HEIGHT", function () {
        return AUTOCOMPLETE_OPTION_HEIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_PANEL_HEIGHT", function () {
        return AUTOCOMPLETE_PANEL_HEIGHT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_VALUE_ACCESSOR", function () {
        return MAT_AUTOCOMPLETE_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_DEFAULT_OPTIONS", function () {
        return MC_AUTOCOMPLETE_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY", function () {
        return MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_SCROLL_STRATEGY", function () {
        return MC_AUTOCOMPLETE_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY", function () {
        return MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
        return MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAutocomplete", function () {
        return McAutocomplete;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAutocompleteModule", function () {
        return McAutocompleteModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAutocompleteOrigin", function () {
        return McAutocompleteOrigin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAutocompleteSelectedEvent", function () {
        return McAutocompleteSelectedEvent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAutocompleteTrigger", function () {
        return McAutocompleteTrigger;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcAutocompleteMissingPanelError", function () {
        return getMcAutocompleteMissingPanelError;
      });
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "7KAL");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: autocomplete.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Autocomplete IDs need to be unique across components, so this counter exists outside of
       * the component definition.
       * @type {?}
       */


      var uniqueAutocompleteIdCounter = 0;

      var McAutocompleteSelectedEvent =
      /**
       * @param {?} source
       * @param {?} option
       */
      function McAutocompleteSelectedEvent(source, option) {
        _classCallCheck(this, McAutocompleteSelectedEvent);

        this.source = source;
        this.option = option;
      };

      if (false) {}
      /**
       * Default `mc-autocomplete` options that can be overridden.
       * @record
       */


      function McAutocompleteDefaultOptions() {}

      if (false) {}
      /**
       * Injection token to be used to override the default options for `mc-autocomplete`.
       * @type {?}
       */


      var MC_AUTOCOMPLETE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-autocomplete-default-options', {
        providedIn: 'root',
        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY
      }); // tslint:disable-next-line naming-convention

      /**
       * @return {?}
       */

      function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {
        return {
          autoActiveFirstOption: true
        };
      }

      var McAutocomplete = /*#__PURE__*/function () {
        /**
         * @param {?} changeDetectorRef
         * @param {?} elementRef
         * @param {?} defaults
         */
        function McAutocomplete(changeDetectorRef, elementRef, defaults) {
          _classCallCheck(this, McAutocomplete);

          this.changeDetectorRef = changeDetectorRef;
          this.elementRef = elementRef;
          /**
           * Unique ID to be used by autocomplete trigger's "aria-owns" property.
           */

          this.id = "mc-autocomplete-".concat(uniqueAutocompleteIdCounter++);
          /**
           * Whether the autocomplete panel should be visible, depending on option length.
           */

          this.showPanel = false;
          /**
           * Function that maps an option's control value to its display value in the trigger.
           */

          this.displayWith = null;
          /**
           * Event that is emitted whenever an option from the list is selected.
           */

          this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * Event that is emitted when the autocomplete panel is opened.
           */

          this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          /**
           * Event that is emitted when the autocomplete panel is closed.
           */

          this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          this._classList = {};
          this._isOpen = false;
          this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;
        }
        /**
         * Takes classes set on the host mc-autocomplete element and applies them to the panel
         * inside the overlay container to allow for easy styling.
         * @return {?}
         */


        _createClass(McAutocomplete, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__["ActiveDescendantKeyManager"](this.options);
            this.setVisibility();
          }
          /**
           * @param {?} scrollTop
           * @return {?}
           */

        }, {
          key: "setScrollTop",
          value: function setScrollTop(scrollTop) {
            if (this.panel) {
              this.panel.nativeElement.scrollTop = scrollTop;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "getScrollTop",
          value: function getScrollTop() {
            return this.panel ? this.panel.nativeElement.scrollTop : 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "setVisibility",
          value: function setVisibility() {
            this.showPanel = !!this.options.length;
            this._classList['mc-autocomplete_visible'] = this.showPanel;
            this._classList['mc-autocomplete_hidden'] = !this.showPanel;
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "emitSelectEvent",
          value: function emitSelectEvent(option) {
            /** @type {?} */
            var event = new McAutocompleteSelectedEvent(this, option);
            this.optionSelected.emit(event);
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            this.keyManager.onKeydown(event);
          }
        }, {
          key: "classList",
          get: function get() {
            return this._classList;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            var _this99 = this;

            if (value && value.length) {
              value.split(' ').forEach(
              /**
              * @param {?} className
              * @return {?}
              */
              function (className) {
                return _this99._classList[className.trim()] = true;
              });
              this.elementRef.nativeElement.className = '';
            }
          }
          /**
           * Whether the first option should be highlighted when the autocomplete panel is opened.
           * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.
           * @return {?}
           */

        }, {
          key: "autoActiveFirstOption",
          get: function get() {
            return this._autoActiveFirstOption;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._autoActiveFirstOption = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "isOpen",
          get: function get() {
            return this._isOpen && this.showPanel;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._isOpen = value;
          }
        }]);

        return McAutocomplete;
      }();

      McAutocomplete.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-autocomplete',
          exportAs: 'mcAutocomplete',
          template: "<ng-template>\n    <div class=\"mc-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"classList\" #panel>\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n",
          host: {
            "class": 'mc-autocomplete'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          providers: [{
            provide: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_OPTION_PARENT_COMPONENT"],
            useExisting: McAutocomplete
          }],
          styles: [".mc-autocomplete-trigger{text-overflow:ellipsis}.mc-autocomplete-panel{-webkit-overflow-scrolling:touch;border-bottom-left-radius:3px;border-bottom-right-radius:3px;border-style:solid;border-width:1px;margin-top:-1px;max-height:256px;max-width:none;min-width:100%;overflow:auto;padding:4px 0;position:relative;visibility:hidden;width:100%}.mc-autocomplete-panel.mc-autocomplete_visible{visibility:visible}.mc-autocomplete-panel.mc-autocomplete_hidden{visibility:hidden}.mc-autocomplete-panel-above .mc-autocomplete-panel{border-radius:0;border-top-left-radius:3px;border-top-right-radius:3px}.mc-autocomplete-panel .mc-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mc-autocomplete-panel,.cdk-high-contrast-active :host .mc-autocomplete-panel{outline:1px solid}"]
        }]
      }];
      /** @nocollapse */

      McAutocomplete.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_AUTOCOMPLETE_DEFAULT_OPTIONS]
          }]
        }];
      };

      McAutocomplete.propDecorators = {
        template: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
          args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], {
            "static": true
          }]
        }],
        panel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
          args: ['panel', {
            "static": false
          }]
        }],
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
          args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOption"], {
            descendants: true
          }]
        }],
        optionGroups: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
          args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptgroup"]]
        }],
        displayWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        panelWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        optionSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        opened: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        closed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        classList: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['class']
        }],
        autoActiveFirstOption: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: autocomplete-origin.directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Directive applied to an element to make it usable
       * as a connection point for an autocomplete panel.
       */


      var McAutocompleteOrigin =
      /**
       * @param {?} elementRef
       */
      function McAutocompleteOrigin(elementRef) {
        _classCallCheck(this, McAutocompleteOrigin);

        this.elementRef = elementRef;
      };

      McAutocompleteOrigin.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mcAutocompleteOrigin]',
          exportAs: 'mcAutocompleteOrigin'
        }]
      }];
      /** @nocollapse */

      McAutocompleteOrigin.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: autocomplete-trigger.directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * The height of each autocomplete option.
       * @type {?}
       */


      var AUTOCOMPLETE_OPTION_HEIGHT = 32;
      /**
       * The total height of the autocomplete panel.
       * @type {?}
       */

      var AUTOCOMPLETE_PANEL_HEIGHT = 256;
      /** @type {?} */

      var AUTOCOMPLETE_BORDER_WIDTH = 2;
      /**
       * Injection token that determines the scroll handling while the autocomplete panel is open.
       * @type {?}
       */

      var MC_AUTOCOMPLETE_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-autocomplete-scroll-strategy'); // tslint:disable-next-line naming-convention

      /**
       * @param {?} overlay
       * @return {?}
       */

      function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition();
          }
        );
      }
      /** @type {?} */


      var MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"]],
        useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY
      };
      /**
       * Provider that allows the autocomplete to register as a ControlValueAccessor.
       * \@docs-private
       * @type {?}
       */

      var MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McAutocompleteTrigger;
        }),
        multi: true
      };
      /**
       * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
       * \@docs-private
       * @return {?}
       */

      function getMcAutocompleteMissingPanelError() {
        return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' + 'Make sure that the id passed to the `mcAutocomplete` is correct and that ' + 'you\'re attempting to open it after the ngAfterContentInit hook.');
      }

      var McAutocompleteTrigger = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} viewContainerRef
         * @param {?} changeDetectorRef
         * @param {?} overlay
         * @param {?} zone
         * @param {?} scrollStrategy
         * @param {?} dir
         * @param {?} formField
         * @param {?} document
         * @param {?=} viewportRuler
         */
        function McAutocompleteTrigger(elementRef, viewContainerRef, changeDetectorRef, overlay, zone, scrollStrategy, dir, formField, document, viewportRuler) {
          var _this100 = this;

          _classCallCheck(this, McAutocompleteTrigger);

          this.elementRef = elementRef;
          this.viewContainerRef = viewContainerRef;
          this.changeDetectorRef = changeDetectorRef;
          this.overlay = overlay;
          this.zone = zone;
          this.dir = dir;
          this.formField = formField;
          this.document = document;
          this.viewportRuler = viewportRuler; // @ts-ignore

          this.optionSelections = Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["defer"])(
          /**
          * @return {?}
          */
          function () {
            if (_this100.autocomplete && _this100.autocomplete.options) {
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"]).apply(void 0, _toConsumableArray(_this100.autocomplete.options.map(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.onSelectionChange;
              })));
            } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
            // Return a stream that we'll replace with the real one once everything is in place.


            return _this100.zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(
            /**
            * @return {?}
            */
            function () {
              return _this100.optionSelections;
            }));
          });
          /**
           * `autocomplete` attribute to be set on the input element.
           * \@docs-private
           */

          this.autocompleteAttribute = 'off';
          this._autocompleteDisabled = false;
          this.overlayAttached = false;
          this.componentDestroyed = false;
          /**
           * Subscription to viewport size changes.
           */

          this.viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_12__["Subscription"].EMPTY;
          /**
           * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,
           * closed autocomplete from being reopened if the user switches to another browser tab and then
           * comes back.
           */

          this.canOpenOnNextFocus = true;
          /**
           * Stream of keyboard events that can close the panel.
           */

          this.closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
          /**
           * `View -> model callback called when value changes`
           */
          // tslint:disable-next-line no-empty

          this.onChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * `View -> model callback called when autocomplete has been touched`
           */
          // tslint:disable-next-line no-empty


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
          /**
           * Event handler for when the window is blurred. Needs to be an
           * arrow function in order to preserve the context.
           */


          this.windowBlurHandler =
          /**
          * @return {?}
          */
          function () {
            // If the user blurred the window while the autocomplete is focused, it means that it'll be
            // refocused when they come back. In this case we want to skip the first focus event, if the
            // pane was closed, in order to avoid reopening it unintentionally.
            _this100.canOpenOnNextFocus = _this100.document.activeElement !== _this100.elementRef.nativeElement || _this100.panelOpen;
          }; // tslint:disable-next-line no-typeof-undefined


          if (typeof window !== 'undefined') {
            zone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              window.addEventListener('blur', _this100.windowBlurHandler);
            });
          }

          this.scrollStrategy = scrollStrategy;
        }
        /**
         * The currently active option, coerced to MatOption type.
         * @return {?}
         */


        _createClass(McAutocompleteTrigger, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            // tslint:disable-next-line no-typeof-undefined
            if (typeof window !== 'undefined') {
              window.removeEventListener('blur', this.windowBlurHandler);
            }

            this.viewportSubscription.unsubscribe();
            this.componentDestroyed = true;
            this.destroyPanel();
            this.closeKeyEventStream.complete();
          }
          /**
           * Opens the autocomplete suggestion panel.
           * @return {?}
           */

        }, {
          key: "openPanel",
          value: function openPanel() {
            this.attachOverlay();
          }
          /**
           * @return {?}
           */

        }, {
          key: "closePanel",
          value: function closePanel() {
            if (!this.overlayAttached) {
              return;
            }

            if (this.panelOpen) {
              this.autocomplete.closed.emit();
            }

            this.autocomplete.isOpen = this.overlayAttached = false;

            if (this.overlayRef && this.overlayRef.hasAttached()) {
              this.overlayRef.detach();
              this.closingActionsSubscription.unsubscribe();
            } // Note that in some cases this can end up being called after the component is destroyed.
            // Add a check to ensure that we don't try to run change detection on a destroyed view.


            if (!this.componentDestroyed) {
              // We need to trigger change detection manually, because
              // `fromEvent` doesn't seem to do it at the proper time.
              // This ensures that the label is reset when the
              // user clicks outside.
              this.changeDetectorRef.detectChanges();
            }
          }
          /**
           * Updates the position of the autocomplete suggestion panel to ensure that it fits all options
           * within the viewport.
           * @return {?}
           */

        }, {
          key: "updatePosition",
          value: function updatePosition() {
            if (this.overlayAttached) {
              /** @type {?} */
              this.overlayRef.updatePosition();
            }
          }
          /**
           * A stream of actions that should close the autocomplete panel, including
           * when an option is selected, on blur, and when TAB is pressed.
           * @return {?}
           */

        }, {
          key: "writeValue",
          // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} value
           * @return {?}
           */
          value: function writeValue(value) {
            var _this101 = this;

            Promise.resolve(null).then(
            /**
            * @return {?}
            */
            function () {
              return _this101.setTriggerValue(value);
            });
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.elementRef.nativeElement.disabled = isDisabled;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            // tslint:disable-next-line deprecation

            /** @type {?} */
            var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE
            // in line with other browsers. By default, pressing escape on IE will cause it to revert
            // the input value to the one that it had on focus, however it won't dispatch any events
            // which means that the model value will be out of sync with the view.

            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"]) {
              event.preventDefault();
            }

            if (this.activeOption && keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] && this.panelOpen) {
              this.activeOption.selectViaInteraction();
              this.resetActiveItem();
              event.preventDefault();
            } else if (this.autocomplete) {
              /** @type {?} */
              var prevActiveItem = this.autocomplete.keyManager.activeItem;

              if (this.panelOpen || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["TAB"]) {
                this.autocomplete.onKeydown(event);
              } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"] && this.canOpen()) {
                this.openPanel();
              }
              /** @type {?} */


              var isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"];

              if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {
                this.scrollToOption();
              }
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleInput",
          value: function handleInput(event) {
            /** @type {?} */
            var target =
            /** @type {?} */
            event.target;
            /** @type {?} */

            var value = target.value; // Based on `NumberValueAccessor` from forms.

            if (target.type === 'number') {
              value = value === '' ? null : parseFloat(value);
            } // If the input has a placeholder, IE will fire the `input` event on page load,
            // focus and blur, in addition to when the user actually changed the value. To
            // filter out all of the extra events, we save the value on focus and between
            // `input` events, and we check whether it changed.
            // See: https://connect.microsoft.com/IE/feedback/details/885747/


            if (this.previousValue !== value) {
              this.previousValue = value;
              this.onChange(value);

              if (this.canOpen() && this.document.activeElement === event.target) {
                this.openPanel();
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleFocus",
          value: function handleFocus() {
            if (!this.canOpenOnNextFocus) {
              this.canOpenOnNextFocus = true;
            } else if (this.canOpen()) {
              this.previousValue = this.elementRef.nativeElement.value;
              this.attachOverlay();
            }
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick($event) {
            if (this.canOpen() && this.document.activeElement === $event.target) {
              this.openPanel();
            }
          }
          /**
           * Stream of clicks outside of the autocomplete panel.
           * @private
           * @return {?}
           */

        }, {
          key: "getOutsideClickStream",
          value: function getOutsideClickStream() {
            var _this102 = this;

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(
            /** @type {?} */
            // tslint:disable-next-line: no-unnecessary-type-assertion
            Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["fromEvent"])(this.document, 'click'),
            /** @type {?} */
            // tslint:disable-next-line: no-unnecessary-type-assertion
            Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["fromEvent"])(this.document, 'touchend')).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              /** @type {?} */
              var clickTarget =
              /** @type {?} */
              event.target;
              /** @type {?} */

              var formField = _this102.formField ? _this102.formField._elementRef.nativeElement : null;
              /** @type {?} */

              var customOrigin = _this102.connectedTo ? _this102.connectedTo.elementRef.nativeElement : null;
              return _this102.overlayAttached && clickTarget !== _this102.elementRef.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!_this102.overlayRef && !_this102.overlayRef.overlayElement.contains(clickTarget);
            }));
          }
          /**
           * Given that we are not actually focusing active options, we must manually adjust scroll
           * to reveal options below the fold. First, we find the offset of the option from the top
           * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
           * the panel height + the option height, so the active option will be just visible at the
           * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
           * will become the offset. If that offset is visible within the panel already, the scrollTop is
           * not adjusted.
           * @private
           * @return {?}
           */

        }, {
          key: "scrollToOption",
          value: function scrollToOption() {
            /** @type {?} */
            var index = this.autocomplete.keyManager.activeItemIndex || 0;
            /** @type {?} */

            var labelCount = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["countGroupLabelsBeforeOption"])(index, this.autocomplete.options, this.autocomplete.optionGroups);
            /** @type {?} */

            var newScrollPosition = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getOptionScrollPosition"])(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete.getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);
            this.autocomplete.setScrollTop(newScrollPosition);
          }
          /**
           * This method listens to a stream of panel closing actions and resets the
           * stream every time the option list changes.
           * @private
           * @return {?}
           */

        }, {
          key: "subscribeToClosingActions",
          value: function subscribeToClosingActions() {
            var _this103 = this;

            /** @type {?} */
            var firstStable = this.zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1));
            /** @type {?} */

            var optionChanges = this.autocomplete.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["tap"])(
            /**
            * @return {?}
            */
            function () {
              return _this103.positionStrategy.reapplyLastPosition();
            }), // Defer emitting to the stream until the next tick, because changing
            // bindings in here will cause "changed after checked" errors.
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["delay"])(0)); // When the zone is stable initially, and when the option list changes...

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams
            // that were created, and flatten it so our stream only emits closing events...
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var wasOpen = _this103.panelOpen;

              _this103.resetActiveItem();

              _this103.autocomplete.setVisibility();

              if (_this103.panelOpen) {
                /** @type {?} */
                _this103.overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`
                // event, because we may not have emitted it when the panel was attached. This
                // can happen if the users opens the panel and there are no options, but the
                // options come in slightly later or as a result of the value changing.


                if (wasOpen !== _this103.panelOpen) {
                  _this103.autocomplete.opened.emit();
                }
              }

              return _this103.panelClosingActions;
            }), // when the first closing event occurs...
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1)) // set the value, close the panel, and complete.
            .subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              return _this103.setValueAndClose(event);
            });
          }
          /**
           * Destroys the autocomplete suggestion panel.
           * @private
           * @return {?}
           */

        }, {
          key: "destroyPanel",
          value: function destroyPanel() {
            if (this.overlayRef) {
              this.closePanel();
              this.overlayRef.dispose();
              this.overlayRef = null;
            }
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setTriggerValue",
          value: function setTriggerValue(value) {
            /** @type {?} */
            var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.
            // The display value can also be the number zero and shouldn't fall back to an empty string.

            /** @type {?} */

            var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go
            // through change detection.

            if (this.formField) {
              this.formField.control.value = inputValue;
            } else {
              this.elementRef.nativeElement.value = inputValue;
            }

            this.previousValue = inputValue;
          }
          /**
           * This method closes the panel, and if a value is specified, also sets the associated
           * control to that value. It will also mark the control as dirty if this interaction
           * stemmed from the user.
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "setValueAndClose",
          value: function setValueAndClose(event) {
            if (event && event.source) {
              this.clearPreviousSelectedOption(event.source);
              this.setTriggerValue(event.source.value);
              this.onChange(event.source.value);
              this.elementRef.nativeElement.focus();
              this.autocomplete.emitSelectEvent(event.source);
            }

            this.closePanel();
          }
          /**
           * Clear any previous selected option and emit a selection change event for this option
           * @private
           * @param {?} skip
           * @return {?}
           */

        }, {
          key: "clearPreviousSelectedOption",
          value: function clearPreviousSelectedOption(skip) {
            this.autocomplete.options.forEach(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              if (option !== skip && option.selected) {
                option.deselect();
              }
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "attachOverlay",
          value: function attachOverlay() {
            var _this104 = this;

            if (!this.autocomplete) {
              throw getMcAutocompleteMissingPanelError();
            }
            /** @type {?} */


            var overlayRef = this.overlayRef;

            if (!overlayRef) {
              this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["TemplatePortal"](this.autocomplete.template, this.viewContainerRef);
              overlayRef = this.overlay.create(this.getOverlayConfig());
              this.overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of
              // the overlay event targeting provided by the CDK overlay.

              overlayRef.keydownEvents().subscribe(
              /**
              * @param {?} event
              * @return {?}
              */
              function (event) {
                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
                // tslint:disable-next-line deprecation
                if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"] || event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] && event.altKey) {
                  _this104.resetActiveItem();

                  _this104.closeKeyEventStream.next();
                }
              });

              if (this.viewportRuler) {
                this.viewportSubscription = this.viewportRuler.change().subscribe(
                /**
                * @return {?}
                */
                function () {
                  if (_this104.panelOpen && overlayRef) {
                    overlayRef.updateSize({
                      width: _this104.getPanelWidth()
                    });
                  }
                });
              }
            } else {
              /** @type {?} */
              var position =
              /** @type {?} */
              overlayRef.getConfig().positionStrategy; // Update the trigger, panel width and direction, in case anything has changed.

              position.setOrigin(this.getConnectedElement());
              overlayRef.updateSize({
                width: this.getPanelWidth()
              });
            }

            if (overlayRef && !overlayRef.hasAttached()) {
              overlayRef.attach(this.portal);
              this.closingActionsSubscription = this.subscribeToClosingActions();
            }
            /** @type {?} */


            var wasOpen = this.panelOpen;
            this.autocomplete.setVisibility();
            this.autocomplete.isOpen = this.overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the
            // autocomplete won't be shown if there are no options.

            if (this.panelOpen && wasOpen !== this.panelOpen) {
              this.autocomplete.opened.emit();
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getOverlayConfig",
          value: function getOverlayConfig() {
            return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayConfig"]({
              positionStrategy: this.getOverlayPosition(),
              scrollStrategy: this.scrollStrategy(),
              width: this.getPanelWidth(),
              direction: this.dir
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getOverlayPosition",
          value: function getOverlayPosition() {
            this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions(
            /** @type {?} */
            [{
              originX: 'start',
              originY: 'bottom',
              overlayX: 'start',
              overlayY: 'top'
            }, {
              originX: 'start',
              originY: 'top',
              overlayX: 'start',
              overlayY: 'bottom',
              // The overlay edge connected to the trigger should have squared corners, while
              // the opposite end has rounded corners. We apply a CSS class to swap the
              // border-radius based on the overlay position.
              panelClass: 'mc-autocomplete-panel-above'
            }]);
            return this.positionStrategy;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getConnectedElement",
          value: function getConnectedElement() {
            if (this.connectedTo) {
              return this.connectedTo.elementRef;
            }

            return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getPanelWidth",
          value: function getPanelWidth() {
            return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getHostWidth",
          value: function getHostWidth() {
            return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
          }
          /**
           * Resets the active item to -1 so arrow events will activate the
           * correct options, or to 0 if the consumer opted into it.
           * @private
           * @return {?}
           */

        }, {
          key: "resetActiveItem",
          value: function resetActiveItem() {
            this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "canOpen",
          value: function canOpen() {
            /** @type {?} */
            var element = this.elementRef.nativeElement;
            return !element.readOnly && !element.disabled && !this._autocompleteDisabled;
          }
        }, {
          key: "activeOption",
          get: function get() {
            if (this.autocomplete && this.autocomplete.keyManager) {
              return this.autocomplete.keyManager.activeItem;
            }

            return null;
          }
          /**
           * @return {?}
           */

        }, {
          key: "panelOpen",
          get: function get() {
            return this.overlayAttached && this.autocomplete.showPanel;
          }
          /**
           * Whether the autocomplete is disabled. When disabled, the element will
           * act as a regular input and the user won't be able to open the panel.
           * @return {?}
           */

        }, {
          key: "autocompleteDisabled",
          get: function get() {
            return this._autocompleteDisabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._autocompleteDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
          }
        }, {
          key: "panelClosingActions",
          get: function get() {
            var _this105 = this;

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(this.optionSelections, this.autocomplete.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(
            /**
            * @return {?}
            */
            function () {
              return _this105.overlayAttached;
            })), this.closeKeyEventStream, this.getOutsideClickStream(), this.overlayRef ? this.overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(
            /**
            * @return {?}
            */
            function () {
              return _this105.overlayAttached;
            })) : Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["of"])()).pipe( // Normalize the output so we return a consistent type.
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["map"])(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              return event instanceof _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionSelectionChange"] ? event : null;
            }));
          }
        }]);

        return McAutocompleteTrigger;
      }();

      McAutocompleteTrigger.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: "input[mcAutocomplete], textarea[mcAutocomplete]",
          host: {
            "class": 'mc-autocomplete-trigger',
            '[attr.autocomplete]': 'autocompleteAttribute',
            // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
            // a little earlier. This avoids issues where IE delays the focusing of the input.
            '(focusin)': 'handleFocus()',
            '(blur)': 'onTouched()',
            '(input)': 'handleInput($event)',
            '(keydown)': 'handleKeydown($event)',
            '(click)': 'handleClick($event)'
          },
          exportAs: 'mcAutocompleteTrigger',
          providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]
        }]
      }];
      /** @nocollapse */

      McAutocompleteTrigger.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_AUTOCOMPLETE_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }]
        }, {
          type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_11__["McFormField"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"]]
          }]
        }, {
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ViewportRuler"]
        }];
      };

      McAutocompleteTrigger.propDecorators = {
        autocomplete: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['mcAutocomplete']
        }],
        connectedTo: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['mcAutocompleteConnectedTo']
        }],
        autocompleteAttribute: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['autocomplete']
        }],
        autocompleteDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['mcAutocompleteDisabled']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: autocomplete.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McAutocompleteModule = function McAutocompleteModule() {
        _classCallCheck(this, McAutocompleteModule);
      };

      McAutocompleteModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
          exports: [McAutocomplete, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"], McAutocompleteTrigger, McAutocompleteOrigin, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"]],
          declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],
          providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-autocomplete.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-autocomplete.js.map

      /***/
    },

    /***/
    "RuMu":
    /*!***************************************************************!*\
      !*** ./packages/docs/src/app/shared/doc-viewer/doc-viewer.ts ***!
      \***************************************************************/

    /*! exports provided: DocViewer */

    /***/
    function RuMu(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DocViewer", function () {
        return DocViewer;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common/http */
      "IheW");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/platform-browser */
      "cUpR");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../example-viewer/example-viewer */
      "iw/G");

      var DocViewer = /*#__PURE__*/function () {
        function DocViewer(_appRef, _componentFactoryResolver, _elementRef, _http, _injector, _viewContainerRef, _ngZone, _domSanitizer) {
          _classCallCheck(this, DocViewer);

          this._appRef = _appRef;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._elementRef = _elementRef;
          this._http = _http;
          this._injector = _injector;
          this._viewContainerRef = _viewContainerRef;
          this._ngZone = _ngZone;
          this._domSanitizer = _domSanitizer;
          this.contentRendered = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          this.contentRenderFailed = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          /** The document text. It should not be HTML encoded. */

          this.textContent = '';
          this.portalHosts = [];
        }
        /** The URL of the document to display. */


        _createClass(DocViewer, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.clearLiveExamples();

            if (this.documentFetchSubscription) {
              this.documentFetchSubscription.unsubscribe();
            }
          }
          /** Fetch a document by URL. */

        }, {
          key: "fetchDocument",
          value: function fetchDocument(url) {
            var _this106 = this;

            // Cancel previous pending request
            if (this.documentFetchSubscription) {
              this.documentFetchSubscription.unsubscribe();
            }

            this.documentFetchSubscription = this._http.get(url, {
              responseType: 'text'
            }).subscribe(function (document) {
              return _this106.updateDocument(document);
            }, function (error) {
              return _this106.showError(url, error);
            });
          }
          /**
           * Updates the displayed document.
           * @param rawDocument The raw document content to show.
           */

        }, {
          key: "updateDocument",
          value: function updateDocument(rawDocument) {
            var _this107 = this;

            // Replace all relative fragment URLs with absolute fragment URLs. e.g. "#my-section" becomes
            // "/components/button/api#my-section". This is necessary because otherwise these fragment
            // links would redirect to "/#my-section".
            // tslint:disable-next-line:no-parameter-reassignment
            rawDocument = rawDocument.replace(/href="#([^"]*)"/g, function (_m, fragmentUrl) {
              var absoluteUrl = "".concat(location.pathname, "#").concat(fragmentUrl);
              return "href=\"".concat(_this107._domSanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_3__["SecurityContext"].URL, absoluteUrl), "\"");
            }); // tslint:disable-next-line:no-inner-html

            this._elementRef.nativeElement.innerHTML = rawDocument;
            this.textContent = this._elementRef.nativeElement.textContent;
            this.loadComponents('mosaic-docs-example', _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_6__["ExampleViewer"]); // Resolving and creating components dynamically in Angular happens synchronously, but since
            // we want to emit the output if the components are actually rendered completely, we wait
            // until the Angular zone becomes stable.

            this._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(function () {
              return _this107.contentRendered.next();
            });
          }
          /** Show an error that occurred when fetching a document. */

        }, {
          key: "showError",
          value: function showError(url, error) {
            var _this108 = this;

            // tslint:disable-next-line:no-console
            console.error(error);
            this._elementRef.nativeElement.innerText = "Failed to load document: ".concat(url, ". Error: ").concat(error.statusText);

            this._ngZone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(function () {
              return _this108.contentRenderFailed.next();
            });
          }
          /** Instantiate a ExampleViewer for each example. */

        }, {
          key: "loadComponents",
          value: function loadComponents(componentName, componentClass) {
            var _this109 = this;

            var exampleElements = this._elementRef.nativeElement.querySelectorAll("[".concat(componentName, "]"));

            Array.prototype.slice.call(exampleElements).forEach(function (element) {
              var example = element.getAttribute(componentName);
              var portalHost = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["DomPortalOutlet"](element, _this109._componentFactoryResolver, _this109._appRef, _this109._injector);
              var examplePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["ComponentPortal"](componentClass, _this109._viewContainerRef);
              var exampleViewer = portalHost.attach(examplePortal);
              exampleViewer.instance.example = example;

              _this109.portalHosts.push(portalHost);
            });
          }
        }, {
          key: "clearLiveExamples",
          value: function clearLiveExamples() {
            this.portalHosts.forEach(function (h) {
              return h.dispose();
            });
            this.portalHosts = [];
          }
        }, {
          key: "documentUrl",
          set: function set(url) {
            this.fetchDocument(url);
          }
        }]);

        return DocViewer;
      }();

      DocViewer.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
        }, {
          type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["DomSanitizer"]
        }];
      };

      DocViewer.propDecorators = {
        documentUrl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        contentRendered: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }],
        contentRenderFailed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
        }]
      };
      DocViewer = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'doc-viewer',
        template: 'Loading document...'
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"], _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["DomSanitizer"]])], DocViewer);
      /***/
    },

    /***/
    "S/AA":
    /*!*********************************************************!*\
      !*** ./packages/docs/src/app/shared/version/version.ts ***!
      \*********************************************************/

    /*! exports provided: mosaicVersion */

    /***/
    function SAA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mosaicVersion", function () {
        return mosaicVersion;
      });
      /* tslint:disable:no-var-requires */


      var packageJSON = __webpack_require__(
      /*! ../../../../../../package.json */
      "kiQV");
      /** This version will be used in footer and stackblitz. */


      var mosaicVersion = packageJSON.version;
      /***/
    },

    /***/
    "Snh7":
    /*!*********************************************************************!*\
      !*** ./packages/docs/src/app/components/footer/footer.component.ts ***!
      \*********************************************************************/

    /*! exports provided: FooterComponent */

    /***/
    function Snh7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FooterComponent", function () {
        return FooterComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_footer_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./footer.component.html */
      "gAVc");
      /* harmony import */


      var _footer_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./footer.component.scss */
      "ZGWQ");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var FooterComponent = function FooterComponent() {
        _classCallCheck(this, FooterComponent);
      };

      FooterComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'footer',
        template: _raw_loader_footer_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_footer_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      })], FooterComponent);
      /***/
    },

    /***/
    "Swjs":
    /*!*******************************************************!*\
      !*** ./packages/docs/src/environments/environment.ts ***!
      \*******************************************************/

    /*! exports provided: environment */

    /***/
    function Swjs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "environment", function () {
        return environment;
      }); // The file contents for the current environment will overwrite these during build.
      // The build system defaults to the dev environment which uses `environment.ts`, but if you do
      // `ng build --env=prod` then `environment.prod.ts` will be used instead.
      // The list of which env maps to which file can be found in `angular-cli.json`.


      var environment = {
        production: false
      };
      /***/
    },

    /***/
    "TIT3":
    /*!**********************************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/component-viewer/component-overview.template.html ***!
      \**********************************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function TIT3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div [@fadeInOut]=\"isLoad ? 'fadeIn' : 'fadeOut'\" >\n    <span class=\"mc-display-3 title\">\n        {{documentName}}\n    </span>\n    <div *ngIf=\"documentLost\" class=\"mc-alert mc-alert_error mc-alert_dismissible\">\n                <span>Oops, {{documentName}} component seems to be lost... But you can help us find it!\n                    Just send a Pull Request to this repository:\n                    <a class=\"docs-markdown__a\" href=\"//github.com/positive-js/mosaic/pulls\"> Mosaic</a>\n                </span>\n    </div>\n    <doc-viewer\n        documentUrl=\"docs-content/overviews/{{componentViewer.componentDocItem.packageName}}/{{componentViewer.componentDocItem.id}}.html\"\n        class=\"docs-component-view-text-content docs-component-overview\"\n        [class.docs-component-overview_hidden]=\"documentLost\"\n        (contentRendered)=\"scrollToSelectedContentSection()\"\n        (contentRenderFailed)=\"showDocumentLostAlert()\">\n    </doc-viewer>\n    <anchors #toc ></anchors>\n</div>\n";
      /***/
    },

    /***/
    "TuQC":
    /*!*****************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-button-toggle.js ***!
      \*****************************************************************/

    /*! exports provided: MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, McButtonToggle, McButtonToggleChange, McButtonToggleGroup, McButtonToggleModule */

    /***/
    function TuQC(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR", function () {
        return MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonToggle", function () {
        return McButtonToggle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonToggleChange", function () {
        return McButtonToggleChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonToggleGroup", function () {
        return McButtonToggleGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonToggleModule", function () {
        return McButtonToggleModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /**
       * @fileoverview added by tsickle
       * Generated from: button-toggle.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.
       * This allows it to support [(ngModel)].
       * \@docs-private
       * @type {?}
       */


      var MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McButtonToggleGroup;
        }),
        multi: true
      };
      /**
       * Change event object emitted by MсButtonToggle.
       */

      var McButtonToggleChange =
      /**
       * @param {?} source
       * @param {?} value
       */
      function McButtonToggleChange(source, value) {
        _classCallCheck(this, McButtonToggleChange);

        this.source = source;
        this.value = value;
      };

      if (false) {}
      /**
       * Exclusive selection button toggle group that behaves like a radio-button group.
       */


      var McButtonToggleGroup = /*#__PURE__*/function () {
        /**
         * @param {?} _changeDetector
         */
        function McButtonToggleGroup(_changeDetector) {
          _classCallCheck(this, McButtonToggleGroup);

          this._changeDetector = _changeDetector;
          /**
           * Event that emits whenever the value of the group changes.
           * Used to facilitate two-way data binding.
           * \@docs-private
           */

          this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * Event emitted when the group's value changes.
           */

          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          this._vertical = false;
          this._multiple = false;
          this._disabled = false;
          /**
           * The method to be called in order to update ngModel.
           * Now `ngModel` binding is not supported in multiple selection mode.
           */
          // tslint:disable-next-line:no-empty

          this.controlValueAccessorChangeFn =
          /**
          * @return {?}
          */
          function () {};
          /**
           * onTouch function registered via registerOnTouch (ControlValueAccessor).
           */
          // tslint:disable-next-line:no-empty


          this.onTouched =
          /**
          * @return {?}
          */
          function () {};
        }
        /**
         * Whether the toggle group is vertical.
         * @return {?}
         */


        _createClass(McButtonToggleGroup, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["SelectionModel"](this.multiple, undefined, false);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this$selectionModel;

            (_this$selectionModel = this.selectionModel).select.apply(_this$selectionModel, _toConsumableArray(this.buttonToggles.filter(
            /**
            * @param {?} toggle
            * @return {?}
            */
            function (toggle) {
              return toggle.checked;
            })));

            this.disabled = this._disabled;
          }
          /**
           * Sets the model value. Implemented as part of ControlValueAccessor.
           * @param {?} value Value to be set to the model.
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;

            this._changeDetector.markForCheck();
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.controlValueAccessorChangeFn = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
          /**
           * Dispatch change event with current selection and group value.
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent() {
            /** @type {?} */
            var selected = this.selected;
            /** @type {?} */

            var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;
            /** @type {?} */

            var event = new McButtonToggleChange(source, this.value);
            this.controlValueAccessorChangeFn(event.value);
            this.change.emit(event);
          }
          /**
           * Syncs a button toggle's selected state with the model value.
           * @param {?} toggle Toggle to be synced.
           * @param {?} select Whether the toggle should be selected.
           * @param {?=} isUserInput Whether the change was a result of a user interaction.
           * @return {?}
           */

        }, {
          key: "syncButtonToggle",
          value: function syncButtonToggle(toggle, select) {
            var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            // Deselect the currently-selected toggle, if we're in single-selection
            // mode and the button being toggled isn't selected at the moment.
            if (!this.multiple && this.selected && !toggle.checked) {
              /** @type {?} */
              this.selected.checked = false;
            }

            if (select) {
              this.selectionModel.select(toggle);
            } else {
              this.selectionModel.deselect(toggle);
            } // Only emit the change event for user input.


            if (isUserInput) {
              this.emitChangeEvent();
            } // Note: we emit this one no matter whether it was a user interaction, because
            // it is used by Angular to sync up the two-way data binding.


            this.valueChange.emit(this.value);
          }
          /**
           * Checks whether a button toggle is selected.
           * @param {?} toggle
           * @return {?}
           */

        }, {
          key: "isSelected",
          value: function isSelected(toggle) {
            return this.selectionModel.isSelected(toggle);
          }
          /**
           * Determines whether a button toggle should be checked on init.
           * @param {?} toggle
           * @return {?}
           */

        }, {
          key: "isPrechecked",
          value: function isPrechecked(toggle) {
            if (this.rawValue === undefined) {
              return false;
            }

            if (this.multiple && Array.isArray(this.rawValue)) {
              return this.rawValue.some(
              /**
              * @param {?} value
              * @return {?}
              */
              function (value) {
                return toggle.value != null && value === toggle.value;
              });
            }

            return toggle.value === this.rawValue;
          }
          /**
           * Updates the selection state of the toggles in the group based on a value.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setSelectionByValue",
          value: function setSelectionByValue(value) {
            var _this110 = this;

            this.rawValue = value;

            if (!this.buttonToggles) {
              return;
            }

            if (this.multiple && value) {
              if (!Array.isArray(value)) {
                throw Error('Value must be an array in multiple-selection mode.');
              }

              this.clearSelection();
              value.forEach(
              /**
              * @param {?} currentValue
              * @return {?}
              */
              function (currentValue) {
                return _this110.selectValue(currentValue);
              });
            } else {
              this.clearSelection();
              this.selectValue(value);
            }
          }
          /**
           * Clears the selected toggles.
           * @private
           * @return {?}
           */

        }, {
          key: "clearSelection",
          value: function clearSelection() {
            this.selectionModel.clear();
            this.buttonToggles.forEach(
            /**
            * @param {?} toggle
            * @return {?}
            */
            function (toggle) {
              return toggle.checked = false;
            });
          }
          /**
           * Selects a value if there's a toggle that corresponds to it.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "selectValue",
          value: function selectValue(value) {
            /** @type {?} */
            var correspondingOption = this.buttonToggles.find(
            /**
            * @param {?} toggle
            * @return {?}
            */
            function (toggle) {
              return toggle.value != null && toggle.value === value;
            });

            if (correspondingOption) {
              correspondingOption.checked = true;
              this.selectionModel.select(correspondingOption);
            }
          }
        }, {
          key: "vertical",
          get: function get() {
            return this._vertical;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * Value of the toggle group.
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            /** @type {?} */
            var selected = this.selectionModel ? this.selectionModel.selected : [];

            if (this.multiple) {
              return selected.map(
              /**
              * @param {?} toggle
              * @return {?}
              */
              function (toggle) {
                return toggle.value;
              });
            }

            return selected[0] ? selected[0].value : undefined;
          }
          /**
           * @param {?} newValue
           * @return {?}
           */
          ,
          set: function set(newValue) {
            this.setSelectionByValue(newValue);
            this.valueChange.emit(this.value);
          }
          /**
           * Selected button toggles in the group.
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            /** @type {?} */
            var selected = this.selectionModel.selected;
            return this.multiple ? selected : selected[0] || null;
          }
          /**
           * Whether multiple button toggles can be selected.
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return this._multiple;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether multiple button toggle group is disabled.
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            if (!this.buttonToggles) {
              return;
            }

            this.buttonToggles.forEach(
            /**
            * @param {?} toggle
            * @return {?}
            */
            function (toggle) {
              return toggle.markForCheck();
            });
          }
        }]);

        return McButtonToggleGroup;
      }();

      McButtonToggleGroup.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: 'mc-button-toggle-group',
          providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],
          host: {
            role: 'group',
            "class": 'mc-button-toggle-group',
            '[class.mc-button-toggle_vertical]': 'vertical'
          },
          exportAs: 'mcButtonToggleGroup'
        }]
      }];
      /** @nocollapse */

      McButtonToggleGroup.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      };

      McButtonToggleGroup.propDecorators = {
        vertical: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        multiple: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        buttonToggles: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
          args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
          /**
          * @return {?}
          */
          function () {
            return McButtonToggle;
          })]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        valueChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }]
      };

      if (false) {}
      /**
       * Single button inside of a toggle group.
       */


      var McButtonToggle = /*#__PURE__*/function () {
        /**
         * @param {?} buttonToggleGroup
         * @param {?} changeDetectorRef
         * @param {?} focusMonitor
         * @param {?} element
         */
        function McButtonToggle(buttonToggleGroup, changeDetectorRef, focusMonitor, element) {
          _classCallCheck(this, McButtonToggle);

          this.buttonToggleGroup = buttonToggleGroup;
          this.changeDetectorRef = changeDetectorRef;
          this.focusMonitor = focusMonitor;
          this.element = element;
          /**
           * Event emitted when the group value changes.
           */

          this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          this.isSingleSelector = false;
          this._checked = false;
          this._disabled = false;
        }
        /**
         * Whether the button is checked.
         * @return {?}
         */


        _createClass(McButtonToggle, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;
            this.type = this.isSingleSelector ? 'radio' : 'checkbox';

            if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {
              this.checked = true;
            }

            this.focusMonitor.monitor(this.element.nativeElement, true);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this111 = this;

            /** @type {?} */
            var group = this.buttonToggleGroup;
            this.focusMonitor.stopMonitoring(this.element.nativeElement); // Remove the toggle from the selection once it's destroyed. Needs to happen
            // on the next tick in order to avoid "changed after checked" errors.

            if (group && group.isSelected(this)) {
              Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                return group.syncButtonToggle(_this111, false);
              });
            }
          }
          /**
           * Focuses the button.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.element.nativeElement.focus();
          }
          /**
           * Checks the button toggle due to an interaction with the underlying native button.
           * @return {?}
           */

        }, {
          key: "onToggleClick",
          value: function onToggleClick() {
            if (this.disabled) {
              return;
            }
            /** @type {?} */


            var newChecked = this.isSingleSelector ? true : !this._checked;

            if (newChecked !== this._checked) {
              this._checked = newChecked;

              if (this.buttonToggleGroup) {
                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);
                this.buttonToggleGroup.onTouched();
              }
            } // Emit a change event when it's the single selector


            this.change.emit(new McButtonToggleChange(this, this.value));
          }
          /**
           * Marks the button toggle as needing checking for change detection.
           * This method is exposed because the parent button toggle group will directly
           * update bound properties of the radio button.
           * @return {?}
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            // When the group value changes, the button will not be notified.
            // Use `markForCheck` to explicit update button toggle's status.
            this.changeDetectorRef.markForCheck();
          }
        }, {
          key: "checked",
          get: function get() {
            return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            if (newValue !== this._checked) {
              this._checked = newValue;

              if (this.buttonToggleGroup) {
                this.buttonToggleGroup.syncButtonToggle(this, this._checked);
              }

              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
        }]);

        return McButtonToggle;
      }();

      McButtonToggle.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'mc-button-toggle',
          exportAs: 'mcButtonToggle',
          template: "\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    ",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
          host: {
            "class": 'mc-button-toggle',
            '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'
          },
          styles: [".mc-group{display:flex;flex-direction:row}.mc-group .mc-group_justified>.mc-group-item{width:100%}.mc-group .mc-group-item+.mc-group-item{margin-left:-1px}.mc-group>.mc-group-item:first-child:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.mc-group>.mc-group-item:first-child:not(:last-child)>.mc-form-field__container{border-bottom-right-radius:0;border-top-right-radius:0}.mc-group>.mc-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.mc-group>.mc-group-item:last-child:not(:first-child)>.mc-form-field__container{border-bottom-left-radius:0;border-top-left-radius:0}.mc-group>.mc-group-item:not(:first-child):not(:last-child){border-radius:0}.mc-group>.mc-group-item:not(:first-child):not(:last-child)>.mc-form-field__container{border-radius:0}.mc-vertical-group{display:flex;flex-direction:column}.mc-vertical-group>.mc-group-item:first-child:not(:last-child){border-bottom-left-radius:0;border-bottom-right-radius:0;border-top-right-radius:3px}.mc-vertical-group>.mc-group-item:first-child:not(:last-child)>.mc-form-field__container{border-bottom-left-radius:0;border-bottom-right-radius:0}.mc-vertical-group>.mc-group-item:last-child:not(:first-child){border-bottom-left-radius:3px;border-top-left-radius:0;border-top-right-radius:0}.mc-vertical-group>.mc-group-item:last-child:not(:first-child)>.mc-form-field__container{border-top-left-radius:0;border-top-right-radius:0}.mc-vertical-group>.mc-group-item:not(:first-child):not(:last-child){border-radius:0}.mc-vertical-group>.mc-group-item:not(:first-child):not(:last-child)>.mc-form-field__container{border-radius:0}.mc-vertical-group .mc-group-item+.mc-group-item{margin-top:-1px}.mc-button-toggle-group{display:flex;flex-direction:row}.mc-button-toggle-group .mc-button-toggle:first-of-type:not(:last-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:first-of-type:not(:last-of-type)>.mc-icon-button{border-bottom-right-radius:0;border-top-right-radius:0}.mc-button-toggle-group .mc-button-toggle:last-of-type:not(:first-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:last-of-type:not(:first-of-type)>.mc-icon-button{border-bottom-left-radius:0;border-top-left-radius:0}.mc-button-toggle-group .mc-button-toggle:not(:first-of-type):not(:last-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:not(:first-of-type):not(:last-of-type)>.mc-icon-button{border-radius:0}.mc-button-toggle-group .mc-button-toggle[disabled]{outline:0}.mc-button-toggle-group:not(.mc-button-toggle_vertical) .mc-button-toggle:not([disabled])+.mc-button-toggle:not([disabled]){margin-left:-1px}.mc-button-toggle_vertical{flex-direction:column}.mc-button-toggle_vertical .mc-button-toggle+.mc-button-toggle{border-left:none;border-right:none}.mc-button-toggle_vertical .mc-button-toggle:not([disabled])+.mc-button-toggle:not([disabled]){margin-top:-1px}.mc-button-toggle_vertical .mc-button-toggle .mc-button,.mc-button-toggle_vertical .mc-button-toggle .mc-icon-button{width:100%}.mc-button-toggle_vertical .mc-button-toggle:first-child:not(:last-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:first-child:not(:last-child)>.mc-icon-button{border-bottom-left-radius:0;border-bottom-right-radius:0;border-top-right-radius:3px}.mc-button-toggle_vertical .mc-button-toggle:last-child:not(:first-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:last-child:not(:first-child)>.mc-icon-button{border-bottom-left-radius:3px;border-top-left-radius:0;border-top-right-radius:0}.mc-button-toggle_vertical .mc-button-toggle:not(:first-child):not(:last-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:not(:first-child):not(:last-child)>.mc-icon-button{border-radius:0}.mc-button-toggle-standalone{box-shadow:none}"]
        }]
      }];
      /** @nocollapse */

      McButtonToggle.ctorParameters = function () {
        return [{
          type: McButtonToggleGroup,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["FocusMonitor"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      };

      McButtonToggle.propDecorators = {
        checked: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        mcButton: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_1__["McButton"], {
            "static": false
          }]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: button-toggle.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McButtonToggleModule = function McButtonToggleModule() {
        _classCallCheck(this, McButtonToggleModule);
      };

      McButtonToggleModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_2__["McCommonModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_1__["McButtonModule"]],
          exports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_2__["McCommonModule"], McButtonToggleGroup, McButtonToggle],
          declarations: [McButtonToggleGroup, McButtonToggle]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-button-toggle.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-button-toggle.js.map

      /***/
    },

    /***/
    "W56h":
    /*!****************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/docs.template.html ***!
      \****************************************************************************************/

    /*! exports provided: default */

    /***/
    function W56h(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<router-outlet></router-outlet>\n";
      /***/
    },

    /***/
    "WPpj":
    /*!**************************************************!*\
      !*** ./dist/cdk/fesm2015/ptsecurity-cdk-a11y.js ***!
      \**************************************************/

    /*! exports provided: ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager */

    /***/
    function WPpj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ActiveDescendantKeyManager", function () {
        return ActiveDescendantKeyManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FocusKeyManager", function () {
        return FocusKeyManager;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListKeyManager", function () {
        return ListKeyManager;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: key-manager/list-key-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function ListKeyManagerOption() {}

      if (false) {}
      /* tslint:disable:member-ordering */

      /**
       * This class manages keyboard events for selectable lists. If you pass it a query list
       * of items, it will set the active item correctly when arrow events occur.
       * @template T
       */


      var ListKeyManager = /*#__PURE__*/function () {
        /**
         * @param {?} _items
         */
        function ListKeyManager(_items) {
          var _this112 = this;

          _classCallCheck(this, ListKeyManager);

          this._items = _items;
          /**
           * Stream that emits any time the TAB key is pressed, so components can react
           * when focus is shifted off of the list.
           */

          this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          /**
           * Stream that emits whenever the active item of the list manager changes.
           */

          this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          this.previousActiveItemIndex = -1;
          this._activeItemIndex = -1;
          this.wrap = false;
          this.letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          this.typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
          this.vertical = true;
          this.scrollSize = 0; // Buffer for the letters that the user has pressed when the typeahead option is turned on.

          this.pressedLetters = [];
          /**
           * Predicate function that can be used to check whether an item should be skipped
           * by the key manager. By default, disabled items are skipped.
           */

          this.skipPredicateFn =
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return item.disabled;
          };

          if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["QueryList"]) {
            _items.changes.subscribe(
            /**
            * @param {?} newItems
            * @return {?}
            */
            function (newItems) {
              if (_this112._activeItem) {
                /** @type {?} */
                var itemArray = newItems.toArray();
                /** @type {?} */

                var newIndex = itemArray.indexOf(_this112._activeItem);

                if (newIndex > -1 && newIndex !== _this112._activeItemIndex) {
                  _this112._activeItemIndex = newIndex;
                }
              }
            });
          }
        } // Index of the currently active item.

        /**
         * @return {?}
         */


        _createClass(ListKeyManager, [{
          key: "withScrollSize",

          /**
           * @template THIS
           * @this {THIS}
           * @param {?} scrollSize
           * @return {THIS}
           */
          value: function withScrollSize(scrollSize) {
            /** @type {?} */
            this.scrollSize = scrollSize;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Turns on wrapping mode, which ensures that the active item will wrap to
           * the other end of list when there are no more items in the given direction.
           * @template THIS
           * @this {THIS}
           * @return {THIS}
           */

        }, {
          key: "withWrap",
          value: function withWrap() {
            /** @type {?} */
            this.wrap = true;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Configures whether the key manager should be able to move the selection vertically.
           * @template THIS
           * @this {THIS}
           * @param {?=} enabled Whether vertical selection should be enabled.
           * @return {THIS}
           */

        }, {
          key: "withVerticalOrientation",
          value: function withVerticalOrientation() {
            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            /** @type {?} */
            this.vertical = enabled;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Configures the key manager to move the selection horizontally.
           * Passing in `null` will disable horizontal movement.
           * @template THIS
           * @this {THIS}
           * @param {?} direction Direction in which the selection can be moved.
           * @return {THIS}
           */

        }, {
          key: "withHorizontalOrientation",
          value: function withHorizontalOrientation(direction) {
            /** @type {?} */
            this.horizontal = direction;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Turns on typeahead mode which allows users to set the active item by typing.
           * @template THIS
           * @this {THIS}
           * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.
           * @param {?=} searchLetterIndex letter index for incremental search, if is -1 search is disabled
           * @return {THIS}
           */

        }, {
          key: "withTypeAhead",
          value: function withTypeAhead() {
            var _this113 = this;

            var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;
            var searchLetterIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (
            /** @type {?} */
            this._items.length &&
            /** @type {?} */
            this._items.some(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return typeof item.getLabel !== 'function';
            })) {
              throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
            }

            /** @type {?} */
            this.typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those
            // letters back into a string. Afterwards find the first item that starts with that string and select it.

            /** @type {?} */
            this.typeaheadSubscription =
            /** @type {?} */
            this.letterKeyStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(
            /**
            * @param {?} keyCode
            * @return {?}
            */
            function (keyCode) {
              return (
                /** @type {?} */
                _this113.pressedLetters.push(keyCode)
              );
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(debounceInterval), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(
            /**
            * @return {?}
            */
            function () {
              return (
                /** @type {?} */
                _this113.pressedLetters.length > 0
              );
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
            /**
            * @return {?}
            */
            function () {
              return (
                /** @type {?} */
                _this113.pressedLetters.join('')
              );
            })).subscribe(
            /**
            * @param {?} inputString
            * @return {?}
            */
            function (inputString) {
              if (searchLetterIndex === -1) {
                /** @type {?} */
                _this113.pressedLetters = [];
                return;
              }
              /** @type {?} */


              var items =
              /** @type {?} */
              _this113._items.toArray(); // Start at 1 because we want to start searching at the item immediately
              // following the current active item.


              for (var i = 1; i < items.length + 1; i++) {
                /** @type {?} */
                var index = (
                /** @type {?} */
                _this113._activeItemIndex + i) % items.length;
                /** @type {?} */

                var item = items[index];

                if (!item.disabled &&
                /** @type {?} */
                item.getLabel().toUpperCase().trim().indexOf(inputString) === searchLetterIndex) {
                  /** @type {?} */
                  _this113.setActiveItem(index);

                  break;
                }
              }

              /** @type {?} */
              _this113.pressedLetters = [];
            });
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * Sets the active item to the item at the index specified.
           * @param {?} item The index of the item to be set as active.
           * @return {?}
           */

        }, {
          key: "setActiveItem",
          value: function setActiveItem(item) {
            this.previousActiveItemIndex = this._activeItemIndex;
            this.updateActiveItem(item);

            if (this._activeItemIndex !== this.previousActiveItemIndex) {
              this.change.next(this._activeItemIndex);
            }
          }
          /**
           * Sets the active item depending on the key event passed in.
           * @param {?} event Keyboard event to be used for determining which element should be active.
           * @return {?}
           */

        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            // tslint:disable-next-line: deprecation

            /** @type {?} */
            var keyCode = event.keyCode;

            switch (keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["TAB"]:
                this.tabOut.next();
                return;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["DOWN_ARROW"]:
                if (this.vertical) {
                  this.setNextItemActive();
                  break;
                } else {
                  return;
                }

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["UP_ARROW"]:
                if (this.vertical) {
                  this.setPreviousItemActive();
                  break;
                } else {
                  return;
                }

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["RIGHT_ARROW"]:
                if (this.horizontal === 'ltr') {
                  this.setNextItemActive();
                  break;
                } else if (this.horizontal === 'rtl') {
                  this.setPreviousItemActive();
                  break;
                } else {
                  return;
                }

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["LEFT_ARROW"]:
                if (this.horizontal === 'ltr') {
                  this.setPreviousItemActive();
                  break;
                } else if (this.horizontal === 'rtl') {
                  this.setNextItemActive();
                  break;
                } else {
                  return;
                }

              default:
                // Attempt to use the `event.key` which also maps it to the user's keyboard language,
                // otherwise fall back to resolving alphanumeric characters via the keyCode.
                if (event.key && event.key.length === 1) {
                  this.letterKeyStream.next(event.key.toLocaleUpperCase());
                } else if (keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["A"] && keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["Z"] || keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["ZERO"] && keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["NINE"]) {
                  this.letterKeyStream.next(String.fromCharCode(keyCode));
                } // Note that we return here, in order to avoid preventing
                // the default action of non-navigational keys.


                return;
            }

            this.pressedLetters = [];
            event.preventDefault();
          } // Sets the active item to the first enabled item in the list.

          /**
           * @return {?}
           */

        }, {
          key: "setFirstItemActive",
          value: function setFirstItemActive() {
            this.setActiveItemByIndex(0, 1);
          } // Sets the active item to the last enabled item in the list.

          /**
           * @return {?}
           */

        }, {
          key: "setLastItemActive",
          value: function setLastItemActive() {
            this.setActiveItemByIndex(this._items.length - 1, -1);
          } // Sets the active item to the next enabled item in the list.

          /**
           * @return {?}
           */

        }, {
          key: "setNextItemActive",
          value: function setNextItemActive() {
            this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);
          } // Sets the active item to a previous enabled item in the list.

          /**
           * @return {?}
           */

        }, {
          key: "setPreviousItemActive",
          value: function setPreviousItemActive() {
            this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive() : this.setActiveItemByDelta(-1);
          }
          /**
           * @param {?=} delta
           * @return {?}
           */

        }, {
          key: "setNextPageItemActive",
          value: function setNextPageItemActive() {
            var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scrollSize;

            /** @type {?} */
            var nextItemIndex = this._activeItemIndex + delta;

            if (nextItemIndex >= this._items.length) {
              this.setLastItemActive();
            } else {
              this.setActiveItemByDelta(delta);
            }
          }
          /**
           * @param {?=} delta
           * @return {?}
           */

        }, {
          key: "setPreviousPageItemActive",
          value: function setPreviousPageItemActive() {
            var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scrollSize;

            /** @type {?} */
            var nextItemIndex = this._activeItemIndex - delta;

            if (nextItemIndex <= 0) {
              this.setFirstItemActive();
            } else {
              this.setActiveItemByDelta(-delta);
            }
          }
          /**
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "updateActiveItem",
          value: function updateActiveItem(item) {
            /** @type {?} */
            var itemArray = this._items.toArray();
            /** @type {?} */


            var index = typeof item === 'number' ? item : itemArray.indexOf(item);
            this._activeItemIndex = index;
            this._activeItem = itemArray[index];
          }
          /**
           * This method sets the active item, given a list of items and the delta between the
           * currently active item and the new active item. It will calculate differently
           * depending on whether wrap mode is turned on.
           * @private
           * @param {?} delta
           * @return {?}
           */

        }, {
          key: "setActiveItemByDelta",
          value: function setActiveItemByDelta(delta) {
            this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);
          }
          /**
           * Sets the active item properly given "wrap" mode. In other words, it will continue to move
           * down the list until it finds an item that is not disabled, and it will wrap if it
           * encounters either end of the list.
           * @private
           * @param {?} delta
           * @return {?}
           */

        }, {
          key: "setActiveInWrapMode",
          value: function setActiveInWrapMode(delta) {
            /** @type {?} */
            var items = this.getItemsArray();

            for (var i = 1; i <= items.length; i++) {
              /** @type {?} */
              var index = (this._activeItemIndex + delta * i + items.length) % items.length;
              /** @type {?} */

              var item = items[index];

              if (!this.skipPredicateFn(item)) {
                this.setActiveItem(index);
                return;
              }
            }
          }
          /**
           * Sets the active item properly given the default mode. In other words, it will
           * continue to move down the list until it finds an item that is not disabled. If
           * it encounters either end of the list, it will stop and not wrap.
           * @private
           * @param {?} delta
           * @return {?}
           */

        }, {
          key: "setActiveInDefaultMode",
          value: function setActiveInDefaultMode(delta) {
            this.setActiveItemByIndex(this._activeItemIndex + delta, delta);
          }
          /**
           * Sets the active item to the first enabled item starting at the index specified. If the
           * item is disabled, it will move in the fallbackDelta direction until it either
           * finds an enabled item or encounters the end of the list.
           * @private
           * @param {?} index
           * @param {?} fallbackDelta
           * @return {?}
           */

        }, {
          key: "setActiveItemByIndex",
          value: function setActiveItemByIndex(index, fallbackDelta) {
            /** @type {?} */
            var items = this.getItemsArray();

            if (!items[index]) {
              return;
            }
            /** @type {?} */


            var curIndex = index;

            while (this.skipPredicateFn(items[curIndex])) {
              curIndex += fallbackDelta;

              if (!items[curIndex]) {
                return;
              }
            }

            this.setActiveItem(curIndex);
          }
          /**
           * Returns the items as an array.
           * @private
           * @return {?}
           */

        }, {
          key: "getItemsArray",
          value: function getItemsArray() {
            return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["QueryList"] ? this._items.toArray() : this._items;
          }
        }, {
          key: "activeItemIndex",
          get: function get() {
            return this._activeItemIndex;
          } // The active item.

          /**
           * @return {?}
           */

        }, {
          key: "activeItem",
          get: function get() {
            return this._activeItem;
          }
        }]);

        return ListKeyManager;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: key-manager/activedescendant-key-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).
       * Each item must know how to style itself as active or inactive and whether or not it is
       * currently disabled.
       * @record
       */


      function Highlightable() {}

      if (false) {}
      /**
       * @template T
       */


      var ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {
        _inherits(ActiveDescendantKeyManager, _ListKeyManager);

        var _super30 = _createSuper(ActiveDescendantKeyManager);

        function ActiveDescendantKeyManager() {
          _classCallCheck(this, ActiveDescendantKeyManager);

          return _super30.apply(this, arguments);
        }

        _createClass(ActiveDescendantKeyManager, [{
          key: "setActiveItem",

          /**
           * This method sets the active item to the item at the specified index.
           * It also adds active styles to the newly active item and removes active
           * styles from the previously active item.
           * @param {?} index
           * @return {?}
           */
          value: function setActiveItem(index) {
            if (this.activeItem) {
              this.activeItem.setInactiveStyles();
            }

            _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), "setActiveItem", this).call(this, index);

            if (this.activeItem) {
              this.activeItem.setActiveStyles();
            }
          }
        }]);

        return ActiveDescendantKeyManager;
      }(ListKeyManager);
      /**
       * @fileoverview added by tsickle
       * Generated from: key-manager/focus-key-manager.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * This is the interface for focusable items (used by the FocusKeyManager).
       * Each item must know how to focus itself, whether or not it is currently disabled
       * and be able to supply it's label.
       * @record
       */


      function IFocusableOption() {}

      if (false) {}
      /**
       * @template T
       */


      var FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {
        _inherits(FocusKeyManager, _ListKeyManager2);

        var _super31 = _createSuper(FocusKeyManager);

        function FocusKeyManager() {
          var _this114;

          _classCallCheck(this, FocusKeyManager);

          _this114 = _super31.apply(this, arguments);
          _this114.origin = 'program';
          return _this114;
        }
        /**
         * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
         * @template THIS
         * @this {THIS}
         * @param {?} origin Focus origin to be used when focusing items.
         * @return {THIS}
         */


        _createClass(FocusKeyManager, [{
          key: "setFocusOrigin",
          value: function setFocusOrigin(origin) {
            /** @type {?} */
            this.origin = origin;
            return (
              /** @type {?} */
              this
            );
          }
          /**
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "setActiveItem",
          value: function setActiveItem(item) {
            _get(_getPrototypeOf(FocusKeyManager.prototype), "setActiveItem", this).call(this, item);

            if (this.activeItem) {
              this.activeItem.focus(this.origin);
            }
          }
        }]);

        return FocusKeyManager;
      }(ListKeyManager);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-cdk-a11y.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-cdk-a11y.js.map

      /***/

    },

    /***/
    "WlSM":
    /*!**************************************************************************************!*\
      !*** ./packages/docs/src/app/components/component-viewer/component-viewer.module.ts ***!
      \**************************************************************************************/

    /*! exports provided: ComponentViewerModule */

    /***/
    function WlSM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentViewerModule", function () {
        return ComponentViewerModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tabs */
      "6AiE");
      /* harmony import */


      var _shared_doc_viewer_doc_viewer_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../../shared/doc-viewer/doc-viewer-module */
      "G+fD");
      /* harmony import */


      var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../shared/documentation-items/documentation-items */
      "rMhK");
      /* harmony import */


      var _shared_table_of_contents_table_of_contents_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../../shared/table-of-contents/table-of-contents.module */
      "aRpB");
      /* harmony import */


      var _anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ../anchors/anchors.module */
      "3Xtq");
      /* harmony import */


      var _component_viewer_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./component-viewer.component */
      "6uKg");

      var ComponentViewerModule = function ComponentViewerModule() {
        _classCallCheck(this, ComponentViewerModule);
      };

      ComponentViewerModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__["AnchorsModule"], _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_4__["McTabsModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"], _shared_doc_viewer_doc_viewer_module__WEBPACK_IMPORTED_MODULE_5__["DocViewerModule"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _shared_table_of_contents_table_of_contents_module__WEBPACK_IMPORTED_MODULE_7__["TableOfContentsModule"]],
        exports: [_component_viewer_component__WEBPACK_IMPORTED_MODULE_9__["ComponentViewerComponent"]],
        declarations: [_component_viewer_component__WEBPACK_IMPORTED_MODULE_9__["ComponentViewerComponent"], _component_viewer_component__WEBPACK_IMPORTED_MODULE_9__["ComponentOverviewComponent"]],
        providers: [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__["DocumentationItems"]]
      })], ComponentViewerModule);
      /***/
    },

    /***/
    "YK9X":
    /*!***********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tooltip.js ***!
      \***********************************************************/

    /*! exports provided: ArrowPlacements, MC_TOOLTIP_SCROLL_STRATEGY, MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, McToolTipModule, McTooltip, McTooltipComponent, getMcTooltipInvalidPositionError, mcTooltipScrollStrategyFactory */

    /***/
    function YK9X(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ArrowPlacements", function () {
        return ArrowPlacements;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TOOLTIP_SCROLL_STRATEGY", function () {
        return MC_TOOLTIP_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
        return MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McToolTipModule", function () {
        return McToolTipModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTooltip", function () {
        return McTooltip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTooltipComponent", function () {
        return McTooltipComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcTooltipInvalidPositionError", function () {
        return getMcTooltipInvalidPositionError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcTooltipScrollStrategyFactory", function () {
        return mcTooltipScrollStrategyFactory;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: tooltip.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var ArrowPlacements = {
        Top:
        /** @type {?} */
        'top',
        Center:
        /** @type {?} */
        'center',
        Bottom:
        /** @type {?} */
        'bottom',
        Right:
        /** @type {?} */
        'right',
        Left:
        /** @type {?} */
        'left'
      };

      var McTooltipComponent = /*#__PURE__*/function () {
        /**
         * @param {?} cdr
         */
        function McTooltipComponent(cdr) {
          _classCallCheck(this, McTooltipComponent);

          this.cdr = cdr;
          this.prefix = 'mc-tooltip_placement';
          this.positions = _toConsumableArray(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["DEFAULT_4_POSITIONS"]);
          this.classMap = {};
          this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.mcMouseEnterDelay = 400;
          this.mcMouseLeaveDelay = 0;
          this._mcTrigger = 'hover';
          this._mcPlacement = 'top';
          this._mcVisible = new rxjs__WEBPACK_IMPORTED_MODULE_8__["BehaviorSubject"](false);
          /**
           * Subject for notifying that the tooltip has been hidden from the view
           */

          this.onHideSubject = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          this.closeOnInteraction = false;
          this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["POSITION_MAP"];
          this.$visible = this._mcVisible.asObservable();
        }
        /**
         * @return {?}
         */


        _createClass(McTooltipComponent, [{
          key: "show",

          /**
           * @return {?}
           */
          value: function show() {
            var _this115 = this;

            if (this.hideTid) {
              clearTimeout(this.hideTid);
            }

            if (!this.isContentEmpty()) {
              if (this.mcTrigger !== 'manual') {
                this.closeOnInteraction = true;
              }

              this.showTid = setTimeout(
              /**
              * @return {?}
              */
              function () {
                _this115._mcVisible.next(true);

                _this115.mcVisibleChange.emit(true); // Mark for check so if any parent component has set the
                // ChangeDetectionStrategy to OnPush it will be checked anyways


                _this115.markForCheck();
              }, this.mcMouseEnterDelay);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "hide",
          value: function hide() {
            var _this116 = this;

            if (this.showTid) {
              clearTimeout(this.showTid);
            }

            this.hideTid = setTimeout(
            /**
            * @return {?}
            */
            function () {
              _this116._mcVisible.next(false);

              _this116.mcVisibleChange.emit(false);

              _this116.onHideSubject.next(); // Mark for check so if any parent component has set the
              // ChangeDetectionStrategy to OnPush it will be checked anyways


              _this116.markForCheck();
            }, this.mcMouseLeaveDelay);
          }
          /**
           * @return {?}
           */

        }, {
          key: "setClassMap",
          value: function setClassMap() {
            var _this$classMap;

            this.classMap = (_this$classMap = {}, _defineProperty(_this$classMap, "".concat(this.prefix, "-").concat(this.mcPlacement), true), _defineProperty(_this$classMap, this.mcTooltipClass, true), _this$classMap);
          }
          /**
           * @return {?}
           */

        }, {
          key: "isContentEmpty",
          value: function isContentEmpty() {
            return this.isTitleString ? this.mcTitle === '' || !this.mcTitle : false;
          }
          /**
           * Returns an observable that notifies when the tooltip has been hidden from view.
           * @return {?}
           */

        }, {
          key: "afterHidden",
          value: function afterHidden() {
            return this.onHideSubject.asObservable();
          }
          /**
           * @return {?}
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            this.cdr.markForCheck();
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleBodyInteraction",
          value: function handleBodyInteraction() {
            if (this.closeOnInteraction) {
              this.hide();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcTitle",
          get: function get() {
            return this._mcTitle;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcTitle = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcTrigger",
          get: function get() {
            return this._mcTrigger;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcTrigger = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPlacement",
          get: function get() {
            return this._mcPlacement;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this._mcPlacement) {
              this._mcPlacement = value;
              this.positions.unshift(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["POSITION_MAP"][this.mcPlacement]);
            } else if (!value) {
              this._mcPlacement = 'top';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcTooltipClass",
          get: function get() {
            return this._mcTooltipClass;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcTooltipClass = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcVisible",
          get: function get() {
            return this._mcVisible.value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var visible = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            if (visible && this._mcVisible.value !== visible) {
              this.show();
            } else {
              this.hide();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcArrowPlacement",
          get: function get() {
            return this._mcArrowPlacement;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcArrowPlacement = value;
          }
        }, {
          key: "isTemplateRef",
          get: function get() {
            return this.mcTitle instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"];
          }
          /**
           * @return {?}
           */

        }, {
          key: "isNonEmptyString",
          get: function get() {
            return typeof this.mcTitle === 'string' && this._mcTitle !== '';
          }
        }]);

        return McTooltipComponent;
      }();

      McTooltipComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-tooltip-component',
          animations: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["fadeAnimation"]],
          template: "<div class=\"mc-tooltip\"\n     [ngClass]=\"classMap\"\n     [@fadeAnimation]=\"''+($visible | async)\">\n    <div class=\"mc-tooltip-content\">\n        <div class=\"mc-tooltip-arrow\"></div>\n        <div class=\"mc-tooltip-inner\">\n            <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"mcTitle\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString\">\n                <div [innerHTML]=\"mcTitle\"></div>\n            </ng-container>\n        </div>\n    </div>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          preserveWhitespaces: false,
          host: {
            '(body:click)': 'this.handleBodyInteraction()'
          },
          styles: ["@-webkit-keyframes mc-progress{0%{background-position:0 0}to{background-position:29px 0}}@keyframes mc-progress{0%{background-position:0 0}to{background-position:29px 0}}.mc-progress{position:relative}.mc-progress:after{-webkit-animation:mc-progress 1s linear infinite;animation:mc-progress 1s linear infinite;background:linear-gradient(135deg,rgba(0,0,0,.05) 10px,transparent 0,transparent 20px,rgba(0,0,0,.05) 0,rgba(0,0,0,.05) 30px,transparent 0) repeat;background-size:29px 29px;border-radius:inherit;bottom:0;content:\"\";left:0;position:absolute;right:0;top:0}.cdk-overlay-container{height:100%;pointer-events:none;position:fixed;width:100%}.cdk-overlay-backdrop,.cdk-overlay-container{box-sizing:border-box;left:0;margin:0;padding:0;top:0;z-index:1000}.cdk-overlay-backdrop{-webkit-tap-highlight-color:transparent;bottom:0;opacity:0;pointer-events:auto;position:absolute;right:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-overlay-pane{max-height:100%;max-width:100%;pointer-events:auto}.cdk-overlay-connected-position-bounding-box,.cdk-overlay-pane{box-sizing:border-box;margin:0;padding:0;position:absolute;z-index:1000}.cdk-overlay-connected-position-bounding-box{display:flex;flex-direction:column;min-height:1px;min-width:1px}.mc-tooltip{box-sizing:border-box;display:block;list-style:none;margin:0;max-width:240px;padding:0;position:relative;visibility:visible;white-space:pre-line;z-index:1060}.mc-tooltip_placement-top{padding-bottom:9px}.mc-tooltip_placement-right{padding-left:9px}.mc-tooltip_placement-bottom{padding-top:9px}.mc-tooltip_placement-left{padding-right:9px}.mc-tooltip-inner{border-radius:3px;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;min-height:32px;padding:8px 16px;text-align:left;text-decoration:none;vertical-align:center}.mc-tooltip-arrow{height:12px;position:absolute;transform:rotate(45deg);width:12px}.mc-tooltip_placement-top .mc-tooltip-arrow{bottom:4px;left:50%;margin-left:-5px}.mc-tooltip_placement-right .mc-tooltip-arrow{left:4px;margin-top:-5px;top:16px}.mc-tooltip_placement-left .mc-tooltip-arrow{margin-top:-5px;right:4px;top:16px}.mc-tooltip_placement-bottom .mc-tooltip-arrow{left:50%;margin-left:-5px;top:4px}"]
        }]
      }];
      /** @nocollapse */

      McTooltipComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }];
      };

      McTooltipComponent.propDecorators = {
        mcVisibleChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        mcMouseEnterDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcMouseLeaveDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcTitle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcTrigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcPlacement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcTooltipClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcVisible: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcArrowPlacement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /** @type {?} */


      var MC_TOOLTIP_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-tooltip-scroll-strategy');
      /**
       * \@docs-private
       * @param {?} overlay
       * @return {?}
       */

      function mcTooltipScrollStrategyFactory(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition({
              scrollThrottle: 20
            });
          }
        );
      }
      /**
       * \@docs-private
       * @type {?}
       */


      var MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MC_TOOLTIP_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]],
        useFactory: mcTooltipScrollStrategyFactory
      };
      /**
       * Creates an error to be thrown if the user supplied an invalid tooltip position.
       * @param {?} position
       * @return {?}
       */

      function getMcTooltipInvalidPositionError(position) {
        return Error("McTooltip position \"".concat(position, "\" is invalid."));
      }
      /** @type {?} */


      var VIEWPORT_MARGIN = 8;

      var McTooltip = /*#__PURE__*/function () {
        /**
         * @param {?} overlay
         * @param {?} elementRef
         * @param {?} ngZone
         * @param {?} scrollDispatcher
         * @param {?} hostView
         * @param {?} scrollStrategy
         * @param {?} direction
         */
        function McTooltip(overlay, elementRef, ngZone, scrollDispatcher, hostView, scrollStrategy, direction) {
          _classCallCheck(this, McTooltip);

          this.overlay = overlay;
          this.elementRef = elementRef;
          this.ngZone = ngZone;
          this.scrollDispatcher = scrollDispatcher;
          this.hostView = hostView;
          this.scrollStrategy = scrollStrategy;
          this.direction = direction;
          this.isTooltipOpen = false;
          this.isDynamicTooltip = false;
          this.parentDisabled = false;
          this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.$unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          this._disabled = false;
          this._mcTrigger = 'hover';
          this._mcPlacement = 'top';
          this.manualListeners = new Map();
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["POSITION_MAP"];
        }
        /**
         * @return {?}
         */


        _createClass(McTooltip, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.initElementRefListeners();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this117 = this;

            if (this.overlayRef) {
              this.overlayRef.dispose();
            }

            this.manualListeners.forEach(
            /**
            * @param {?} listener
            * @param {?} event
            * @return {?}
            */
            function (listener, event) {
              _this117.elementRef.nativeElement.removeEventListener(event, listener);
            });
            this.manualListeners.clear();
            this.$unsubscribe.next();
            this.$unsubscribe.complete();
          }
          /**
           * Create the overlay config and position strategy
           * @return {?}
           */

        }, {
          key: "createOverlay",
          value: function createOverlay() {
            var _this118 = this;

            if (this.overlayRef) {
              return this.overlayRef;
            } // Create connected position strategy that listens for scroll events to reposition.

            /** @type {?} */


            var strategy = this.overlay.position().flexibleConnectedTo(this.elementRef).withTransformOriginOn('.mc-tooltip').withFlexibleDimensions(false).withViewportMargin(VIEWPORT_MARGIN).withPositions(_toConsumableArray(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["DEFAULT_4_POSITIONS"]));
            /** @type {?} */

            var scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
            strategy.withScrollableContainers(scrollableAncestors);
            strategy.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @param {?} change
            * @return {?}
            */
            function (change) {
              if (_this118.tooltip) {
                _this118.onPositionChange(change);

                if (change.scrollableViewProperties.isOverlayClipped && _this118.tooltip.mcVisible) {
                  // After position changes occur and the overlay is clipped by
                  // a parent scrollable then close the tooltip.
                  _this118.ngZone.run(
                  /**
                  * @return {?}
                  */
                  function () {
                    return _this118.hide();
                  });
                }
              }
            });
            this.overlayRef = this.overlay.create({
              direction: this.direction,
              positionStrategy: strategy,
              panelClass: 'mc-tooltip-panel',
              scrollStrategy: this.scrollStrategy()
            });
            this.updatePosition();
            this.overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this118.detach();
            });
            return this.overlayRef;
          }
          /**
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
              this.overlayRef.detach();
            }

            this.tooltip = null;
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onPositionChange",
          value: function onPositionChange($event) {
            var _this119 = this;

            /** @type {?} */
            var updatedPlacement = this.mcPlacement;
            Object.keys(this.availablePositions).some(
            /**
            * @param {?} key
            * @return {?}
            */
            function (key) {
              if ($event.connectionPair.originX === _this119.availablePositions[key].originX && $event.connectionPair.originY === _this119.availablePositions[key].originY && $event.connectionPair.overlayX === _this119.availablePositions[key].overlayX && $event.connectionPair.overlayY === _this119.availablePositions[key].overlayY) {
                updatedPlacement = key;
                return true;
              }

              return false;
            });
            this.updateCompValue('mcPlacement', updatedPlacement);

            if (this.tooltip) {
              this.tooltip.setClassMap();
              this.tooltip.markForCheck();
            }

            this.handlePositioningUpdate();
          }
          /**
           * @return {?}
           */

        }, {
          key: "handlePositioningUpdate",
          value: function handlePositioningUpdate() {
            this.overlayRef = this.createOverlay();

            if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {
              /** @type {?} */
              var halfDelimiter = 2;
              /** @type {?} */

              var overlayElemHeight = this.overlayRef.overlayElement.clientHeight;
              /** @type {?} */

              var currentContainerHeight = this.hostView.element.nativeElement.clientHeight;

              if (this.mcArrowPlacement === ArrowPlacements.Center) {
                /** @type {?} */
                var arrowElemRef = this.getTooltipArrowElem();
                /** @type {?} */

                var containerPositionTop = this.hostView.element.nativeElement.getBoundingClientRect().top;
                /** @type {?} */

                var halfOfContainerHeight = currentContainerHeight / halfDelimiter;
                /** @type {?} */

                var halfOfTooltipHeight = overlayElemHeight / halfDelimiter;
                this.overlayRef.overlayElement.style.top = "".concat(containerPositionTop + halfOfContainerHeight - halfOfTooltipHeight + 1, "px");

                if (arrowElemRef) {
                  arrowElemRef.setAttribute('style', "top: ".concat(halfOfTooltipHeight - 1, "px"));
                }
              } else {
                /** @type {?} */
                var pos = (overlayElemHeight - currentContainerHeight) / halfDelimiter;
                /** @type {?} */

                var defaultTooltipPlacementTop = parseInt(this.overlayRef.overlayElement.style.top || '0px', 10);
                this.overlayRef.overlayElement.style.top = "".concat(defaultTooltipPlacementTop + pos - 1, "px");
              }
            }
          } // tslint:disable-next-line:no-any

          /**
           * @param {?} key
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "updateCompValue",
          value: function updateCompValue(key, value) {
            if (this.isDynamicTooltip && value && this.tooltip) {
              this.tooltip[key] = value;
              this.tooltip.markForCheck();
            }
          }
          /**
           * @param {?} e
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(e) {
            if (this.isTooltipOpen && e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ESCAPE"]) {
              // tslint:disable-line
              this.hide();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleTouchend",
          value: function handleTouchend() {
            this.hide();
          }
          /**
           * @return {?}
           */

        }, {
          key: "initElementRefListeners",
          value: function initElementRefListeners() {
            var _this120 = this;

            if (this.mcTrigger === 'hover') {
              this.manualListeners.set('mouseenter',
              /**
              * @return {?}
              */
              function () {
                return _this120.show();
              }).set('mouseleave',
              /**
              * @return {?}
              */
              function () {
                return _this120.hide();
              }).forEach(
              /**
              * @param {?} listener
              * @param {?} event
              * @return {?}
              */
              function (listener, event) {
                return _this120.elementRef.nativeElement.addEventListener(event, listener);
              });
            }

            if (this.mcTrigger === 'focus') {
              this.manualListeners.set('focus',
              /**
              * @return {?}
              */
              function () {
                return _this120.show();
              }).set('blur',
              /**
              * @return {?}
              */
              function () {
                return _this120.hide();
              }).forEach(
              /**
              * @param {?} listener
              * @param {?} event
              * @return {?}
              */
              function (listener, event) {
                return _this120.elementRef.nativeElement.addEventListener(event, listener);
              });
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "show",
          value: function show() {
            var _this121 = this;

            if (this.disabled) {
              return;
            }

            if (!this.tooltip) {
              this.overlayRef = this.createOverlay();
              this.detach();
              this.portal = this.portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["ComponentPortal"](McTooltipComponent, this.hostView);
              this.tooltip = this.overlayRef.attach(this.portal).instance;
              this.tooltip.afterHidden().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.destroyed)).subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this121.detach();
              });
              this.isDynamicTooltip = true;
              /** @type {?} */

              var properties = ['mcTitle', 'mcPlacement', 'mcTrigger', 'mcTooltipDisabled', 'mcMouseEnterDelay', 'mcMouseLeaveDelay', 'mcTooltipClass'];
              properties.forEach(
              /**
              * @param {?} property
              * @return {?}
              */
              function (property) {
                return _this121.updateCompValue(property, _this121[property]);
              });
              this.tooltip.mcVisibleChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.$unsubscribe), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["distinctUntilChanged"])()).subscribe(
              /**
              * @param {?} data
              * @return {?}
              */
              function (data) {
                _this121.mcVisible = data;

                _this121.mcVisibleChange.emit(data);

                _this121.isTooltipOpen = data;
              });
            }

            this.updatePosition();
            this.tooltip.show();
          }
          /**
           * @return {?}
           */

        }, {
          key: "hide",
          value: function hide() {
            if (this.tooltip) {
              this.tooltip.hide();
            }
          }
          /**
           * Updates the position of the current tooltip.
           * @return {?}
           */

        }, {
          key: "updatePosition",
          value: function updatePosition() {
            if (!this.overlayRef) {
              this.overlayRef = this.createOverlay();
            }
            /** @type {?} */


            var position =
            /** @type {?} */
            this.overlayRef.getConfig().positionStrategy;
            /** @type {?} */

            var origin = this.getOrigin();
            /** @type {?} */

            var overlay = this.getOverlayPosition();
            position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);

            if (this.tooltip) {
              position.apply();
              window.dispatchEvent(new Event('resize'));
            }
          }
          /**
           * Returns the origin position and a fallback position based on the user's position preference.
           * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
           * @return {?}
           */

        }, {
          key: "getOrigin",
          value: function getOrigin() {
            /** @type {?} */
            var position = this.mcPlacement;
            /** @type {?} */

            var isLtr = !this.direction || this.direction.value === 'ltr';
            /** @type {?} */

            var originPosition;

            if (position === 'top' || position === 'bottom') {
              originPosition = {
                originX: 'center',
                originY: position === 'top' ? 'top' : 'bottom'
              };
            } else if (position === 'top' || position === 'left' && isLtr || position === 'right' && !isLtr) {
              originPosition = {
                originX: 'start',
                originY: 'center'
              };
            } else if (position === 'bottom' || position === 'right' && isLtr || position === 'left' && !isLtr) {
              originPosition = {
                originX: 'end',
                originY: 'center'
              };
            } else {
              throw getMcTooltipInvalidPositionError(position);
            }

            var _this$invertPosition = this.invertPosition(originPosition.originX, originPosition.originY),
                x = _this$invertPosition.x,
                y = _this$invertPosition.y;

            return {
              main: originPosition,
              fallback: {
                originX: x,
                originY: y
              }
            };
          }
          /**
           * Returns the overlay position and a fallback position based on the user's preference
           * @return {?}
           */

        }, {
          key: "getOverlayPosition",
          value: function getOverlayPosition() {
            /** @type {?} */
            var position = this.mcPlacement;
            /** @type {?} */

            var isLtr = !this.direction || this.direction.value === 'ltr';
            /** @type {?} */

            var overlayPosition;

            if (position === 'top') {
              overlayPosition = {
                overlayX: 'center',
                overlayY: 'bottom'
              };
            } else if (position === 'bottom') {
              overlayPosition = {
                overlayX: 'center',
                overlayY: 'top'
              };
            } else if (position === 'top' || position === 'left' && isLtr || position === 'right' && !isLtr) {
              overlayPosition = {
                overlayX: 'end',
                overlayY: 'center'
              };
            } else if (position === 'bottom' || position === 'right' && isLtr || position === 'left' && !isLtr) {
              overlayPosition = {
                overlayX: 'start',
                overlayY: 'center'
              };
            } else {
              throw getMcTooltipInvalidPositionError(position);
            }

            var _this$invertPosition2 = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),
                x = _this$invertPosition2.x,
                y = _this$invertPosition2.y;

            return {
              main: overlayPosition,
              fallback: {
                overlayX: x,
                overlayY: y
              }
            };
          }
          /**
           * Inverts an overlay position.
           * @private
           * @param {?} x
           * @param {?} y
           * @return {?}
           */

        }, {
          key: "invertPosition",
          value: function invertPosition(x, y) {
            /** @type {?} */
            var newX = x;
            /** @type {?} */

            var newY = y;

            if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {
              if (y === 'top') {
                newY = 'bottom';
              } else if (y === 'bottom') {
                newY = 'top';
              }
            } else {
              if (x === 'end') {
                newX = 'start';
              } else if (x === 'start') {
                newX = 'end';
              }
            }

            return {
              x: newX,
              y: newY
            };
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getTooltipArrowElem",
          value: function getTooltipArrowElem() {
            var _a;
            /** @type {?} */


            var arrowClassName = 'mc-tooltip-arrow';
            return (_a = this.overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.getElementsByClassName(arrowClassName)[0];
          }
        }, {
          key: "mcTitle",
          get: function get() {
            return this._mcTitle;
          }
          /**
           * @param {?} title
           * @return {?}
           */
          ,
          set: function set(title) {
            this._mcTitle = title;
            this.updateCompValue('mcTitle', title);
          }
          /**
           * @param {?} title
           * @return {?}
           */

        }, {
          key: "setTitle",
          set: function set(title) {
            this.mcTitle = title;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
            this.updateCompValue('mcTooltipDisabled', value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcMouseEnterDelay",
          get: function get() {
            return this._mcMouseEnterDelay;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcMouseEnterDelay = value;
            this.updateCompValue('mcMouseEnterDelay', value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcMouseLeaveDelay",
          get: function get() {
            return this._mcMouseLeaveDelay;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcMouseLeaveDelay = value;
            this.updateCompValue('mcMouseLeaveDelay', value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcTrigger",
          get: function get() {
            return this._mcTrigger;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value) {
              this._mcTrigger = value;
              this.updateCompValue('mcTrigger', value);
            } else {
              this._mcTrigger = 'hover';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPlacement",
          get: function get() {
            return this._mcPlacement;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value) {
              this._mcPlacement = value;
              this.updateCompValue('mcPlacement', value);
            } else {
              this._mcPlacement = 'top';
            }

            if (this.mcVisible) {
              this.updatePosition();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcTooltipClass",
          get: function get() {
            return this._mcTooltipClass;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value) {
              this._mcTooltipClass = value;
              this.updateCompValue('mcTooltipClass', value);
            } else {
              this._mcTooltipClass = '';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcVisible",
          get: function get() {
            return this._mcVisible;
          }
          /**
           * @param {?} externalValue
           * @return {?}
           */
          ,
          set: function set(externalValue) {
            /** @type {?} */
            var value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(externalValue);

            if (this._mcVisible !== value) {
              this._mcVisible = value;
              this.updateCompValue('mcVisible', value);

              if (value) {
                this.show();
              } else {
                this.hide();
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcArrowPlacement",
          get: function get() {
            return this._mcArrowPlacement;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcArrowPlacement = value;
          }
        }]);

        return McTooltip;
      }();

      McTooltip.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: '[mcTooltip], [attribute^="mcTooltip"]',
          exportAs: 'mcTooltip',
          host: {
            '[class.mc-tooltip-open]': 'isTooltipOpen',
            '[class.disabled]': 'parentDisabled',
            '(keydown)': 'handleKeydown($event)',
            '(touchend)': 'handleTouchend()'
          }
        }]
      }];
      /** @nocollapse */

      McTooltip.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }, {
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["ScrollDispatcher"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MC_TOOLTIP_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }];
      };

      McTooltip.propDecorators = {
        mcVisibleChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        mcTitle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcTooltip']
        }],
        setTitle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcTitle']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcTooltipDisabled']
        }],
        mcMouseEnterDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcMouseLeaveDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcTrigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcPlacement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcTooltipClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcVisible: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        mcArrowPlacement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tooltip.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McToolTipModule = function McToolTipModule() {
        _classCallCheck(this, McToolTipModule);
      };

      McToolTipModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          declarations: [McTooltipComponent, McTooltip],
          exports: [McTooltipComponent, McTooltip],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"]],
          providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],
          entryComponents: [McTooltipComponent]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-tooltip.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-tooltip.js.map

      /***/
    },

    /***/
    "YR5S":
    /*!*****************************************************************************!*\
      !*** ./packages/docs/src/app/shared/table-of-contents/table-of-contents.ts ***!
      \*****************************************************************************/

    /*! exports provided: TableOfContents */

    /***/
    function YR5S(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TableOfContents", function () {
        return TableOfContents;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _table_of_contents_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./table-of-contents.scss */
      "kOpU");
      /* harmony import */


      var _raw_loader_table_of_contents_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! raw-loader!./table-of-contents.html */
      "gn63");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/router */
      "iInd");

      var TableOfContents = /*#__PURE__*/function () {
        function TableOfContents(_document, _router, _route) {
          _classCallCheck(this, TableOfContents);

          this._document = _document;
          this._router = _router;
          this._route = _route;
          this.links = [];
          this.headerSelectors = '.docs-markdown h3, .docs-markdown h4'; // tslint:disable-next-line

          this._rootUrl = this._router.url.split('#')[0];
          this.links = this.createLinks();
        }

        _createClass(TableOfContents, [{
          key: "createLinks",
          value: function createLinks() {
            var links = [];
            var headers = Array.from(this._document.querySelectorAll(this.headerSelectors));

            if (headers.length) {
              var _iterator5 = _createForOfIteratorHelper(headers),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var header = _step5.value;
                  var name = header.innerText.trim().replace(/^link/, '');

                  var _header$getBoundingCl = header.getBoundingClientRect(),
                      top = _header$getBoundingCl.top;

                  links.push({
                    name: name,
                    type: header.tagName.toLowerCase(),
                    top: top,
                    id: header.id,
                    active: false
                  });
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }

            return links;
          }
        }]);

        return TableOfContents;
      }();

      TableOfContents.ctorParameters = function () {
        return [{
          type: Document,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
          }]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]
        }];
      };

      TableOfContents.propDecorators = {
        links: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }],
        headerSelectors: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }]
      };
      TableOfContents = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'table-of-contents',
        template: _raw_loader_table_of_contents_html__WEBPACK_IMPORTED_MODULE_2__["default"],
        styles: [_table_of_contents_scss__WEBPACK_IMPORTED_MODULE_1__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [Document, _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]])], TableOfContents);
      /***/
    },

    /***/
    "ZGWQ":
    /*!***********************************************************************!*\
      !*** ./packages/docs/src/app/components/footer/footer.component.scss ***!
      \***********************************************************************/

    /*! exports provided: default */

    /***/
    function ZGWQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".docs-footer {\n  position: fixed;\n  bottom: 0;\n  z-index: 100;\n  width: 100%;\n  will-change: transform;\n  padding-left: 300px;\n  padding-right: 300px;\n}\n\n.docs-footer__wrapper {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-right: 68px;\n  margin-left: 68px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\n\n.docs-footer__text-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.docs-footer__link {\n  display: inline-flex;\n}\n\n.docs-footer__icon {\n  width: 23.3px;\n  height: 22.7px;\n  opacity: 0.8;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFlO0VBQ2YsU0FBUztFQUNULFlBQVk7RUFDWixXQUFXO0VBQ1gsc0JBQXNCO0VBRWxCLG1CQUFXO0VBQ1gsb0JBQVk7QUFBcEI7O0FBR0k7RUFDSSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFHZixrQkFBVztFQUNYLGlCQUFVO0VBR1YsaUJBQVM7RUFDVCxvQkFBWTtBQUp4Qjs7QUFRSTtFQUNJLGFBQWE7RUFDYixzQkFBc0I7QUFMOUI7O0FBUUk7RUFBVSxvQkFBb0I7QUFKbEM7O0FBTUk7RUFDSSxhQUFhO0VBQ2IsY0FBYztFQUNkLFlBQVk7QUFIcEIiLCJmaWxlIjoicGFja2FnZXMvZG9jcy9zcmMvYXBwL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5kb2NzLWZvb3RlciB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIGJvdHRvbTogMDtcbiAgICB6LWluZGV4OiAxMDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbiAgICBwYWRkaW5nOiB7XG4gICAgICAgIGxlZnQ6IDMwMHB4O1xuICAgICAgICByaWdodDogMzAwcHg7XG4gICAgfTtcblxuICAgICZfX3dyYXBwZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgbWFyZ2luOiB7XG4gICAgICAgICAgICByaWdodDogNjhweDtcbiAgICAgICAgICAgIGxlZnQ6IDY4cHg7XG4gICAgICAgIH07XG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIHRvcDogMTJweDtcbiAgICAgICAgICAgIGJvdHRvbTogMTJweDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAmX190ZXh0LXdyYXBwZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cblxuICAgICZfX2xpbmsgeyBkaXNwbGF5OiBpbmxpbmUtZmxleDsgfVxuXG4gICAgJl9faWNvbiB7XG4gICAgICAgIHdpZHRoOiAyMy4zcHg7XG4gICAgICAgIGhlaWdodDogMjIuN3B4O1xuICAgICAgICBvcGFjaXR5OiAwLjg7XG4gICAgfVxufVxuIl19 */";
      /***/
    },

    /***/
    "Zbv+":
    /*!***************************************************!*\
      !*** ./packages/docs/src/app/containers/index.ts ***!
      \***************************************************/

    /*! exports provided: HomepageComponent, HomepageModule */

    /***/
    function Zbv(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _homepage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./homepage */
      "sOMx");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "HomepageComponent", function () {
        return _homepage__WEBPACK_IMPORTED_MODULE_0__["HomepageComponent"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "HomepageModule", function () {
        return _homepage__WEBPACK_IMPORTED_MODULE_0__["HomepageModule"];
      });
      /***/

    },

    /***/
    "aRpB":
    /*!************************************************************************************!*\
      !*** ./packages/docs/src/app/shared/table-of-contents/table-of-contents.module.ts ***!
      \************************************************************************************/

    /*! exports provided: TableOfContentsModule */

    /***/
    function aRpB(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TableOfContentsModule", function () {
        return TableOfContentsModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _table_of_contents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./table-of-contents */
      "YR5S");

      var TableOfContentsModule = function TableOfContentsModule() {
        _classCallCheck(this, TableOfContentsModule);
      };

      TableOfContentsModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]],
        declarations: [_table_of_contents__WEBPACK_IMPORTED_MODULE_4__["TableOfContents"]],
        exports: [_table_of_contents__WEBPACK_IMPORTED_MODULE_4__["TableOfContents"]],
        entryComponents: [_table_of_contents__WEBPACK_IMPORTED_MODULE_4__["TableOfContents"]]
      })], TableOfContentsModule);
      /***/
    },

    /***/
    "bLap":
    /*!***************************************************************!*\
      !*** ./packages/docs/src/app/shared/copier/copier.service.ts ***!
      \***************************************************************/

    /*! exports provided: CopierService */

    /***/
    function bLap(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CopierService", function () {
        return CopierService;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /**
       * This class is based on the code in the following projects:
       *
       * - https://github.com/zenorocha/select
       * - https://github.com/zenorocha/clipboard.js/
       *
       * Both released under MIT license - © Zeno Rocha
       */


      var CopierService = /*#__PURE__*/function () {
        function CopierService() {
          _classCallCheck(this, CopierService);
        }

        _createClass(CopierService, [{
          key: "copyText",

          /** Copy the text value to the clipboard. */
          value: function copyText(text) {
            this.createTextareaAndSelect(text);
            var copySuccessful = document.execCommand('copy');
            this.removeFake();
            return copySuccessful;
          }
          /**
           * Creates a hidden textarea element, sets its value from `text` property,
           * and makes a selection on it.
           */

        }, {
          key: "createTextareaAndSelect",
          value: function createTextareaAndSelect(text) {
            // Create a fake element to hold the contents to copy
            this.textarea = document.createElement('textarea'); // Prevent zooming on iOS

            this.textarea.style.fontSize = '12pt'; // Hide the element

            this.textarea.classList.add('cdk-visually-hidden'); // Move element to the same position vertically

            var yPosition = window.pageYOffset || document.documentElement.scrollTop;
            this.textarea.style.top = "".concat(yPosition, "px");
            this.textarea.setAttribute('readonly', '');
            this.textarea.value = text;
            document.body.appendChild(this.textarea);
            this.textarea.select();
            this.textarea.setSelectionRange(0, this.textarea.value.length);
          }
          /** Remove the text area from the DOM. */

        }, {
          key: "removeFake",
          value: function removeFake() {
            if (this.textarea) {
              document.body.removeChild(this.textarea);
              this.textarea = null;
            }
          }
        }]);

        return CopierService;
      }();

      CopierService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], CopierService);
      /***/
    },

    /***/
    "cF3b":
    /*!*********************************************************************!*\
      !*** ./dist/mosaic-examples/fesm2015/ptsecurity-mosaic-examples.js ***!
      \*********************************************************************/

    /*! exports provided: AbsoluteDateFormatterExample, AlertsOverviewExample, AutocompleteOverviewExample, BadgesOverviewExample, ButtonColorsExample, ButtonIconExample, ButtonOverviewExample, ButtonProgressExample, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample, CardOverviewExample, CheckboxIndeterminateExample, CheckboxOverviewExample, DatepickerCustomExample, DatepickerDisabledExample, DatepickerLanguageExample, DatepickerOverviewExample, DatepickerToggleExample, DatepickerYearExample, DropdownNestedExample, DropdownOverviewExample, EXAMPLE_COMPONENTS, EXAMPLE_LIST, EXAMPLE_MODULES, ExampleData, ExampleModule, InputNumberOverviewExample, InputOverviewExample, LayoutFlexAlignmentExample, LayoutFlexBehaviourModifiersExample, LayoutFlexOffsetsExample, LayoutFlexOrderExample, LayoutFlexOverviewExample, LinkOverviewExample, LinkPseudoExample, ListGroupsExample, ListMultipleCheckboxExample, ListMultipleKeyboardExample, ListOverviewExample, McModalCustomComponent, ModalComponentExample, ModalOverviewExample, ModalTemplateExample, NavbarOverviewExample, NumberFormatterOverviewExample, PopoverInstanceExample, PopoverOverviewExample, ProgressBarIndeterminateExample, ProgressBarOverviewExample, ProgressSpinnerIndeterminateExample, ProgressSpinnerOverviewExample, RadioOverviewExample, RangeDateFormatterExample, RelativeDateFormatterExample, SelectGroupsExample, SelectMultipleOverviewExample, SelectOverviewExample, SelectSearchOverviewExample, SelectVirtualScrollExample, SidepanelComponentExample, SidepanelExampleCustomComponent, SidepanelOverviewExample, SplitterFixedExample, SplitterNestedExample, SplitterOverviewExample, SplitterVerticalExample, TableOverviewExample, TableWithBordersExample, TabsLightExample, TabsOverviewExample, TabsStretchExample, TagsAutocompleteExample, TagsInputExample, TagsListExample, TagsOverviewExample, TextAreaOverviewExample, TimepickerOverviewExample, TimepickerRangeExample, ToggleOverviewExample, TooltipArrowPlacementExample, TooltipOverviewExample, TooltipScrollableExample, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample, TreeSelectMultipleOverviewExample, TreeSelectOverviewExample, TypographyOverviewExample, ValidationCompositeExample, ValidationGlobalExample, ValidationOnBlurExample, ValidationOnTypeExample, ValidationOverviewExample, ValidationSmallExample, WithDefaultLocaleComponent, WithENLocaleComponent, ɵa, ɵb, ɵba, ɵbb, ɵbc, ɵbd, ɵbe, ɵbf, ɵbg, ɵbh, ɵbi, ɵbj, ɵbk, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj, ɵk, ɵl, ɵm, ɵn, ɵo, ɵp, ɵq, ɵr, ɵs, ɵt, ɵu, ɵv, ɵw, ɵx, ɵy, ɵz */

    /***/
    function cF3b(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbsoluteDateFormatterExample", function () {
        return AbsoluteDateFormatterExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AlertsOverviewExample", function () {
        return AlertsOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AutocompleteOverviewExample", function () {
        return AutocompleteOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BadgesOverviewExample", function () {
        return BadgesOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonColorsExample", function () {
        return ButtonColorsExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonIconExample", function () {
        return ButtonIconExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonOverviewExample", function () {
        return ButtonOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonProgressExample", function () {
        return ButtonProgressExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonToggleMultipleOverviewExample", function () {
        return ButtonToggleMultipleOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonToggleOverviewExample", function () {
        return ButtonToggleOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CardOverviewExample", function () {
        return CardOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckboxIndeterminateExample", function () {
        return CheckboxIndeterminateExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CheckboxOverviewExample", function () {
        return CheckboxOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatepickerCustomExample", function () {
        return DatepickerCustomExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatepickerDisabledExample", function () {
        return DatepickerDisabledExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatepickerLanguageExample", function () {
        return DatepickerLanguageExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatepickerOverviewExample", function () {
        return DatepickerOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatepickerToggleExample", function () {
        return DatepickerToggleExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DatepickerYearExample", function () {
        return DatepickerYearExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropdownNestedExample", function () {
        return DropdownNestedExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropdownOverviewExample", function () {
        return DropdownOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EXAMPLE_COMPONENTS", function () {
        return EXAMPLE_COMPONENTS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EXAMPLE_LIST", function () {
        return EXAMPLE_LIST;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EXAMPLE_MODULES", function () {
        return EXAMPLE_MODULES;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExampleData", function () {
        return ExampleData;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExampleModule", function () {
        return ExampleModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InputNumberOverviewExample", function () {
        return InputNumberOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InputOverviewExample", function () {
        return InputOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LayoutFlexAlignmentExample", function () {
        return LayoutFlexAlignmentExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LayoutFlexBehaviourModifiersExample", function () {
        return LayoutFlexBehaviourModifiersExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LayoutFlexOffsetsExample", function () {
        return LayoutFlexOffsetsExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LayoutFlexOrderExample", function () {
        return LayoutFlexOrderExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LayoutFlexOverviewExample", function () {
        return LayoutFlexOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LinkOverviewExample", function () {
        return LinkOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LinkPseudoExample", function () {
        return LinkPseudoExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListGroupsExample", function () {
        return ListGroupsExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListMultipleCheckboxExample", function () {
        return ListMultipleCheckboxExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListMultipleKeyboardExample", function () {
        return ListMultipleKeyboardExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListOverviewExample", function () {
        return ListOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McModalCustomComponent", function () {
        return McModalCustomComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ModalComponentExample", function () {
        return ModalComponentExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ModalOverviewExample", function () {
        return ModalOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ModalTemplateExample", function () {
        return ModalTemplateExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NavbarOverviewExample", function () {
        return NavbarOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberFormatterOverviewExample", function () {
        return NumberFormatterOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PopoverInstanceExample", function () {
        return PopoverInstanceExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PopoverOverviewExample", function () {
        return PopoverOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProgressBarIndeterminateExample", function () {
        return ProgressBarIndeterminateExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProgressBarOverviewExample", function () {
        return ProgressBarOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProgressSpinnerIndeterminateExample", function () {
        return ProgressSpinnerIndeterminateExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ProgressSpinnerOverviewExample", function () {
        return ProgressSpinnerOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RadioOverviewExample", function () {
        return RadioOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RangeDateFormatterExample", function () {
        return RangeDateFormatterExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RelativeDateFormatterExample", function () {
        return RelativeDateFormatterExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectGroupsExample", function () {
        return SelectGroupsExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectMultipleOverviewExample", function () {
        return SelectMultipleOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectOverviewExample", function () {
        return SelectOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectSearchOverviewExample", function () {
        return SelectSearchOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectVirtualScrollExample", function () {
        return SelectVirtualScrollExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SidepanelComponentExample", function () {
        return SidepanelComponentExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SidepanelExampleCustomComponent", function () {
        return SidepanelExampleCustomComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SidepanelOverviewExample", function () {
        return SidepanelOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SplitterFixedExample", function () {
        return SplitterFixedExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SplitterNestedExample", function () {
        return SplitterNestedExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SplitterOverviewExample", function () {
        return SplitterOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SplitterVerticalExample", function () {
        return SplitterVerticalExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TableOverviewExample", function () {
        return TableOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TableWithBordersExample", function () {
        return TableWithBordersExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TabsLightExample", function () {
        return TabsLightExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TabsOverviewExample", function () {
        return TabsOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TabsStretchExample", function () {
        return TabsStretchExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TagsAutocompleteExample", function () {
        return TagsAutocompleteExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TagsInputExample", function () {
        return TagsInputExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TagsListExample", function () {
        return TagsListExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TagsOverviewExample", function () {
        return TagsOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TextAreaOverviewExample", function () {
        return TextAreaOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimepickerOverviewExample", function () {
        return TimepickerOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimepickerRangeExample", function () {
        return TimepickerRangeExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ToggleOverviewExample", function () {
        return ToggleOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TooltipArrowPlacementExample", function () {
        return TooltipArrowPlacementExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TooltipOverviewExample", function () {
        return TooltipOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TooltipScrollableExample", function () {
        return TooltipScrollableExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeFilteringExample", function () {
        return TreeFilteringExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeMultipleCheckboxExample", function () {
        return TreeMultipleCheckboxExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeMultipleChecklistExample", function () {
        return TreeMultipleChecklistExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeMultipleKeyboardExample", function () {
        return TreeMultipleKeyboardExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeOverviewExample", function () {
        return TreeOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeSelectMultipleOverviewExample", function () {
        return TreeSelectMultipleOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeSelectOverviewExample", function () {
        return TreeSelectOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TypographyOverviewExample", function () {
        return TypographyOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationCompositeExample", function () {
        return ValidationCompositeExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationGlobalExample", function () {
        return ValidationGlobalExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationOnBlurExample", function () {
        return ValidationOnBlurExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationOnTypeExample", function () {
        return ValidationOnTypeExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationOverviewExample", function () {
        return ValidationOverviewExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ValidationSmallExample", function () {
        return ValidationSmallExample;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WithDefaultLocaleComponent", function () {
        return WithDefaultLocaleComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WithENLocaleComponent", function () {
        return WithENLocaleComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return mcDateAdapterFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return mcDateFormatsFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵba", function () {
        return TableExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbb", function () {
        return TabsExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbc", function () {
        return TagsExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbd", function () {
        return TextAreaExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbe", function () {
        return TimepickerExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbf", function () {
        return ToggleExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbg", function () {
        return TooltipExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbh", function () {
        return TreeSelectExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbi", function () {
        return TreeExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbj", function () {
        return TypographyExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵbk", function () {
        return ValidationExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return AlertsExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵd", function () {
        return AutocompleteExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵe", function () {
        return BadgesExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵf", function () {
        return ButtonToggleExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵg", function () {
        return ButtonExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵh", function () {
        return CardExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵi", function () {
        return CheckboxExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵj", function () {
        return DateFormatterExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵk", function () {
        return DatepickerExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵl", function () {
        return DropdownExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵm", function () {
        return InputExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵn", function () {
        return FlexLayoutExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵo", function () {
        return LinkExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵp", function () {
        return ListExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵq", function () {
        return ModalExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵr", function () {
        return NavbarExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵs", function () {
        return NumberFormatterExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵt", function () {
        return PopoverExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵu", function () {
        return ProgressBarExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵv", function () {
        return ProgressSpinnerExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵw", function () {
        return RadioExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵx", function () {
        return SelectExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵy", function () {
        return SidepanelExamplesModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵz", function () {
        return SplitterExamplesModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/cdk/datetime */
      "5vLs");
      /* harmony import */


      var _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic-moment-adapter/adapter */
      "NlUg");
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! moment */
      "wd/R");
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_6__);
      /* harmony import */


      var _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/modal */
      "Nr+a");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _ptsecurity_mosaic_popover__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @ptsecurity/mosaic/popover */
      "mYO9");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "7KAL");
      /* harmony import */


      var _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @ptsecurity/mosaic/sidepanel */
      "vEog");
      /* harmony import */


      var _ptsecurity_mosaic_autocomplete__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ptsecurity/mosaic/autocomplete */
      "RtxV");
      /* harmony import */


      var _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tags */
      "9hGJ");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tooltip */
      "YK9X");
      /* harmony import */


      var _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! @ptsecurity/cdk/tree */
      "oznV");
      /* harmony import */


      var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tree */
      "wd6P");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! @angular/platform-browser */
      "cUpR");
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      "omvX");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! @ptsecurity/mosaic/link */
      "8pH+");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! @ptsecurity/mosaic/input */
      "qvb6");
      /* harmony import */


      var _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button-toggle */
      "TuQC");
      /* harmony import */


      var _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! @ptsecurity/mosaic/checkbox */
      "LyUW");
      /* harmony import */


      var _ptsecurity_mosaic_card__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
      /*! @ptsecurity/mosaic/card */
      "2w20");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _ptsecurity_mosaic_datepicker__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
      /*! @ptsecurity/mosaic/datepicker */
      "5F9T");
      /* harmony import */


      var _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
      /*! @ptsecurity/mosaic/radio */
      "59Z+");
      /* harmony import */


      var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
      /*! @ptsecurity/mosaic/dropdown */
      "kGUy");
      /* harmony import */


      var _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
      /*! @ptsecurity/mosaic/select */
      "2nOP");
      /* harmony import */


      var _ptsecurity_mosaic_list__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
      /*! @ptsecurity/mosaic/list */
      "rC5u");
      /* harmony import */


      var _ptsecurity_mosaic_navbar__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
      /*! @ptsecurity/mosaic/navbar */
      "t/jU");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _ptsecurity_mosaic_splitter__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
      /*! @ptsecurity/mosaic/splitter */
      "DQSY");
      /* harmony import */


      var _ptsecurity_mosaic_progress_bar__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
      /*! @ptsecurity/mosaic/progress-bar */
      "JEqS");
      /* harmony import */


      var _ptsecurity_mosaic_progress_spinner__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
      /*! @ptsecurity/mosaic/progress-spinner */
      "E6iK");
      /* harmony import */


      var _ptsecurity_mosaic_table__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
      /*! @ptsecurity/mosaic/table */
      "gVDO");
      /* harmony import */


      var _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tabs */
      "6AiE");
      /* harmony import */


      var _ptsecurity_mosaic_textarea__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
      /*! @ptsecurity/mosaic/textarea */
      "Gncw");
      /* harmony import */


      var _ptsecurity_mosaic_timepicker__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
      /*! @ptsecurity/mosaic/timepicker */
      "ypJ8");
      /* harmony import */


      var _ptsecurity_mosaic_toggle__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
      /*! @ptsecurity/mosaic/toggle */
      "GEIk");
      /* harmony import */


      var _ptsecurity_mosaic_tree_select__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tree-select */
      "f6Xg");
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/alerts/alerts-overview/alerts-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Alerts
       */


      var AlertsOverviewExample = /*#__PURE__*/function () {
        function AlertsOverviewExample() {
          _classCallCheck(this, AlertsOverviewExample);

          this.alertsAmount = 16;
          this.shownAlerts = Array.from(Array(this.alertsAmount).keys());
        }
        /**
         * @param {?} id
         * @return {?}
         */


        _createClass(AlertsOverviewExample, [{
          key: "isAlertShown",
          value: function isAlertShown(id) {
            return this.shownAlerts.indexOf(id) !== -1;
          }
          /**
           * @param {?} id
           * @return {?}
           */

        }, {
          key: "hideAlert",
          value: function hideAlert(id) {
            /** @type {?} */
            var index = this.shownAlerts.findIndex(
            /**
            * @param {?} alertId
            * @return {?}
            */
            function (alertId) {
              return alertId === id;
            });
            this.shownAlerts.splice(index, 1);
          }
        }]);

        return AlertsOverviewExample;
      }();

      AlertsOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'alerts-overview-example',
          template: "<div class=\"alert-example-group\">\n    <div class=\"flex-33 mc-column-container\">\n        <h3>Colors</h3>\n\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(1)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(1)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_warning mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(2)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(2)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_success mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(3)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(3)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_info mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(4)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(4)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(5)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(5)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n    </div>\n    <div class=\"flex-33 mc-column-container\">\n        <h3>Normal composition</h3>\n\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(6)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(6)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_warning mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(7)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(7)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_success mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(8)\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(8)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n\n\n        <div class=\"mc-alert mc-alert_info\" [@hideShowAnimator]=\"isAlertShown(9)\">\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n                <div class=\"alert-footer\">\n                    <button mc-button color=\"primary\" (click)=\"hideAlert(9)\">Close</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"flex-33 mc-column-container\">\n        <h3>Small composition</h3>\n\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(10)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(10)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_warning mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(11)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(11)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_success mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(12)\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(12)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_info mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(13)\">\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n                <div class=\"alert-footer\">\n                    <a class=\"mc-link mc-link_dashed\" (click)=\"hideAlert(13)\">\n                        <span class=\"mc-link__text\">Close</span>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"mc-column-container\">\n    <h2>Long text</h2>\n</div>\n\n<div class=\"alert-example-group\">\n    <div class=\"flex-50 mc-column-container\">\n        <h3>Normal composition</h3>\n\n        <div class=\"mc-alert mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(14)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed iaculis risus ac varius ultricies. Aenean maximus ex at ornare tempus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Quisque sit amet ipsum id augue porta dignissim tristique at nibh. Nullam interdum libero in laoreet pretium. Maecenas et placerat sem. Donec fringilla viverra nunc in vestibulum. Pellentesque suscipit odio ut erat ullamcorper pellentesque eget ac elit. Quisque eleifend orci sit amet erat bibendum sollicitudin. Donec elementum facilisis dui, at volutpat purus. Aliquam posuere non lacus sollicitudin aliquam. Donec nec semper diam, eget imperdiet dui. Integer ornare quam magna, a pretium metus iaculis non. Ut fermentum risus vel sem accumsan, ac egestas nulla sollicitudin. Vivamus nec mi mauris.\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(14)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"flex-50 mc-column-container\">\n        <h3>Small composition</h3>\n\n        <div class=\"mc-alert mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(15)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed iaculis risus ac varius ultricies. Aenean maximus ex at ornare tempus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Quisque sit amet ipsum id augue porta dignissim tristique at nibh. Nullam interdum libero in laoreet pretium. Maecenas et placerat sem. Donec fringilla viverra nunc in vestibulum. Pellentesque suscipit odio ut erat ullamcorper pellentesque eget ac elit. Quisque eleifend orci sit amet erat bibendum sollicitudin. Donec elementum facilisis dui, at volutpat purus. Aliquam posuere non lacus sollicitudin aliquam. Donec nec semper diam, eget imperdiet dui. Integer ornare quam magna, a pretium metus iaculis non. Ut fermentum risus vel sem accumsan, ac egestas nulla sollicitudin. Vivamus nec mi mauris.\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(15)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>\n            </button>\n        </div>\n    </div>\n</div>\n",
          animations: [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('hideShowAnimator', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({
            opacity: 1,
            display: ''
          })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({
            opacity: 0,
            display: 'none'
          })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('false => true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])('.5s')), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('true => false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])('.2s'))])],
          styles: [".alert-example-group{display:flex;flex:1 1 100%;flex-direction:row;max-height:100%;max-width:100%}.mc-column-container{margin-left:15px;margin-right:15px}.mc-alert{margin-bottom:15px}.alert-footer{margin-top:8px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/autocomplete/autocomplete-overview/autocomplete-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Input
       */


      var AutocompleteOverviewExample = /*#__PURE__*/function () {
        function AutocompleteOverviewExample() {
          _classCallCheck(this, AutocompleteOverviewExample);

          this.options = ['Abkhazia', 'Australia', 'Austria', 'Azerbaijan', 'Aland Islands', 'Albania', 'Algeria', 'Anguilla', 'Angola', 'Andorra', 'Argentina', 'Armenia', 'Aruba', 'Afghanistan', 'Bahamas', 'Bangladesh', 'Barbados', 'Bahrain', 'Belarus', 'Belize', 'Belgium', 'Benin', 'Bulgaria', 'Bolivia', 'Bosnia & Herzegovina', 'Botswana', 'Brazil', 'Brunei Darussalam', 'Burundi', 'Bhutan', 'Vatican City', 'United Kingdom', 'Hungary', 'Venezuela', 'Timor', 'Viet Nam', 'Gabon', 'Haiti', 'Gambia', 'Ghana', 'Guadeloupe', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Germany', 'Gibraltar', 'Hong Kong', 'Honduras', 'Grenada', 'Greenland', 'Greece', 'Georgia', 'Guam', 'Denmark', 'Dominica', 'Dominican Republic', 'Egypt', 'Zambia', 'Western Sahara', 'Zimbabwe', 'Israel', 'India', 'Indonesia', 'Jordan', 'Iraq', 'Iran', 'Ireland', 'Iceland', 'Spain', 'Italy', 'Yemen', 'Kazakhstan', 'Cambodia', 'Cameroon', 'Canada', 'Qatar', 'Kenya', 'Cyprus', 'Kyrgyzstan', 'Kiribati', 'China', 'Colombia', 'Korea, D.P.R.', 'Korea', 'Costa Rica', 'Cote d\'Ivoire', 'Cuba', 'Kuwait', 'Lao P.D.R.', 'Latvia', 'Lesotho', 'Liberia', 'Lebanon', 'Libyan Arab Jamahiriya', 'Lithuania', 'Liechtenstein', 'Luxembourg', 'Mauritius', 'Mauritania', 'Madagascar', 'Macedonia', 'Malawi', 'Malaysia', 'Mali', 'Maldives', 'Malta', 'Morocco', 'Mexico', 'Mozambique', 'Moldova', 'Monaco', 'Mongolia', 'Namibia', 'Nepal', 'Niger', 'Nigeria', 'Netherlands', 'Nicaragua', 'New Zealand', 'Norway', 'United Arab Emirates', 'Oman', 'Pakistan', 'Panama', 'Paraguay', 'Peru', 'Poland', 'Portugal', 'Russia', 'Romania', 'San Marino', 'Saudi Arabia', 'Senegal', 'Serbia', 'Singapore', 'Syrian Arab Republic', 'Slovakia', 'Slovenia', 'Somalia', 'Sudan', 'USA', 'Tajikistan', 'Thailand', 'Tanzania', 'Togo', 'Tunisia', 'Turkmenistan', 'Turkey', 'Uganda', 'Uzbekistan', 'Ukraine', 'Uruguay', 'Micronesia', 'Fiji', 'Philippines', 'Finland', 'France', 'Croatia', 'Chad', 'Montenegro', 'Czech Republic', 'Chile', 'Switzerland', 'Sweden', 'Sri Lanka', 'Ecuador', 'Eritrea', 'Estonia', 'Ethiopia', 'South Africa', 'Jamaica', 'Japan'];
          this.control = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('');
        }
        /**
         * @return {?}
         */


        _createClass(AutocompleteOverviewExample, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this122 = this;

            this.filteredOptions = this.control.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this122.filter(value);
            }));
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "filter",
          value: function filter(value) {
            /** @type {?} */
            var filterValue = value.toLowerCase();
            return this.options.filter(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.toLowerCase().includes(filterValue);
            });
          }
        }]);

        return AutocompleteOverviewExample;
      }();

      AutocompleteOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'autocomplete-overview-example',
          template: "<label>Enter countries to see autocomplete</label>\n<mc-form-field>\n    <input type=\"text\" mcInput [mcAutocomplete]=\"auto\" [formControl]=\"control\"/>\n\n    <mc-autocomplete #auto=\"mcAutocomplete\">\n        <mc-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">{{ option }}</mc-option>\n    </mc-autocomplete>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/badges/badges-overview/badges-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Badges
       */


      var BadgesOverviewExample = function BadgesOverviewExample() {
        _classCallCheck(this, BadgesOverviewExample);
      };

      BadgesOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'badges-overview-example',
          template: "<div class=\"mc-body\">\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge\">New</span>\n        <span class=\"mc-badge mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_light\">New</span>\n        <span class=\"mc-badge mc-badge_light mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_transparent\">New</span>\n        <span class=\"mc-badge mc-badge_transparent mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_primary\">New</span>\n        <span class=\"mc-badge mc-badge_primary mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_warning\">New</span>\n        <span class=\"mc-badge mc-badge_warning mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_error\">New</span>\n        <span class=\"mc-badge mc-badge_error mc-badge_caps\">in progress</span>\n    </div>\n\n    <div>\n        <span class=\"mc-badge mc-badge_success\">New</span>\n        <span class=\"mc-badge mc-badge_success mc-badge_caps\">in progress</span>\n    </div>\n</div>\n",
          styles: [".vertical-gap{margin-bottom:16px}.mc-badge{margin-right:8px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button-toggle/button-toggle-multiple-overview/button-toggle-multiple-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic button-toggle
       */

      var ButtonToggleMultipleOverviewExample = function ButtonToggleMultipleOverviewExample() {
        _classCallCheck(this, ButtonToggleMultipleOverviewExample);
      };

      ButtonToggleMultipleOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'button-toggle-multiple-overview-example',
          template: "<mc-button-toggle-group multiple #multipleGroup=\"mcButtonToggleGroup\">\n    <mc-button-toggle value=\"1\">\n        button 1\n    </mc-button-toggle>\n    <mc-button-toggle value=\"2\">\n        button 2\n    </mc-button-toggle>\n    <mc-button-toggle value=\"3\">\n        button 3\n    </mc-button-toggle>\n</mc-button-toggle-group>\n\n<br><br><br>\n\n<div>Selected value: {{ multipleGroup.value }}</div>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button-toggle/button-toggle-overview/button-toggle-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title button-toggle
       */

      var ButtonToggleOverviewExample = function ButtonToggleOverviewExample() {
        _classCallCheck(this, ButtonToggleOverviewExample);
      };

      ButtonToggleOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'button-toggle-overview-example',
          template: "<mc-button-toggle-group #group1=\"mcButtonToggleGroup\">\n    <mc-button-toggle value=\"1\">\n        button 1\n    </mc-button-toggle>\n    <mc-button-toggle value=\"2\">\n        button 2\n    </mc-button-toggle>\n    <mc-button-toggle value=\"3\">\n        button 3\n    </mc-button-toggle>\n    <mc-button-toggle value=\"4\">\n        button 4\n    </mc-button-toggle>\n</mc-button-toggle-group>\n\n<br><br><br>\n\n<div>Selected value: {{ group1.value }}</div>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button/button-colors/button-colors-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Button's colors
       */

      var ButtonColorsExample = function ButtonColorsExample() {
        _classCallCheck(this, ButtonColorsExample);
      };

      ButtonColorsExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'button-colors-example',
          template: "<div class=\"example-button-group\">\n    <button class=\"example-button\" mc-button color=\"primary\">Primary</button>\n    <button class=\"example-button\" mc-button color=\"second\">Second</button>\n    <button class=\"example-button\" mc-button color=\"error\">Error</button>\n    <button class=\"example-button mc-button_transparent\" mc-button color=\"second\">Transparent second and primary</button>\n    <button class=\"example-button mc-button_transparent\" mc-button color=\"error\">Transparent error</button>\n</div>\n\n",
          styles: [".example-button-group{display:inline-flex;flex-direction:column}.example-button{margin-bottom:10px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button/button-icon/button-icon-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Icon button
       */

      var ButtonIconExample = function ButtonIconExample() {
        _classCallCheck(this, ButtonIconExample);
      };

      ButtonIconExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'button-icon-example',
          template: "<button mc-button>\n    <i mc-icon=\"mc-play_16\"></i>\n    Click me!\n</button>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button/button-overview/button-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic button
       */

      var ButtonOverviewExample = function ButtonOverviewExample() {
        _classCallCheck(this, ButtonOverviewExample);

        this.isDisabled = false;
      };

      ButtonOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'button-overview-example',
          template: "<div class=\"example-button-group\">\n    <button class=\"example-button\" mc-button [disabled]=\"isDisabled\">Click me!</button>\n    <mc-checkbox [(ngModel)]=\"isDisabled\">Disabled</mc-checkbox>\n</div>\n",
          styles: [".example-button-group{display:inline-flex;flex-direction:column}.example-button{margin-bottom:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button/button-progress/button-progress-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Progress button
       */


      var ButtonProgressExample = function ButtonProgressExample() {
        _classCallCheck(this, ButtonProgressExample);
      };

      ButtonProgressExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'button-progress-example',
          template: "<button mc-button class=\"mc-progress\" color=\"primary\">Click me!</button>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/card/card-overview/card-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Card
       */

      var CardOverviewExample = function CardOverviewExample() {
        _classCallCheck(this, CardOverviewExample);
      };

      CardOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'card-overview-example',
          template: "<div class=\"layout-row layout-wrap block\">\n    <mc-card class=\"mc-card_info\">\n        <div class=\"mc-title\">Info</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_info</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_warning\">\n        <div class=\"mc-title\">Warning</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_warning</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_success\">\n        <div class=\"mc-title\">Success</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_success</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_error\">\n        <div class=\"mc-title\">Error</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_error</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_white\">\n        <div class=\"mc-title\">White</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_white</span></div>\n    </mc-card>\n</div>\n",
          styles: [".mc-card{display:block;margin-bottom:.5rem;margin-right:1rem;padding:.3rem;width:180px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/checkbox/checkbox-indeterminate/checkbox-indeterminate-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */

      function ICheckbox() {}

      if (false) {}
      /**
       * \@title Indeterminate checkbox
       */


      var CheckboxIndeterminateExample = /*#__PURE__*/function () {
        /**
         * @param {?} ref
         */
        function CheckboxIndeterminateExample(ref) {
          _classCallCheck(this, CheckboxIndeterminateExample);

          this.ref = ref;
          this.parentIndeterminate = true;
          this.parentChecked = true;
          this.fruits = [{
            name: 'Apples',
            checked: true
          }, {
            name: 'Bananas',
            checked: false
          }, {
            name: 'Grapes',
            checked: false
          }];
        }
        /**
         * @param {?} index
         * @return {?}
         */


        _createClass(CheckboxIndeterminateExample, [{
          key: "updateCheckboxes",
          value: function updateCheckboxes(index) {
            this.toggleFruitChecked(index);
            this.updateIndeterminate();
            this.ref.detectChanges();
          }
          /**
           * @param {?} index
           * @return {?}
           */

        }, {
          key: "toggleFruitChecked",
          value: function toggleFruitChecked(index) {
            this.fruits[index].checked = !this.fruits[index].checked;
          }
          /**
           * @return {?}
           */

        }, {
          key: "toggleChecked",
          value: function toggleChecked() {
            this.parentChecked = !this.parentChecked;

            var _iterator6 = _createForOfIteratorHelper(this.fruits),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var fruit = _step6.value;
                fruit.checked = this.parentChecked;
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }

            this.parentIndeterminate = false;
            this.ref.detectChanges();
          }
          /**
           * @return {?}
           */

        }, {
          key: "updateIndeterminate",
          value: function updateIndeterminate() {
            /** @type {?} */
            var checked = 0;
            /** @type {?} */

            var unchecked = 0;
            /** @type {?} */

            var length = this.fruits.length;
            this.fruits.forEach(
            /**
            * @param {?} fruit
            * @return {?}
            */
            function (fruit) {
              fruit.checked ? checked++ : unchecked++;
            });
            this.parentIndeterminate = checked !== length && unchecked !== length;
            this.parentChecked = this.parentIndeterminate || length === checked;
          }
        }]);

        return CheckboxIndeterminateExample;
      }();

      CheckboxIndeterminateExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'checkbox-indeterminate-example',
          template: "<div class=\"mc-body\">\n    <mc-checkbox  [checked]=\"parentChecked\" [indeterminate]=\"parentIndeterminate\" (change)=\"toggleChecked()\" > All fruits</mc-checkbox>\n    <p *ngFor=\"let fruit of fruits; let i = index\"><mc-checkbox [checked]=\"fruit.checked\" (change)=\"updateCheckboxes(i)\" >{{fruit.name}}</mc-checkbox>\n</div>\n\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      CheckboxIndeterminateExample.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/checkbox/checkbox-overview/checkbox-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic checkboxes
       */


      var CheckboxOverviewExample = function CheckboxOverviewExample() {
        _classCallCheck(this, CheckboxOverviewExample);
      };

      CheckboxOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'checkbox-overview-example',
          template: "<div class=\"mc-body example-section\">\n    <mc-checkbox class=\"example-margin\">Default</mc-checkbox>\n    <mc-checkbox class=\"example-margin\" [checked]=\"true\">Checked</mc-checkbox>\n    <mc-checkbox class=\"example-margin\" [checked]=\"false\">Unchecked</mc-checkbox>\n</div>\n",
          styles: [".example-section{display:flex;flex-direction:column}.example-margin{margin-bottom:10px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/date-formatter/absolute-date-formatter/absolute-date-formatter-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var moment = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      /**
       * \@title Basic progress absolute-date-formatter
       */

      var AbsoluteDateFormatterExample = /*#__PURE__*/function () {
        /**
         * @param {?} dateAdapter
         */
        function AbsoluteDateFormatterExample(dateAdapter) {
          _classCallCheck(this, AbsoluteDateFormatterExample);

          this.dateAdapter = dateAdapter;
          this.formats = {
            ru: {
              absolute: {
                "long": {
                  date: {},
                  dateTime: {}
                },
                "short": {
                  date: {},
                  dateTime: {}
                }
              }
            },
            en: {
              absolute: {
                "long": {
                  date: {},
                  dateTime: {}
                },
                "short": {
                  date: {},
                  dateTime: {}
                }
              }
            }
          };
          this.populateAbsoluteLong('ru');
          this.populateAbsoluteLong('en');
          this.populateAbsoluteShort('ru');
          this.populateAbsoluteShort('en');
        }
        /**
         * @private
         * @param {?} locale
         * @return {?}
         */


        _createClass(AbsoluteDateFormatterExample, [{
          key: "populateAbsoluteShort",
          value: function populateAbsoluteShort(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var absoluteShort = this.formats[locale].absolute["short"];
            absoluteShort.date.currentYear = this.dateAdapter.absoluteShortDate(moment());
            absoluteShort.date.notCurrentYear = this.dateAdapter.absoluteShortDate(moment().subtract(1, 'years'));
            absoluteShort.dateTime.currentYear = this.dateAdapter.absoluteShortDateTime(moment());
            absoluteShort.dateTime.notCurrentYear = this.dateAdapter.absoluteShortDateTime(moment().subtract(1, 'years'));
            absoluteShort.dateTime.milliseconds = this.dateAdapter.absoluteShortDateTime(moment(), {
              milliseconds: true
            });
            absoluteShort.dateTime.microseconds = this.dateAdapter.absoluteShortDateTime(moment(), {
              microseconds: true
            });
          }
          /**
           * @private
           * @param {?} locale
           * @return {?}
           */

        }, {
          key: "populateAbsoluteLong",
          value: function populateAbsoluteLong(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var absoluteLong = this.formats[locale].absolute["long"];
            absoluteLong.date.currentYear = this.dateAdapter.absoluteLongDate(moment());
            absoluteLong.date.notCurrentYear = this.dateAdapter.absoluteLongDate(moment().subtract(1, 'years'));
            absoluteLong.dateTime.currentYear = this.dateAdapter.absoluteLongDateTime(moment());
            absoluteLong.dateTime.notCurrentYear = this.dateAdapter.absoluteLongDateTime(moment().subtract(1, 'years'));
            absoluteLong.dateTime.milliseconds = this.dateAdapter.absoluteLongDateTime(moment(), {
              milliseconds: true
            });
            absoluteLong.dateTime.microseconds = this.dateAdapter.absoluteLongDateTime(moment(), {
              microseconds: true
            });
          }
        }]);

        return AbsoluteDateFormatterExample;
      }();

      AbsoluteDateFormatterExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'absolute-date-formatter-example',
          template: "<div class=\"mc-body\">\n    <div>\n        <h3>Long format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDate (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.date.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.date.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDate (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (with milliseconds)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.milliseconds }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.milliseconds }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (with microseconds)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.microseconds }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.microseconds }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Short format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDate (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.date.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.date.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDate (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (with milliseconds)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.milliseconds }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.milliseconds }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (with microseconds)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.microseconds }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.microseconds }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n",
          providers: [{
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"],
            useValue: 'ru'
          }, {
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
            useClass: _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MomentDateAdapter"],
            deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]]
          }],
          styles: [".light-text-secondary{color:#ccc}.row-border{border-bottom:1px solid #ccc;padding:8px}"]
        }]
      }];
      /** @nocollapse */

      AbsoluteDateFormatterExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/date-formatter/range-date-formatter/range-date-formatter-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var moment$1 = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      /**
       * \@title Basic progress range-date-formatter
       */

      var RangeDateFormatterExample = /*#__PURE__*/function () {
        /**
         * @param {?} dateAdapter
         */
        function RangeDateFormatterExample(dateAdapter) {
          _classCallCheck(this, RangeDateFormatterExample);

          this.dateAdapter = dateAdapter;
          this.formats = {
            ru: {
              range: {
                "long": {
                  date: {},
                  dateTime: {}
                },
                middle: {
                  dateTime: {}
                },
                "short": {
                  date: {},
                  dateTime: {}
                }
              }
            },
            en: {
              range: {
                "long": {
                  date: {},
                  dateTime: {}
                },
                middle: {
                  dateTime: {}
                },
                "short": {
                  date: {},
                  dateTime: {}
                }
              }
            }
          };
          this.populateRangeLong('ru');
          this.populateRangeLong('en');
          this.populateRangeMiddle('ru');
          this.populateRangeMiddle('en');
          this.populateRangeShort('ru');
          this.populateRangeShort('en');
        }
        /**
         * @private
         * @param {?} locale
         * @return {?}
         */


        _createClass(RangeDateFormatterExample, [{
          key: "populateRangeShort",
          value: function populateRangeShort(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var shortRange = this.formats[locale].range["short"];
            shortRange.date.currentMonth = this.dateAdapter.rangeShortDate(moment$1().date(1), moment$1().date(10));
            shortRange.date.notCurrentYear = this.dateAdapter.rangeShortDate(moment$1().date(1).month(1), moment$1().date(10).month(2));
            shortRange.date.startsNotCurrentYear = this.dateAdapter.rangeShortDate(moment$1().date(1).month(1).subtract(1, 'years'), moment$1().date(10).month(2));
            shortRange.date.endsNotCurrentYear = this.dateAdapter.rangeShortDate(moment$1().date(1).month(1), moment$1().date(10).month(2).add(1, 'years'));
            shortRange.dateTime.sameDateCurrentYear = this.dateAdapter.rangeShortDateTime(moment$1().date(10).hour(10).minutes(14), moment$1().date(10).hour(11).minutes(28));
            shortRange.dateTime.sameDateNotCurrentYear = this.dateAdapter.rangeShortDateTime(moment$1().date(11).month(1).subtract(1, 'years').hour(10).minutes(14), moment$1().date(11).month(1).subtract(1, 'years').hour(11).minutes(28));
            shortRange.dateTime.notCurrentMonth = this.dateAdapter.rangeShortDateTime(moment$1().date(1).month(1).hour(10).minutes(14), moment$1().date(1).month(2).hour(11).minutes(28));
            shortRange.dateTime.startsNotCurrentYear = this.dateAdapter.rangeShortDateTime(moment$1().date(1).month(1).subtract(1, 'years').hour(10).minutes(14), moment$1().date(1).month(2).hour(11).minutes(28));
            shortRange.dateTime.endsNotCurrentYear = this.dateAdapter.rangeShortDateTime(moment$1().date(1).month(1).hour(10).minutes(14), moment$1().date(1).month(2).add(1, 'years').hour(11).minutes(28));
          }
          /**
           * @private
           * @param {?} locale
           * @return {?}
           */

        }, {
          key: "populateRangeMiddle",
          value: function populateRangeMiddle(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var middleRange = this.formats[locale].range.middle;
            middleRange.dateTime.currentYear = this.dateAdapter.rangeMiddleDateTime(moment$1().date(1), moment$1().date(10));
            middleRange.dateTime.sameDateCurrentYear = this.dateAdapter.rangeMiddleDateTime(moment$1().date(10).hour(10).minutes(14), moment$1().date(10).hour(10).minutes(28));
            middleRange.dateTime.sameDateNotCurrentYear = this.dateAdapter.rangeMiddleDateTime(moment$1().date(11).month(1).subtract(1, 'years').hour(10).minutes(14), moment$1().date(11).month(1).subtract(1, 'years').hour(11).minutes(28));
            middleRange.dateTime.notCurrentMonth = this.dateAdapter.rangeMiddleDateTime(moment$1().date(1).month(1).hour(10).minutes(14), moment$1().date(1).month(2).hour(11).minutes(28));
            middleRange.dateTime.startsNotCurrentYear = this.dateAdapter.rangeMiddleDateTime(moment$1().date(1).month(1).subtract(1, 'years').hour(10).minutes(14), moment$1().date(1).month(1).hour(11).minutes(28));
            middleRange.dateTime.endsNotCurrentYear = this.dateAdapter.rangeMiddleDateTime(moment$1().date(1).month(1).hour(10).minutes(14), moment$1().date(1).month(1).add(1, 'years').hour(11).minutes(28));
          }
          /**
           * @private
           * @param {?} locale
           * @return {?}
           */

        }, {
          key: "populateRangeLong",
          value: function populateRangeLong(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var longRange = this.formats[locale].range["long"];
            longRange.date.currentMonth = this.dateAdapter.rangeLongDate(moment$1().date(1), moment$1().date(10));
            longRange.date.notCurrentYear = this.dateAdapter.rangeLongDate(moment$1().date(1).month(1), moment$1().date(10).month(2));
            longRange.date.startsNotCurrentYear = this.dateAdapter.rangeLongDate(moment$1().date(1).month(1).subtract(1, 'years'), moment$1().date(10).month(2));
            longRange.date.endsNotCurrentYear = this.dateAdapter.rangeLongDate(moment$1().date(1).month(1), moment$1().date(10).month(2).add(1, 'years'));
            longRange.dateTime.sameDateCurrentYear = this.dateAdapter.rangeLongDateTime(moment$1().date(10).hour(10).minutes(14), moment$1().date(10).hour(11).minutes(28));
            longRange.dateTime.sameDateNotCurrentYear = this.dateAdapter.rangeLongDateTime(moment$1().date(11).month(1).subtract(1, 'years').hour(10).minutes(14), moment$1().date(11).month(1).subtract(1, 'years').hour(11).minutes(28));
            longRange.dateTime.notCurrentMonth = this.dateAdapter.rangeLongDateTime(moment$1().date(1).month(1).hour(10).minutes(14), moment$1().date(1).month(2).hour(11).minutes(28));
            longRange.dateTime.startsNotCurrentYear = this.dateAdapter.rangeLongDateTime(moment$1().date(1).month(1).subtract(1, 'years').hour(10).minutes(14), moment$1().date(1).month(2).hour(11).minutes(28));
            longRange.dateTime.endsNotCurrentYear = this.dateAdapter.rangeLongDateTime(moment$1().date(1).month(1).hour(10).minutes(14), moment$1().date(1).month(2).add(1, 'years').hour(11).minutes(28));
          }
        }]);

        return RangeDateFormatterExample;
      }();

      RangeDateFormatterExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'range-date-formatter-example',
          template: "<div class=\"mc-body\">\n    <div>\n        <h3>Long format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.currentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.currentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.endsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (the same day, current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.sameDateCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.sameDateCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (the same day, not current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.sameDateNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.sameDateNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.notCurrentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.notCurrentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.endsNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Middle format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (the same day)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.sameDateCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.sameDateCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (the same day, not current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.sameDateNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.sameDateNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.notCurrentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.notCurrentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.endsNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Short format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.currentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.currentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.endsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (the same day, current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.sameDateCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.sameDateCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (the same day, not current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.sameDateNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.sameDateNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.notCurrentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.notCurrentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.endsNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n",
          providers: [{
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"],
            useValue: 'ru'
          }, {
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
            useClass: _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MomentDateAdapter"],
            deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]]
          }],
          styles: [".light-text-secondary{color:#ccc}.row-border{border-bottom:1px solid #ccc;padding:8px}"]
        }]
      }];
      /** @nocollapse */

      RangeDateFormatterExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/date-formatter/relative-date-formatter/relative-date-formatter-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var moment$2 = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      /**
       * \@title Basic progress relative-date-formatter
       */

      var RelativeDateFormatterExample = /*#__PURE__*/function () {
        /**
         * @param {?} dateAdapter
         */
        function RelativeDateFormatterExample(dateAdapter) {
          _classCallCheck(this, RelativeDateFormatterExample);

          this.dateAdapter = dateAdapter;
          this.formats = {
            ru: {
              relative: {
                "long": {},
                "short": {}
              }
            },
            en: {
              relative: {
                "long": {},
                "short": {}
              }
            }
          };
          this.populateRelativeLong('ru');
          this.populateRelativeLong('en');
          this.populateRelativeShort('ru');
          this.populateRelativeShort('en');
        }
        /**
         * @private
         * @param {?} locale
         * @return {?}
         */


        _createClass(RelativeDateFormatterExample, [{
          key: "populateRelativeShort",
          value: function populateRelativeShort(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var relativeShort = this.formats[locale].relative["short"];
            relativeShort.secondsAgo = this.dateAdapter.relativeShortDate(moment$2().subtract(1, 'seconds'));
            relativeShort.minutesAgo = this.dateAdapter.relativeShortDate(moment$2().subtract(1, 'minutes'));
            relativeShort.today = this.dateAdapter.relativeShortDate(moment$2().subtract(1, 'hours'));
            relativeShort.yesterday = this.dateAdapter.relativeShortDate(moment$2().subtract(1, 'days'));
            relativeShort.beforeYesterdayCurrentYear = this.dateAdapter.relativeShortDate(moment$2().subtract(2, 'days'));
            relativeShort.beforeYesterdayNotCurrentYear = this.dateAdapter.relativeShortDate(moment$2().subtract(1, 'years').subtract(2, 'days'));
          }
          /**
           * @private
           * @param {?} locale
           * @return {?}
           */

        }, {
          key: "populateRelativeLong",
          value: function populateRelativeLong(locale) {
            this.dateAdapter.setLocale(locale);
            /** @type {?} */

            var relativeLong = this.formats[locale].relative["long"];
            relativeLong.secondsAgo = this.dateAdapter.relativeLongDate(moment$2().subtract(1, 'seconds'));
            relativeLong.minutesAgo = this.dateAdapter.relativeLongDate(moment$2().subtract(1, 'minutes'));
            relativeLong.today = this.dateAdapter.relativeLongDate(moment$2().subtract(1, 'hours'));
            relativeLong.yesterday = this.dateAdapter.relativeLongDate(moment$2().subtract(1, 'days'));
            relativeLong.beforeYesterdayCurrentYear = this.dateAdapter.relativeLongDate(moment$2().subtract(2, 'days'));
            relativeLong.beforeYesterdayNotCurrentYear = this.dateAdapter.relativeLongDate(moment$2().subtract(1, 'years').subtract(2, 'days'));
          }
        }]);

        return RelativeDateFormatterExample;
      }();

      RelativeDateFormatterExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'relative-date-formatter-example',
          template: "<div class=\"mc-body\">\n    <div>\n        <h3>Long format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">SecondsAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.secondsAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.secondsAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">MinutesAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.minutesAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.minutesAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Today</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.today }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.today }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Yesterday</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.yesterday }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.yesterday }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.beforeYesterdayCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.beforeYesterdayCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.beforeYesterdayNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.beforeYesterdayNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Short format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">SecondsAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.secondsAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.secondsAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">MinutesAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.minutesAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.minutesAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Today</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.today }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.today }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Yesterday</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.yesterday }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.yesterday }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.beforeYesterdayCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.beforeYesterdayCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.beforeYesterdayNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.beforeYesterdayNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n",
          providers: [{
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"],
            useValue: 'ru'
          }, {
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
            useClass: _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MomentDateAdapter"],
            deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]]
          }],
          styles: [".light-text-secondary{color:#ccc}.row-border{border-bottom:1px solid #ccc;padding:8px}"]
        }]
      }];
      /** @nocollapse */

      RelativeDateFormatterExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/datepicker-custom/datepicker-custom-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // @dynamic

      /**
       * @param {?} locale
       * @return {?}
       */


      function mcDateAdapterFactory(locale) {
        /** @type {?} */
        var dateAdapter = new _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MomentDateAdapter"](locale);
        dateAdapter.updateLocaleData({
          firstDayOfWeek: 1
        });
        return dateAdapter;
      } // @dynamic

      /**
       * @return {?}
       */


      function mcDateFormatsFactory() {
        /** @type {?} */
        var dateFormats =
        /** @type {?} */

        /** @type {?} */
        Object.assign({}, _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MC_MOMENT_DATE_FORMATS"]);
        dateFormats.display.dateInput = 'DD.MM.YYYY';
        return dateFormats;
      } // tslint:disable-next-line

      /** @type {?} */


      var moment$3 = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      var ɵ0 = {
        findDateFormat: true
      };
      /**
       * \@title Custom localeData and format datepicker
       */

      var DatepickerCustomExample = function DatepickerCustomExample() {
        _classCallCheck(this, DatepickerCustomExample);

        this.sunday = 6;
        this.date = moment$3();
        this.minDate = moment$3().subtract(1, 'year');
        this.maxDate = moment$3().add(1, 'years');
      };

      DatepickerCustomExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datepicker-custom-example',
          template: "<div class=\"example-datepicker-group\">\n    <mc-form-field class=\"example-datepicker\">\n        <input mcInput [mcDatepicker]=\"datepicker\" />\n        <mc-datepicker-toggle mcSuffix [for]=\"datepicker\"></mc-datepicker-toggle>\n        <mc-datepicker #datepicker></mc-datepicker>\n    </mc-form-field>\n</div>\n",
          providers: [{
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"],
            useValue: 'en'
          }, {
            provide: _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MC_MOMENT_DATE_ADAPTER_OPTIONS"],
            useValue: ɵ0
          }, {
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_FORMATS"],
            useFactory: mcDateFormatsFactory
          }, {
            provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
            useFactory: mcDateAdapterFactory,
            deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]]
          }],
          styles: [".example-datepicker-group{display:inline-flex;flex-direction:column}.example-datepicker{margin-bottom:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/datepicker-disabled/datepicker-disabled-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // tslint:disable-next-line

      /** @type {?} */


      var moment$4 = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      /**
       * \@title Disabled datepicker
       */

      var DatepickerDisabledExample = /*#__PURE__*/function () {
        function DatepickerDisabledExample() {
          _classCallCheck(this, DatepickerDisabledExample);

          this.sunday = 6;
          this.date = moment$4();
          this.minDate = moment$4().subtract(1, 'year');
          this.maxDate = moment$4().add(1, 'years');
        }
        /**
         * @param {?} date
         * @return {?}
         */


        _createClass(DatepickerDisabledExample, [{
          key: "myFilter",
          value: function myFilter(date) {
            /** @type {?} */
            var day = date.day();
            return day !== 0 && day !== this.sunday;
          }
        }]);

        return DatepickerDisabledExample;
      }();

      DatepickerDisabledExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datepicker-disabled-example',
          template: "<div class=\".example-datepicker-group\">\n    <label>Datepicker disabled</label>\n    <mc-form-field class=\"example-datepicker\">\n        <input mcInput [mcDatepicker]=\"myDatepicker1\" />\n        <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker1\"></mc-datepicker-toggle>\n        <mc-datepicker disabled #myDatepicker1 startView=\"multi-year\"></mc-datepicker>\n    </mc-form-field>\n\n    <label>Datepicker with disabled input</label>\n    <mc-form-field class=\"example-datepicker\">\n        <input mcInput [mcDatepicker]=\"myDatepicker2\" disabled/>\n        <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker2\"></mc-datepicker-toggle>\n        <mc-datepicker #myDatepicker2></mc-datepicker>\n    </mc-form-field>\n\n    <label>Datepicker with readonly input</label>\n    <mc-form-field class=\"example-datepicker\">\n        <input mcInput [mcDatepicker]=\"myDatepicker3\" readonly/>\n        <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker3\"></mc-datepicker-toggle>\n        <mc-datepicker #myDatepicker3></mc-datepicker>\n    </mc-form-field>\n\n    <label>Datepicker with some dates disabled</label>\n    <mc-form-field class=\"example-datepicker\">\n        <input mcInput\n               [mcDatepicker]=\"myDatepicker4\"\n               [mcDatepickerFilter]=\"myFilter\"\n               [min]=\"minDate\"\n               [max]=\"maxDate\"/>\n        <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker4\"></mc-datepicker-toggle>\n        <mc-datepicker #myDatepicker4></mc-datepicker>\n    </mc-form-field>\n</div>\n",
          styles: [".example-datepicker-group{display:inline-flex;flex-direction:column}.example-datepicker{margin-bottom:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/datepicker-language/datepicker-language-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {string} */


      var Languages = {
        EN: "en",
        DE: "de",
        FR: "fr",
        RU: "ru"
      };
      /**
       * \@title Multy language datepicker
       */

      var DatepickerLanguageExample = /*#__PURE__*/function () {
        /**
         * @param {?} dateAdapter
         */
        function DatepickerLanguageExample(dateAdapter) {
          _classCallCheck(this, DatepickerLanguageExample);

          this.dateAdapter = dateAdapter;
          this.selectedDate = new Date();
          this.languageList = [];
        }
        /**
         * @return {?}
         */


        _createClass(DatepickerLanguageExample, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.languageList = Object.keys(Languages).filter(String);
            this.dateAdapter.setLocale(this.languageList[0]);
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "useLanguage",
          value: function useLanguage($event) {
            this.dateAdapter.setLocale($event.value);
          }
        }]);

        return DatepickerLanguageExample;
      }();

      DatepickerLanguageExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datepicker-language-example',
          template: "<mc-radio-group\n    class=\"example-radio-group\"\n    (change)=\"useLanguage($event)\">\n    <mc-radio-button *ngFor=\"let language of languageList\"\n                     [value]=\"language\"\n                     [checked]=\"language === 'en'\"\n                     class=\"example-radio-button\">\n        {{ language }}\n    </mc-radio-button>\n</mc-radio-group>\n\n<mc-form-field>\n    <input mcInput [(ngModel)]=\"selectedDate\" [mcDatepicker]=\"picker\" />\n    <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"picker\"></mc-datepicker-toggle>\n    <mc-datepicker #picker></mc-datepicker>\n</mc-form-field>\n\n<div>\n    <h3>Date</h3>\n    <p>{{selectedDate}}</p>\n</div>\n",
          styles: [".example-radio-group{display:inline-flex;flex-direction:column}.example-radio-button{margin-bottom:10px}"]
        }]
      }];
      /** @nocollapse */

      DatepickerLanguageExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/datepicker-overview/datepicker-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Datepicker
       */


      var DatepickerOverviewExample = function DatepickerOverviewExample() {
        _classCallCheck(this, DatepickerOverviewExample);
      };

      DatepickerOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datepicker-overview-example',
          template: "<mc-form-field>\n    <input mcInput [(ngModel)]=\"date\" [mcDatepicker]=\"myDatepicker\" />\n    <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker\"></mc-datepicker-toggle>\n    <mc-datepicker #myDatepicker></mc-datepicker>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/datepicker-toggle/datepicker-toggle-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Datepicker with custom toggle
       */


      var DatepickerToggleExample = function DatepickerToggleExample() {
        _classCallCheck(this, DatepickerToggleExample);
      };

      DatepickerToggleExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datepicker-toggle-example',
          template: "<div class=\"example-viewport\">\n    <mc-form-field>\n        <input mcInput [(ngModel)]=\"date\" [mcDatepicker]=\"myDatepicker\" />\n        <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker\">\n            <i mc-icon=\"mc-angle-down-M_16\" mcDatepickerToggleIcon></i>\n        </mc-datepicker-toggle>\n        <mc-datepicker #myDatepicker></mc-datepicker>\n    </mc-form-field>\n</div>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/datepicker-year/datepicker-year-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Datepicker starts with year
       */


      var DatepickerYearExample = function DatepickerYearExample() {
        _classCallCheck(this, DatepickerYearExample);
      };

      DatepickerYearExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datepicker-year-example',
          template: "<mc-form-field>\n    <input mcInput [(ngModel)]=\"date\" [mcDatepicker]=\"myDatepicker\" />\n    <mc-datepicker-toggle tabindex=\"7\" mcSuffix [for]=\"myDatepicker\"></mc-datepicker-toggle>\n    <mc-datepicker #myDatepicker startView=\"multi-year\"></mc-datepicker>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/dropdown/dropdown-nested/dropdown-nested-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Nested dropdown
       */


      var DropdownNestedExample = function DropdownNestedExample() {
        _classCallCheck(this, DropdownNestedExample);
      };

      DropdownNestedExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'dropdown-nested-example',
          template: "<button mc-button [mcDropdownTriggerFor]=\"appDropdownNested\">\n    nested dropdown <i mc-icon=\"mc-angle-down-L_16\"></i>\n</button>\n\n<mc-dropdown #appDropdownNested=\"mcDropdown\">\n    <button mc-dropdown-item [mcDropdownTriggerFor]=\"appDropdown\">dropdown</button>\n    <button mc-dropdown-item>\n        Point 1 <div class=\"mc-dropdown__item-caption\">Some info</div>\n    </button>\n</mc-dropdown>\n\n<mc-dropdown #appDropdown=\"mcDropdown\">\n    <button mc-dropdown-item><i mc-icon=\"mc-search_16\"></i> Very Long Point</button>\n    <button mc-dropdown-item>Point 2</button>\n    <button mc-dropdown-item>Point 3</button>\n</mc-dropdown>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/dropdown/dropdown-overview/dropdown-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic dropdown
       */

      var DropdownOverviewExample = /*#__PURE__*/function () {
        function DropdownOverviewExample() {
          _classCallCheck(this, DropdownOverviewExample);

          this.someValue = 'Lazy Value';
          this.disabled = false;
        }
        /**
         * @return {?}
         */


        _createClass(DropdownOverviewExample, [{
          key: "toggleDisabled",
          value: function toggleDisabled() {
            this.disabled = !this.disabled;
          }
        }]);

        return DropdownOverviewExample;
      }();

      DropdownOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'dropdown-overview-example',
          template: "<div class=\"example-dropdown-group\">\n    <span class=\"mc-group example-dropdown-element\">\n        <button mc-button class=\"mc-group-item\" [disabled]=\"disabled\">dropdown</button>\n        <button mc-button class=\"mc-group-item\" [mcDropdownTriggerFor]=\"appDropdown\" [disabled]=\"disabled\">\n            <i mc-icon=\"mc-angle-down-L_16\"></i>\n        </button>\n    </span>\n\n    <span class=\"example-dropdown-element\">\n        <button mc-button class=\"example-dropdown-element\" [mcDropdownTriggerFor]=\"appDropdown\" [disabled]=\"disabled\">\n            dropdown <i mc-icon=\"mc-angle-down-L_16\"></i>\n        </button>\n\n        <mc-dropdown #appDropdown=\"mcDropdown\">\n            <button mc-dropdown-item class=\"mc-selected\">\n                Point 1 <div class=\"mc-dropdown__item-caption\">Some info</div>\n            </button>\n            <button mc-dropdown-item>\n                <i mc-icon=\"mc-search_16\"></i> Very Long Point\n            </button>\n            <h5>Additional info</h5>\n            <button mc-dropdown-item disabled>Disabled</button>\n            <button mc-dropdown-item>Point 2</button>\n            <a href=\"https://google.com\" class=\"mc-link mc-link_underlined\" mc-dropdown-item>\n                <i mc-icon class=\"mc-link__icon mc-icons mc-search_16\"></i>\n                <span class=\"mc-link__text\">Link</span>\n            </a>\n            <button mc-dropdown-item>Point 3</button>\n        </mc-dropdown>\n    </span>\n\n    <div  class=\"example-dropdown-element\">\n        <input mcInput type=\"text\" [(ngModel)]=\"someValue\">\n    </div>\n\n    <span class=\"example-dropdown-element\">\n        <button mc-button [mcDropdownTriggerFor]=\"appDropdownLazy\" [mcDropdownTriggerData]=\"{someValue: someValue}\"\n                [disabled]=\"disabled\">\n            dropdown lazy <i mc-icon=\"mc-angle-down-L_16\"></i>\n        </button>\n\n        <mc-dropdown #appDropdownLazy=\"mcDropdown\">\n            <ng-template mcDropdownContent  let-someValue=\"someValue\">\n                <button mc-dropdown-item [disabled]=\"disabled\">dropdown</button>\n                <button mc-dropdown-item>\n                    Point 1 <div class=\"mc-dropdown__item-caption\">Some info</div>\n                </button>\n                <button mc-dropdown-item>Value: {{someValue}}</button>\n            </ng-template>\n        </mc-dropdown>\n    </span>\n\n    <mc-checkbox class=\"example-dropdown-element\" [checked]=\"disabled\" (change)=\"toggleDisabled()\">Disabled</mc-checkbox>\n</div>\n",
          styles: [".example-dropdown-group{display:inline-flex;flex-direction:column}.example-dropdown-element{margin-bottom:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/input/input-number-overview/input-number-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Input
       */


      var InputNumberOverviewExample = function InputNumberOverviewExample() {
        _classCallCheck(this, InputNumberOverviewExample);

        this.value = '';
      };

      InputNumberOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'input-number-overview-example',
          template: "<mc-form-field class=\"mc-group-item\">\n    <input mcInput [(ngModel)]=\"value\" type=\"number\" placeholder=\"Allowed number from -7 to 7\"\n           [min]=\"-7\" max=\"7\" step=\"0.5\" big-step=\"1.5\">\n    <mc-stepper></mc-stepper>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/input/input-overview/input-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Input
       */


      var InputOverviewExample = function InputOverviewExample() {
        _classCallCheck(this, InputOverviewExample);

        this.value = '';
      };

      InputOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'input-overview-example',
          template: "<mc-form-field>\n    <i mcPrefix mc-icon=\"mc-search_16\" color=\"second\"></i>\n\n    <input mcInput [(ngModel)]=\"value\" placeholder=\"Placeholder\">\n\n    <mc-cleaner></mc-cleaner>\n</mc-form-field>\n\n<br><br><br>\n\n<mc-form-field mcFormFieldWithoutBorders>\n    <i mcPrefix mc-icon=\"mc-search_16\" color=\"second\"></i>\n\n    <input mcInput [(ngModel)]=\"value\" placeholder=\"Placeholder\">\n\n    <mc-cleaner></mc-cleaner>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/layout-flex/layout-flex-alignment/layout-flex-alignment-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Flex layout
       */


      var LayoutFlexAlignmentExample = function LayoutFlexAlignmentExample() {
        _classCallCheck(this, LayoutFlexAlignmentExample);

        this.layoutHorizontalAlignment = '-start';
        this.layoutVerticalAlignment = '-start';
      };

      LayoutFlexAlignmentExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'layout-flex-alignment-example',
          template: "<br><br>\n\n<div class=\"example-controls\">\n    <mc-radio-group [(ngModel)]=\"layoutHorizontalAlignment\">\n        <header>Horizontal</header>\n        <mc-radio-button value=\"-start\">start</mc-radio-button>\n        <mc-radio-button value=\"-center\">center</mc-radio-button>\n        <mc-radio-button value=\"-end\">end</mc-radio-button>\n        <mc-radio-button value=\"-space-around\">space-around</mc-radio-button>\n        <mc-radio-button value=\"-space-between\">space-between</mc-radio-button>\n    </mc-radio-group>\n\n    <mc-radio-group [(ngModel)]=\"layoutVerticalAlignment\">\n        <header>Vertical</header>\n        <mc-radio-button value=\"\">(none)</mc-radio-button>\n        <mc-radio-button value=\"-start\">start</mc-radio-button>\n        <mc-radio-button value=\"-center\">center</mc-radio-button>\n        <mc-radio-button value=\"-end\">end</mc-radio-button>\n        <mc-radio-button value=\"-stretch\">stretch</mc-radio-button>\n    </mc-radio-group>\n</div>\n\n<br><br>\n\n<header class=\"layout-padding\">class: layout-align{{ layoutHorizontalAlignment }}{{layoutVerticalAlignment}}</header>\n<div class=\"container block layout-row layout-align{{ layoutHorizontalAlignment }}{{layoutVerticalAlignment}}\" >\n    <div class=\"block\">block 1</div>\n    <div class=\"block\">block 2</div>\n    <div class=\"block\">block 3</div>\n</div>\n",
          styles: [".example-controls{display:flex;flex-direction:row}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column;margin-left:32px}.mc-radio-button{margin-bottom:8px}.container{height:120px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/layout-flex/layout-flex-behaviour-modifiers/layout-flex-behaviour-modifiers-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Flex layout
       */


      var LayoutFlexBehaviourModifiersExample = function LayoutFlexBehaviourModifiersExample() {
        _classCallCheck(this, LayoutFlexBehaviourModifiersExample);

        this.flexClass = 'flex';
      };

      LayoutFlexBehaviourModifiersExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'layout-flex-behaviour-modifiers-example',
          template: "<br><br>\n\n<div class=\"example-controls\">\n    <mc-radio-group [(ngModel)]=\"flexClass\">\n        <mc-radio-button value=\"flex\">flex</mc-radio-button>\n        <mc-radio-button value=\"flex-none\">flex-none</mc-radio-button>\n        <mc-radio-button value=\"flex-auto\">flex-auto</mc-radio-button>\n        <mc-radio-button value=\"flex-grow\">flex-grow</mc-radio-button>\n        <mc-radio-button value=\"flex-nogrow\">flex-nogrow</mc-radio-button>\n        <mc-radio-button value=\"flex-noshrink\">flex-noshrink</mc-radio-button>\n    </mc-radio-group>\n</div>\n\n<br><br>\n\n<div class=\"layout-row block\">\n    <div class=\"block {{ flexClass }}\">flex</div>\n    <div class=\"flex block\">flex</div>\n    <div class=\"flex-none block\">flex-none</div>\n</div>\n",
          styles: [".example-controls{display:flex;flex-direction:row}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/layout-flex/layout-flex-offsets/layout-flex-offsets-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Flex layout
       */


      var LayoutFlexOffsetsExample = function LayoutFlexOffsetsExample() {
        _classCallCheck(this, LayoutFlexOffsetsExample);

        this.selectedSize = 'flex-10';
        this.selectedOffset = 'flex-offset-10';
        this.flexSizes = ['flex-0', 'flex-5', 'flex-10', 'flex-15', 'flex-20', 'flex-25', 'flex-30', 'flex-33', 'flex-35', 'flex-40', 'flex-45', 'flex-50', 'flex-60', 'flex-65', 'flex-66', 'flex-70', 'flex-75', 'flex-80', 'flex-85', 'flex-90', 'flex-95', 'flex-100'];
        this.flexOffsets = ['flex-offset-0', 'flex-offset-5', 'flex-offset-10', 'flex-offset-15', 'flex-offset-20', 'flex-offset-25', 'flex-offset-30', 'flex-offset-33', 'flex-offset-35', 'flex-offset-40', 'flex-offset-45', 'flex-offset-50', 'flex-offset-60', 'flex-offset-65', 'flex-offset-66', 'flex-offset-70', 'flex-offset-75', 'flex-offset-80', 'flex-offset-85', 'flex-offset-90', 'flex-offset-95', 'flex-offset-100'];
      };

      LayoutFlexOffsetsExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'layout-flex-offsets-example',
          template: "<br><br>\n\n<div class=\"example-controls\">\n    <mc-form-field>\n        <mc-select [(value)]=\"selectedSize\">\n            <mc-option *ngFor=\"let flexSize of flexSizes\" [value]=\"flexSize\">{{ flexSize }}</mc-option>\n        </mc-select>\n    </mc-form-field>\n\n    <mc-form-field>\n        <mc-select [(value)]=\"selectedOffset\">\n            <mc-option *ngFor=\"let flexOffset of flexOffsets\" [value]=\"flexOffset\">{{ flexOffset }}</mc-option>\n        </mc-select>\n    </mc-form-field>\n</div>\n\n<br><br>\n\n<div class=\"layout-row block\">\n    <div class=\"{{selectedSize}} {{selectedOffset}} block\">{{selectedSize}} {{selectedOffset}}</div>\n    <div class=\"{{selectedSize}} {{selectedOffset}} block\">{{selectedSize}} {{selectedOffset}}</div>\n    <div class=\"{{selectedSize}} {{selectedOffset}} block\">{{selectedSize}} {{selectedOffset}}</div>\n</div>\n",
          styles: [".example-controls{display:flex;flex-direction:row}.mc-form-field{margin-left:32px;max-width:20%}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/layout-flex/layout-flex-order/layout-flex-order-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Flex layout
       */


      var LayoutFlexOrderExample = function LayoutFlexOrderExample() {
        _classCallCheck(this, LayoutFlexOrderExample);

        this.selectedFirstBlockOrder = 'flex-order-0';
        this.selectedSecondBlockOrder = 'flex-order-1';
        this.selectedThirdBlockOrder = 'flex-order-2';
        this.flexOrders = ['flex-order-0', 'flex-order-1', 'flex-order-2', 'flex-order-3', 'flex-order-4', 'flex-order-5', 'flex-order-6', 'flex-order-7', 'flex-order-8', 'flex-order-9'];
      };

      LayoutFlexOrderExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'layout-flex-order-example',
          template: "<br><br>\n\n<div class=\"example-controls\">\n    <div class=\"layout-column flex\">\n        <label class=\"layout-padding\">'Block 1'</label>\n        <mc-form-field>\n            <mc-select [(value)]=\"selectedFirstBlockOrder\">\n                <mc-option *ngFor=\"let flexOrder of flexOrders\" [value]=\"flexOrder\">{{ flexOrder }}</mc-option>\n            </mc-select>\n        </mc-form-field>\n    </div>\n\n    <div class=\"layout-column flex\">\n        <label class=\"layout-padding\">'Block 2'</label>\n        <mc-form-field>\n            <mc-select [(value)]=\"selectedSecondBlockOrder\">\n                <mc-option *ngFor=\"let flexOrder of flexOrders\" [value]=\"flexOrder\">{{ flexOrder }}</mc-option>\n            </mc-select>\n        </mc-form-field>\n    </div>\n\n    <div class=\"layout-column flex\">\n        <label class=\"layout-padding\">'Block 3'</label>\n        <mc-form-field>\n            <mc-select [(value)]=\"selectedThirdBlockOrder\">\n                <mc-option *ngFor=\"let flexOrder of flexOrders\" [value]=\"flexOrder\">{{ flexOrder }}</mc-option>\n            </mc-select>\n        </mc-form-field>\n    </div>\n</div>\n\n<br><br>\n\n<div class=\"layout-row block\">\n    <div class=\"flex block {{ selectedFirstBlockOrder }}\">Block 1</div>\n    <div class=\"flex block {{ selectedSecondBlockOrder }}\">Block 2</div>\n    <div class=\"flex block {{ selectedThirdBlockOrder }}\">Block 3</div>\n</div>\n\n",
          styles: [".example-controls{display:flex;flex-direction:row}.mc-form-field{max-width:50%}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/layout-flex/layout-flex-overview/layout-flex-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Flex layout
       */


      var LayoutFlexOverviewExample = function LayoutFlexOverviewExample() {
        _classCallCheck(this, LayoutFlexOverviewExample);

        this.layoutDirection = 'layout-column';
      };

      LayoutFlexOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'layout-flex-overview-example',
          template: "<br><br>\n\n<mc-radio-group [(ngModel)]=\"layoutDirection\">\n    <mc-radio-button value=\"layout-column\">layout-column</mc-radio-button>\n    <mc-radio-button value=\"layout-row\">layout-row</mc-radio-button>\n</mc-radio-group>\n\n<br><br>\n\n<div [class]=layoutDirection>\n    <div class=\"flex block\">first</div>\n    <div class=\"flex block\">second</div>\n    <div class=\"flex block\">third</div>\n</div>\n",
          styles: [".mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}.block{border:1px solid #000;padding:8px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/link/link-overview/link-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic link
       */


      var LinkOverviewExample = function LinkOverviewExample() {
        _classCallCheck(this, LinkOverviewExample);

        this.active = true;
        this.focus = true;
        this.disabled = true;
      };

      LinkOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'link-overview-example',
          template: "<div style=\"padding: 10px;\">\n    <a href=\"#\" class=\"mc-link mc-link_underlined\"\n       [ngClass]=\"{'mc-active' : active}\">\n        <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span>\n    </a>\n</div>\n\n<div style=\"padding: 10px;\">\n    <a href=\"#\" class=\"mc-link mc-link_underlined\" [disabled]=\"disabled\">\n        <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span>\n        <i mc-icon=\"mc-angle-L_16\" class=\"mc-link__icon\"></i>\n    </a>\n</div>\n\n<div style=\"padding: 10px;\">\n    <a href=\"#\" class=\"mc-link mc-link_underlined\" [disabled]=\"disabled\"\n       [ngClass]=\"{'mc-focused': focus}\">\n        <i mc-icon=\"mc-calendar_16\" class=\"mc-link__icon\"></i>\n        <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span>\n        <i mc-icon=\"mc-angle-L_16\" class=\"mc-link__icon\"></i>\n    </a>\n</div>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/link/link-pseudo/link-pseudo-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Pseudo link
       */


      var LinkPseudoExample = function LinkPseudoExample() {
        _classCallCheck(this, LinkPseudoExample);

        this.active = true;
        this.focus = true;
        this.disabled = true;
      };

      LinkPseudoExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'link-pseudo-example',
          template: "<div style=\"padding: 10px;\">\n    <a class=\"mc-link mc-link_dashed\"\n       [ngClass]=\"{'mc-active' : active}\">\n        <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span>\n    </a>\n</div>\n<div style=\"padding: 10px;\">\n    <a class=\"mc-link mc-link_dashed\" [disabled]=\"disabled\">\n        <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span>\n        <i mc-icon=\"mc-angle-L_16\" class=\"mc-link__icon\"></i>\n    </a>\n</div>\n<div style=\"padding: 10px;\">\n    <a class=\"mc-link mc-link_dashed\" [disabled]=\"disabled\"\n       [ngClass]=\"{'mc-focused': focus}\">\n        <i mc-icon=\"mc-calendar_16\" class=\"mc-link__icon\"></i>\n        <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span>\n        <i mc-icon=\"mc-angle-L_16\" class=\"mc-link__icon\"></i>\n    </a>\n</div>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/list/list-groups/list-groups-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic list
       */


      var ListGroupsExample = function ListGroupsExample() {
        _classCallCheck(this, ListGroupsExample);

        this.pokemonTypes = [{
          name: 'Grass',
          pokemon: [{
            value: 'bulbasaur-0',
            viewValue: 'Bulbasaur'
          }, {
            value: 'oddish-1',
            viewValue: 'Oddish'
          }, {
            value: 'bellsprout-2',
            viewValue: 'Bellsprout'
          }]
        }, {
          name: 'Water',
          disabled: true,
          pokemon: [{
            value: 'squirtle-3',
            viewValue: 'Squirtle'
          }, {
            value: 'psyduck-4',
            viewValue: 'Psyduck'
          }, {
            value: 'horsea-5',
            viewValue: 'Horsea'
          }]
        }, {
          name: 'Fire',
          pokemon: [{
            value: 'charmander-6',
            viewValue: 'Charmander'
          }, {
            value: 'vulpix-7',
            viewValue: 'Vulpix'
          }, {
            value: 'flareon-8',
            viewValue: 'Flareon'
          }]
        }, {
          name: 'Psychic',
          pokemon: [{
            value: 'mew-9',
            viewValue: 'Mew'
          }, {
            value: 'mewtwo-10',
            viewValue: 'Mewtwo'
          }]
        }];
      };

      ListGroupsExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'list-groups-example',
          template: "<mc-list-selection>\n    <mc-optgroup *ngFor=\"let group of pokemonTypes\" [label]=\"group.name\" [disabled]=\"group.disabled\">\n        <mc-list-option *ngFor=\"let pokemon of group.pokemon\" [value]=\"pokemon.value\">\n            {{ pokemon.viewValue }}\n        </mc-list-option>\n    </mc-optgroup>\n    <mc-list-option value=\"mime-11\">Mr. Mime</mc-list-option>\n</mc-list-selection>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/list/list-multiple-checkbox/list-multiple-checkbox-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic list
       */


      var ListMultipleCheckboxExample = function ListMultipleCheckboxExample() {
        _classCallCheck(this, ListMultipleCheckboxExample);

        this.selected = [];
      };

      ListMultipleCheckboxExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'list-multiple-checkbox-example',
          template: "<mc-list-selection\n    multiple=\"checkbox\"\n    [(ngModel)]=\"selected\">\n    <mc-list-option value=\"Item 1\" disabled>Item 1</mc-list-option>\n    <mc-list-option value=\"Item 2\">Item 2</mc-list-option>\n    <mc-list-option value=\"Item 3\">Item 3</mc-list-option>\n    <mc-list-option value=\"Item 4\">Item 4</mc-list-option>\n    <mc-list-option value=\"Item 5\">Item 5</mc-list-option>\n    <mc-list-option value=\"Item 6\">Item 6</mc-list-option>\n    <mc-list-option value=\"Item 7\">Item 7</mc-list-option>\n    <mc-list-option value=\"Item 8\">Item 8</mc-list-option>\n    <mc-list-option value=\"Item 9\">Item 9</mc-list-option>\n    <mc-list-option value=\"Item 10\">Item 10</mc-list-option>\n</mc-list-selection>\n<br>\n<div>Selected: {{ selected }}</div>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/list/list-multiple-keyboard/list-multiple-keyboard-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic list
       */


      var ListMultipleKeyboardExample = function ListMultipleKeyboardExample() {
        _classCallCheck(this, ListMultipleKeyboardExample);

        this.selected = [];
      };

      ListMultipleKeyboardExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'list-multiple-keyboard-example',
          template: "<mc-list-selection\n    multiple=\"keyboard\"\n    [(ngModel)]=\"selected\">\n    <mc-list-option value=\"Item 1\" disabled>Item 1</mc-list-option>\n    <mc-list-option value=\"Item 2\">Item 2</mc-list-option>\n    <mc-list-option value=\"Item 3\">Item 3</mc-list-option>\n    <mc-list-option value=\"Item 4\">Item 4</mc-list-option>\n    <mc-list-option value=\"Item 5\">Item 5</mc-list-option>\n    <mc-list-option value=\"Item 6\">Item 6</mc-list-option>\n    <mc-list-option value=\"Item 7\">Item 7</mc-list-option>\n    <mc-list-option value=\"Item 8\">Item 8</mc-list-option>\n    <mc-list-option value=\"Item 9\">Item 9</mc-list-option>\n    <mc-list-option value=\"Item 10\">Item 10</mc-list-option>\n</mc-list-selection>\n<br>\n<div>Selected: {{ selected }}</div>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/list/list-overview/list-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic list
       */


      var ListOverviewExample = function ListOverviewExample() {
        _classCallCheck(this, ListOverviewExample);

        this.selected = [];
      };

      ListOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'list-overview-example',
          template: "<mc-list-selection\n    [(ngModel)]=\"selected\">\n    <mc-list-option value=\"Item 1\" disabled>Item 1</mc-list-option>\n    <mc-list-option value=\"Item 2\">Item 2</mc-list-option>\n    <mc-list-option value=\"Item 3\">Item 3</mc-list-option>\n    <mc-list-option value=\"Item 4\">Item 4</mc-list-option>\n    <mc-list-option value=\"Item 5\">Item 5</mc-list-option>\n    <mc-list-option value=\"Item 6\">Item 6</mc-list-option>\n    <mc-list-option value=\"Item 7\">Item 7</mc-list-option>\n    <mc-list-option value=\"Item 8\">Item 8</mc-list-option>\n    <mc-list-option value=\"Item 9\">Item 9</mc-list-option>\n    <mc-list-option value=\"Item 10\">Item 10</mc-list-option>\n</mc-list-selection>\n<br>\n<div>Selected: {{ selected }}</div>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/modal/modal-component/modal-component-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Component Modal
       */


      var ModalComponentExample = /*#__PURE__*/function () {
        /**
         * @param {?} modalService
         */
        function ModalComponentExample(modalService) {
          _classCallCheck(this, ModalComponentExample);

          this.modalService = modalService;
        }
        /**
         * @return {?}
         */


        _createClass(ModalComponentExample, [{
          key: "openModal",
          value: function openModal() {
            this.componentModal = this.modalService.open({
              mcComponent: McModalCustomComponent,
              mcComponentParams: {
                title: 'Title',
                subtitle: 'Subtitle'
              }
            });
            this.componentModal.afterOpen.subscribe(
            /**
            * @return {?}
            */
            function () {
              console.log('[afterOpen] emitted!');
            });
            this.componentModal.afterClose.subscribe(
            /**
            * @param {?} action
            * @return {?}
            */
            function (action) {
              console.log("[afterClose] emitted, chosen action: ".concat(action));
            });
          }
        }]);

        return ModalComponentExample;
      }();

      ModalComponentExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'modal-component-example',
          template: "<button mc-button color=\"primary\" (click)=\"openModal()\">Open Modal</button>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      ModalComponentExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_7__["McModalService"]
        }];
      };

      if (false) {}

      var McModalCustomComponent = /*#__PURE__*/function () {
        /**
         * @param {?} modal
         */
        function McModalCustomComponent(modal) {
          _classCallCheck(this, McModalCustomComponent);

          this.modal = modal;
        }
        /**
         * @param {?} action
         * @return {?}
         */


        _createClass(McModalCustomComponent, [{
          key: "destroyModal",
          value: function destroyModal(action) {
            this.modal.destroy(action);
          }
        }]);

        return McModalCustomComponent;
      }();

      McModalCustomComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'mc-modal-full-custom-component',
          template: "\n        <mc-modal-title>\n            Modal Title\n        </mc-modal-title>\n\n        <mc-modal-body>\n            <h2>{{ title }}</h2>\n            <h4>{{ subtitle }}</h4>\n            <p>\n                <span>Get Modal instance in component</span>\n                <button mc-button color=\"primary\" (click)=\"destroyModal('close')\">destroy modal in the component</button>\n            </p>\n        </mc-modal-body>\n\n        <div mc-modal-footer>\n            <button mc-button color=\"primary\" (click)=\"destroyModal('save')\">Save</button>\n            <button mc-button autofocus (click)=\"destroyModal('close')\">Close</button>\n        </div>\n  "
        }]
      }];
      /** @nocollapse */

      McModalCustomComponent.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_7__["McModalRef"]
        }];
      };

      McModalCustomComponent.propDecorators = {
        title: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        subtitle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/modal/modal-overview/modal-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Modal
       */


      var ModalOverviewExample = /*#__PURE__*/function () {
        /**
         * @param {?} modalService
         */
        function ModalOverviewExample(modalService) {
          _classCallCheck(this, ModalOverviewExample);

          this.modalService = modalService;
        }
        /**
         * @return {?}
         */


        _createClass(ModalOverviewExample, [{
          key: "showConfirmModal",
          value: function showConfirmModal() {
            this.modalService.confirm({
              mcContent: 'Save changes?',
              mcOkText: 'Save',
              mcCancelText: 'Cancel',
              mcOnOk:
              /**
              * @return {?}
              */
              function mcOnOk() {
                return console.log('OK');
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "showSuccessModal",
          value: function showSuccessModal() {
            this.modalService.success({
              mcContent: 'All changes are saved!',
              mcOkText: 'ОК',
              mcCancelText: 'Cancel',
              mcOnOk:
              /**
              * @return {?}
              */
              function mcOnOk() {
                return console.log('OK');
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "showDeleteModal",
          value: function showDeleteModal() {
            this.modalService["delete"]({
              mcContent: 'The tasks, policies and tags associated with the customer will be deleted too. Delete selected customer?',
              mcOkType: 'error',
              mcOkText: 'Delete',
              mcCancelText: 'Cancel',
              mcWidth: '480px',
              mcOnOk:
              /**
              * @return {?}
              */
              function mcOnOk() {
                return console.log('Delete');
              },
              mcOnCancel:
              /**
              * @return {?}
              */
              function mcOnCancel() {
                return console.log('Cancel');
              }
            });
          }
        }]);

        return ModalOverviewExample;
      }();

      ModalOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'modal-overview-example',
          template: "<button mc-button color=\"second\" class=\"modal-example-button\" (click)=\"showConfirmModal()\">Open Confirm Modal</button>\n<button mc-button color=\"primary\" class=\"modal-example-button\" (click)=\"showSuccessModal()\">Open Success Modal</button>\n<button mc-button color=\"error\" class=\"modal-example-button\" (click)=\"showDeleteModal()\">Open Delete Modal</button>\n",
          styles: [".modal-example-button{margin-right:18px}"]
        }]
      }];
      /** @nocollapse */

      ModalOverviewExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_7__["McModalService"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/modal/modal-template/modal-template-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Template Modal
       */


      var ModalTemplateExample = /*#__PURE__*/function () {
        /**
         * @param {?} modalService
         */
        function ModalTemplateExample(modalService) {
          _classCallCheck(this, ModalTemplateExample);

          this.modalService = modalService;
        }
        /**
         * @param {?} tplTitle
         * @param {?=} tplContent
         * @param {?=} tplFooter
         * @return {?}
         */


        _createClass(ModalTemplateExample, [{
          key: "createTplModal",
          value: function createTplModal(tplTitle, tplContent, tplFooter) {
            this.tplModal = this.modalService.create({
              mcTitle: tplTitle,
              mcContent: tplContent,
              mcFooter: tplFooter,
              mcClosable: true,
              mcOnOk:
              /**
              * @return {?}
              */
              function mcOnOk() {
                return console.log('Click ok');
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "destroyTplModal",
          value: function destroyTplModal() {
            this.tplModal.triggerOk();
            this.tplModal.destroy();
          }
        }]);

        return ModalTemplateExample;
      }();

      ModalTemplateExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'modal-template-example',
          template: "<button mc-button color=\"primary\" class=\"modal-example-button\" (click)=\"createTplModal(tplTitle, tplContent, tplFooter)\">Delete</button>\n\n<ng-template #tplTitle>\n    <span>Title</span>\n</ng-template>\n\n<ng-template #tplContent>\n    <p>content...</p>\n    <p>content...</p>\n    <p>content...</p>\n    <p>content...</p>\n    <p>content...</p>\n</ng-template>\n\n<ng-template #tplFooter>\n    <button mc-button color=\"primary\" (click)=\"destroyTplModal()\">Save</button>\n</ng-template>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      ModalTemplateExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_7__["McModalService"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/navbar/navbar-overview/navbar-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Navbar
       */


      var NavbarOverviewExample = function NavbarOverviewExample() {
        _classCallCheck(this, NavbarOverviewExample);
      };

      NavbarOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'navbar-overview-example',
          template: "<div class=\"demo-container\">\n    <mc-navbar>\n        <mc-navbar-container position=\"left\">\n            <mc-navbar-item>\n                <i mc-icon=\"mc-hamburger_16\"></i>\n            </mc-navbar-item>\n            <mc-navbar-brand>\n                <mc-navbar-logo>\n                    <svg class=\"logo\" height=\"32\" viewBox=\"0 0 32 32\" width=\"32\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"m0 32h32v-32h-32z\" fill=\"#c00\"/><path d=\"m11.7013126 2.13713398h3.4056699v5.22500971c.0083884 1.2815534 1.0494758 2.31984466 2.3304078 2.32543689v-1.89825242c-.2370486-.00528156-.4296699-.19231068-.432466-.42718447v-5.22500971h3.4050485v-1.89794175h-8.7086602zm-3.29065629-1.89806602h-5.95976699-.0167767c-1.28062136.00590291-2.3192233 1.04978641-2.32481553 2.33351456h1.89794174c.00590292-.23735922.19262136-.42407767.42687379-.43557281h5.97654369c.24295146 0 .44054369.19821359.44054369.44427184v.97646602c0 .23735923-.19759223.43867961-.44054369.43867961l-5.97654369.00248544c-1.28062136.01118447-2.3192233 1.04667961-2.32481553 2.33071845v3.35782524h1.89794174v-3.35782524c.00590292-.23207767.19262136-.42438835.42687379-.42718447h5.97654369c1.28932039 0 2.34190289-1.05227184 2.34190289-2.34469903v-.97646602c0-1.29242718-1.0525825-2.34221359-2.34190289-2.34221359\" fill=\"#fff\" transform=\"translate(5.592 10.889)\"/></g></svg>\n                </mc-navbar-logo>\n                <mc-navbar-title>Brand</mc-navbar-title>\n            </mc-navbar-brand>\n            <mc-navbar-item class=\"mc-navbar-item-active\">\n                <i mc-icon=\"mc-info_16\"></i>\n                <mc-navbar-title>Left icon</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item>\n                <i mc-icon=\"mc-calendar_16\"></i>\n                <mc-navbar-title>Left icon</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item class=\"mc-progress\">\n                <i mc-icon=\"mc-download_16\"></i>\n                <mc-navbar-title>In-progress</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item class=\"mc-progress\" disabled>\n                <i mc-icon=\"mc-clock_16\"></i>\n                <mc-navbar-title>Disabled in-progress</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item disabled>\n                <mc-navbar-title>Right Icon</mc-navbar-title>\n                <i mc-icon=\"mc-search_16\"></i>\n            </mc-navbar-item>\n\n            <mc-navbar-item>\n                <i mc-icon=\"mc-gear_16\"></i>\n            </mc-navbar-item>\n        </mc-navbar-container>\n\n        <mc-navbar-container position=\"right\">\n            <mc-navbar-item [collapsedTitle]=\"'custom title'\">\n                <mc-navbar-title>Right Icon</mc-navbar-title>\n                <i mc-icon=\"mc-search_16\"></i>\n            </mc-navbar-item>\n\n            <mc-navbar-item>\n                <i mc-icon=\"mc-gear_16\"></i>\n            </mc-navbar-item>\n        </mc-navbar-container>\n    </mc-navbar>\n</div>\n",
          styles: [".logo{margin-top:5px}.demo-container{margin-bottom:10px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/number-formatter/number-formatter-overview/number-formatter-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic progress number-formatter
       */

      var NumberFormatterOverviewExample = function NumberFormatterOverviewExample() {
        _classCallCheck(this, NumberFormatterOverviewExample);

        this.value = 1000.123;
      };

      NumberFormatterOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'number-formatter-overview-example',
          template: "<mc-form-field class=\"number-input\">\n    <input mcInput [(ngModel)]=\"value\" type=\"number\" placeholder=\"Number\">\n</mc-form-field>\n\n<div class=\"layout-row mc-body\">\n    <div class=\"flex\">\n        <h4 class=\"mc-subheading\">with RU locale (default)</h4>\n        <default-locale [value]=\"value\"></default-locale>\n    </div>\n\n    <div class=\"flex\">\n        <h4 class=\"mc-subheading\">with EN locale</h4>\n        <en-locale [value]=\"value\"></en-locale>\n    </div>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
          styles: ["default-locale,en-locale{display:block}.number-input{margin-bottom:32px;margin-top:32px;max-width:200px}.common-container{padding-left:16px;padding-right:16px}.light-text-secondary{color:#ccc}.row-border{border-bottom:1px solid #ccc;padding:8px}"]
        }]
      }];

      if (false) {}

      var WithDefaultLocaleComponent =
      /**
       * @param {?} mcLocaleId
       */
      function WithDefaultLocaleComponent(mcLocaleId) {
        _classCallCheck(this, WithDefaultLocaleComponent);

        this.mcLocaleId = mcLocaleId;
        this.locale = 'en';
        this.value = 0;
      };

      WithDefaultLocaleComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'default-locale',
          template: "<div class=\"mc-subheading\">\n    <label>MC_LOCALE_ID: </label><span>{{ mcLocaleId | json }}</span>\n</div>\n\n<div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex light-text-secondary\">Params</div>\n        <div class=\"flex light-text-secondary\">Formatted value</div>\n    </div>\n\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ value | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '5.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '5.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-2'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-2' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-1'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-1' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-0'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-0' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 1000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 100000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">locale {{ locale }}</div>\n        <div class=\"flex\">{{ 1000 | mcNumber: '' : locale }}</div>\n    </div>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }]
      }];
      /** @nocollapse */

      WithDefaultLocaleComponent.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["MC_LOCALE_ID"]]
          }]
        }];
      };

      WithDefaultLocaleComponent.propDecorators = {
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      if (false) {} // tslint:disable-next-line:naming-convention


      var WithENLocaleComponent =
      /**
       * @param {?} mcLocaleId
       */
      function WithENLocaleComponent(mcLocaleId) {
        _classCallCheck(this, WithENLocaleComponent);

        this.mcLocaleId = mcLocaleId;
        this.locale = 'ru';
        this.value = 0;
      };

      WithENLocaleComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'en-locale',
          template: "<div class=\"mc-subheading\">\n    <label>MC_LOCALE_ID: </label><span>{{ mcLocaleId | json }}</span>\n</div>\n\n<div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex light-text-secondary\">Params</div>\n        <div class=\"flex light-text-secondary\">Formatted value</div>\n    </div>\n\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ value | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '5.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '5.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-2'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-2' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-1'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-1' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-0'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-0' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 1000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 100000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">locale {{ locale }}</div>\n        <div class=\"flex\">{{ 1000 | mcNumber: '' : locale }}</div>\n    </div>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
          providers: [{
            provide: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["MC_LOCALE_ID"],
            useValue: 'en'
          }]
        }]
      }];
      /** @nocollapse */

      WithENLocaleComponent.ctorParameters = function () {
        return [{
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["MC_LOCALE_ID"]]
          }]
        }];
      };

      WithENLocaleComponent.propDecorators = {
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/popover/popover-instance/popover-instance-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title popover-instance
       */


      var PopoverInstanceExample = /*#__PURE__*/function () {
        function PopoverInstanceExample() {
          _classCallCheck(this, PopoverInstanceExample);
        }

        _createClass(PopoverInstanceExample, [{
          key: "togglePopover",

          /**
           * @param {?} $event
           * @return {?}
           */
          value: function togglePopover($event) {
            $event.stopPropagation();

            if (this.popover.isOpen) {
              this.popover.hide();
            } else {
              this.popover.show();
            }
          }
        }]);

        return PopoverInstanceExample;
      }();

      PopoverInstanceExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'popover-instance-example',
          template: "<ng-template #customContent>\n    \u0412 \u0437\u0430\u043F\u0430\u0434\u043D\u043E\u0439 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u0438 \u0440\u044B\u0431\u043E\u0439 \u0432\u044B\u0441\u0442\u0443\u043F\u0430\u0435\u0442 \u0444\u0440\u0430\u0433\u043C\u0435\u043D\u0442 \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u043E\u0433\u043E \u0442\u0435\u043A\u0441\u0442\u0430 \u0438\u0437 \u0444\u0438\u043B\u043E\u0441\u043E\u0444\u0441\u043A\u043E\u0433\u043E \u0442\u0440\u0430\u043A\u0442\u0430\u0442\u0430 \u0426\u0438\u0446\u0435\u0440\u043E\u043D\u0430 \xAB\u041E \u043F\u0440\u0435\u0434\u0435\u043B\u0430\u0445 \u0434\u043E\u0431\u0440\u0430\n    \u0438 \u0437\u043B\u0430\xBB, \u043D\u0430\u043F\u0438\u0441\u0430\u043D\u043D\u043E\u0433\u043E \u0432 45 \u0433\u043E\u0434\u0443 \u0434\u043E \u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B. \u0412\u043F\u0435\u0440\u0432\u044B\u0435 \u044D\u0442\u043E\u0442 \u0442\u0435\u043A\u0441\u0442 \u0431\u044B\u043B \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D \u0434\u043B\u044F \u043D\u0430\u0431\u043E\u0440\u0430 \u0448\u0440\u0438\u0444\u0442\u043E\u0432\u044B\u0445 \u043E\u0431\u0440\u0430\u0437\u0446\u043E\u0432\n    \u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u043C \u043F\u0435\u0447\u0430\u0442\u043D\u0438\u043A\u043E\u043C \u0435\u0449\u0435 \u0432 XVI \u0432\u0435\u043A\u0435.\n</ng-template>\n\n<ng-template #customFooter>\n    <div>Popover footer</div>\n</ng-template>\n\n<section class=\"container\">\n    <button\n        mc-button\n        mcPopover\n        #popover=\"mcPopover\"\n        mcPopoverHeader=\"Popover header\"\n        [mcPopoverContent]=\"customContent\"\n        [mcPopoverFooter]=\"customFooter\">\n        default\n    </button>\n</section>\n\n\n<button mc-button (click)=\"togglePopover($event)\">togglePopover</button>\n",
          styles: [".container{align-items:center;display:flex;flex-direction:column;height:600px;justify-content:center;max-width:100%;width:600px}"]
        }]
      }];
      PopoverInstanceExample.propDecorators = {
        popover: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['popover', {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/popover/popover-overview/popover-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic popover
       */


      var PopoverOverviewExample = /*#__PURE__*/function () {
        function PopoverOverviewExample() {
          _classCallCheck(this, PopoverOverviewExample);

          this.isPopoverVisibleLeft = false;
          this.activatedPosition = '';
          this.ELEMENTS = {
            BUTTON: 'button',
            INPUT: 'input',
            ICON: 'icon'
          };
          this.TRIGGERS = {
            CLICK: 'click',
            FOCUS: 'focus',
            HOVER: 'hover'
          };
          this.SIZE = {
            LARGE: 'large',
            NORMAL: 'normal',
            SMALL: 'small'
          };
          this.selectedElement = 'button';
          this.selectedPlacement = 'left';
          this.selectedTrigger = 'click';
          this.selectedSize = 'normal';
          this.layoutClass = 'flex-65 layout-row layout-align-center-center';
          this.content = 'button text';
          this.userDefinedPlacementPriority = ['bottom', 'right'];
          this.multipleSelected = [];
          this.popoverActiveStage = 1;
        }
        /**
         * @param {?} direction
         * @return {?}
         */


        _createClass(PopoverOverviewExample, [{
          key: "changeStep",
          value: function changeStep(direction) {
            /** @type {?} */
            var newStage = this.popoverActiveStage + direction; // tslint:disable-next-line:no-magic-numbers

            if (newStage < 1 || newStage > 3) {
              return;
            }

            this.popoverActiveStage += direction;
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onPopoverVisibleChange",
          value: function onPopoverVisibleChange($event) {
            if (!$event) {
              this.activatedPosition = '';
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onStrategyPlacementChange",
          value: function onStrategyPlacementChange(event) {
            this.activatedPosition = event;
          }
          /**
           * @param {?} placement
           * @return {?}
           */

        }, {
          key: "setPlacement",
          value: function setPlacement(placement) {
            this.selectedPlacement = placement;
          }
          /**
           * @return {?}
           */

        }, {
          key: "showElement",
          value: function showElement() {
            return this.selectedElement;
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "activated",
          value: function activated(value) {
            return this.selectedPlacement === value;
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isActual",
          value: function isActual(value) {
            return this.activatedPosition === value && this.selectedPlacement !== this.activatedPosition;
          }
          /**
           * @param {?} forElement
           * @return {?}
           */

        }, {
          key: "getOrder",
          value: function getOrder(forElement) {
            if (forElement === 'config') {
              return this.selectedOrder ? {
                order: 2
              } : {
                order: 1
              };
            }

            if (forElement === 'result') {
              return this.selectedOrder ? {
                order: 1
              } : {
                order: 2
              };
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "isFallbackActivated",
          get: function get() {
            return this.selectedPlacement !== this.activatedPosition && this.activatedPosition !== '';
          }
        }]);

        return PopoverOverviewExample;
      }();

      PopoverOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'popover-overview-example',
          template: "<div class=\"container flex flex-100 layout-column layout-align-start-start\">\n    <ng-template #customContent>\n        <ng-container [ngSwitch]=\"popoverActiveStage\">\n            <ng-container *ngSwitchCase=\"1\">\n                \u0412 \u0437\u0430\u043F\u0430\u0434\u043D\u043E\u0439 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u0438 \u0440\u044B\u0431\u043E\u0439 \u0432\u044B\u0441\u0442\u0443\u043F\u0430\u0435\u0442 \u0444\u0440\u0430\u0433\u043C\u0435\u043D\u0442 \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u043E\u0433\u043E \u0442\u0435\u043A\u0441\u0442\u0430 \u0438\u0437 \u0444\u0438\u043B\u043E\u0441\u043E\u0444\u0441\u043A\u043E\u0433\u043E \u0442\u0440\u0430\u043A\u0442\u0430\u0442\u0430 \u0426\u0438\u0446\u0435\u0440\u043E\u043D\u0430 \xAB\u041E \u043F\u0440\u0435\u0434\u0435\u043B\u0430\u0445 \u0434\u043E\u0431\u0440\u0430 \u0438 \u0437\u043B\u0430\xBB, \u043D\u0430\u043F\u0438\u0441\u0430\u043D\u043D\u043E\u0433\u043E \u0432 45 \u0433\u043E\u0434\u0443 \u0434\u043E \u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B. \u0412\u043F\u0435\u0440\u0432\u044B\u0435 \u044D\u0442\u043E\u0442 \u0442\u0435\u043A\u0441\u0442 \u0431\u044B\u043B \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D \u0434\u043B\u044F \u043D\u0430\u0431\u043E\u0440\u0430 \u0448\u0440\u0438\u0444\u0442\u043E\u0432\u044B\u0445 \u043E\u0431\u0440\u0430\u0437\u0446\u043E\u0432 \u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u043C \u043F\u0435\u0447\u0430\u0442\u043D\u0438\u043A\u043E\u043C \u0435\u0449\u0435 \u0432 XVI \u0432\u0435\u043A\u0435.\n            </ng-container>\n            <ng-container *ngSwitchCase=\"2\">\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\n            </ng-container>\n            <ng-container *ngSwitchCase=\"3\">\n                \u0421\u0435\u0433\u043E\u0434\u043D\u044F \u044D\u0442\u043E\u0442 \u0442\u0435\u043A\u0441\u0442 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044E\u0442 \u043F\u0440\u0430\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0432\u0441\u0435 \u0434\u0438\u0437\u0430\u0439\u043D\u0435\u0440\u044B, \u043D\u0430\u0431\u0438\u0440\u0430\u044E\u0449\u0438\u0435 \u0440\u044B\u0431\u0443 \u043B\u0430\u0442\u0438\u043D\u0438\u0446\u0435\u0439. \u0410\u0431\u0437\u0430\u0446 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044F \u043A\u0430\u043D\u043E\u043D\u0438\u0447\u0435\u0441\u043A\u0438\u043C \u0432\u043E \u0432\u0441\u0435\u0445 \u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430\u0445 \u043F\u043E \u0442\u0438\u043F\u043E\u0433\u0440\u0430\u0444\u0438\u043A\u0435 \u0438 \u043F\u0440\u0435\u0434\u043B\u0430\u0433\u0430\u0435\u0442\u0441\u044F \u043A \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044E \u0432 \u0441\u0442\u0430\u0442\u044C\u044F\u0445, \u043F\u043E\u0441\u0432\u044F\u0449\u0435\u043D\u043D\u044B\u0445 \u0438\u0437\u0433\u043E\u0442\u043E\u0432\u043B\u0435\u043D\u0438\u044E \u043C\u0430\u043A\u0435\u0442\u0430 \u0432\u0435\u0440\u0441\u0442\u043A\u0438 \u043F\u0440\u0438 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0444\u0438\u043D\u0430\u043B\u044C\u043D\u044B\u0445 \u0442\u0435\u043A\u0441\u0442\u043E\u0432. \u0412 \u0440\u0443\u043A\u043E\u0432\u043E\u0434\u0441\u0442\u0432\u0430\u0445 \u043F\u043E \u0440\u0430\u0431\u043E\u0442\u0435 \u0441 \u0444\u0438\u0440\u043C\u0435\u043D\u043D\u044B\u043C \u0441\u0442\u0438\u043B\u0435\u043C \u043A\u0440\u0443\u043F\u043D\u044B\u0445 \u043C\u0435\u0436\u0434\u0443\u043D\u0430\u0440\u043E\u0434\u043D\u044B\u0445 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0439 \u0438\u043C\u0435\u043D\u043D\u043E \u0441 \u044D\u0442\u0438\u0445 \u0441\u043B\u043E\u0432 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u043E\u0431\u0440\u0430\u0437\u0446\u044B \u0432\u0435\u0440\u0441\u0442\u043A\u0438. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044E\u0442 \u0434\u0430\u0436\u0435 \u0438\u0437\u0434\u0430\u043D\u0438\u044F \u0441 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\u043C Lorem ipsum.\n            </ng-container>\n        </ng-container>\n    </ng-template>\n\n    <ng-template #customFooter>\n        <div class=\"flex-100 layout-row layout-align-space-between-center\" cdkTrapFocus=\"true\" cdkTrapFocusAutoCapture=\"true\">\n            <button class=\"step\"\n                    mc-button\n                    color=\"primary\"\n                    (click)=\"changeStep(-1)\">\n                &larr; \u041D\u0430\u0437\u0430\u0434\n            </button>\n            <button class=\"step\"\n                    mc-button\n                    color=\"primary\"\n                    (click)=\"changeStep(1)\">\n                \u0414\u0430\u043B\u044C\u0448\u0435 &rarr;\n            </button>\n        </div>\n    </ng-template>\n\n    <div class=\"flex-35 layout-row layou-align-start-start config\" [style]=\"getOrder('config')\">\n        <div class=\"flex-35\">\n            <label for=\"order\">Inverse layout order:</label>\n            <br/>\n            <mc-checkbox id=\"order\" [(ngModel)]=\"selectedOrder\">Yes/No</mc-checkbox>\n            <br/>\n            <label for=\"element\" class=\"flex mc-form-label\">\n                Choose element for popover binding\n            </label>\n            <mc-form-field id=\"element\" class=\"padding-32\">\n                <mc-select [(value)]=\"selectedElement\" [placeholder]=\"'Select element'\">\n                    <mc-option value=\"button\">Button</mc-option>\n                    <mc-option value=\"icon\">Icon</mc-option>\n                    <mc-option value=\"input\">Input</mc-option>\n                </mc-select>\n            </mc-form-field>\n\n            <label for=\"trigger\" class=\"flex mc-form-label\">\n                Choose popover trigger\n            </label>\n            <mc-form-field id=\"trigger\" class=\"padding-32\">\n                <mc-select [(value)]=\"selectedTrigger\" [placeholder]=\"'Select trigger'\">\n                    <mc-option value=\"click\">Click</mc-option>\n                    <mc-option value=\"hover\">Hover</mc-option>\n                    <mc-option value=\"focus\">Focus</mc-option>\n                </mc-select>\n            </mc-form-field>\n\n            <label for=\"size\" class=\"flex mc-form-label\">\n                Choose popover size\n            </label>\n            <mc-form-field id=\"size\" class=\"padding-32\">\n                <mc-select [(value)]=\"selectedSize\" [placeholder]=\"'Select size'\">\n                    <mc-option value=\"small\">Small</mc-option>\n                    <mc-option value=\"normal\">Normal</mc-option>\n                    <mc-option value=\"large\">Large</mc-option>\n                </mc-select>\n            </mc-form-field>\n\n            <label for=\"layout\" class=\"flex mc-form-label\">\n                Choose layout content placement\n            </label>\n            <mc-form-field id=\"layout\" class=\"padding-32\">\n                <mc-select [(value)]=\"layoutClass\" [placeholder]=\"'Select layout'\">\n                    <mc-option value=\"flex-65 layout-row layout-align-start-start\">Start start</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-start-center\">Start center</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-start-end\">Start end</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-center-start\">Center start</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-center-center\">Center center</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-center-end\">Center end</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-end-start\">End start</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-end-center\">End center</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-end-end\">End end</mc-option>\n                </mc-select>\n            </mc-form-field>\n        </div>\n        <div class=\"flex flex-35 layout-align-center-center\">\n            <label for=\"trigger\" class=\"flex mc-form-label\">\n                Choose popover arrow placement - popover mcPlacement and placement priority strategy\n            </label>\n            <div class=\"visual-box\">\n                <div (click)=\"setPlacement('topLeft')\"\n                     [ngClass]=\"{\n                        active: activated('topLeft'),\n                        actual: isActual('topLeft')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-top-left\"></div>\n                <div (click)=\"setPlacement('top')\"\n                     [ngClass]=\"{\n                        active: activated('top'),\n                        actual: isActual('top')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-top\"></div>\n                <div (click)=\"setPlacement('topRight')\"\n                     [ngClass]=\"{\n                        active: activated('topRight'),\n                        actual: isActual('topRight')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-top-right\"></div>\n                <div (click)=\"setPlacement('rightTop')\"\n                     [ngClass]=\"{\n                        active: activated('rightTop'),\n                        actual: isActual('rightTop')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-right-top\"></div>\n                <div (click)=\"setPlacement('right')\"\n                     [ngClass]=\"{\n                        active: activated('right'),\n                        actual: isActual('right')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-right\"></div>\n                <div (click)=\"setPlacement('rightBottom')\"\n                     [ngClass]=\"{\n                        active: activated('rightBottom'),\n                        actual: isActual('rightBottom')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-right-bottom\"></div>\n                <div (click)=\"setPlacement('bottomRight')\"\n                     [ngClass]=\"{\n                        active: activated('bottomRight'),\n                        actual: isActual('bottomRight')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-bottom-right\"></div>\n                <div (click)=\"setPlacement('bottom')\"\n                     [ngClass]=\"{\n                        active: activated('bottom'),\n                        actual: isActual('bottom')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-bottom\"></div>\n                <div (click)=\"setPlacement('bottomLeft')\"\n                     [ngClass]=\"{\n                        active: activated('bottomLeft'),\n                        actual: isActual('bottomLeft')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-bottom-left\"></div>\n                <div (click)=\"setPlacement('leftBottom')\"\n                     [ngClass]=\"{\n                        active: activated('leftBottom'),\n                        actual: isActual('leftBottom')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-left-bottom\"></div>\n                <div (click)=\"setPlacement('left')\"\n                     [ngClass]=\"{\n                        active: activated('left'),\n                        actual: isActual('left')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-left\"></div>\n                <div (click)=\"setPlacement('leftTop')\"\n                     [ngClass]=\"{\n                        active: activated('leftTop'),\n                        actual: isActual('leftTop')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-left-top\"></div>\n            </div>\n            <mc-form-field>\n                <mc-select multiple [(value)]=\"multipleSelected\">\n                    <mc-option value=\"top\" disabled>Top</mc-option>\n                    <mc-option value=\"topLeft\">TopLeft</mc-option>\n                    <mc-option value=\"topRight\">TopRight</mc-option>\n                    <mc-option value=\"bottom\">Bottom</mc-option>\n                    <mc-option value=\"bottomLeft\">BottomLeft</mc-option>\n                    <mc-option value=\"bottomRight\">BottomRight</mc-option>\n                    <mc-option value=\"right\">Right</mc-option>\n                    <mc-option value=\"rightTop\">RightTop</mc-option>\n                    <mc-option value=\"rightBottom\">RightBottom</mc-option>\n                    <mc-option value=\"left\">Left</mc-option>\n                    <mc-option value=\"leftTop\">LeftTop</mc-option>\n                    <mc-option value=\"leftBottom\">LeftBottom</mc-option>\n                </mc-select>\n            </mc-form-field>\n        </div>\n        <div class=\"flex-30\">\n            <h3>Configuration:</h3>\n            <ul>\n                <li>Popover size: {{selectedSize}}</li>\n                <li>Popover trigger: {{selectedTrigger}}</li>\n                <li>Popover anchor placement: {{selectedPlacement}}</li>\n                <li>Popover anchored element: {{selectedElement}}</li>\n                <li *ngIf=\"this.isFallbackActivated\" class=\"actual red\">Popover activated fallback position: {{activatedPosition}}</li>\n                <li>Layout positioning: {{layoutClass}}</li>\n                <li *ngIf=\"multipleSelected\">Placement priority order: {{multipleSelected}}</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\"{{layoutClass}} result\" [style]=\"getOrder('result')\">\n        <div [ngSwitch]=\"showElement()\">\n            <button mc-button class=\"proove\"\n                    *ngSwitchCase=\"ELEMENTS.BUTTON\"\n                    mcPopover\n                    mcPopoverClass=\"popover-485\"\n                    mcPopoverHeader=\"Header text\"\n                    [mcPopoverPlacement]=\"selectedPlacement\"\n                    [mcPopoverPlacementPriority]=\"multipleSelected\"\n                    [mcPopoverSize]=\"selectedSize\"\n                    [mcPopoverTrigger]=\"selectedTrigger\"\n                    [mcPopoverContent]=\"customContent\"\n                    [mcPopoverFooter]=\"customFooter\"\n                    (mcPopoverPositionStrategyPlacementChange)=\"onStrategyPlacementChange($event)\"\n                    (mcPopoverVisibleChange)=\"onPopoverVisibleChange($event)\">\n                Button\n            </button>\n            <mc-form-field *ngSwitchCase=\"ELEMENTS.INPUT\">\n                <input mcInput\n                       [(ngModel)]=\"content\"\n                       placeholder=\"Button content\"\n                       mcPopover\n                       mcPopoverClass=\"popover-485\"\n                       mcPopoverHeader=\"Lorem ipsum\"\n                       [mcPopoverPlacement]=\"selectedPlacement\"\n                       [mcPopoverPlacementPriority]=\"multipleSelected\"\n                       [mcPopoverSize]=\"selectedSize\"\n                       [mcPopoverTrigger]=\"selectedTrigger\"\n                       [mcPopoverContent]=\"customContent\"\n                       [mcPopoverFooter]=\"customFooter\"\n                       (mcPopoverPositionStrategyPlacementChange)=\"onStrategyPlacementChange($event)\"\n                       (mcPopoverVisibleChange)=\"onPopoverVisibleChange($event)\">\n            </mc-form-field>\n            <div *ngSwitchCase=\"ELEMENTS.ICON\">\n                <i mc-icon=\"mc-calendar_16\"\n                   mcPopover\n                   mcPopoverClass=\"popover-485\"\n                   mcPopoverHeader=\"Header text\"\n                   [mcPopoverPlacement]=\"selectedPlacement\"\n                   [mcPopoverPlacementPriority]=\"multipleSelected\"\n                   [mcPopoverSize]=\"selectedSize\"\n                   [mcPopoverTrigger]=\"selectedTrigger\"\n                   [mcPopoverContent]=\"customContent\"\n                   [mcPopoverFooter]=\"customFooter\"\n                   (mcPopoverPositionStrategyPlacementChange)=\"onStrategyPlacementChange($event)\"\n                   (mcPopoverVisibleChange)=\"onPopoverVisibleChange($event)\">\n                </i>\n            </div>\n        </div>\n    </div>\n</div>\n",
          styles: ["body,html{margin:0}app,body,html{height:100%;width:100%}.actual{-webkit-animation:blink-animation 1s steps(5,start) infinite;animation:blink-animation 1s steps(5,start) infinite}@keyframes blink-animation{to{visibility:hidden}}@-webkit-keyframes blink-animation{to{visibility:hidden}}.red{color:red}.container{height:100%;padding:1%;width:100%}.config,.result{height:50%;width:100%}.result{border-bottom:2px solid #56d1ff;border-top:2px solid #56d1ff}.padding-32{padding:8px}.visual-box--clickable{background:#4dc3ff;cursor:pointer;height:12px;position:absolute;width:12px}.active{background:red}.visual-box{border:1px solid #575757;height:100px;margin:50px;position:relative;width:240px}.visual-box_placement-top-left{left:10px;top:-6px}.visual-box_placement-top{left:calc(50% - 6px);top:-6px}.visual-box_placement-top-right{right:10px;top:-6px}.visual-box_placement-left-top{left:-6px;top:10px}.visual-box_placement-left{left:-6px;top:calc(50% - 6px)}.visual-box_placement-left-bottom{bottom:10px;left:-6px}.visual-box_placement-bottom-right{bottom:-6px;right:10px}.visual-box_placement-bottom{bottom:-6px;right:calc(50% - 6px)}.visual-box_placement-bottom-left{bottom:-6px;left:10px}.visual-box_placement-right-bottom{bottom:10px;right:-6px}.visual-box_placement-right{bottom:calc(50% - 6px);right:-6px}.visual-box_placement-right-top{right:-6px;top:10px}.popover-485 .mc-popover{max-width:485px!important}"]
        }]
      }];
      /** @nocollapse */

      PopoverOverviewExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/progress-bar/progress-bar-indeterminate/progress-bar-indeterminate-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Indeterminate progress bar
       */


      var ProgressBarIndeterminateExample = function ProgressBarIndeterminateExample() {
        _classCallCheck(this, ProgressBarIndeterminateExample);
      };

      ProgressBarIndeterminateExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'progress-bar-indeterminate-example',
          template: "<div class=\"example-progress-bar-group\">\n    <mc-progress-bar class=\"example-progress-bar\" mode=\"indeterminate\" color=\"primary\"></mc-progress-bar>\n    <mc-progress-bar class=\"example-progress-bar\" mode=\"indeterminate\" color=\"second\"></mc-progress-bar>\n    <mc-progress-bar mode=\"indeterminate\" color=\"error\"></mc-progress-bar>\n</div>\n",
          styles: [".example-progress-bar-group{display:flex;flex-direction:column}.example-progress-bar{margin-bottom:12px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/progress-bar/progress-bar-overview/progress-bar-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic progress bar
       */

      var ProgressBarOverviewExample = function ProgressBarOverviewExample() {
        _classCallCheck(this, ProgressBarOverviewExample);

        this.percent = 30;
      };

      ProgressBarOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'progress-bar-overview-example',
          template: "<div class=\"example-progress-bar-group\">\n    <mc-progress-bar class=\"example-progress-bar\" [value]=\"percent\" color=\"primary\"></mc-progress-bar>\n    <mc-progress-bar class=\"example-progress-bar\" [value]=\"percent\" color=\"second\"></mc-progress-bar>\n    <mc-progress-bar class=\"example-progress-bar\" [value]=\"percent\" color=\"error\"></mc-progress-bar>\n    <mc-form-field>\n        <input mcInput [(ngModel)]=\"percent\" type=\"number\" min=\"0\" max=\"100\" step=\"5\">\n        <mc-stepper></mc-stepper>\n    </mc-form-field>\n</div>\n",
          styles: [".example-progress-bar-group{display:flex;flex-direction:column}.example-progress-bar{margin-bottom:12px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/progress-spinner/progress-spinner-indeterminate/progress-spinner-indeterminate-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Indeterminate progress spinner
       */


      var ProgressSpinnerIndeterminateExample = function ProgressSpinnerIndeterminateExample() {
        _classCallCheck(this, ProgressSpinnerIndeterminateExample);
      };

      ProgressSpinnerIndeterminateExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'progress-spinner-indeterminate-example',
          template: "<div class=\"example-progress-spinner-group\">\n    <mc-progress-spinner mode=\"indeterminate\" color=\"primary\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner mode=\"indeterminate\" color=\"second\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner mode=\"indeterminate\" color=\"error\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n</div>\n",
          styles: [".example-progress-spinner-group{display:flex}.example-progress-spinner-element{margin-right:8px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/progress-spinner/progress-spinner-overview/progress-spinner-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var INTERVAL = 300;
      /** @type {?} */

      var STEP = 4;
      /** @type {?} */

      var MAX_PERCENT = 100;
      /**
       * \@title Basic progress spinner
       */

      var ProgressSpinnerOverviewExample = /*#__PURE__*/function () {
        function ProgressSpinnerOverviewExample() {
          var _this123 = this;

          _classCallCheck(this, ProgressSpinnerOverviewExample);

          this.percent = 0;
          setInterval(
          /**
          * @return {?}
          */
          function () {
            _this123.percent = (_this123.percent + STEP) % (MAX_PERCENT + STEP);
          }, INTERVAL);
        }
        /**
         * @return {?}
         */


        _createClass(ProgressSpinnerOverviewExample, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            clearInterval(this.intervalId);
          }
        }]);

        return ProgressSpinnerOverviewExample;
      }();

      ProgressSpinnerOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'progress-spinner-overview-example',
          template: "<div class=\"example-progress-spinner-group\">\n    <div class=\"example-progress-spinner-element\">{{percent}}%</div>\n    <mc-progress-spinner [value]=\"percent\" color=\"primary\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner [value]=\"percent\" color=\"second\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner [value]=\"percent\" color=\"error\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n</div>\n",
          styles: [".example-progress-spinner-group{display:flex}.example-progress-spinner-element{margin-right:8px}.example-progress-spinner-element:first-child{width:40px}"]
        }]
      }];
      /** @nocollapse */

      ProgressSpinnerOverviewExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/radio/radio-overview/radio-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic radio
       */


      var RadioOverviewExample = function RadioOverviewExample() {
        _classCallCheck(this, RadioOverviewExample);

        this.isDisabled = false;
      };

      RadioOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'radio-overview-example',
          template: "<mc-radio-group\n    class=\"example-radio-group\"\n    name=\"my_options\">\n    <mc-radio-button class=\"example-radio-button\" value=\"option_1\" [disabled]=\"isDisabled\">Option 1</mc-radio-button>\n    <mc-radio-button class=\"example-radio-button\" value=\"option_2\" [disabled]=\"isDisabled\">Option 2</mc-radio-button>\n    <mc-radio-button class=\"example-radio-button\" value=\"option_3\" [disabled]=\"isDisabled\">Option 3</mc-radio-button>\n</mc-radio-group>\n\n<mc-checkbox class=\"example-radio-control\" [(ngModel)]=\"isDisabled\">Disabled</mc-checkbox>\n",
          styles: [".example-radio-group{display:inline-flex;flex-direction:column}.example-radio-button{margin-bottom:10px}.example-radio-control{display:flex;margin-top:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/select/select-groups/select-groups-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Select
       */


      var SelectGroupsExample = function SelectGroupsExample() {
        _classCallCheck(this, SelectGroupsExample);

        this.pokemonTypes = [{
          name: 'Grass',
          pokemon: [{
            value: 'bulbasaur-0',
            viewValue: 'Bulbasaur'
          }, {
            value: 'oddish-1',
            viewValue: 'Oddish'
          }, {
            value: 'bellsprout-2',
            viewValue: 'Bellsprout'
          }]
        }, {
          name: 'Water',
          disabled: true,
          pokemon: [{
            value: 'squirtle-3',
            viewValue: 'Squirtle'
          }, {
            value: 'psyduck-4',
            viewValue: 'Psyduck'
          }, {
            value: 'horsea-5',
            viewValue: 'Horsea'
          }]
        }, {
          name: 'Fire',
          pokemon: [{
            value: 'charmander-6',
            viewValue: 'Charmander'
          }, {
            value: 'vulpix-7',
            viewValue: 'Vulpix'
          }, {
            value: 'flareon-8',
            viewValue: 'Flareon'
          }]
        }, {
          name: 'Psychic',
          pokemon: [{
            value: 'mew-9',
            viewValue: 'Mew'
          }, {
            value: 'mewtwo-10',
            viewValue: 'Mewtwo'
          }]
        }];
      };

      SelectGroupsExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'select-groups-example',
          template: "<mc-form-field>\n    <mc-select>\n        <mc-optgroup *ngFor=\"let group of pokemonTypes\" [label]=\"group.name\" [disabled]=\"group.disabled\">\n            <mc-option *ngFor=\"let pokemon of group.pokemon\" [value]=\"pokemon.value\">{{ pokemon.viewValue }}</mc-option>\n        </mc-optgroup>\n        <mc-option value=\"mime-11\">Mr. Mime</mc-option>\n    </mc-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/select/select-multiple-overview/select-multiple-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Select
       */


      var SelectMultipleOverviewExample = function SelectMultipleOverviewExample() {
        _classCallCheck(this, SelectMultipleOverviewExample);

        this.selected = [];
      };

      SelectMultipleOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'select-multiple-overview-example',
          template: "<mc-form-field>\n    <mc-select multiple [(value)]=\"selected\">\n        <mc-option value=\"Disabled\" disabled>Disabled</mc-option>\n        <mc-option value=\"SelectedItem\">SelectedItem</mc-option>\n        <mc-option value=\"SelectedItem1\">SelectedItem1</mc-option>\n        <mc-option value=\"SelectedItem2\">SelectedItem2</mc-option>\n        <mc-option value=\"SelectedItem3\">SelectedItem3</mc-option>\n        <mc-option value=\"SelectedItem4\">SelectedItem4</mc-option>\n        <mc-option value=\"SelectedItem5\">SelectedItem5</mc-option>\n        <mc-option value=\"SelectedItem6\">SelectedItem6</mc-option>\n        <mc-option value=\"SelectedItem7\">SelectedItem7</mc-option>\n        <mc-option value=\"SelectedItem8\">SelectedItem8</mc-option>\n        <mc-option value=\"SelectedItem9\">SelectedItem9</mc-option>\n        <mc-option value=\"SelectedItem10\">SelectedItem10</mc-option>\n    </mc-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/select/select-overview/select-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Select
       */


      var SelectOverviewExample = function SelectOverviewExample() {
        _classCallCheck(this, SelectOverviewExample);

        this.selected = '';
      };

      SelectOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'select-overview-example',
          template: "<mc-form-field>\n    <mc-select [(value)]=\"selected\">\n        <mc-option value=\"Disabled\" disabled>Disabled</mc-option>\n        <mc-option value=\"SelectedItem\">SelectedItem</mc-option>\n        <mc-option value=\"SelectedItem1\">SelectedItem1</mc-option>\n        <mc-option value=\"SelectedItem2\">SelectedItem2</mc-option>\n        <mc-option value=\"SelectedItem3\">SelectedItem3</mc-option>\n        <mc-option value=\"SelectedItem4\">SelectedItem4</mc-option>\n        <mc-option value=\"SelectedItem5\">SelectedItem5</mc-option>\n        <mc-option value=\"SelectedItem6\">SelectedItem6</mc-option>\n        <mc-option value=\"SelectedItem7\">SelectedItem7</mc-option>\n        <mc-option value=\"SelectedItem8\">SelectedItem8</mc-option>\n        <mc-option value=\"SelectedItem9\">SelectedItem9</mc-option>\n        <mc-option value=\"SelectedItem10\">SelectedItem10</mc-option>\n    </mc-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/select/select-search-overview/select-search-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var OPTIONS = ['Abakan', 'Almetyevsk', 'Anadyr', 'Anapa', 'Arkhangelsk', 'Astrakhan', 'Barnaul', 'Belgorod', 'Beslan', 'Biysk', 'Birobidzhan', 'Blagoveshchensk', 'Bologoye', 'Bryansk', 'Veliky Novgorod', 'Veliky Ustyug', 'Vladivostok', 'Vladikavkaz', 'Vladimir', 'Volgograd', 'Vologda', 'Vorkuta', 'Voronezh', 'Gatchina', 'Gdov', 'Gelendzhik', 'Gorno-Altaysk', 'Grozny', 'Gudermes', 'Gus-Khrustalny', 'Dzerzhinsk', 'Dmitrov', 'Dubna', 'Yeysk', 'Yekaterinburg', 'Yelabuga', 'Yelets', 'Yessentuki', 'Zlatoust', 'Ivanovo', 'Izhevsk', 'Irkutsk', 'Yoshkar-Ola', 'Kazan', 'Kaliningrad', 'Kaluga', 'Kemerovo', 'Kislovodsk', 'Komsomolsk-on-Amur', 'Kotlas', 'Krasnodar', 'Krasnoyarsk', 'Kurgan', 'Kursk', 'Kyzyl', 'Leninogorsk', 'Lensk', 'Lipetsk', 'Luga', 'Lyuban', 'Lyubertsy', 'Magadan', 'Maykop', 'Makhachkala', 'Miass', 'Mineralnye Vody', 'Mirny', 'Moscow', 'Murmansk', 'Murom', 'Mytishchi', 'Naberezhnye Chelny', 'Nadym', 'Nalchik', 'Nazran', 'Naryan-Mar', 'Nakhodka', 'Nizhnevartovsk', 'Nizhnekamsk', 'Nizhny Novgorod', 'Nizhny Tagil', 'Novokuznetsk', 'Novosibirsk', 'Novy Urengoy', 'Norilsk', 'Obninsk', 'Oktyabrsky', 'Omsk', 'Orenburg', 'Orekhovo-Zuyevo', 'Oryol', 'Penza', 'Perm', 'Petrozavodsk', 'Petropavlovsk-Kamchatsky', 'Podolsk', 'Pskov', 'Pyatigorsk', 'Rostov-on-Don', 'Rybinsk', 'Ryazan', 'Salekhard', 'Samara', 'Saint Petersburg', 'Saransk', 'Saratov', 'Severodvinsk', 'Smolensk', 'Sol-Iletsk', 'Sochi', 'Stavropol', 'Surgut', 'Syktyvkar', 'Tambov', 'Tver', 'Tobolsk', 'Tolyatti', 'Tomsk', 'Tuapse', 'Tula', 'Tynda', 'Tyumen', 'Ulan-Ude', 'Ulyanovsk', 'Ufa', 'Khabarovsk', 'Khanty-Mansiysk', 'Chebarkul', 'Cheboksary', 'Chelyabinsk', 'Cherepovets', 'Cherkessk', 'Chistopol', 'Chita', 'Shadrinsk', 'Shatura', 'Shuya', 'Elista', 'Engels', 'Yuzhno-Sakhalinsk', 'Yakutsk', 'Yaroslavl'];
      /**
       * \@title Basic Select
       */

      var SelectSearchOverviewExample = /*#__PURE__*/function () {
        function SelectSearchOverviewExample() {
          _classCallCheck(this, SelectSearchOverviewExample);

          this.selected = [];
          this.searchControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
          this.options = OPTIONS.sort();
        }
        /**
         * @return {?}
         */


        _createClass(SelectSearchOverviewExample, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this124 = this;

            this.filteredOptions = Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["of"])(OPTIONS), this.searchControl.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this124.getFilteredOptions(value);
            })));
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "getFilteredOptions",
          value: function getFilteredOptions(value) {
            /** @type {?} */
            var searchFilter = value && value["new"] ? value.value : value;
            return searchFilter ? this.options.filter(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.toLowerCase().includes(searchFilter.toLowerCase());
            }) : this.options;
          }
        }]);

        return SelectSearchOverviewExample;
      }();

      SelectSearchOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'select-search-overview-example',
          template: "<mc-form-field>\n    <mc-select multiple [(value)]=\"selected\">\n        <mc-form-field mcFormFieldWithoutBorders mcSelectSearch>\n            <i mcPrefix mc-icon=\"mc-search_16\"></i>\n            <input mcInput [formControl]=\"searchControl\" type=\"text\"/>\n            <mc-cleaner></mc-cleaner>\n        </mc-form-field>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n\n        <div mc-select-search-empty-result>\u041D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E</div>\n\n        <mc-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">{{ option }}</mc-option>\n    </mc-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/select/select-virtual-scroll/select-virtual-scroll-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var OPTIONS$1 = ['Abakan', 'Almetyevsk', 'Anadyr', 'Anapa', 'Arkhangelsk', 'Astrakhan', 'Barnaul', 'Belgorod', 'Beslan', 'Biysk', 'Birobidzhan', 'Blagoveshchensk', 'Bologoye', 'Bryansk', 'Veliky Novgorod', 'Veliky Ustyug', 'Vladivostok', 'Vladikavkaz', 'Vladimir', 'Volgograd', 'Vologda', 'Vorkuta', 'Voronezh', 'Gatchina', 'Gdov', 'Gelendzhik', 'Gorno-Altaysk', 'Grozny', 'Gudermes', 'Gus-Khrustalny', 'Dzerzhinsk', 'Dmitrov', 'Dubna', 'Yeysk', 'Yekaterinburg', 'Yelabuga', 'Yelets', 'Yessentuki', 'Zlatoust', 'Ivanovo', 'Izhevsk', 'Irkutsk', 'Yoshkar-Ola', 'Kazan', 'Kaliningrad', 'Kaluga', 'Kemerovo', 'Kislovodsk', 'Komsomolsk-on-Amur', 'Kotlas', 'Krasnodar', 'Krasnoyarsk', 'Kurgan', 'Kursk', 'Kyzyl', 'Leninogorsk', 'Lensk', 'Lipetsk', 'Luga', 'Lyuban', 'Lyubertsy', 'Magadan', 'Maykop', 'Makhachkala', 'Miass', 'Mineralnye Vody', 'Mirny', 'Moscow', 'Murmansk', 'Murom', 'Mytishchi', 'Naberezhnye Chelny', 'Nadym', 'Nalchik', 'Nazran', 'Naryan-Mar', 'Nakhodka', 'Nizhnevartovsk', 'Nizhnekamsk', 'Nizhny Novgorod', 'Nizhny Tagil', 'Novokuznetsk', 'Novosibirsk', 'Novy Urengoy', 'Norilsk', 'Obninsk', 'Oktyabrsky', 'Omsk', 'Orenburg', 'Orekhovo-Zuyevo', 'Oryol', 'Penza', 'Perm', 'Petrozavodsk', 'Petropavlovsk-Kamchatsky', 'Podolsk', 'Pskov', 'Pyatigorsk', 'Rostov-on-Don', 'Rybinsk', 'Ryazan', 'Salekhard', 'Samara', 'Saint Petersburg', 'Saransk', 'Saratov', 'Severodvinsk', 'Smolensk', 'Sol-Iletsk', 'Sochi', 'Stavropol', 'Surgut', 'Syktyvkar', 'Tambov', 'Tver', 'Tobolsk', 'Tolyatti', 'Tomsk', 'Tuapse', 'Tula', 'Tynda', 'Tyumen', 'Ulan-Ude', 'Ulyanovsk', 'Ufa', 'Khabarovsk', 'Khanty-Mansiysk', 'Chebarkul', 'Cheboksary', 'Chelyabinsk', 'Cherepovets', 'Cherkessk', 'Chistopol', 'Chita', 'Shadrinsk', 'Shatura', 'Shuya', 'Elista', 'Engels', 'Yuzhno-Sakhalinsk', 'Yakutsk', 'Yaroslavl'];
      /**
       * \@title select-virtual-scroll
       */

      var SelectVirtualScrollExample = /*#__PURE__*/function () {
        function SelectVirtualScrollExample() {
          _classCallCheck(this, SelectVirtualScrollExample);

          this.options = OPTIONS$1.sort();
          this.initialRange =
          /** @type {?} */

          /** @type {?} */
          {
            start: 0,
            end: 7
          };
        }
        /**
         * @param {?} opened
         * @return {?}
         */


        _createClass(SelectVirtualScrollExample, [{
          key: "openedChange",
          value: function openedChange(opened) {
            if (opened) {
              return;
            }

            this.cdkVirtualScrollViewport.setRenderedContentOffset(0);
            this.cdkVirtualScrollViewport.setRenderedRange(this.initialRange);
          }
        }]);

        return SelectVirtualScrollExample;
      }();

      SelectVirtualScrollExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'select-virtual-scroll-example',
          template: "<mc-form-field>\n    <mc-select (openedChange)=\"openedChange($event)\">\n        <mc-cleaner></mc-cleaner>\n\n        <cdk-virtual-scroll-viewport\n            [itemSize]=\"32\"\n            [minBufferPx]=\"100\"\n            [maxBufferPx]=\"400\">\n\n            <mc-option\n                *cdkVirtualFor=\"let option of options; templateCacheSize: 0\"\n                [value]=\"option\">\n                {{ option }}\n            </mc-option>\n        </cdk-virtual-scroll-viewport>\n    </mc-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];
      SelectVirtualScrollExample.propDecorators = {
        cdkVirtualScrollViewport: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__["CdkVirtualScrollViewport"]]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/sidepanel/sidepanel-component/sidepanel-component-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Template Modal
       */


      var SidepanelComponentExample = /*#__PURE__*/function () {
        /**
         * @param {?} sidepanelService
         */
        function SidepanelComponentExample(sidepanelService) {
          _classCallCheck(this, SidepanelComponentExample);

          this.sidepanelService = sidepanelService;
        }
        /**
         * @return {?}
         */


        _createClass(SidepanelComponentExample, [{
          key: "openComponentSidepanel",
          value: function openComponentSidepanel() {
            var _this125 = this;

            this.sidepanelService.open(SidepanelExampleCustomComponent, {
              position: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelPosition"].Right,
              data: {
                openComponentSidepanel:
                /**
                * @return {?}
                */
                function openComponentSidepanel() {
                  _this125.openComponentSidepanel();
                }
              }
            });
          }
        }]);

        return SidepanelComponentExample;
      }();

      SidepanelComponentExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'sidepanel-component-example',
          template: "<button mc-button color=\"primary\" (click)=\"openComponentSidepanel()\">\n    <span>Open component sidepanel</span>\n</button>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
          styles: [".sidepanel-container{display:flex;flex-direction:column}.layout-padding{padding:8px}.layout-padding>*{padding:8px}"]
        }]
      }];
      /** @nocollapse */

      SidepanelComponentExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelService"]
        }];
      };

      if (false) {}

      var SidepanelExampleCustomComponent = // tslint:disable-line

      /**
       * @param {?} data
       */
      function SidepanelExampleCustomComponent(data) {
        _classCallCheck(this, SidepanelExampleCustomComponent);

        this.data = data;
        this.array = new Array(60); // tslint:disable-line

        this.openComponentSidepanel = data.openComponentSidepanel;
      };

      SidepanelExampleCustomComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'example-sidepanel',
          template: "\n    <mc-sidepanel-header [closeable]=\"true\">\n        Sidepanel Component Content\n    </mc-sidepanel-header>\n    <mc-sidepanel-body class=\"layout-padding\">\n        <div class=\"mc-subheading\">Sidepanel Component Body</div>\n\n        <div *ngFor=\"let item of array; index as i\">\n            {{ i + 1 }}\n        </div>\n    </mc-sidepanel-body>\n    <mc-sidepanel-footer>\n        <mc-sidepanel-actions align=\"right\">\n            <button mc-button color=\"primary\" (click)=\"openComponentSidepanel()\">\n                <span>Open another sidepanel</span>\n            </button>\n\n            <button mc-button color=\"second\" mc-sidepanel-close>\n                <span>Close</span>\n            </button>\n        </mc-sidepanel-actions>\n    </mc-sidepanel-footer>",
          host: {
            "class": 'layout-column flex sidepanel-container'
          }
        }]
      }];
      /** @nocollapse */

      SidepanelExampleCustomComponent.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["MC_SIDEPANEL_DATA"]]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/sidepanel/sidepanel-overview/sidepanel-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Template Modal
       */


      var SidepanelOverviewExample = /*#__PURE__*/function () {
        // tslint:disable-line

        /**
         * @param {?} sidepanelService
         */
        function SidepanelOverviewExample(sidepanelService) {
          _classCallCheck(this, SidepanelOverviewExample);

          this.sidepanelService = sidepanelService;
          this.arrayLength = 40;
          this.array = new Array(this.arrayLength); // tslint:disable-line
        }
        /**
         * @return {?}
         */


        _createClass(SidepanelOverviewExample, [{
          key: "openTemplateSidepanel",
          value: function openTemplateSidepanel() {
            this.sidepanelService.open(this.template, {
              position: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelPosition"].Bottom
            });
          }
        }]);

        return SidepanelOverviewExample;
      }();

      SidepanelOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'sidepanel-overview-example',
          template: "<button class=\"template-button\" mc-button color=\"primary\" (click)=\"openTemplateSidepanel()\">\n    <span>Open template sidepanel</span>\n</button>\n\n<ng-template>\n    <mc-sidepanel-header [closeable]=\"true\">\n        Sidepanel Template Content\n    </mc-sidepanel-header>\n    <mc-sidepanel-body class=\"layout-padding\">\n        <div class=\"mc-subheading\">Sidepanel Template Body</div>\n\n        <div *ngFor=\"let item of array; index as i\">\n            {{ i + 1 }}\n        </div>\n    </mc-sidepanel-body>\n    <mc-sidepanel-footer>\n        <mc-sidepanel-actions align=\"left\">\n            <button mc-button color=\"primary\" (click)=\"openTemplateSidepanel()\">\n                <span>Open another sidepanel</span>\n            </button>\n        </mc-sidepanel-actions>\n        <mc-sidepanel-actions align=\"right\">\n            <button mc-button color=\"primary\" (click)=\"openTemplateSidepanel()\">\n                <span>Open another sidepanel</span>\n            </button>\n\n            <button mc-button color=\"second\" mc-sidepanel-close>\n                <span>Close</span>\n            </button>\n        </mc-sidepanel-actions>\n    </mc-sidepanel-footer>\n</ng-template>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
          styles: [".layout-padding{padding:8px}.layout-padding>*{padding:8px}"]
        }]
      }];
      /** @nocollapse */

      SidepanelOverviewExample.ctorParameters = function () {
        return [{
          type: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelService"]
        }];
      };

      SidepanelOverviewExample.propDecorators = {
        template: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/splitter/splitter-fixed/splitter-fixed-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Splitter
       */


      var SplitterFixedExample = function SplitterFixedExample() {
        _classCallCheck(this, SplitterFixedExample);
      };

      SplitterFixedExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'splitter-fixed-example',
          template: "<mc-splitter>\n    <div mc-splitter-area class=\"mc-splitter-area_fixed-width\">first (with min-width)</div>\n    <div mc-splitter-area class=\"flex\">second</div>\n    <div mc-splitter-area>third</div>\n</mc-splitter>\n",
          styles: ["mc-splitter{border:1px solid #000;display:flex;height:100px;margin:2px}.mc-splitter-area_fixed-width{min-width:200px}div[mc-splitter-area]{background:#c5c0c0}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/splitter/splitter-nested/splitter-nested-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Splitter
       */

      var SplitterNestedExample = function SplitterNestedExample() {
        _classCallCheck(this, SplitterNestedExample);
      };

      SplitterNestedExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'splitter-nested-example',
          template: "<mc-splitter class=\"with-border\">\n    <div mc-splitter-area>left</div>\n    <div mc-splitter-area class=\"flex\">\n        <mc-splitter class=\"without-border flex\" [direction]=\"'vertical'\">\n            <div mc-splitter-area>top</div>\n            <div mc-splitter-area class=\"layout-column flex\">\n                <mc-splitter class=\"flex nested-splitter\">\n                    <div mc-splitter-area>center-left</div>\n                    <div mc-splitter-area class=\"flex\">center</div>\n                    <div mc-splitter-area>center-right</div>\n                </mc-splitter>\n            </div>\n            <div mc-splitter-area>bottom</div>\n        </mc-splitter>\n    </div>\n    <div mc-splitter-area>right</div>\n</mc-splitter>\n",
          styles: ["mc-splitter.with-border{border:1px solid #000;height:300px;margin:2px}mc-splitter.without-border{height:300px}.with-border>div[mc-splitter-area]{background:#c5c0c0}.without-border>div[mc-splitter-area]{background:#b3b3b3}.nested-splitter>div[mc-splitter-area]{background:#9f9f9f}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/splitter/splitter-overview/splitter-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Splitter
       */

      var SplitterOverviewExample = function SplitterOverviewExample() {
        _classCallCheck(this, SplitterOverviewExample);
      };

      SplitterOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'splitter-overview-example',
          template: "<mc-splitter>\n    <div mc-splitter-area>first</div>\n    <div mc-splitter-area class=\"flex\">second</div>\n    <div mc-splitter-area>third</div>\n</mc-splitter>\n",
          styles: ["mc-splitter{border:1px solid #000;height:100px;margin:2px}div[mc-splitter-area]{background:#c5c0c0}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/splitter/splitter-vertical/splitter-vertical-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Splitter
       */

      var SplitterVerticalExample = function SplitterVerticalExample() {
        _classCallCheck(this, SplitterVerticalExample);
      };

      SplitterVerticalExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'splitter-vertical-example',
          template: "<mc-splitter [direction]=\"'vertical'\">\n    <div mc-splitter-area class=\"mc-splitter-area_fixed-height\">first (with min-height)</div>\n    <div mc-splitter-area class=\"flex\">second</div>\n    <div mc-splitter-area>third</div>\n</mc-splitter>\n",
          styles: ["mc-splitter{border:1px solid #000;display:flex;height:400px;margin:2px}.mc-splitter-area_fixed-height{min-height:100px}div[mc-splitter-area]{background:#c5c0c0}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/table/table-overview/table-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Table
       */

      var TableOverviewExample = function TableOverviewExample() {
        _classCallCheck(this, TableOverviewExample);
      };

      TableOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'table-overview-example',
          template: "<table mc-table>\n    <thead>\n        <tr>\n            <th>Column header</th>\n            <th>Column header</th>\n            <th>Column header</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n    </tbody>\n</table>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/table/table-with-borders/table-with-borders-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic Table
       */

      var TableWithBordersExample = function TableWithBordersExample() {
        _classCallCheck(this, TableWithBordersExample);
      };

      TableWithBordersExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'table-with-borders-example',
          template: "<table mc-table class=\"mc-table_bordered\">\n    <thead>\n        <tr>\n            <th>Column header Column header Column header Column header</th>\n            <th>Column header</th>\n            <th>Column header</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n    </tbody>\n</table>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tabs/tabs-light-overview/tabs-light-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Navbar
       */

      var TabsLightExample = function TabsLightExample() {
        _classCallCheck(this, TabsLightExample);
      };

      TabsLightExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tabs-light-example',
          template: "<mc-tab-group mc-light-tabs>\n    <mc-tab label=\"Fact 4\">\n        Chuck Norris counted to infinity. Twice.\n    </mc-tab>\n    <mc-tab label=\"Fact 5\">\n        Chuck Norris can speak braille.\n    </mc-tab>\n    <mc-tab [disabled]=\"true\" label=\"Fact 6\">\n        nothing\n    </mc-tab>\n</mc-tab-group>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tabs/tabs-overview/tabs-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Tabs
       */

      var TabsOverviewExample = function TabsOverviewExample() {
        _classCallCheck(this, TabsOverviewExample);
      };

      TabsOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tabs-overview-example',
          template: "<mc-tab-group>\n    <mc-tab>\n        <ng-template mc-tab-label>Fact 1</ng-template>\n        Chuck Norris can hear sign language.\n    </mc-tab>\n    <mc-tab>\n        <ng-template mc-tab-label>Fact 2</ng-template>\n        Chuck Norris makes onions cry.\n    </mc-tab>\n    <mc-tab [disabled]=\"true\">\n        <ng-template mc-tab-label>Fact 3</ng-template>\n        nothing\n    </mc-tab>\n</mc-tab-group>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tabs/tabs-stretch-overview/tabs-stretch-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Navbar
       */

      var TabsStretchExample = function TabsStretchExample() {
        _classCallCheck(this, TabsStretchExample);
      };

      TabsStretchExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tabs-stretch-example',
          template: "<mc-tab-group mc-stretch-tabs>\n    <mc-tab label=\"Fact 7\">\n        Chuck Norris knows Victoria's secret.\n    </mc-tab>\n    <mc-tab label=\"Fact 7\">\n        Chuck Norris can drown a fish.\n    </mc-tab>\n    <mc-tab label=\"Fact 7\">\n        Chuck Norris narrates Morgan Freeman's life.\n    </mc-tab>\n</mc-tab-group>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tags/tags-autocomplete/tags-autocomplete-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic tags autocomplete
       */

      var TagsAutocompleteExample = /*#__PURE__*/function () {
        function TagsAutocompleteExample() {
          _classCallCheck(this, TagsAutocompleteExample);

          this.control = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
          this.allTags = ['tag1', 'tag2', 'tag3', 'tag4', 'tag5', 'tag6', 'tag7', 'tag8', 'tag9', 'tag10'];
          this.filteredTagsByInput = [];
          this.selectedTags = ['tag1'];
        }
        /**
         * @return {?}
         */


        _createClass(TagsAutocompleteExample, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this126 = this;

            this.filteredTags = Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(this.tagList.tagChanges.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
            /**
            * @param {?} selectedTags
            * @return {?}
            */
            function (selectedTags) {
              /** @type {?} */
              var values = selectedTags.map(
              /**
              * @param {?} tag
              * @return {?}
              */
              function (tag) {
                return tag.value;
              });
              return _this126.allTags.filter(
              /**
              * @param {?} tag
              * @return {?}
              */
              function (tag) {
                return !values.includes(tag);
              });
            })), this.control.valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              /** @type {?} */
              var typedText = value && value["new"] ? value.value : value;
              _this126.filteredTagsByInput = typedText ? _this126.filter(typedText) : _this126.allTags.slice();
              return _this126.filteredTagsByInput.filter( // @ts-ignore

              /**
               * @param {?} tag
               * @return {?}
               */
              function (tag) {
                return !_this126.selectedTags.includes(tag);
              });
            })));
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "addOnBlurFunc",
          value: function addOnBlurFunc(event) {
            /** @type {?} */
            var target =
            /** @type {?} */
            event.relatedTarget;

            if (!target || target.tagName !== 'MC-OPTION') {
              /** @type {?} */
              var mcTagEvent = {
                input: this.tagInput.nativeElement,
                value: this.tagInput.nativeElement.value
              };
              this.onCreate(mcTagEvent);
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onCreate",
          value: function onCreate(event) {
            /** @type {?} */
            var input = event.input;
            /** @type {?} */

            var value = event.value;

            if ((value || '').trim()) {
              /** @type {?} */
              var isOptionSelected = this.autocomplete.options.some(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.selected;
              });

              if (!isOptionSelected) {
                this.selectedTags.push(value.trim());
              }
            }

            if (input) {
              input.value = '';
            }

            this.control.setValue(null);
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onSelect",
          value: function onSelect(event) {
            event.option.deselect();

            if (event.option.value["new"]) {
              this.selectedTags.push(event.option.value.value);
            } else {
              this.selectedTags.push(event.option.value);
            }

            this.tagInput.nativeElement.value = '';
            this.control.setValue(null);
          }
          /**
           * @param {?} fruit
           * @return {?}
           */

        }, {
          key: "onRemove",
          value: function onRemove(fruit) {
            /** @type {?} */
            var index = this.selectedTags.indexOf(fruit);

            if (index >= 0) {
              this.selectedTags.splice(index, 1);
            }
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "filter",
          value: function filter(value) {
            /** @type {?} */
            var filterValue = value.toLowerCase();
            return this.allTags.filter(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              return tag.toLowerCase().indexOf(filterValue) === 0;
            });
          }
        }]);

        return TagsAutocompleteExample;
      }();

      TagsAutocompleteExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tags-autocomplete-example',
          template: "<mc-form-field>\n    <mc-tag-list #tagList>\n        <mc-tag *ngFor=\"let tag of selectedTags\" [value]=\"tag\" (removed)=\"onRemove(tag)\">\n            {{ tag }}\n            <i mc-icon=\"mc-close-S_16\" mcTagRemove></i>\n        </mc-tag>\n        <input placeholder=\"New tag...\"\n               #tagInput\n               [formControl]=\"control\"\n               [mcAutocomplete]=\"autocomplete\"\n               [mcTagInputFor]=\"tagList\"\n               (mcTagInputTokenEnd)=\"onCreate($event)\"\n               [mcTagInputAddOnBlur]=\"false\"\n               (blur)=\"addOnBlurFunc($event)\">\n    </mc-tag-list>\n    <mc-autocomplete #autocomplete (optionSelected)=\"onSelect($event)\">\n        <mc-option *ngIf=\"tagInput.value\" [value]=\"{ new: true, value: tagInput.value }\">\n            \u0421\u043E\u0437\u0434\u0430\u0442\u044C: {{ tagInput.value }}\n        </mc-option>\n        <mc-option *ngFor=\"let tag of filteredTags | async\" [value]=\"tag\">{{ tag }}</mc-option>\n    </mc-autocomplete>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];
      TagsAutocompleteExample.propDecorators = {
        tagList: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['tagList', {
            "static": false
          }]
        }],
        tagInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['tagInput', {
            "static": false
          }]
        }],
        autocomplete: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['autocomplete', {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tags/tags-input/tags-input-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic tags input
       */


      var TagsInputExample = /*#__PURE__*/function () {
        function TagsInputExample() {
          _classCallCheck(this, TagsInputExample);

          this.control = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
          this.tags = ['tag', 'tag1', 'tag2', 'tag3', 'tag4'];
          this.separatorKeysCodes = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__["ENTER"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__["COMMA"]];
        }
        /**
         * @param {?} event
         * @return {?}
         */


        _createClass(TagsInputExample, [{
          key: "onCreate",
          value: function onCreate(event) {
            /** @type {?} */
            var input = event.input;
            /** @type {?} */

            var value = event.value;

            if ((value || '').trim()) {
              this.tags.push(value.trim());
            }

            if (input) {
              input.value = '';
            }
          }
          /**
           * @param {?} tag
           * @return {?}
           */

        }, {
          key: "onRemoveTag",
          value: function onRemoveTag(tag) {
            /** @type {?} */
            var index = this.tags.indexOf(tag);

            if (index >= 0) {
              this.tags.splice(index, 1);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onClear",
          value: function onClear() {
            this.tags.length = 0;
          }
        }]);

        return TagsInputExample;
      }();

      TagsInputExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tags-input-example',
          template: "<mc-form-field>\n    <mc-tag-list #tagList>\n        <mc-tag *ngFor=\"let tag of tags\" [value]=\"tag\" (removed)=\"onRemoveTag(tag)\">\n            {{ tag }}\n            <i mc-icon=\"mc-close-S_16\" mcTagRemove></i>\n        </mc-tag>\n\n        <input placeholder=\"New tag...\"\n               [formControl]=\"control\"\n               [mcTagInputFor]=\"tagList\"\n               [mcTagInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n               (mcTagInputTokenEnd)=\"onCreate($event)\">\n\n        <mc-cleaner (click)=\"onClear()\"></mc-cleaner>\n    </mc-tag-list>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tags/tags-list/tags-list-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic tags list
       */


      var TagsListExample = /*#__PURE__*/function () {
        function TagsListExample() {
          _classCallCheck(this, TagsListExample);

          this.simpleTags = ['tag', 'tag1', 'tag2', 'tag3', 'tag4'];
        }
        /**
         * @param {?} tag
         * @return {?}
         */


        _createClass(TagsListExample, [{
          key: "onRemoveTag",
          value: function onRemoveTag(tag) {
            /** @type {?} */
            var index = this.simpleTags.indexOf(tag);

            if (index >= 0) {
              this.simpleTags.splice(index, 1);
            }
          }
        }]);

        return TagsListExample;
      }();

      TagsListExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tags-list-example',
          template: "<mc-tag-list>\n    <mc-tag *ngFor=\"let tag of simpleTags\" [value]=\"tag\" (removed)=\"onRemoveTag(tag)\">\n        {{ tag }}\n        <i mc-icon=\"mc-close-S_16\" mcTagRemove></i>\n    </mc-tag>\n</mc-tag-list>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tags/tags-overview/tags-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic tags
       */


      var TagsOverviewExample = function TagsOverviewExample() {
        _classCallCheck(this, TagsOverviewExample);
      };

      TagsOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tags-overview-example',
          template: "<mc-tag>Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [disabled]=\"true\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag color=\"primary\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" class=\"mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" class=\"mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" [disabled]=\"true\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag color=\"error\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" class=\"mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" class=\"mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" [disabled]=\"true\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br><br><br>\n\nmono\n<br>\n<mc-tag class=\"mc-tag_mono\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-hovered mc-tag_mono\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-focused mc-tag_mono\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [disabled]=\"true\" class=\"mc-tag_mono\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag color=\"primary\" class=\"mc-tag_mono\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" class=\"mc-tag_mono mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" class=\"mc-tag_mono mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" [disabled]=\"true\" class=\"mc-tag_mono\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag color=\"error\" class=\"mc-tag_mono\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" class=\"mc-tag_mono mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" class=\"mc-tag_mono mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" [disabled]=\"true\" class=\"mc-tag_mono\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br><br><br>\n\nCAPS\n<br>\n<mc-tag class=\"mc-tag_caps\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-hovered mc-tag_caps\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-focused mc-tag_caps\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [disabled]=\"true\" class=\"mc-tag_caps\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag color=\"primary\" class=\"mc-tag_caps\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" class=\"mc-hovered mc-tag_caps\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" class=\"mc-focused mc-tag_caps\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"primary\" [disabled]=\"true\" class=\"mc-tag_caps\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag color=\"error\" class=\"mc-tag_caps\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" class=\"mc-hovered mc-tag_caps\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" class=\"mc-focused mc-tag_caps\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag color=\"error\" [disabled]=\"true\" class=\"mc-tag_caps\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n",
          styles: [""]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/textarea/text-area-overview/text-area-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic textarea
       */

      var TextAreaOverviewExample = function TextAreaOverviewExample() {
        _classCallCheck(this, TextAreaOverviewExample);

        this.disabled = true;
        this.required = true;
        this.placeholder = 'placeholder';
      };

      TextAreaOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'text-area-overview-example',
          template: "<mc-form-field>\n    <textarea mcTextarea [placeholder]=\"placeholder\"></textarea>\n</mc-form-field>\n\n<br><br>\n\n<mc-form-field>\n    <textarea mcTextarea [disabled]=\"disabled\" [placeholder]=\"placeholder\"></textarea>\n</mc-form-field>\n\n<br><br>\n\n<mc-form-field>\n    <textarea mcTextarea [placeholder]=\"placeholder\" [required]=\"required\" [(ngModel)]=\"value\"></textarea>\n</mc-form-field>\n\n<br><br>\n\n<mc-form-field mcFormFieldWithoutBorders>\n    <textarea mcTextarea [(ngModel)]=\"value\" placeholder=\"Placeholder\"></textarea>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/timepicker/timepicker-overview/timepicker-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // tslint:disable-next-line

      /** @type {?} */


      var moment$5 = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      /**
       * \@title Timepicker overview
       */

      var TimepickerOverviewExample = function TimepickerOverviewExample() {
        _classCallCheck(this, TimepickerOverviewExample);

        this.isDisabled = false;
        this.isIconVisible = true;
        this.moment = moment$5;
        this.value = this.moment();
        this.timeFormat = 'HH:mm';
      };

      TimepickerOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'timepicker-overview-example',
          template: "<div class=\"example-timepicker-group\">\n    <mc-form-field class=\"example-timepicker-element\">\n        <i *ngIf=\"isIconVisible\" mcPrefix mc-icon=\"mc-clock_16\"></i>\n        <input mcTimepicker\n               [(ngModel)]=\"value\"\n               [disabled]=\"isDisabled\"\n               [format]=\"timeFormat\">\n    </mc-form-field>\n    <mc-checkbox class=\"example-timepicker-element\" [(ngModel)]=\"isIconVisible\">Show icon</mc-checkbox>\n    <mc-checkbox class=\"example-timepicker-element\" [(ngModel)]=\"isDisabled\">Disabled</mc-checkbox>\n\n    <mc-form-field style=\"width: 100%\" class=\"example-timepicker-element\">\n        <mc-select [(value)]=\"timeFormat\">\n            <mc-option value=\"HH:mm\">HH:mm</mc-option>\n            <mc-option value=\"HH:mm:ss\">HH:mm:ss</mc-option>\n        </mc-select>\n    </mc-form-field>\n\n</div>\n",
          styles: [".example-timepicker-group{display:inline-flex;flex-direction:column}.example-timepicker-element{margin-bottom:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/timepicker/timepicker-range/timepicker-range-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // tslint:disable-next-line

      /** @type {?} */


      var moment$6 = moment__WEBPACK_IMPORTED_MODULE_6___default.a || moment__WEBPACK_IMPORTED_MODULE_6__;
      /**
       * \@title Timepicker range
       */

      var TimepickerRangeExample = /*#__PURE__*/function () {
        function TimepickerRangeExample() {
          _classCallCheck(this, TimepickerRangeExample);

          this.moment = moment$6;
          this.format = 'HH:mm:ss';
          this.startTime = this.moment().startOf('day');
          this.endTime = this.moment();
          this.time = this.moment().startOf('hour');
        }
        /**
         * @return {?}
         */


        _createClass(TimepickerRangeExample, [{
          key: "getStartTime",
          value: function getStartTime() {
            return this.startTime ? this.startTime.format(this.format) : '';
          }
          /**
           * @return {?}
           */

        }, {
          key: "getEndTime",
          value: function getEndTime() {
            return this.endTime ? this.endTime.format(this.format) : '';
          }
        }]);

        return TimepickerRangeExample;
      }();

      TimepickerRangeExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'timepicker-range-example',
          template: "<div class=\"example-timepicker-group\">\n    <div class=\"example-timepicker-element\">\n        <label for=\"Time\"\n               class=\"flex-35 mc-form-label\">\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043C\u044F \u043C\u0435\u0436\u0434\u0443 min \u0438 max</label>\n        <mc-form-field >\n            <i mcPrefix mc-icon=\"mc-clock_16\"></i>\n            <input mcTimepicker\n                   id=\"Time\"\n                   [min]=\"getStartTime()\"\n                   [max]=\"getEndTime()\"\n                   [(ngModel)]=\"time\">\n        </mc-form-field>\n    </div>\n\n    <div class=\"example-timepicker-element\">\n        <label for=\"startTime\"\n               class=\"flex-35 mc-form-label\">min</label>\n        <mc-form-field >\n            <input mcTimepicker\n                   id=\"startTime\"\n                   [(ngModel)]=\"startTime\">\n        </mc-form-field>\n    </div>\n\n    <div class=\"example-timepicker-element\">\n        <label for=\"endTime\"\n               class=\"flex-35 mc-form-label\">max</label>\n        <mc-form-field >\n            <input mcTimepicker\n                   id=\"endTime\"\n                   [(ngModel)]=\"endTime\">\n        </mc-form-field>\n    </div>\n</div>\n",
          styles: [".example-timepicker-group{display:inline-flex;flex-direction:column}.example-timepicker-element{align-items:center;display:flex;margin-bottom:10px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/toggle/toggle-overview/toggle-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic toggle
       */


      var ToggleOverviewExample = function ToggleOverviewExample() {
        _classCallCheck(this, ToggleOverviewExample);

        this.value = true;
      };

      ToggleOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'toggle-overview-example',
          template: "<h3>Small Toggles</h3>\n<mc-toggle class=\"mc-toggle_small\" [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle class=\"mc-toggle_small\" [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle class=\"mc-toggle_small\" color=\"error\" [(ngModel)]=\"value\"></mc-toggle>\n\n<br><br>\n\n<mc-toggle class=\"mc-toggle_small\" [(ngModel)]=\"value\">\n    right label\n</mc-toggle>\n\n<br><br>\n\n<mc-toggle class=\"mc-toggle_small\" labelPosition=\"left\" [(ngModel)]=\"value\">\n    left label\n</mc-toggle>\n\n<br><br><br>\n\n<h3>Big Toggles</h3>\n<mc-toggle [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle color=\"error\" [(ngModel)]=\"value\"></mc-toggle>\n\n<br><br>\n\n<mc-toggle [(ngModel)]=\"value\">\n    right label\n</mc-toggle>\n\n<br><br>\n\n<mc-toggle labelPosition=\"left\" [(ngModel)]=\"value\">\n    left label\n</mc-toggle>\n",
          styles: [""]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tooltip/tooltip-arrow-placement/tooltip-arrow-placement-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic tooltip with Arrow Placement
       */


      var TooltipArrowPlacementExample = function TooltipArrowPlacementExample() {
        _classCallCheck(this, TooltipArrowPlacementExample);

        this.arrowPosition = _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["ArrowPlacements"];
      };

      TooltipArrowPlacementExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tooltip-arrow-placement-example',
          template: "<section class=\"container\">\n    <button mc-button\n            mcTooltip=\"Tooltip text\"\n            mcArrowPlacement=\"{{arrowPosition.Center}}\"\n            mcPlacement=\"right\">\n        right\n    </button>\n</section>\n",
          styles: [".container{align-items:center;display:flex;flex-direction:column;height:300px;justify-content:center;width:300px}button{height:58px}"]
        }]
      }];

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tooltip/tooltip-overview/tooltip-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic tooltip
       */


      var TooltipOverviewExample = function TooltipOverviewExample() {
        _classCallCheck(this, TooltipOverviewExample);
      };

      TooltipOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tooltip-overview-example',
          template: "<section class=\"container\">\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"top\">\n        top\n    </button>\n\n    <br><br>\n\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"right\">\n        right\n    </button>\n\n    <br><br>\n\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"left\">\n        left\n    </button>\n\n    <br><br>\n\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"bottom\">\n        bottom\n    </button>\n</section>\n",
          styles: [".container{align-items:center;display:flex;flex-direction:column;height:300px;justify-content:center;width:300px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tooltip/tooltip-scrollable/tooltip-scrollable-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic scrollable tooltip
       */

      var TooltipScrollableExample = /*#__PURE__*/function () {
        function TooltipScrollableExample() {
          _classCallCheck(this, TooltipScrollableExample);
        }

        _createClass(TooltipScrollableExample, [{
          key: "toggleTooltip",

          /**
           * @param {?} flag
           * @return {?}
           */
          value: function toggleTooltip(flag) {
            if (!flag) {
              this.tooltip.show();
            } else {
              this.tooltip.hide();
            }
          }
        }]);

        return TooltipScrollableExample;
      }();

      TooltipScrollableExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tooltip-scrollable-example',
          template: "<section class=\"docs-container\" cdkScrollable>\n    <div class=\"docs-wrapper\">\n        <button\n            mc-button\n            (click)=\"toggleTooltip(tooltip.isTooltipOpen)\"\n            mcTooltip=\"tooltip text\"\n            mcTrigger=\"manual\"\n            #tooltip=\"mcTooltip\"\n            mcPlacement=\"right\">\n            toggle tooltip\n        </button>\n    </div>\n</section>\n",
          styles: [".docs-container{height:300px;overflow:auto;width:300px}.docs-wrapper{height:800px;margin-top:100px}"]
        }]
      }];
      TooltipScrollableExample.propDecorators = {
        tooltip: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [_ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McTooltip"], {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree-select/tree-select-multiple-overview/tree-select-multiple-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode = function FileNode() {
        _classCallCheck(this, FileNode);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode = function FileFlatNode() {
        _classCallCheck(this, FileFlatNode);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i2 = 0, _Object$keys = Object.keys(value); _i2 < _Object$keys.length; _i2++) {
          var k = _Object$keys[_i2];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Basic Select
       */

      var TreeSelectMultipleOverviewExample = /*#__PURE__*/function () {
        function TreeSelectMultipleOverviewExample() {
          _classCallCheck(this, TreeSelectMultipleOverviewExample);

          this.selected = '';

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return "".concat(node.name, " view");
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree(DATA_OBJECT, 0);
        }
        /**
         * @param {?} _
         * @param {?} nodeData
         * @return {?}
         */


        _createClass(TreeSelectMultipleOverviewExample, [{
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
        }]);

        return TreeSelectMultipleOverviewExample;
      }();

      TreeSelectMultipleOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-select-multiple-overview-example',
          template: "<mc-form-field>\n    <mc-tree-select\n        [multiple]=\"true\"\n        [(ngModel)]=\"selected\">\n        <mc-tree-selection\n            [dataSource]=\"dataSource\"\n            [treeControl]=\"treeControl\">\n            <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n\n            <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n                <i mc-icon=\"mc-angle-down-S_16\"\n                   [style.transform]=\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\"\n                   mcTreeNodeToggle>\n                </i>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n        </mc-tree-selection>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n    </mc-tree-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      TreeSelectMultipleOverviewExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree-select/tree-select-overview/tree-select-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode$1 = function FileNode$1() {
        _classCallCheck(this, FileNode$1);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode$1 = function FileFlatNode$1() {
        _classCallCheck(this, FileFlatNode$1);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree$1(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i3 = 0, _Object$keys2 = Object.keys(value); _i3 < _Object$keys2.length; _i3++) {
          var k = _Object$keys2[_i3];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode$1();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree$1(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT$1 = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Basic Select
       */

      var TreeSelectOverviewExample = /*#__PURE__*/function () {
        function TreeSelectOverviewExample() {
          _classCallCheck(this, TreeSelectOverviewExample);

          this.selected = '';

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode$1();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return "".concat(node.name, " view");
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);
        }
        /**
         * @param {?} _
         * @param {?} nodeData
         * @return {?}
         */


        _createClass(TreeSelectOverviewExample, [{
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
        }]);

        return TreeSelectOverviewExample;
      }();

      TreeSelectOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-select-overview-example',
          template: "<mc-form-field>\n    <mc-tree-select\n        [(ngModel)]=\"selected\">\n        <mc-tree-selection\n            [dataSource]=\"dataSource\"\n            [treeControl]=\"treeControl\">\n            <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n\n            <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n                <i mc-icon=\"mc-angle-down-S_16\"\n                   [style.transform]=\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\"\n                   mcTreeNodeToggle>\n                </i>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n        </mc-tree-selection>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n    </mc-tree-select>\n</mc-form-field>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      TreeSelectOverviewExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree/tree-filtering/tree-filtering-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode$2 = function FileNode$2() {
        _classCallCheck(this, FileNode$2);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode$2 = function FileFlatNode$2() {
        _classCallCheck(this, FileFlatNode$2);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree$2(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i4 = 0, _Object$keys3 = Object.keys(value); _i4 < _Object$keys3.length; _i4++) {
          var k = _Object$keys3[_i4];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode$2();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree$2(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT$2 = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Basic tree
       */

      var TreeFilteringExample = /*#__PURE__*/function () {
        function TreeFilteringExample() {
          _classCallCheck(this, TreeFilteringExample);

          this.modelValue = '';
          this.filterValue = '';

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode$2();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            /** @type {?} */
            var nodeType = node.type ? ".".concat(node.type) : '';
            return "".concat(node.name).concat(nodeType);
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);
        }
        /**
         * @param {?} value
         * @return {?}
         */


        _createClass(TreeFilteringExample, [{
          key: "onFilterChange",
          value: function onFilterChange(value) {
            this.treeControl.filterNodes(value);
          }
          /**
           * @param {?} _
           * @param {?} nodeData
           * @return {?}
           */

        }, {
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
        }]);

        return TreeFilteringExample;
      }();

      TreeFilteringExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-filtering-example',
          template: "<mc-form-field>\n    <input type=\"text\" mcInput (ngModelChange)=\"onFilterChange($event)\" [(ngModel)]=\"filterValue\">\n</mc-form-field>\n\n<br><br><br>\n\n<mc-tree-selection\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      TreeFilteringExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree/tree-multiple-checkbox/tree-multiple-checkbox-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode$3 = function FileNode$3() {
        _classCallCheck(this, FileNode$3);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode$3 = function FileFlatNode$3() {
        _classCallCheck(this, FileFlatNode$3);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree$3(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i5 = 0, _Object$keys4 = Object.keys(value); _i5 < _Object$keys4.length; _i5++) {
          var k = _Object$keys4[_i5];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode$3();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree$3(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT$3 = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Basic tree
       */

      var TreeMultipleCheckboxExample = /*#__PURE__*/function () {
        function TreeMultipleCheckboxExample() {
          _classCallCheck(this, TreeMultipleCheckboxExample);

          this.modelValue = [];

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode$3();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            /** @type {?} */
            var nodeType = node.type ? ".".concat(node.type) : '';
            return "".concat(node.name).concat(nodeType);
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);
        }
        /**
         * @param {?} _
         * @param {?} nodeData
         * @return {?}
         */


        _createClass(TreeMultipleCheckboxExample, [{
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
        }]);

        return TreeMultipleCheckboxExample;
      }();

      TreeMultipleCheckboxExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-multiple-checkbox-example',
          template: "<mc-tree-selection\n    multiple=\"checkbox\"\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      TreeMultipleCheckboxExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree/tree-multiple-checklist/tree-multiple-checklist-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode$4 = function FileNode$4() {
        _classCallCheck(this, FileNode$4);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode$4 = function FileFlatNode$4() {
        _classCallCheck(this, FileFlatNode$4);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree$4(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i6 = 0, _Object$keys5 = Object.keys(value); _i6 < _Object$keys5.length; _i6++) {
          var k = _Object$keys5[_i6];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode$4();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree$4(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT$4 = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Checklist tree
       */

      var TreeMultipleChecklistExample = /*#__PURE__*/function () {
        function TreeMultipleChecklistExample() {
          _classCallCheck(this, TreeMultipleChecklistExample);

          this.modelValue = [];
          /**
           * The selection for checklist
           */

          this.checklistSelection = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["SelectionModel"](true
          /* multiple */
          );

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode$4();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            /** @type {?} */
            var nodeType = node.type ? ".".concat(node.type) : '';
            return "".concat(node.name).concat(nodeType);
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);
        }
        /**
         * @param {?} _
         * @param {?} nodeData
         * @return {?}
         */


        _createClass(TreeMultipleChecklistExample, [{
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
          /**
           * Whether all the descendants of the node are selected.
           * @param {?} node
           * @return {?}
           */

        }, {
          key: "descendantsAllSelected",
          value: function descendantsAllSelected(node) {
            var _this127 = this;

            /** @type {?} */
            var descendants = this.treeControl.getDescendants(node);
            return descendants.every(
            /**
            * @param {?} child
            * @return {?}
            */
            function (child) {
              return _this127.checklistSelection.isSelected(child);
            });
          }
          /**
           * Whether part of the descendants are selected
           * @param {?} node
           * @return {?}
           */

        }, {
          key: "descendantsPartiallySelected",
          value: function descendantsPartiallySelected(node) {
            var _this128 = this;

            /** @type {?} */
            var descendants = this.treeControl.getDescendants(node);
            /** @type {?} */

            var result = descendants.some(
            /**
            * @param {?} child
            * @return {?}
            */
            function (child) {
              return _this128.checklistSelection.isSelected(child);
            });
            return result && !this.descendantsAllSelected(node);
          }
          /**
           * Toggle the to-do item selection. Select/deselect all the descendants node
           * @param {?} node
           * @return {?}
           */

        }, {
          key: "fileSelectionToggle",
          value: function fileSelectionToggle(node) {
            var _this$checklistSelect,
                _this$checklistSelect2,
                _this129 = this;

            this.checklistSelection.toggle(node);
            /** @type {?} */

            var descendants = this.treeControl.getDescendants(node);
            this.checklistSelection.isSelected(node) ? (_this$checklistSelect = this.checklistSelection).select.apply(_this$checklistSelect, _toConsumableArray(descendants)) : (_this$checklistSelect2 = this.checklistSelection).deselect.apply(_this$checklistSelect2, _toConsumableArray(descendants)); // Force update for the parent

            descendants.every(
            /**
            * @param {?} child
            * @return {?}
            */
            function (child) {
              return _this129.checklistSelection.isSelected(child);
            });
            this.checkAllParentsSelection(node);
          }
          /* Checks all the parents when a leaf node is selected/unselected */

          /**
           * @param {?} node
           * @return {?}
           */

        }, {
          key: "checkAllParentsSelection",
          value: function checkAllParentsSelection(node) {
            /** @type {?} */
            var parent = this.getParentNode(node);

            while (parent) {
              this.checkRootNodeSelection(parent);
              parent = this.getParentNode(parent);
            }
          }
          /**
           * Check root node checked state and change it accordingly
           * @param {?} node
           * @return {?}
           */

        }, {
          key: "checkRootNodeSelection",
          value: function checkRootNodeSelection(node) {
            var _this130 = this;

            /** @type {?} */
            var nodeSelected = this.checklistSelection.isSelected(node);
            /** @type {?} */

            var descendants = this.treeControl.getDescendants(node);
            /** @type {?} */

            var descAllSelected = descendants.every(
            /**
            * @param {?} child
            * @return {?}
            */
            function (child) {
              return _this130.checklistSelection.isSelected(child);
            });

            if (nodeSelected && !descAllSelected) {
              this.checklistSelection.deselect(node);
            } else if (!nodeSelected && descAllSelected) {
              this.checklistSelection.select(node);
            }
          }
          /* Get the parent node of a node */

          /**
           * @param {?} node
           * @return {?}
           */

        }, {
          key: "getParentNode",
          value: function getParentNode(node) {
            /** @type {?} */
            var currentLevel = this.getLevel(node);

            if (currentLevel < 1) {
              return null;
            }
            /** @type {?} */


            var startIndex = this.treeControl.dataNodes.indexOf(node) - 1;

            for (var i = startIndex; i >= 0; i--) {
              /** @type {?} */
              var currentNode = this.treeControl.dataNodes[i];

              if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
              }
            }

            return null;
          }
        }]);

        return TreeMultipleChecklistExample;
      }();

      TreeMultipleChecklistExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-multiple-checklist-example',
          template: "<mc-tree-selection\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <mc-checkbox class= \"tree-example-checkbox\" [disabled]=\"node.name === 'tests'\"\n                     [checked]=\"checklistSelection.isSelected(node)\"\n                     (change)=\"fileSelectionToggle(node)\"></mc-checkbox>\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n        <mc-checkbox class= \"tree-example-checkbox\"\n                     [checked]=\"descendantsAllSelected(node)\"\n                     [indeterminate]=\"descendantsPartiallySelected(node)\"\n                     (change)=\"fileSelectionToggle(node)\"></mc-checkbox>\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
          styles: [".tree-example-checkbox{margin-right:8px}"]
        }]
      }];
      /** @nocollapse */

      TreeMultipleChecklistExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree/tree-multiple-keyboard/tree-multiple-keyboard-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode$5 = function FileNode$5() {
        _classCallCheck(this, FileNode$5);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode$5 = function FileFlatNode$5() {
        _classCallCheck(this, FileFlatNode$5);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree$5(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i7 = 0, _Object$keys6 = Object.keys(value); _i7 < _Object$keys6.length; _i7++) {
          var k = _Object$keys6[_i7];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode$5();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree$5(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT$5 = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Basic tree
       */

      var TreeMultipleKeyboardExample = /*#__PURE__*/function () {
        function TreeMultipleKeyboardExample() {
          _classCallCheck(this, TreeMultipleKeyboardExample);

          this.modelValue = [];

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode$5();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            /** @type {?} */
            var nodeType = node.type ? ".".concat(node.type) : '';
            return "".concat(node.name).concat(nodeType);
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree$5(DATA_OBJECT$5, 0);
        }
        /**
         * @param {?} _
         * @param {?} nodeData
         * @return {?}
         */


        _createClass(TreeMultipleKeyboardExample, [{
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
        }]);

        return TreeMultipleKeyboardExample;
      }();

      TreeMultipleKeyboardExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-multiple-keyboard-example',
          template: "<mc-tree-selection\n    multiple=\"keyboard\"\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      TreeMultipleKeyboardExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree/tree-overview/tree-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var FileNode$6 = function FileNode$6() {
        _classCallCheck(this, FileNode$6);
      };

      if (false) {}
      /**
       * Flat node with expandable and level information
       */


      var FileFlatNode$6 = function FileFlatNode$6() {
        _classCallCheck(this, FileFlatNode$6);
      };

      if (false) {}
      /**
       * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
       * The return value is the list of `FileNode`.
       * @param {?} value
       * @param {?} level
       * @return {?}
       */


      function buildFileTree$6(value, level) {
        /** @type {?} */
        var data = [];

        for (var _i8 = 0, _Object$keys7 = Object.keys(value); _i8 < _Object$keys7.length; _i8++) {
          var k = _Object$keys7[_i8];

          /** @type {?} */
          var v = value[k];
          /** @type {?} */

          var node = new FileNode$6();
          node.name = "".concat(k);

          if (v === null || v === undefined) {// no action
          } else if (typeof v === 'object') {
            node.children = buildFileTree$6(v, level + 1);
          } else {
            node.type = v;
          }

          data.push(node);
        }

        return data;
      }
      /** @type {?} */


      var DATA_OBJECT$6 = {
        docs: 'app',
        src: {
          cdk: {
            a11ly: {
              'aria-describer': {
                'aria-describer': 'ts',
                'aria-describer.spec': 'ts',
                'aria-reference': 'ts',
                'aria-reference.spec': 'ts'
              },
              'focus-monitor': {
                'focus-monitor': 'ts',
                'focus-monitor.spec': 'ts'
              }
            }
          },
          documentation: {
            source: '',
            tools: ''
          },
          mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            "package": 'json',
            version: 'ts'
          },
          'mosaic-dev': {
            alert: '',
            badge: ''
          },
          'mosaic-examples': '',
          'mosaic-moment-adapter': '',
          README: 'md',
          'tsconfig.build': 'json',
          wallabyTest: 'ts'
        },
        scripts: {
          deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
          },
          'tsconfig.deploy': 'json'
        },
        tests: ''
      };
      /**
       * \@title Basic tree
       */

      var TreeOverviewExample = /*#__PURE__*/function () {
        function TreeOverviewExample() {
          _classCallCheck(this, TreeOverviewExample);

          this.modelValue = '';

          this.transformer =
          /**
          * @param {?} node
          * @param {?} level
          * @param {?} parent
          * @return {?}
          */
          function (node, level, parent) {
            /** @type {?} */
            var flatNode = new FileFlatNode$6();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
          };

          this.getLevel =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.level;
          };

          this.isExpandable =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.expandable;
          };

          this.getChildren =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.children;
          };

          this.getValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            return node.name;
          };

          this.getViewValue =
          /**
          * @param {?} node
          * @return {?}
          */
          function (node) {
            /** @type {?} */
            var nodeType = node.type ? ".".concat(node.type) : '';
            return "".concat(node.name).concat(nodeType);
          };

          this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
          this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
          this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
          this.dataSource.data = buildFileTree$6(DATA_OBJECT$6, 0);
        }
        /**
         * @param {?} _
         * @param {?} nodeData
         * @return {?}
         */


        _createClass(TreeOverviewExample, [{
          key: "hasChild",
          value: function hasChild(_, nodeData) {
            return nodeData.expandable;
          }
        }]);

        return TreeOverviewExample;
      }();

      TreeOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'tree-overview-example',
          template: "<mc-tree-selection\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
          styles: [""]
        }]
      }];
      /** @nocollapse */

      TreeOverviewExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/typography/typography-overview/typography-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title Basic typography
       */


      var TypographyOverviewExample = function TypographyOverviewExample() {
        _classCallCheck(this, TypographyOverviewExample);
      };

      TypographyOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'typography-overview-example',
          template: "<div class=\"typography-group\">\n    <div class=\"mc-caption\">mc-display-3</div>\n    <div class=\"mc-display-3\">Display 3</div>\n\n    <div class=\"mc-caption\">mc-display-2</div>\n    <div class=\"mc-display-2\">Display 2</div>\n\n    <div class=\"mc-caption\">mc-display-1</div>\n    <div class=\"mc-display-1\">Display 1</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-caption\">mc-headline</div>\n    <div class=\"mc-headline\">Headline</div>\n\n    <div class=\"mc-caption\">mc-title</div>\n    <div class=\"mc-title\">Title</div>\n\n    <div class=\"mc-caption\">mc-subheading</div>\n    <div class=\"mc-subheading\">Subheading</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-body\">Body</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-body_strong\">Body strong</div>\n    <div class=\"mc-body_caps\">BODY CAPS</div>\n    <div class=\"mc-body_mono\">Body mono</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-caption\">Caption</div>\n    <div class=\"mc-caption_caps\">CAPTION CAPS</div>\n    <div class=\"mc-caption_mono\">Caption mono</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-small-text\">Small text</div>\n    <div class=\"mc-extra-small-text\">Extra Small text</div>\n</div>\n",
          styles: ["small{color:rgba(0,0,0,.3)}.typography-group{margin-bottom:20px}"]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/validation-composite/validation-composite-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @return {?}
       */

      function groupValidator() {
        return (
          /**
          * @param {?} g
          * @return {?}
          */
          function (g) {
            var _a, _b;
            /** @type {?} */


            var start = (_a = g.get('start')) === null || _a === void 0 ? void 0 : _a.value;
            /** @type {?} */

            var end = (_b = g.get('end')) === null || _b === void 0 ? void 0 : _b.value;

            if (IP_PATTERN.test(start) && IP_PATTERN.test(end)) {
              /** @type {?} */
              var parsedStartIp = start.split('.').map(
              /**
              * @param {?} octet
              * @return {?}
              */
              function (octet) {
                return parseInt(octet, 10);
              });
              /** @type {?} */

              var parsedEndIp = end.split('.').map(
              /**
              * @param {?} octet
              * @return {?}
              */
              function (octet) {
                return parseInt(octet, 10);
              });

              for (var i = 0; i < parsedStartIp.length; i++) {
                if (parsedStartIp[i] > parsedEndIp[i]) {
                  return {
                    range: true
                  };
                }
              }
            }

            return null;
          }
        );
      }
      /**
       * @param {?} regex
       * @return {?}
       */


      function fieldValidator(regex) {
        return (
          /**
          * @param {?} control
          * @return {?}
          */
          function (control) {
            if (!control.value) {
              return null;
            }

            return regex.test(control.value) ? null : {
              pattern: true
            };
          }
        );
      }
      /** @type {?} */


      var IP_PATTERN = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
      /**
       * \@title validation-composite
       */

      var ValidationCompositeExample = /*#__PURE__*/function () {
        function ValidationCompositeExample() {
          _classCallCheck(this, ValidationCompositeExample);

          this.compositeFormGroup = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            start: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [fieldValidator(IP_PATTERN)]),
            end: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [fieldValidator(IP_PATTERN)])
          }, {
            updateOn: 'blur',
            validators: [groupValidator()]
          });
        }
        /**
         * @param {?} event
         * @param {?} tooltip
         * @param {?} controlName
         * @return {?}
         */


        _createClass(ValidationCompositeExample, [{
          key: "onInput",
          value: function onInput(event, tooltip, controlName) {
            /** @type {?} */
            var regex = /^[\d\.]+$/g;

            if (!regex.test(event.target.value)) {
              /** @type {?} */
              var newValue = event.target.value.replace(/[^\d\.]+/g, '');
              this.compositeFormGroup.controls[controlName].setValue(newValue);

              if (!tooltip.isTooltipOpen) {
                tooltip.show(); // tslint:disable-next-line:no-magic-numbers

                setTimeout(
                /**
                * @return {?}
                */
                function () {
                  return tooltip.hide();
                }, 3000);
              }
            }
          }
        }]);

        return ValidationCompositeExample;
      }();

      ValidationCompositeExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'validation-composite-example',
          template: "<div class=\"docs-composite-form\">\n    <div class=\"mc-subheading\">\u0414\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u044B IP-\u0430\u0434\u0440\u0435\u0441\u043E\u0432</div>\n\n    <form class=\"docs-form\"\n          [formGroup]=\"compositeFormGroup\"\n          [class.validation-error]=\"compositeFormGroup.errors?.range\"\n          novalidate>\n\n        <div class=\"layout-row\">\n            <div class=\"docs-column\">\n                <div class=\"mc-caption docs-label\">\u041D\u0430\u0447\u0430\u043B\u043E \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430</div>\n                <mc-form-field\n                    mcTooltip\n                    mcTooltipClass=\"mc-tooltip_warning\"\n                    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B \u0438 \u0442\u043E\u0447\u043A\u0438'\"\n                    [mcMouseEnterDelay]=\"10\"\n                    #startTooltip=\"mcTooltip\"\n                    mcTrigger=\"manual\"\n                    mcPlacement=\"bottom\">\n                    <input mcInput formControlName=\"start\" (input)=\"onInput($event, startTooltip, 'start')\">\n\n                    <mc-hint class=\"mc-caption docs-hint\"\n                             *ngIf=\"compositeFormGroup.controls.start.invalid\">\n                        IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0430\u043C RFC\n                    </mc-hint>\n\n                    <mc-cleaner></mc-cleaner>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-column\">\n                <div class=\"mc-caption docs-label\">\u041E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u0435</div>\n                <mc-form-field\n                    mcTooltip\n                    mcTooltipClass=\"mc-tooltip_warning\"\n                    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B \u0438 \u0442\u043E\u0447\u043A\u0438'\"\n                    [mcMouseEnterDelay]=\"10\"\n                    #endTooltip=\"mcTooltip\"\n                    mcTrigger=\"manual\"\n                    mcPlacement=\"bottom\">\n                    <input mcInput formControlName=\"end\" (input)=\"onInput($event, endTooltip, 'end')\">\n\n                    <mc-hint class=\"mc-caption docs-hint\"\n                             *ngIf=\"compositeFormGroup.controls.end.invalid\">\n                        IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0430\u043C RFC\n                    </mc-hint>\n\n                    <mc-cleaner></mc-cleaner>\n                </mc-form-field>\n            </div>\n        </div>\n\n        <mc-hint class=\"mc-caption docs-hint\"\n                 *ngIf=\"compositeFormGroup.errors?.range\">\n            IP-\u0430\u0434\u0440\u0435\u0441 \u043E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u044F \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0430\u0447\u0430\u043B\u0430\n        </mc-hint>\n    </form>\n</div>\n",
          styles: [".docs-label{color:#999;margin-bottom:4px}.docs-hint{color:#e04d36}.docs-composite-form{margin:8px 8px 40px;width:500px}.docs-column{margin-right:16px;width:200px}.layout-row{margin-bottom:4px}.validation-error{background-color:#fcefec;border-radius:4px}.mc-subheading{margin-bottom:16px}.docs-form{padding:8px}"]
        }]
      }];
      /** @nocollapse */

      ValidationCompositeExample.ctorParameters = function () {
        return [];
      };

      ValidationCompositeExample.propDecorators = {
        startTooltip: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['startTooltip', {
            "static": false
          }]
        }],
        endTooltip: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['endTooltip', {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/validation-global/validation-global-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title validation-global
       */


      var ValidationGlobalExample = /*#__PURE__*/function () {
        function ValidationGlobalExample() {
          _classCallCheck(this, ValidationGlobalExample);

          this.showServerErrors = false;
          this.inProgress = false;
          this.globalErrorForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
            thirdName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
          });
        }
        /**
         * @return {?}
         */


        _createClass(ValidationGlobalExample, [{
          key: "submitGlobalErrorForm",
          value: function submitGlobalErrorForm() {
            var _this131 = this;

            this.showServerErrors = false;
            this.inProgress = true;
            setTimeout(
            /**
            * @return {?}
            */
            function () {
              _this131.showServerErrors = true;
              _this131.inProgress = false; // tslint:disable-next-line:no-magic-numbers
            }, 1000);
          }
        }]);

        return ValidationGlobalExample;
      }();

      ValidationGlobalExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'validation-global-example',
          template: "<div class=\"layout-margin docs-width\">\n    <div class=\"mc-alert mc-alert_error\" *ngIf=\"showServerErrors\">\n        <i mc-icon=\"mc-info_16\" color=\"error\" class=\"mc-alert__icon\"></i>\n        <div class=\"mc-body\">\n            <div class=\"mc-subheading docs-subheading\"><b>\u041D\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043E\u0442\u0432\u0435\u0442 \u043E\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430</b></div>\n            \u041F\u0440\u0438 \u043F\u043E\u043F\u044B\u0442\u043A\u0435 \u043E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0434\u0430\u043D\u043D\u044B\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043D\u0435 \u043E\u0442\u0432\u0435\u0442\u0438\u043B, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430\n        </div>\n    </div>\n\n    <form [formGroup]=\"globalErrorForm\" (ngSubmit)=\"submitGlobalErrorForm()\" novalidate>\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"firstName\">\n            </mc-form-field>\n        </div>\n\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"lastName\">\n            </mc-form-field>\n        </div>\n\n        <button\n            mc-button\n            color=\"primary\"\n            type=\"submit\"\n            [class.mc-progress]=\"inProgress\"\n            [disabled]=\"inProgress\">\n            \u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C\n        </button>\n    </form>\n</div>\n",
          styles: [".docs-row{margin-bottom:16px}.docs-label{color:#999;margin-bottom:4px}.docs-width{width:372px}.mc-alert{margin-bottom:16px}.docs-subheading{margin-bottom:4px}"]
        }]
      }];
      /** @nocollapse */

      ValidationGlobalExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/validation-on-blur/validation-on-blur-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var IP_PATTERN$1 = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
      /**
       * \@title validation-on-blur
       */

      var ValidationOnBlurExample = function ValidationOnBlurExample() {
        _classCallCheck(this, ValidationOnBlurExample);

        this.ipAddress = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].pattern(IP_PATTERN$1)]); // tslint:disable-next-line:no-magic-numbers

        this.frequency = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].max(24)]);
      };

      ValidationOnBlurExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'validation-on-blur-example',
          template: "<div class=\"docs-margin docs-width\">\n    <div class=\"docs-row\">\n        <div class=\"mc-caption docs-label\">IP-\u0430\u0434\u0440\u0435\u0441</div>\n        <mc-form-field>\n            <input mcInput [formControl]=\"ipAddress\">\n            <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"ipAddress.invalid\">IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0430\u043C RFC</mc-hint>\n\n            <mc-cleaner></mc-cleaner>\n        </mc-form-field>\n    </div>\n\n    <div class=\"docs-row\">\n        <div class=\"mc-caption docs-label\">\u0427\u0430\u0441\u0442\u043E\u0442\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0439 (\u0447\u0430\u0441\u044B)</div>\n        <mc-form-field>\n            <input type=\"number\" mcInput [formControl]=\"frequency\">\n            <mc-hint class=\"mc-caption\">\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043E\u0442 1 \u0434\u043E 24</mc-hint>\n            <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"frequency.errors?.min\">\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: 1 \u0447\u0430\u0441</mc-hint>\n            <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"frequency.errors?.max\">\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: 24 \u0447\u0430\u0441\u0430</mc-hint>\n        </mc-form-field>\n    </div>\n</div>\n",
          styles: [".docs-margin{margin:8px}.docs-row{margin-bottom:16px}.docs-label{color:#999;margin-bottom:4px}.docs-width{width:400px}.docs-hint{color:#e04d36}"]
        }]
      }];
      /** @nocollapse */

      ValidationOnBlurExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/validation-on-type/validation-on-type-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title validation-on-type
       */


      var ValidationOnTypeExample = /*#__PURE__*/function () {
        function ValidationOnTypeExample() {
          _classCallCheck(this, ValidationOnTypeExample);

          this.checkOnFlyForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            folderName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
          });
        }
        /**
         * @param {?} event
         * @return {?}
         */


        _createClass(ValidationOnTypeExample, [{
          key: "onInput",
          value: function onInput(event) {
            var _this132 = this;

            /** @type {?} */
            var regex = /^[\d\w]+$/g;

            if (!regex.test(event.target.value)) {
              /** @type {?} */
              var newValue = event.target.value.replace(/[^\d\w]+/g, '');
              this.checkOnFlyForm.controls.folderName.setValue(newValue);

              if (!this.tooltip.isTooltipOpen) {
                this.tooltip.show(); // tslint:disable-next-line:no-magic-numbers

                setTimeout(
                /**
                * @return {?}
                */
                function () {
                  return _this132.tooltip.hide();
                }, 3000);
              }
            }
          }
        }]);

        return ValidationOnTypeExample;
      }();

      ValidationOnTypeExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'validation-on-type-example',
          template: "<div class=\"layout-margin docs-width\">\n    <form [formGroup]=\"checkOnFlyForm\" novalidate>\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u043F\u0430\u043F\u043A\u0438</div>\n            <mc-form-field\n                mcTooltip\n                mcTooltipClass=\"mc-tooltip_warning\"\n                [mcTitle]=\"'\u0411\u0443\u043A\u0432\u044B \u0438 \u0446\u0438\u0444\u0440\u044B'\"\n                [mcMouseEnterDelay]=\"10\"\n                #tooltip=\"mcTooltip\"\n                mcTrigger=\"manual\"\n                mcPlacement=\"bottom\">\n                <input mcInput formControlName=\"folderName\" (input)=\"onInput($event)\">\n\n                <mc-cleaner></mc-cleaner>\n            </mc-form-field>\n        </div>\n    </form>\n</div>\n",
          styles: [".docs-row{margin-bottom:16px}.docs-label{color:#999;margin-bottom:4px}.docs-width{width:400px}"]
        }]
      }];
      /** @nocollapse */

      ValidationOnTypeExample.ctorParameters = function () {
        return [];
      };

      ValidationOnTypeExample.propDecorators = {
        tooltip: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['tooltip', {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/validation-overview/validation-overview-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@title validation-overview
       */


      var ValidationOverviewExample = function ValidationOverviewExample() {
        _classCallCheck(this, ValidationOverviewExample);

        this.feedbackFormWithHints = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
          firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          thirdName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
          email: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email]),
          reason: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          rating: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          comment: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
        });
        this.feedbackForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
          firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          thirdName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
          email: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email]),
          reason: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          rating: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
          comment: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
        });
      };

      ValidationOverviewExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'validation-overview-example',
          template: "<div class=\"docs-margin\">\n    <div class=\"docs-width\">\n        <div class=\"mc-headline\">\u0412\u0430\u0440\u0438\u0430\u0446\u0438\u044F \u0441 \u0442\u0435\u043A\u0441\u0442\u0430\u043C\u0438 \u043E\u0448\u0438\u0431\u043E\u043A</div>\n\n        <div class=\"mc-subheading\">\u0424\u043E\u0440\u043C\u0430 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u0439 \u0441\u0432\u044F\u0437\u0438</div>\n\n        <form [formGroup]=\"feedbackFormWithHints\" novalidate>\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"firstName\">\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.firstName.invalid\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043C\u044F</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"lastName\">\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.lastName.invalid\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448\u0443 \u0444\u0430\u043C\u0438\u043B\u0438\u044E</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"thirdName\" placeholder=\"\u041D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0410\u0434\u0440\u0435\u0441 \u044D\u043B. \u043F\u043E\u0447\u0442\u044B</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"email\">\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.email.invalid\">\u041E\u0441\u0442\u0430\u0432\u044C\u0442\u0435 \u0441\u0432\u043E\u0439 \u0430\u0434\u0440\u0435\u0441 \u044D\u043B. \u043F\u043E\u0447\u0442\u044B</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041F\u0440\u0438\u0447\u0438\u043D\u0430 \u043E\u0431\u0440\u0430\u0449\u0435\u043D\u0438\u044F</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"reason\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.reason.invalid\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u043F\u0440\u0438\u0447\u0438\u043D\u0443 \u043E\u0431\u0440\u0430\u0449\u0435\u043D\u0438\u044F</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0412\u0430\u0448\u0430 \u043E\u0446\u0435\u043D\u043A\u0430</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"rating\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.rating.invalid\">\u0414\u0430\u0439\u0442\u0435 \u043E\u0446\u0435\u043D\u043A\u0443 \u0440\u0430\u0431\u043E\u0442\u044B \u043D\u0430\u0448\u0438\u0445 \u0441\u043F\u0435\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u043E\u0432</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439</div>\n                <mc-form-field>\n                    <textarea mcTextarea formControlName=\"comment\"></textarea>\n                </mc-form-field>\n            </div>\n\n            <button mc-button color=\"primary\" type=\"submit\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n        </form>\n    </div>\n</div>\n\n<div class=\"docs-margin\">\n    <div class=\"docs-width\">\n        <div class=\"mc-headline\">\u0412\u0430\u0440\u0438\u0430\u0446\u0438\u044F \u0431\u0435\u0437 \u0442\u0435\u043A\u0441\u0442\u0430 \u043E\u0448\u0438\u0431\u043E\u043A</div>\n\n        <div class=\"mc-subheading\">\u0424\u043E\u0440\u043C\u0430 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u0439 \u0441\u0432\u044F\u0437\u0438</div>\n\n        <form [formGroup]=\"feedbackForm\" novalidate>\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"firstName\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"lastName\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"thirdName\" placeholder=\"\u041D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0410\u0434\u0440\u0435\u0441 \u044D\u043B. \u043F\u043E\u0447\u0442\u044B</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"email\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041F\u0440\u0438\u0447\u0438\u043D\u0430 \u043E\u0431\u0440\u0430\u0449\u0435\u043D\u0438\u044F</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"reason\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0412\u0430\u0448\u0430 \u043E\u0446\u0435\u043D\u043A\u0430</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"rating\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439</div>\n                <mc-form-field>\n                    <textarea mcTextarea formControlName=\"comment\"></textarea>\n                </mc-form-field>\n            </div>\n\n            <button mc-button color=\"primary\" type=\"submit\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n        </form>\n    </div>\n</div>\n",
          styles: [".docs-row{margin-bottom:16px}.docs-label{color:#999;margin-bottom:4px}.docs-width{width:332px}.docs-hint{color:#e04d36}.layout-row{margin-bottom:4px}.docs-margin{margin:8px 8px 32px}.mc-headline{margin-bottom:68px}.mc-subheading{margin-bottom:16px}"]
        }]
      }];
      /** @nocollapse */

      ValidationOverviewExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/validation-small/validation-small-example.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @return {?}
       */


      function emptyFormValidator() {
        return (
          /**
          * @param {?} g
          * @return {?}
          */
          function (g) {
            var _a, _b;

            return ((_a = g.get('firstName')) === null || _a === void 0 ? void 0 : _a.value) && ((_b = g.get('lastName')) === null || _b === void 0 ? void 0 : _b.value) ? null : {
              empty: true
            };
          }
        );
      }
      /**
       * \@title validation-small
       */


      var ValidationSmallExample = function ValidationSmallExample() {
        _classCallCheck(this, ValidationSmallExample);

        this.smallForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
          firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required),
          lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required)
        }, emptyFormValidator());
      };

      ValidationSmallExample.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'validation-small-example',
          template: "<div class=\"layout-margin docs-width\">\n    <form [formGroup]=\"smallForm\" novalidate>\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"firstName\">\n            </mc-form-field>\n        </div>\n\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"lastName\">\n            </mc-form-field>\n        </div>\n\n        <button mc-button color=\"primary\" type=\"submit\" [disabled]=\"smallForm.errors?.empty\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n    </form>\n</div>\n",
          styles: [".docs-row{margin-bottom:16px}.docs-label{color:#999;margin-bottom:4px}.docs-width{width:400px}"]
        }]
      }];
      /** @nocollapse */

      ValidationSmallExample.ctorParameters = function () {
        return [];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/alerts/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var EXAMPLES = [AlertsOverviewExample];

      var AlertsExamplesModule = function AlertsExamplesModule() {
        _classCallCheck(this, AlertsExamplesModule);
      };

      AlertsExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"], _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__["McLinkModule"]],
          declarations: EXAMPLES,
          exports: EXAMPLES
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/autocomplete/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$1 = [AutocompleteOverviewExample];

      var AutocompleteExamplesModule = function AutocompleteExamplesModule() {
        _classCallCheck(this, AutocompleteExamplesModule);
      };

      AutocompleteExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_autocomplete__WEBPACK_IMPORTED_MODULE_13__["McAutocompleteModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"]],
          declarations: EXAMPLES$1,
          exports: EXAMPLES$1
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/badges/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$2 = [BadgesOverviewExample];

      var BadgesExamplesModule = function BadgesExamplesModule() {
        _classCallCheck(this, BadgesExamplesModule);
      };

      BadgesExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          declarations: EXAMPLES$2,
          exports: EXAMPLES$2
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button-toggle/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$3 = [ButtonToggleOverviewExample, ButtonToggleMultipleOverviewExample];

      var ButtonToggleExamplesModule = function ButtonToggleExamplesModule() {
        _classCallCheck(this, ButtonToggleExamplesModule);
      };

      ButtonToggleExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_27__["McButtonToggleModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$3,
          exports: EXAMPLES$3
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/button/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$4 = [ButtonIconExample, ButtonColorsExample, ButtonOverviewExample, ButtonProgressExample];

      var ButtonExamplesModule = function ButtonExamplesModule() {
        _classCallCheck(this, ButtonExamplesModule);
      };

      ButtonExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$4,
          exports: EXAMPLES$4
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/card/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$5 = [CardOverviewExample];

      var CardExamplesModule = function CardExamplesModule() {
        _classCallCheck(this, CardExamplesModule);
      };

      CardExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_card__WEBPACK_IMPORTED_MODULE_29__["McCardModule"]],
          declarations: EXAMPLES$5,
          exports: EXAMPLES$5
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/checkbox/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$6 = [CheckboxIndeterminateExample, CheckboxOverviewExample];

      var CheckboxExamplesModule = function CheckboxExamplesModule() {
        _classCallCheck(this, CheckboxExamplesModule);
      };

      CheckboxExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]],
          declarations: EXAMPLES$6,
          exports: EXAMPLES$6
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/date-formatter/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$7 = [AbsoluteDateFormatterExample, RelativeDateFormatterExample, RangeDateFormatterExample];

      var DateFormatterExamplesModule = function DateFormatterExamplesModule() {
        _classCallCheck(this, DateFormatterExamplesModule);
      };

      DateFormatterExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["McMomentDateModule"]],
          declarations: EXAMPLES$7,
          exports: EXAMPLES$7
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/datepicker/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$8 = [DatepickerDisabledExample, DatepickerLanguageExample, DatepickerOverviewExample, DatepickerToggleExample, DatepickerYearExample, DatepickerCustomExample];

      var DatepickerExamplesModule = function DatepickerExamplesModule() {
        _classCallCheck(this, DatepickerExamplesModule);
      };

      DatepickerExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["McMomentDateModule"], _ptsecurity_mosaic_datepicker__WEBPACK_IMPORTED_MODULE_31__["McDatepickerModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"]],
          declarations: EXAMPLES$8,
          exports: EXAMPLES$8
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/dropdown/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$9 = [DropdownNestedExample, DropdownOverviewExample];

      var DropdownExamplesModule = function DropdownExamplesModule() {
        _classCallCheck(this, DropdownExamplesModule);
      };

      DropdownExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"], _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_33__["McDropdownModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__["McLinkModule"]],
          declarations: EXAMPLES$9,
          exports: EXAMPLES$9
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/input/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$a = [InputOverviewExample, InputNumberOverviewExample];

      var InputExamplesModule = function InputExamplesModule() {
        _classCallCheck(this, InputExamplesModule);
      };

      InputExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"]],
          declarations: EXAMPLES$a,
          exports: EXAMPLES$a
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/layout-flex/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$b = [LayoutFlexOverviewExample, LayoutFlexAlignmentExample, LayoutFlexBehaviourModifiersExample, LayoutFlexOffsetsExample, LayoutFlexOrderExample];

      var FlexLayoutExamplesModule = function FlexLayoutExamplesModule() {
        _classCallCheck(this, FlexLayoutExamplesModule);
      };

      FlexLayoutExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"], _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$b,
          exports: EXAMPLES$b
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/link/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$c = [LinkOverviewExample, LinkPseudoExample];

      var LinkExamplesModule = function LinkExamplesModule() {
        _classCallCheck(this, LinkExamplesModule);
      };

      LinkExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__["McLinkModule"]],
          declarations: EXAMPLES$c,
          exports: EXAMPLES$c
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/list/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$d = [ListOverviewExample, ListMultipleCheckboxExample, ListMultipleKeyboardExample, ListGroupsExample];

      var ListExamplesModule = function ListExamplesModule() {
        _classCallCheck(this, ListExamplesModule);
      };

      ListExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_list__WEBPACK_IMPORTED_MODULE_35__["McListModule"]],
          declarations: EXAMPLES$d,
          exports: EXAMPLES$d
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/modal/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$e = [ModalOverviewExample, ModalComponentExample, McModalCustomComponent, ModalTemplateExample];

      var ModalExamplesModule = function ModalExamplesModule() {
        _classCallCheck(this, ModalExamplesModule);
      };

      ModalExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_7__["McModalModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$e,
          exports: EXAMPLES$e,
          entryComponents: [McModalCustomComponent]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/navbar/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$f = [NavbarOverviewExample];

      var NavbarExamplesModule = function NavbarExamplesModule() {
        _classCallCheck(this, NavbarExamplesModule);
      };

      NavbarExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"], _ptsecurity_mosaic_navbar__WEBPACK_IMPORTED_MODULE_36__["McNavbarModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$f,
          exports: EXAMPLES$f
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/number-formatter/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var NumberFormatterExamplesModule = function NumberFormatterExamplesModule() {
        _classCallCheck(this, NumberFormatterExamplesModule);
      };

      NumberFormatterExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["McFormattersModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]],
          declarations: [NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent],
          exports: [NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/popover/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$g = [PopoverOverviewExample, PopoverInstanceExample];

      var PopoverExamplesModule = function PopoverExamplesModule() {
        _classCallCheck(this, PopoverExamplesModule);
      };

      PopoverExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"], _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_37__["A11yModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"], _ptsecurity_mosaic_popover__WEBPACK_IMPORTED_MODULE_9__["McPopoverModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_splitter__WEBPACK_IMPORTED_MODULE_38__["McSplitterModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"]],
          declarations: EXAMPLES$g,
          exports: EXAMPLES$g
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/progress-bar/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$h = [ProgressBarIndeterminateExample, ProgressBarOverviewExample];

      var ProgressBarExamplesModule = function ProgressBarExamplesModule() {
        _classCallCheck(this, ProgressBarExamplesModule);
      };

      ProgressBarExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_progress_bar__WEBPACK_IMPORTED_MODULE_39__["McProgressBarModule"]],
          declarations: EXAMPLES$h,
          exports: EXAMPLES$h
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/progress-spinner/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$i = [ProgressSpinnerIndeterminateExample, ProgressSpinnerOverviewExample];

      var ProgressSpinnerExamplesModule = function ProgressSpinnerExamplesModule() {
        _classCallCheck(this, ProgressSpinnerExamplesModule);
      };

      ProgressSpinnerExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_progress_spinner__WEBPACK_IMPORTED_MODULE_40__["McProgressSpinnerModule"]],
          declarations: EXAMPLES$i,
          exports: EXAMPLES$i
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/radio/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$j = [RadioOverviewExample];

      var RadioExamplesModule = function RadioExamplesModule() {
        _classCallCheck(this, RadioExamplesModule);
      };

      RadioExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"], _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]],
          declarations: EXAMPLES$j,
          exports: EXAMPLES$j
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/select/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$k = [SelectOverviewExample, SelectMultipleOverviewExample, SelectSearchOverviewExample, SelectGroupsExample, SelectVirtualScrollExample];

      var SelectExamplesModule = function SelectExamplesModule() {
        _classCallCheck(this, SelectExamplesModule);
      };

      SelectExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__["ScrollingModule"]],
          declarations: EXAMPLES$k,
          exports: EXAMPLES$k
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/sidepanel/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$l = [SidepanelOverviewExample, SidepanelComponentExample, SidepanelExampleCustomComponent];

      var SidepanelExamplesModule = function SidepanelExamplesModule() {
        _classCallCheck(this, SidepanelExamplesModule);
      };

      SidepanelExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"], _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelModule"]],
          declarations: EXAMPLES$l,
          exports: EXAMPLES$l
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/splitter/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$m = [SplitterOverviewExample, SplitterFixedExample, SplitterVerticalExample, SplitterNestedExample];

      var SplitterExamplesModule = function SplitterExamplesModule() {
        _classCallCheck(this, SplitterExamplesModule);
      };

      SplitterExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_splitter__WEBPACK_IMPORTED_MODULE_38__["McSplitterModule"]],
          declarations: EXAMPLES$m,
          exports: EXAMPLES$m
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/table/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$n = [TableOverviewExample, TableWithBordersExample];

      var TableExamplesModule = function TableExamplesModule() {
        _classCallCheck(this, TableExamplesModule);
      };

      TableExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_table__WEBPACK_IMPORTED_MODULE_41__["McTableModule"]],
          declarations: EXAMPLES$n,
          exports: EXAMPLES$n
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tabs/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$o = [TabsOverviewExample, TabsLightExample, TabsStretchExample];

      var TabsExamplesModule = function TabsExamplesModule() {
        _classCallCheck(this, TabsExamplesModule);
      };

      TabsExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"], _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_42__["McTabsModule"]],
          declarations: EXAMPLES$o,
          exports: EXAMPLES$o
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tags/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$p = [TagsOverviewExample, TagsInputExample, TagsListExample, TagsAutocompleteExample];

      var TagsExamplesModule = function TagsExamplesModule() {
        _classCallCheck(this, TagsExamplesModule);
      };

      TagsExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"], _ptsecurity_mosaic_autocomplete__WEBPACK_IMPORTED_MODULE_13__["McAutocompleteModule"], _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_14__["McTagsModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$p,
          exports: EXAMPLES$p
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/textarea/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$q = [TextAreaOverviewExample];

      var TextAreaExamplesModule = function TextAreaExamplesModule() {
        _classCallCheck(this, TextAreaExamplesModule);
      };

      TextAreaExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_textarea__WEBPACK_IMPORTED_MODULE_43__["McTextareaModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"]],
          declarations: EXAMPLES$q,
          exports: EXAMPLES$q
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/timepicker/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$r = [TimepickerOverviewExample, TimepickerRangeExample];

      var TimepickerExamplesModule = function TimepickerExamplesModule() {
        _classCallCheck(this, TimepickerExamplesModule);
      };

      TimepickerExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["McMomentDateModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"], _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"], _ptsecurity_mosaic_timepicker__WEBPACK_IMPORTED_MODULE_44__["McTimepickerModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$r,
          exports: EXAMPLES$r
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/toggle/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$s = [ToggleOverviewExample];

      var ToggleExamplesModule = function ToggleExamplesModule() {
        _classCallCheck(this, ToggleExamplesModule);
      };

      ToggleExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_toggle__WEBPACK_IMPORTED_MODULE_45__["McToggleModule"]],
          declarations: EXAMPLES$s,
          exports: EXAMPLES$s
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tooltip/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$t = [TooltipOverviewExample, TooltipArrowPlacementExample, TooltipScrollableExample];

      var TooltipExamplesModule = function TooltipExamplesModule() {
        _classCallCheck(this, TooltipExamplesModule);
      };

      TooltipExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_37__["A11yModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McToolTipModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__["CdkScrollableModule"]],
          declarations: EXAMPLES$t,
          exports: EXAMPLES$t
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree-select/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$u = [TreeSelectOverviewExample, TreeSelectMultipleOverviewExample];

      var TreeSelectExamplesModule = function TreeSelectExamplesModule() {
        _classCallCheck(this, TreeSelectExamplesModule);
      };

      TreeSelectExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeModule"], _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["CdkTreeModule"], _ptsecurity_mosaic_tree_select__WEBPACK_IMPORTED_MODULE_46__["McTreeSelectModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]],
          declarations: EXAMPLES$u,
          exports: EXAMPLES$u
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/tree/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$v = [TreeOverviewExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeFilteringExample];

      var TreeExamplesModule = function TreeExamplesModule() {
        _classCallCheck(this, TreeExamplesModule);
      };

      TreeExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["McHighlightModule"], _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"]],
          declarations: EXAMPLES$v,
          exports: EXAMPLES$v
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/typography/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var EXAMPLES$w = [TypographyOverviewExample];

      var TypographyExamplesModule = function TypographyExamplesModule() {
        _classCallCheck(this, TypographyExamplesModule);
      };

      TypographyExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"]],
          declarations: EXAMPLES$w,
          exports: EXAMPLES$w
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: mosaic/validation/module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var ValidationExamplesModule = function ValidationExamplesModule() {
        _classCallCheck(this, ValidationExamplesModule);
      };

      ValidationExamplesModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"], _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"], _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McToolTipModule"], _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"], _ptsecurity_mosaic_textarea__WEBPACK_IMPORTED_MODULE_43__["McTextareaModule"]],
          declarations: [ValidationOverviewExample, ValidationCompositeExample, ValidationGlobalExample, ValidationOnBlurExample, ValidationOnTypeExample, ValidationSmallExample],
          exports: [ValidationOverviewExample, ValidationCompositeExample, ValidationGlobalExample, ValidationOnBlurExample, ValidationOnTypeExample, ValidationSmallExample]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: example-module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */

      function LiveExample() {}

      if (false) {}
      /** @type {?} */


      var EXAMPLE_COMPONENTS = {
        "alerts-overview": {
          "title": "Alerts",
          "component": AlertsOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "autocomplete-overview": {
          "title": "Basic Input",
          "component": AutocompleteOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "badges-overview": {
          "title": "Badges",
          "component": BadgesOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "button-toggle-multiple-overview": {
          "title": "Basic button-toggle",
          "component": ButtonToggleMultipleOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "button-toggle-overview": {
          "title": "button-toggle",
          "component": ButtonToggleOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "button-colors": {
          "title": "Button's colors",
          "component": ButtonColorsExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "button-icon": {
          "title": "Icon button",
          "component": ButtonIconExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "button-overview": {
          "title": "Basic button",
          "component": ButtonOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "button-progress": {
          "title": "Progress button",
          "component": ButtonProgressExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "card-overview": {
          "title": "Basic Card",
          "component": CardOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "checkbox-indeterminate": {
          "title": "Indeterminate checkbox",
          "component": CheckboxIndeterminateExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "checkbox-overview": {
          "title": "Basic checkboxes",
          "component": CheckboxOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "absolute-date-formatter": {
          "title": "Basic progress absolute-date-formatter",
          "component": AbsoluteDateFormatterExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "range-date-formatter": {
          "title": "Basic progress range-date-formatter",
          "component": RangeDateFormatterExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "relative-date-formatter": {
          "title": "Basic progress relative-date-formatter",
          "component": RelativeDateFormatterExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "datepicker-custom": {
          "title": "Custom localeData and format datepicker",
          "component": DatepickerCustomExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "datepicker-disabled": {
          "title": "Disabled datepicker",
          "component": DatepickerDisabledExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "datepicker-language": {
          "title": "Multy language datepicker",
          "component": DatepickerLanguageExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "datepicker-overview": {
          "title": "Datepicker",
          "component": DatepickerOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "datepicker-toggle": {
          "title": "Datepicker with custom toggle",
          "component": DatepickerToggleExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "datepicker-year": {
          "title": "Datepicker starts with year",
          "component": DatepickerYearExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "dropdown-nested": {
          "title": "Nested dropdown",
          "component": DropdownNestedExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "dropdown-overview": {
          "title": "Basic dropdown",
          "component": DropdownOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "input-number-overview": {
          "title": "Basic Input",
          "component": InputNumberOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "input-overview": {
          "title": "Basic Input",
          "component": InputOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "layout-flex-alignment": {
          "title": "Flex layout",
          "component": LayoutFlexAlignmentExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "layout-flex-behaviour-modifiers": {
          "title": "Flex layout",
          "component": LayoutFlexBehaviourModifiersExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "layout-flex-offsets": {
          "title": "Flex layout",
          "component": LayoutFlexOffsetsExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "layout-flex-order": {
          "title": "Flex layout",
          "component": LayoutFlexOrderExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "layout-flex-overview": {
          "title": "Flex layout",
          "component": LayoutFlexOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "link-overview": {
          "title": "Basic link",
          "component": LinkOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "link-pseudo": {
          "title": "Pseudo link",
          "component": LinkPseudoExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "list-groups": {
          "title": "Basic list",
          "component": ListGroupsExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "list-multiple-checkbox": {
          "title": "Basic list",
          "component": ListMultipleCheckboxExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "list-multiple-keyboard": {
          "title": "Basic list",
          "component": ListMultipleKeyboardExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "list-overview": {
          "title": "Basic list",
          "component": ListOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "modal-component": {
          "title": "Component Modal",
          "component": ModalComponentExample,
          "additionalFiles": [],
          "selectorName": "ModalComponentExample, McModalCustomComponent"
        },
        "modal-overview": {
          "title": "Basic Modal",
          "component": ModalOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "modal-template": {
          "title": "Template Modal",
          "component": ModalTemplateExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "navbar-overview": {
          "title": "Navbar",
          "component": NavbarOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "number-formatter-overview": {
          "title": "Basic progress number-formatter",
          "component": NumberFormatterOverviewExample,
          "additionalFiles": ["formatters-template.html", "formatters-template.html"],
          "selectorName": "NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent"
        },
        "popover-instance": {
          "title": "popover-instance",
          "component": PopoverInstanceExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "popover-overview": {
          "title": "Basic popover",
          "component": PopoverOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "progress-bar-indeterminate": {
          "title": "Indeterminate progress bar",
          "component": ProgressBarIndeterminateExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "progress-bar-overview": {
          "title": "Basic progress bar",
          "component": ProgressBarOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "progress-spinner-indeterminate": {
          "title": "Indeterminate progress spinner",
          "component": ProgressSpinnerIndeterminateExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "progress-spinner-overview": {
          "title": "Basic progress spinner",
          "component": ProgressSpinnerOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "radio-overview": {
          "title": "Basic radio",
          "component": RadioOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "select-groups": {
          "title": "Basic Select",
          "component": SelectGroupsExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "select-multiple-overview": {
          "title": "Basic Select",
          "component": SelectMultipleOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "select-overview": {
          "title": "Basic Select",
          "component": SelectOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "select-search-overview": {
          "title": "Basic Select",
          "component": SelectSearchOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "select-virtual-scroll": {
          "title": "select-virtual-scroll",
          "component": SelectVirtualScrollExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "sidepanel-component": {
          "title": "Template Modal",
          "component": SidepanelComponentExample,
          "additionalFiles": [],
          "selectorName": "SidepanelComponentExample, SidepanelExampleCustomComponent"
        },
        "sidepanel-overview": {
          "title": "Template Modal",
          "component": SidepanelOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "splitter-fixed": {
          "title": "Basic Splitter",
          "component": SplitterFixedExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "splitter-nested": {
          "title": "Basic Splitter",
          "component": SplitterNestedExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "splitter-overview": {
          "title": "Basic Splitter",
          "component": SplitterOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "splitter-vertical": {
          "title": "Basic Splitter",
          "component": SplitterVerticalExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "table-overview": {
          "title": "Basic Table",
          "component": TableOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "table-with-borders": {
          "title": "Basic Table",
          "component": TableWithBordersExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tabs-light": {
          "title": "Navbar",
          "component": TabsLightExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tabs-overview": {
          "title": "Tabs",
          "component": TabsOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tabs-stretch": {
          "title": "Navbar",
          "component": TabsStretchExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tags-autocomplete": {
          "title": "Basic tags autocomplete",
          "component": TagsAutocompleteExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tags-input": {
          "title": "Basic tags input",
          "component": TagsInputExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tags-list": {
          "title": "Basic tags list",
          "component": TagsListExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tags-overview": {
          "title": "Basic tags",
          "component": TagsOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "text-area-overview": {
          "title": "Basic textarea",
          "component": TextAreaOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "timepicker-overview": {
          "title": "Timepicker overview",
          "component": TimepickerOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "timepicker-range": {
          "title": "Timepicker range",
          "component": TimepickerRangeExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "toggle-overview": {
          "title": "Basic toggle",
          "component": ToggleOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tooltip-arrow-placement": {
          "title": "Basic tooltip with Arrow Placement",
          "component": TooltipArrowPlacementExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tooltip-overview": {
          "title": "Basic tooltip",
          "component": TooltipOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tooltip-scrollable": {
          "title": "Basic scrollable tooltip",
          "component": TooltipScrollableExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-select-multiple-overview": {
          "title": "Basic Select",
          "component": TreeSelectMultipleOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-select-overview": {
          "title": "Basic Select",
          "component": TreeSelectOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-filtering": {
          "title": "Basic tree",
          "component": TreeFilteringExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-multiple-checkbox": {
          "title": "Basic tree",
          "component": TreeMultipleCheckboxExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-multiple-checklist": {
          "title": "Checklist tree",
          "component": TreeMultipleChecklistExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-multiple-keyboard": {
          "title": "Basic tree",
          "component": TreeMultipleKeyboardExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "tree-overview": {
          "title": "Basic tree",
          "component": TreeOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "typography-overview": {
          "title": "Basic typography",
          "component": TypographyOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "validation-composite": {
          "title": "validation-composite",
          "component": ValidationCompositeExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "validation-global": {
          "title": "validation-global",
          "component": ValidationGlobalExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "validation-on-blur": {
          "title": "validation-on-blur",
          "component": ValidationOnBlurExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "validation-on-type": {
          "title": "validation-on-type",
          "component": ValidationOnTypeExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "validation-overview": {
          "title": "validation-overview",
          "component": ValidationOverviewExample,
          "additionalFiles": [],
          "selectorName": ""
        },
        "validation-small": {
          "title": "validation-small",
          "component": ValidationSmallExample,
          "additionalFiles": [],
          "selectorName": ""
        }
      };
      /** @type {?} */

      var EXAMPLE_MODULES = [AlertsExamplesModule, AutocompleteExamplesModule, BadgesExamplesModule, ButtonToggleExamplesModule, ButtonExamplesModule, CardExamplesModule, CheckboxExamplesModule, DateFormatterExamplesModule, DatepickerExamplesModule, DropdownExamplesModule, InputExamplesModule, FlexLayoutExamplesModule, LinkExamplesModule, ListExamplesModule, ModalExamplesModule, NavbarExamplesModule, NumberFormatterExamplesModule, PopoverExamplesModule, ProgressBarExamplesModule, ProgressSpinnerExamplesModule, RadioExamplesModule, SelectExamplesModule, SidepanelExamplesModule, SplitterExamplesModule, TableExamplesModule, TabsExamplesModule, TagsExamplesModule, TextAreaExamplesModule, TimepickerExamplesModule, ToggleExamplesModule, TooltipExamplesModule, TreeSelectExamplesModule, TreeExamplesModule, TypographyExamplesModule, ValidationExamplesModule];
      /** @type {?} */

      var EXAMPLE_LIST = [AlertsOverviewExample, AutocompleteOverviewExample, BadgesOverviewExample, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample, ButtonColorsExample, ButtonIconExample, ButtonOverviewExample, ButtonProgressExample, CardOverviewExample, CheckboxIndeterminateExample, CheckboxOverviewExample, AbsoluteDateFormatterExample, RangeDateFormatterExample, RelativeDateFormatterExample, DatepickerCustomExample, DatepickerDisabledExample, DatepickerLanguageExample, DatepickerOverviewExample, DatepickerToggleExample, DatepickerYearExample, DropdownNestedExample, DropdownOverviewExample, InputNumberOverviewExample, InputOverviewExample, LayoutFlexAlignmentExample, LayoutFlexBehaviourModifiersExample, LayoutFlexOffsetsExample, LayoutFlexOrderExample, LayoutFlexOverviewExample, LinkOverviewExample, LinkPseudoExample, ListGroupsExample, ListMultipleCheckboxExample, ListMultipleKeyboardExample, ListOverviewExample, ModalComponentExample, McModalCustomComponent, ModalOverviewExample, ModalTemplateExample, NavbarOverviewExample, NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent, PopoverInstanceExample, PopoverOverviewExample, ProgressBarIndeterminateExample, ProgressBarOverviewExample, ProgressSpinnerIndeterminateExample, ProgressSpinnerOverviewExample, RadioOverviewExample, SelectGroupsExample, SelectMultipleOverviewExample, SelectOverviewExample, SelectSearchOverviewExample, SelectVirtualScrollExample, SidepanelComponentExample, SidepanelExampleCustomComponent, SidepanelOverviewExample, SplitterFixedExample, SplitterNestedExample, SplitterOverviewExample, SplitterVerticalExample, TableOverviewExample, TableWithBordersExample, TabsLightExample, TabsOverviewExample, TabsStretchExample, TagsAutocompleteExample, TagsInputExample, TagsListExample, TagsOverviewExample, TextAreaOverviewExample, TimepickerOverviewExample, TimepickerRangeExample, ToggleOverviewExample, TooltipArrowPlacementExample, TooltipOverviewExample, TooltipScrollableExample, TreeSelectMultipleOverviewExample, TreeSelectOverviewExample, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample, TypographyOverviewExample, ValidationCompositeExample, ValidationGlobalExample, ValidationOnBlurExample, ValidationOnTypeExample, ValidationOverviewExample, ValidationSmallExample];

      var ExampleModule = function ExampleModule() {
        _classCallCheck(this, ExampleModule);
      };

      ExampleModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: EXAMPLE_MODULES,
          exports: EXAMPLE_MODULES,
          entryComponents: EXAMPLE_LIST
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: example-data.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Example data
       *   with information about Component name, selector, files used in example, and path to examples
       */

      var ExampleData =
      /**
       * @param {?} example
       */
      function ExampleData(example) {
        _classCallCheck(this, ExampleData);

        if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {
          return;
        }
        /** @type {?} */


        var exampleConfig = EXAMPLE_COMPONENTS[example]; // TODO: Do not hard-code extensions

        this.exampleFiles = ['html', 'ts', 'css'].map(
        /**
        * @param {?} extension
        * @return {?}
        */
        function (extension) {
          return "".concat(example, "-example.").concat(extension);
        });
        this.examplePath = "assets/stackblitz/examples/".concat(example, "/");
        this.selectorName = this.indexFilename = "".concat(example, "-example");

        if (exampleConfig.additionalFiles) {
          var _this$exampleFiles;

          (_this$exampleFiles = this.exampleFiles).push.apply(_this$exampleFiles, _toConsumableArray(exampleConfig.additionalFiles));
        }
        /** @type {?} */


        var exampleName = example.replace(/(?:^\w|\b\w)/g,
        /**
        * @param {?} letter
        * @return {?}
        */
        function (letter) {
          return letter.toUpperCase();
        });
        this.description = exampleConfig.title || "".concat(exampleName.replace(/[\-]+/g, ' '), " Example");
        this.componentName = exampleConfig.selectorName || "".concat(exampleName.replace(/[\-]+/g, ''), "Example");
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-examples.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-examples.js.map

      /***/

    },

    /***/
    "d+MJ":
    /*!****************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/containers/homepage/homepage.template.html ***!
      \****************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function dMJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<navbar></navbar>\n\n<section class=\"section section-banner\">\n    <div class=\"container\">\n        <div class=\"logo\">\n            <img src=\"https://camo.githubusercontent.com/87a8f7c8b454d1c5bd916e286f682b68a178e3c4/68747470733a2f2f692e6962622e636f2f66514e506776362f6c6f676f2d706e672d3230302e706e67\" alt=\"positive_js_logo\" border=\"0\" data-canonical-src=\"https://i.ibb.co/fQNPgv6/logo-png-200.png\" style=\"max-width:100%;\">\n        </div>\n    </div>\n    <div class=\"mc-display-1\">Component Library for Angular</div>\n\n    <div class=\"btn-container\">\n        <button mc-button color=\"primary\" class=\"btn\" routerLink=\"/docs/getting-started\">\n            GET STARTED\n        </button>\n\n        <button mc-button color=\"second\" class=\"btn\" routerLink=\"/components\">\n            Components\n        </button>\n        <button mc-button color=\"second\" class=\"btn\">GitHub</button>\n    </div>\n</section>\n\n";
      /***/
    },

    /***/
    "f6Xg":
    /*!***************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tree-select.js ***!
      \***************************************************************/

    /*! exports provided: McTreeSelect, McTreeSelectChange, McTreeSelectModule, McTreeSelectTrigger */

    /***/
    function f6Xg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeSelect", function () {
        return McTreeSelect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeSelectChange", function () {
        return McTreeSelectChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeSelectModule", function () {
        return McTreeSelectModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeSelectTrigger", function () {
        return McTreeSelectTrigger;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/cdk/tree */
      "oznV");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tags */
      "9hGJ");
      /* harmony import */


      var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/tree */
      "wd6P");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: tree-select.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var nextUniqueId = 0;
      /**
       * Change event object that is emitted when the select value has changed.
       */

      var McTreeSelectChange =
      /**
       * @param {?} source
       * @param {?} value
       * @param {?=} isUserInput
       */
      function McTreeSelectChange(source, value) {
        var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _classCallCheck(this, McTreeSelectChange);

        this.source = source;
        this.value = value;
        this.isUserInput = isUserInput;
      };

      if (false) {}

      var McTreeSelectTrigger = function McTreeSelectTrigger() {
        _classCallCheck(this, McTreeSelectTrigger);
      };

      McTreeSelectTrigger.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'mc-tree-select-trigger'
        }]
      }];

      var McTreeSelectBase =
      /**
       * @param {?} elementRef
       * @param {?} defaultErrorStateMatcher
       * @param {?} parentForm
       * @param {?} parentFormGroup
       * @param {?} ngControl
       */
      function McTreeSelectBase(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        _classCallCheck(this, McTreeSelectBase);

        this.elementRef = elementRef;
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McTreeSelectMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinErrorState"])(McTreeSelectBase)));

      var McTreeSelect = /*#__PURE__*/function (_McTreeSelectMixinBas) {
        _inherits(McTreeSelect, _McTreeSelectMixinBas);

        var _super32 = _createSuper(McTreeSelect);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} viewportRuler
         * @param {?} ngZone
         * @param {?} renderer
         * @param {?} defaultErrorStateMatcher
         * @param {?} scrollStrategyFactory
         * @param {?} rawValidators
         * @param {?} mcValidation
         * @param {?} dir
         * @param {?} parentForm
         * @param {?} parentFormGroup
         * @param {?} parentFormField
         * @param {?} ngControl
         * @param {?} ngModel
         * @param {?} formControlName
         */
        function McTreeSelect(elementRef, changeDetectorRef, viewportRuler, ngZone, renderer, defaultErrorStateMatcher, scrollStrategyFactory, rawValidators, mcValidation, dir, parentForm, parentFormGroup, parentFormField, ngControl, ngModel, formControlName) {
          var _this133;

          _classCallCheck(this, McTreeSelect);

          _this133 = _super32.call(this, elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
          _this133.changeDetectorRef = changeDetectorRef;
          _this133.viewportRuler = viewportRuler;
          _this133.ngZone = ngZone;
          _this133.renderer = renderer;
          _this133.scrollStrategyFactory = scrollStrategyFactory;
          _this133.rawValidators = rawValidators;
          _this133.mcValidation = mcValidation;
          _this133.dir = dir;
          _this133.parentFormField = parentFormField;
          _this133.ngModel = ngModel;
          _this133.formControlName = formControlName;
          /**
           * A name for this control that can be used by `mc-form-field`.
           */

          _this133.controlType = 'mc-select';
          _this133.hiddenItems = 0;
          /**
           * The cached font-size of the trigger element.
           */

          _this133.triggerFontSize = 0;
          /**
           * The value of the select panel's transform-origin property.
           */

          _this133.transformOrigin = 'top';
          /**
           * Emits when the panel element is finished transforming in.
           */

          _this133.panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
          /**
           * Strategy that will be used to handle scrolling while the select panel is open.
           */

          _this133.scrollStrategy = _this133.scrollStrategyFactory();
          /**
           * The y-offset of the overlay panel in relation to the trigger's top start corner.
           * This must be adjusted to align the selected option text over the trigger text.
           * when the panel opens. Will change based on the y-position of the selected option.
           */

          _this133.offsetY = 0;
          /**
           * This position config ensures that the top "start" corner of the overlay
           * is aligned with with the top "start" of the origin by default (overlapping
           * the trigger completely). If the panel cannot fit below the trigger, it
           * will fall back to a position above the trigger.
           */

          _this133.positions = [{
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top'
          }, {
            originX: 'start',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'bottom'
          }];
          _this133.hiddenItemsText = '...ещё';
          /**
           * Event emitted when the select panel has been toggled.
           */

          _this133.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Event emitted when the select has been opened.
           */

          _this133.openedStream = _this133.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])(
          /**
          * @param {?} o
          * @return {?}
          */
          function (o) {
            return o;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(
          /**
          * @return {?}
          */
          function () {}));
          /**
           * Event emitted when the select has been closed.
           */

          _this133.closedStream = _this133.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])(
          /**
          * @param {?} o
          * @return {?}
          */
          function (o) {
            return !o;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(
          /**
          * @return {?}
          */
          function () {}));
          /**
           * Event emitted when the selected value has been changed by the user.
           */

          _this133.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Event that emits whenever the raw value of the select changes. This is here primarily
           * to facilitate the two-way binding for the `value` input.
           * \@docs-private
           */

          _this133.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          _this133.backdropClass = 'cdk-overlay-transparent-backdrop';
          /**
           * Combined stream of all of the child options' change events.
           */

          _this133.optionSelectionChanges =
          /** @type {?} */
          Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["defer"])(
          /**
          * @return {?}
          */
          function () {
            if (_this133.options) {
              return _this133.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["startWith"])(_this133.options), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["switchMap"])(
              /**
              * @return {?}
              */
              function () {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"]).apply(void 0, _toConsumableArray(_this133.options.map(
                /**
                * @param {?} option
                * @return {?}
                */
                function (option) {
                  return option.onSelectionChange;
                })));
              }));
            }

            return _this133.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["switchMap"])(
            /**
            * @return {?}
            */
            function () {
              return _this133.optionSelectionChanges;
            }));
          });
          _this133._required = false;
          _this133._multiple = false;
          _this133._autoSelect = true;
          _this133._value = null;
          _this133._hasBackdrop = false;
          _this133._focused = false;
          _this133.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
          _this133._panelOpen = false;
          /**
           * The scroll position of the overlay panel, calculated to center the selected option.
           */

          _this133.scrollTop = 0;
          /**
           * Unique id for this input.
           */

          _this133.uid = "mc-select-".concat(nextUniqueId++);
          /**
           * Emits whenever the component is destroyed.
           */

          _this133.destroy = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
          /**
           * `View -> model callback called when value changes`
           */

          _this133.onChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * `View -> model callback called when select has been touched`
           */


          _this133.onTouched =
          /**
          * @return {?}
          */
          function () {};
          /**
           * Comparison function to specify which option is displayed. Defaults to object equality.
           */


          _this133._compareWith =
          /**
          * @param {?} o1
          * @param {?} o2
          * @return {?}
          */
          function (o1, o2) {
            return o1 === o2;
          };

          if (_this133.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            _this133.ngControl.valueAccessor = _assertThisInitialized(_this133);
          } // Force setter to be called in case id was not specified.


          _this133.id = _this133.id;
          return _this133;
        }
        /**
         * @return {?}
         */


        _createClass(McTreeSelect, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            var _this134 = this;

            this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will
            // fire the animation end event twice for the same animation. See:
            // https://github.com/angular/angular/issues/24084

            this.panelDoneAnimatingStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this134.panelOpen) {
                _this134.scrollTop = 0;

                _this134.openedChange.emit(true);
              } else {
                _this134.openedChange.emit(false);

                _this134.overlayDir.offsetX = 0;

                _this134.changeDetectorRef.markForCheck();
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this135 = this;

            if (!this.tree) {
              return;
            }

            if (this.mcValidation.useValidation) {
              Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["setMosaicValidation"])(this);
            }

            this.tree.resetFocusedItemOnBlur = false;
            this.selectionModel = this.tree.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__["SelectionModel"](this.multiple);
            this.tree.ngAfterContentInit();
            this.initKeyManager();
            this.options = this.tree.renderedOptions;
            this.tree.autoSelect = this.autoSelect;

            if (this.tree.multipleMode === null) {
              this.tree.multipleMode = this.multiple ? _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MultipleMode"].CHECKBOX : null;
            }

            if (this.multiple) {
              this.tree.noUnselectLast = false;
            }

            if (this.tempValues) {
              this.setSelectionByValue(this.tempValues);
              this.tempValues = null;
            }

            this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              if (!_this135.multiple && _this135.panelOpen && event.isUserInput) {
                _this135.close();
              }
            });
            this.tree.selectionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              _this135.onChange(_this135.selectedValues);

              _this135.selectionChange.emit(new McTreeSelectChange(_this135, event.option));
            });
            this.selectionModel.changed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              if (event.added.length) {
                _this135.tree.keyManager.setFocusOrigin('program');

                _this135.tree.keyManager.setActiveItem(
                /** @type {?} */
                _this135.options.find(
                /**
                * @param {?} option
                * @return {?}
                */
                function (option) {
                  return option.data === event.added[0];
                }));
              }
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this136 = this;

            if (!this.tree) {
              return;
            }

            this.tags.changes.subscribe(
            /**
            * @return {?}
            */
            function () {
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                return _this136.calculateHiddenItems();
              }, 0);
            });
            setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this136.calculateHiddenItems();
            }, 0);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.ngControl) {
              this.updateErrorState();
            }
          }
          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
            // the parent form field know to run change detection when the disabled state changes.
            if (changes.disabled) {
              this.stateChanges.next();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroy.next();
            this.destroy.complete();
            this.stateChanges.complete();
            this.closeSubscription.unsubscribe();
          }
          /**
           * @param {?} hiddenItemsText
           * @param {?} hiddenItems
           * @return {?}
           */

        }, {
          key: "hiddenItemsTextFormatter",
          value: function hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) {
            return "".concat(hiddenItemsText, " ").concat(hiddenItems);
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "clearValue",
          value: function clearValue($event) {
            $event.stopPropagation();
            this.selectionModel.clear();
            this.tree.keyManager.setActiveItem(-1);
            this.setSelectionByValue([]);
            this.onChange(this.selectedValues);
          }
          /**
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            if (this.panelOpen) {
              this.close();
            } else {
              this.open();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "open",
          value: function open() {
            var _this137 = this;

            if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
              return;
            }

            this.triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. "16px").
            // `parseInt` ignores the trailing 'px' and converts this to a number.

            this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);
            this._panelOpen = true;
            setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this137.highlightCorrectOption();
            });
            this.changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.

            this.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this137.triggerFontSize && _this137.overlayDir.overlayRef && _this137.overlayDir.overlayRef.overlayElement) {
                _this137.overlayDir.overlayRef.overlayElement.style.fontSize = "".concat(_this137.triggerFontSize, "px");
              }
            });
          }
          /**
           * Closes the overlay panel and focuses the host element.
           * @return {?}
           */

        }, {
          key: "close",
          value: function close() {
            var _this138 = this;

            if (!this._panelOpen) {
              return;
            }

            this._panelOpen = false;
            this.changeDetectorRef.markForCheck();
            this.onTouched();
            setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this138.focus();
            }, 0);
          }
          /**
           * Sets the select's value. Part of the ControlValueAccessor interface
           * required to integrate with Angular's core forms API.
           *
           * @param {?} value New value to be written to the model.
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            if (this.tree) {
              this.setSelectionByValue(value);
            } else {
              this.tempValues = value;
            }
          }
          /**
           * Saves a callback function to be invoked when the select's value
           * changes from user input. Part of the ControlValueAccessor interface
           * required to integrate with Angular's core forms API.
           *
           * @param {?} fn Callback to be triggered when the value changes.
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * Saves a callback function to be invoked when the select is blurred
           * by the user. Part of the ControlValueAccessor interface required
           * to integrate with Angular's core forms API.
           *
           * @param {?} fn Callback to be triggered when the component has been touched.
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Disables the select. Part of the ControlValueAccessor interface required
           * to integrate with Angular's core forms API.
           *
           * @param {?} isDisabled Sets whether the component is disabled.
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
            this.changeDetectorRef.markForCheck();
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "isRtl",

          /**
           * @return {?}
           */
          value: function isRtl() {
            return this.dir ? this.dir.value === 'rtl' : false;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            if (!this.disabled) {
              if (this.panelOpen) {
                this.handleOpenKeydown(event);
              } else {
                this.handleClosedKeydown(event);
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onFocus",
          value: function onFocus() {
            if (!this.disabled) {
              this._focused = true;
              this.stateChanges.next();
            }
          }
          /**
           * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
           * "blur" to the panel when it opens, causing a false positive.
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            this._focused = false;

            if (!this.disabled && !this.panelOpen) {
              this.onTouched();
              this.changeDetectorRef.markForCheck();
              this.stateChanges.next();
            }
          }
          /**
           * Callback that is invoked when the overlay panel has been attached.
           * @return {?}
           */

        }, {
          key: "onAttached",
          value: function onAttached() {
            var _this139 = this;

            this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this139.changeDetectorRef.detectChanges();

              _this139.calculateOverlayOffsetX();

              _this139.panel.nativeElement.scrollTop = _this139.scrollTop;

              _this139.tree.updateScrollSize();
            });
            this.closeSubscription = this.closingActions().subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this139.close();
            });
          }
          /**
           * Returns the theme to be used on the panel.
           * @return {?}
           */

        }, {
          key: "getPanelTheme",
          value: function getPanelTheme() {
            return this.parentFormField ? "mc-".concat(this.parentFormField.color) : '';
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "onContainerClick",
          value: function onContainerClick() {
            this.focus();
          }
          /**
           * Invoked when an option is clicked.
           * @param {?} selectedOption
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onRemoveSelectedOption",
          value: function onRemoveSelectedOption(selectedOption, $event) {
            var _this140 = this;

            $event.stopPropagation();
            this.selectionModel.deselect(this.selected.find(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this140.tree.treeControl.getValue(value) === selectedOption.value;
            }));
            this.onChange(this.selectedValues);
          }
          /**
           * @return {?}
           */

        }, {
          key: "calculateHiddenItems",
          value: function calculateHiddenItems() {
            var _this141 = this;

            if (this.customTrigger || this.empty || !this.multiple) {
              return;
            }
            /** @type {?} */


            var visibleItems = 0;
            /** @type {?} */

            var totalItemsWidth = this.getTotalItemsWidthInMatcher();
            /** @type {?} */

            var totalVisibleItemsWidth = 0;
            this.tags.forEach(
            /**
            * @param {?} tag
            * @return {?}
            */
            function (tag) {
              if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {
                totalVisibleItemsWidth += _this141.getItemWidth(tag.nativeElement);
                visibleItems++;
              }
            });
            this.hiddenItems = this.selectionModel.selected.length - visibleItems;

            if (this.hiddenItems) {
              /** @type {?} */
              var itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');
              /** @type {?} */

              var matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');
              /** @type {?} */

              var itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight; // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;

              /** @type {?} */

              var itemsCounterWidth = 86;
              /** @type {?} */

              var matcherListWidth = matcherList.getBoundingClientRect().width;
              /** @type {?} */

              var matcherWidth = matcherListWidth + itemsCounterWidth;

              if (itemsCounterShowed && totalItemsWidth < matcherWidth) {
                this.hiddenItems = 0;
              }

              if (totalVisibleItemsWidth === matcherListWidth || totalVisibleItemsWidth + itemsCounterWidth < matcherListWidth) {
                this.changeDetectorRef.markForCheck();
                return;
              } else if (!itemsCounterShowed && totalItemsWidth + itemsCounterWidth > matcherWidth) {
                this.hiddenItems++;
              }
            }

            this.changeDetectorRef.markForCheck();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "closingActions",
          value: function closingActions() {
            /** @type {?} */
            var backdrop =
            /** @type {?} */
            this.overlayDir.overlayRef.backdropClick();
            /** @type {?} */

            var outsidePointerEvents =
            /** @type {?} */
            this.overlayDir.overlayRef.outsidePointerEvents();
            /** @type {?} */

            var detachments =
            /** @type {?} */
            this.overlayDir.overlayRef.detachments();
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(backdrop, outsidePointerEvents, detachments);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getTotalItemsWidthInMatcher",
          value: function getTotalItemsWidthInMatcher() {
            var _this142 = this;

            /** @type {?} */
            var triggerClone = this.trigger.nativeElement.cloneNode(true);
            triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();
            this.renderer.setStyle(triggerClone, 'position', 'absolute');
            this.renderer.setStyle(triggerClone, 'visibility', 'hidden');
            this.renderer.setStyle(triggerClone, 'top', '-100%');
            this.renderer.setStyle(triggerClone, 'left', '0');
            this.renderer.appendChild(this.trigger.nativeElement, triggerClone);
            /** @type {?} */

            var totalItemsWidth = 0;
            triggerClone.querySelectorAll('mc-tag').forEach(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              totalItemsWidth += _this142.getItemWidth(item);
            });
            triggerClone.remove();
            return totalItemsWidth;
          }
          /**
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "getItemWidth",
          value: function getItemWidth(element) {
            /** @type {?} */
            var computedStyle = window.getComputedStyle(element);
            /** @type {?} */

            var width = parseInt(
            /** @type {?} */
            computedStyle.width);
            /** @type {?} */

            var marginLeft = parseInt(
            /** @type {?} */
            computedStyle.marginLeft);
            /** @type {?} */

            var marginRight = parseInt(
            /** @type {?} */
            computedStyle.marginRight);
            return width + marginLeft + marginRight;
          }
          /**
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleClosedKeydown",
          value: function handleClosedKeydown(event) {
            // tslint:disable-next-line: deprecation

            /** @type {?} */
            var keyCode = event.keyCode;
            /** @type {?} */

            var isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["LEFT_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["RIGHT_ARROW"];
            /** @type {?} */

            var isOpenKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]; // Open the select on ALT + arrow key to match the native <select>

            if (isOpenKey || (this.multiple || event.altKey) && isArrowKey) {
              // prevents the page from scrolling down when pressing space
              event.preventDefault();
              this.open();
            } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {
              this.tree.keyManager.onKeydown(event);
            }
          }
          /**
           * @private
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleOpenKeydown",
          value: function handleOpenKeydown(event) {
            /* tslint:disable-next-line */

            /** @type {?} */
            var keyCode = event.keyCode;
            /** @type {?} */

            var isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"];

            if (isArrowKey && event.altKey) {
              // Close the select on ALT + arrow key to match the native <select>
              event.preventDefault();
              this.close();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["LEFT_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["RIGHT_ARROW"]) {
              return this.originalOnKeyDown.call(this.tree, event);
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"]) {
              event.preventDefault();
              this.tree.keyManager.setFirstItemActive();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]) {
              event.preventDefault();
              this.tree.keyManager.setLastItemActive();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_UP"]) {
              event.preventDefault();
              this.tree.keyManager.setPreviousPageItemActive();
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_DOWN"]) {
              event.preventDefault();
              this.tree.keyManager.setNextPageItemActive();
            } else if ((keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]) && this.tree.keyManager.activeItem) {
              event.preventDefault();

              if (!this.autoSelect) {
                this.selectionModel.toggle(this.tree.keyManager.activeItem.data);
              } else {
                this.close();
              }
            } else if (this.multiple && keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["A"] && event.ctrlKey) {
              event.preventDefault();
              /** @type {?} */

              var hasDeselectedOptions = this.options.some(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return !option.selected;
              });
              this.options.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                if (hasDeselectedOptions && !option.disabled) {
                  option.select();
                } else {
                  option.deselect();
                }
              });
            } else {
              /** @type {?} */
              var previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;
              this.tree.keyManager.setFocusOrigin('keyboard');
              this.tree.keyManager.onKeydown(event);

              if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem && this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {
                this.tree.keyManager.activeItem.selectViaInteraction(event);
              }

              if (this.autoSelect && this.tree.keyManager.activeItem) {
                this.tree.setSelectedOptionsByKey(this.tree.keyManager.activeItem, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["hasModifierKey"])(event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["hasModifierKey"])(event, 'ctrlKey'));
              }
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "initializeSelection",
          value: function initializeSelection() {
            var _this143 = this;

            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(
            /**
            * @return {?}
            */
            function () {
              _this143.setSelectionByValue(_this143.ngControl ? _this143.ngControl.value : _this143._value);
            });
          }
          /**
           * Sets the selected option based on a value. If no option can be
           * found with the designated value, the select trigger is cleared.
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "setSelectionByValue",
          value: function setSelectionByValue(value) {
            if (this.multiple && value) {
              if (!Array.isArray(value)) {
                throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getMcSelectNonArrayValueError"])();
              }

              this.tree.setOptionsFromValues(value);
              this.sortValues();
            } else {
              this.tree.setOptionsFromValues([value]);
            }

            this.changeDetectorRef.detectChanges();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "initKeyManager",
          value: function initKeyManager() {
            var _this144 = this;

            this.originalOnKeyDown = this.tree.onKeyDown;

            this.tree.onKeyDown =
            /**
            * @return {?}
            */
            function () {};

            this.tree.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              // Restore focus to the trigger before closing. Ensures that the focus
              // position won't be lost if the user got focus into the overlay.
              _this144.focus();

              _this144.close();
            });
            this.tree.keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this144._panelOpen && _this144.panel) {
                _this144.scrollActiveOptionIntoView();
              } else if (!_this144._panelOpen && !_this144.multiple && _this144.tree.keyManager.activeItem) {
                _this144.tree.keyManager.activeItem.selectViaInteraction();
              }
            });
          }
          /**
           * Sorts the selected values in the selected based on their order in the panel.
           * @private
           * @return {?}
           */

        }, {
          key: "sortValues",
          value: function sortValues() {
            var _this145 = this;

            if (this.multiple) {
              /** @type {?} */
              var options = this.options.toArray();
              this.selectionModel.sort(
              /**
              * @param {?} a
              * @param {?} b
              * @return {?}
              */
              function (a, b) {
                return _this145.sortComparator ? _this145.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);
              });
              this.stateChanges.next();
            }
          }
          /**
           * Highlights the selected item. If no option is selected, it will highlight
           * the first item instead.
           * @private
           * @return {?}
           */

        }, {
          key: "highlightCorrectOption",
          value: function highlightCorrectOption() {
            if (this.empty || !this.tree.keyManager) {
              return;
            }
            /** @type {?} */


            var firstSelectedValue = this.multiple ? this.selectedValues[0] : this.selectedValues;
            /** @type {?} */

            var selectedOption = this.options.find(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.value === firstSelectedValue;
            });

            if (selectedOption) {
              this.tree.keyManager.setActiveItem(selectedOption);
            }
          }
          /**
           * Scrolls the active option into view.
           * @private
           * @return {?}
           */

        }, {
          key: "scrollActiveOptionIntoView",
          value: function scrollActiveOptionIntoView() {
            /** @type {?} */
            var activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;
            this.panel.nativeElement.scrollTop = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getOptionScrollPosition"])(activeOptionIndex, this.tree.getItemHeight(), this.panel.nativeElement.scrollTop, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_MAX_HEIGHT"]);
          }
          /**
           * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.
           * This must be adjusted to align the selected option text over the trigger text when
           * the panel opens. Will change based on LTR or RTL text direction. Note that the offset
           * can't be calculated until the panel has been attached, because we need to know the
           * content width in order to constrain the panel within the viewport.
           * @private
           * @return {?}
           */

        }, {
          key: "calculateOverlayOffsetX",
          value: function calculateOverlayOffsetX() {
            /** @type {?} */
            var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();
            /** @type {?} */

            var viewportSize = this.viewportRuler.getViewportSize();
            /** @type {?} */

            var isRtl = this.isRtl();
            /* tslint:disable-next-line:no-magic-numbers */

            /** @type {?} */

            var paddingWidth = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_PADDING_X"] * 2;
            /** @type {?} */

            var offsetX = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_PADDING_X"]; // Invert the offset in LTR.

            if (!isRtl) {
              offsetX *= -1;
            } // Determine how much the select overflows on each side.

            /** @type {?} */


            var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));
            /** @type {?} */

            var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.

            if (leftOverflow > 0) {
              offsetX += leftOverflow + _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_VIEWPORT_PADDING"];
            } else if (rightOverflow > 0) {
              offsetX -= rightOverflow + _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_VIEWPORT_PADDING"];
            } // Set the offset directly in order to avoid having to go through change detection and
            // potentially triggering "changed after it was checked" errors. Round the value to avoid
            // blurry content in some browsers.


            this.overlayDir.offsetX = Math.round(offsetX);
            this.overlayDir.overlayRef.updatePosition();
          }
        }, {
          key: "placeholder",
          get: function get() {
            return this._placeholder;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._placeholder = value;
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return this._multiple;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (this.selectionModel) {
              throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getMcSelectDynamicMultipleError"])();
            }

            this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "autoSelect",
          get: function get() {
            if (this.multiple) {
              return false;
            }

            return this._autoSelect;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._autoSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
          }
          /**
           * Function to compare the option values with the selected values. The first argument
           * is a value from an option. The second is a value from the selection. A boolean
           * should be returned.
           * @return {?}
           */

        }, {
          key: "compareWith",
          get: function get() {
            return this._compareWith;
          }
          /**
           * @param {?} fn
           * @return {?}
           */
          ,
          set: function set(fn) {
            /* tslint:disable-next-line:strict-type-predicates */
            if (typeof fn !== 'function') {
              throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getMcSelectNonFunctionValueError"])();
            }

            this._compareWith = fn;

            if (this.selectionModel) {
              // A different comparator means the selection could change.
              this.initializeSelection();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this.multiple ? this.tree.getSelectedValues() : this.tree.getSelectedValues()[0];
          }
          /**
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._id = value || this.uid;
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasBackdrop",
          get: function get() {
            return this._hasBackdrop;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether the select is focused.
           * @return {?}
           */

        }, {
          key: "focused",
          get: function get() {
            return this._focused || this._panelOpen;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._focused = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "panelOpen",
          get: function get() {
            return this._panelOpen;
          }
          /**
           * @return {?}
           */

        }, {
          key: "canShowCleaner",
          get: function get() {
            return this.cleaner && this.selectionModel.hasValue();
          }
        }, {
          key: "selected",
          get: function get() {
            return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];
          }
          /**
           * @return {?}
           */

        }, {
          key: "selectedValues",
          get: function get() {
            var _this146 = this;

            /** @type {?} */
            var selectedValues = this.selectionModel.selected.map(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this146.tree.treeControl.getValue(value);
            });
            return this.multiple ? selectedValues : selectedValues[0];
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerValue",
          get: function get() {
            if (this.empty) {
              return '';
            }

            return this.tree.treeControl.getViewValue(this.selected);
          }
          /**
           * @return {?}
           */

        }, {
          key: "triggerValues",
          get: function get() {
            var _this147 = this;

            if (this.empty) {
              return [];
            }

            return this.selectedValues.map(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this147.tree.renderedOptions.find(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.value === value;
              });
            }).filter(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option;
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "empty",
          get: function get() {
            return !this.selectionModel || this.selectionModel.isEmpty();
          }
        }]);

        return McTreeSelect;
      }(McTreeSelectMixinBase);

      McTreeSelect.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-tree-select',
          exportAs: 'mcTreeSelect',
          template: "<div cdk-overlay-origin\n     class=\"mc-tree-select__trigger\"\n     [class.mc-tree-select__trigger_multiple]=\"multiple\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n    <div class=\"mc-tree-select__matcher\" [ngSwitch]=\"empty\">\n        <span class=\"mc-tree-select__placeholder\" *ngSwitchCase=\"true\">{{ placeholder || '\\u00A0' }}</span>\n        <span *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n            <div *ngSwitchDefault [ngSwitch]=\"multiple\" class=\"mc-tree-select__match-container\">\n                <span *ngSwitchCase=\"false\" class=\"mc-tree-select__matcher-text\">{{ triggerValue }}</span>\n                <div *ngSwitchCase=\"true\" class=\"mc-tree-select__multiple-matcher\">\n                    <div class=\"mc-tree-select__match-list\">\n                        <mc-tag *ngFor=\"let option of triggerValues\"\n                            [selectable]=\"false\"\n                            [disabled]=\"option.disabled || disabled\"\n                            [class.mc-error]=\"errorState\">\n\n                            {{ option.viewValue }}\n                            <i mc-icon=\"mc-close-S_16\"\n                               *ngIf=\"!option.disabled && !disabled\"\n                               (click)=\"onRemoveSelectedOption(option, $event)\">\n                            </i>\n                        </mc-tag>\n                    </div>\n                    <div class=\"mc-tree-select__match-hidden-text\"\n                         [style.display]=\"hiddenItems > 0 ? 'block' : 'none'\"\n                         #hiddenItemsCounter>\n                        {{ hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) }}\n                    </div>\n                </div>\n            </div>\n            <ng-content select=\"mc-tree-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n        </span>\n    </div>\n\n    <div class=\"mc-select__cleaner\" *ngIf=\"canShowCleaner\" (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <div class=\"mc-tree-select__arrow-wrapper\">\n        <i class=\"mc-tree-select__arrow\" mc-icon=\"mc-angle-down-L_16\"></i>\n    </div>\n</div>\n\n<ng-template\n    cdk-connected-overlay\n    cdkConnectedOverlayLockPosition\n    [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n    [cdkConnectedOverlayBackdropClass]=\"backdropClass\"\n    [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"positions\"\n    [cdkConnectedOverlayMinWidth]=\"triggerRect?.width\"\n    [cdkConnectedOverlayOffsetY]=\"offsetY\"\n    (backdropClick)=\"close()\"\n    (attach)=\"onAttached()\"\n    (detach)=\"close()\">\n\n    <div #panel\n         class=\"mc-tree-select__panel {{ getPanelTheme() }}\"\n         [ngClass]=\"panelClass\"\n         [style.transformOrigin]=\"transformOrigin\"\n         [style.font-size.px]=\"triggerFontSize\"\n         (keydown)=\"handleKeydown($event)\">\n\n        <div #optionsContainer\n             class=\"mc-tree-select__content\"\n             [@fadeInContent]=\"'showing'\"\n             (@fadeInContent.done)=\"panelDoneAnimatingStream.next($event.toState)\">\n            <ng-content select=\"mc-tree-selection\"></ng-content>\n        </div>\n    </div>\n</ng-template>\n",
          inputs: ['disabled', 'tabIndex'],
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          host: {
            "class": 'mc-tree-select',
            '[class.mc-disabled]': 'disabled',
            '[class.mc-invalid]': 'errorState',
            '[attr.id]': 'id',
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null',
            '(click)': 'toggle()',
            '(keydown)': 'handleKeydown($event)',
            '(focus)': 'onFocus()',
            '(blur)': 'onBlur()',
            '(window:resize)': 'calculateHiddenItems()'
          },
          animations: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mcSelectAnimations"].transformPanel, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mcSelectAnimations"].fadeInContent],
          providers: [{
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__["McFormFieldControl"],
            useExisting: McTreeSelect
          }, {
            provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_3__["CdkTree"],
            useExisting: McTreeSelect
          }],
          styles: [".mc-divider{border-top-style:solid;border-top-width:1px;display:block;margin:0}.mc-divider.mc-divider_vertical{border-right-style:solid;border-right-width:1px;border-top:0}.mc-divider.mc-divider_inset{margin-left:80px}[dir=rtl] .mc-divider.mc-divider_inset{margin-left:auto;margin-right:80px}.mc-tree-selection{display:block}.mc-tree-option{align-items:center;border:2px solid transparent;display:flex;height:28px;word-wrap:break-word}.mc-tree-option>.mc-icon{cursor:pointer;margin-right:4px}.mc-tree-option:focus{outline:none}.mc-tree-option:not([disabled]){cursor:pointer}.mc-tree-option .mc-pseudo-checkbox{margin-right:8px}.mc-tree-node-toggle{cursor:pointer;margin-right:4px}.mc-tree-node-toggle .mc-icon{transform:rotate(-90deg)}.mc-tree-node-toggle.mc-opened .mc-icon{transform:rotate(0)}.mc-tree-node-toggle[disabled]{cursor:default}.mc-tree-select{box-sizing:border-box;display:inline-block;outline:none;vertical-align:top;width:100%}.mc-tree-select.mc-disabled .mc-tree-select__trigger{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:default;user-select:none}.mc-tree-select__trigger{box-sizing:border-box;cursor:pointer;display:flex;height:30px;padding-left:15px;padding-right:7px;position:relative}.mc-tree-select__trigger.mc-tree-select__trigger_multiple{padding-left:7px}.mc-tree-select__trigger.mc-tree-select__trigger_multiple .mc-tree-select__placeholder{margin-left:8px}.mc-tree-select__trigger.mc-tree-select__trigger_multiple .mc-tag.mc-disabled .mc-tag__text{margin-right:7px}.mc-tree-select__matcher{align-items:center;display:flex;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}.mc-tree-select__matcher>span{width:100%}.mc-tree-select__multiple-matcher{display:flex;width:100%}.mc-tree-select__match-list{display:flex;flex-wrap:wrap;margin:0;max-height:28px;overflow:hidden;padding-left:0}.mc-tree-select__match-list .mc-tag{margin-right:4px}.mc-tree-select__match-container{display:flex;flex-direction:row;justify-content:space-between;width:100%}.mc-tree-select__match-container .mc-tree-select__match-hidden-text{-ms-grid-row-align:center;align-self:center;flex:0 0 70px;padding:0 8px;text-align:right}.mc-tree-select__match-item{border:1px solid transparent;border-radius:3px;display:flex;margin-right:4px;max-width:100%;padding-left:7px}.mc-tree-select__arrow-wrapper{-ms-grid-row-align:center;align-self:center}.mc-form-field-appearance-fill .mc-tree-select__arrow-wrapper,.mc-form-field-appearance-standard .mc-tree-select__arrow-wrapper{transform:translateY(-50%)}.mc-form-field-appearance-outline .mc-tree-select__arrow-wrapper{transform:translateY(-25%)}.mc-tree-select__panel{border-bottom-left-radius:3px;border-bottom-right-radius:3px;border-style:solid;border-width:1px;max-height:224px;min-width:100%;overflow:auto;padding:4px 0}.mc-tree-select__panel .mc-optgroup-label,.mc-tree-select__panel .mc-tree-select-option{font-size:inherit;height:32px;line-height:32px}.mc-tree-select__content,.mc-tree-select__content .mc-tree-selection{height:100%}.mc-form-field-type-mc-select:not(.mc-disabled) .mc-form-field-flex{cursor:pointer}.mc-form-field-type-mc-select .mc-form-field-label{width:calc(100% - 18px)}"]
        }]
      }];
      /** @nocollapse */

      McTreeSelect.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["ViewportRuler"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["ErrorStateMatcher"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_SELECT_SCROLL_STRATEGY"]]
          }]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_forms__WEBPACK_IMPORTED_MODULE_11__["NG_VALIDATORS"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_VALIDATION"]]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgForm"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormGroupDirective"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__["McFormField"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgModel"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormControlName"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }];
      };

      McTreeSelect.propDecorators = {
        trigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['trigger', {
            "static": false
          }]
        }],
        panel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['panel', {
            "static": false
          }]
        }],
        overlayDir: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"], {
            "static": false
          }]
        }],
        hiddenItemsCounter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['hiddenItemsCounter', {
            "static": false
          }]
        }],
        tags: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"],
          args: [_ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTag"]]
        }],
        cleaner: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: ['mcSelectCleaner', {
            "static": true
          }]
        }],
        customTrigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [McTreeSelectTrigger, {
            "static": false
          }]
        }],
        tree: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__["McTreeSelection"], {
            "static": false
          }]
        }],
        hiddenItemsText: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        openedChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        openedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['opened']
        }],
        closedStream: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"],
          args: ['closed']
        }],
        selectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        valueChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        panelClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        backdropClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        errorStateMatcher: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        sortComparator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        multiple: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        autoSelect: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        hasBackdrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        hiddenItemsTextFormatter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tree-select.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTreeSelectModule = function McTreeSelectModule() {
        _classCallCheck(this, McTreeSelectModule);
      };

      McTreeSelectModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_3__["CdkTreeModule"], _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__["McTreeModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"], _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTagsModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McPseudoCheckboxModule"]],
          exports: [McTreeSelect, McTreeSelectTrigger, _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
          declarations: [McTreeSelect, McTreeSelectTrigger],
          providers: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_SELECT_SCROLL_STRATEGY_PROVIDER"]]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-tree-select.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-tree-select.js.map

      /***/
    },

    /***/
    "gAVc":
    /*!*************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/footer/footer.component.html ***!
      \*************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function gAVc(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"docs-footer\">\n    <div class=\"docs-footer__wrapper\">\n        <div class=\"docs-footer__text-wrapper\">\n            <span class=\"docs-footer__text\">© 2019 Positive Technologies</span>\n            <span class=\"docs-footer__text\">Code licensed under an <a class=\"docs-footer__link\" href=\"//github.com/positive-js/mosaic/blob/master/LICENSE\" target=\"_blank\">MIT-style License</a>.</span>\n        </div>\n        <a  class=\"docs-footer__icon\" href=\"//github.com/positive-js/mosaic/\" target=\"_blank\">\n            <svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                  viewBox=\"0 0 438.549 438.549\" style=\"enable-background:new 0 0 438.549 438.549;\"\n                 xml:space=\"preserve\">\n                <g>\n                    <path d=\"M409.132,114.573c-19.608-33.596-46.205-60.194-79.798-79.8C295.736,15.166,259.057,5.365,219.271,5.365\t\tc-39.781,0-76.472,9.804-110.063,29.408c-33.596,19.605-60.192,46.204-79.8,79.8C9.803,148.168,0,184.854,0,224.63\t\tc0,47.78,13.94,90.745,41.827,128.906c27.884,38.164,63.906,64.572,108.063,79.227c5.14,0.954,8.945,0.283,11.419-1.996\t\tc2.475-2.282,3.711-5.14,3.711-8.562c0-0.571-0.049-5.708-0.144-15.417c-0.098-9.709-0.144-18.179-0.144-25.406l-6.567,1.136\n                        c-4.187,0.767-9.469,1.092-15.846,1c-6.374-0.089-12.991-0.757-19.842-1.999c-6.854-1.231-13.229-4.086-19.13-8.559\t\tc-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559\t\tc-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-0.951-2.568-2.098-3.711-3.429c-1.142-1.331-1.997-2.663-2.568-3.997\t\tc-0.572-1.335-0.098-2.43,1.427-3.289c1.525-0.859,4.281-1.276,8.28-1.276l5.708,0.853c3.807,0.763,8.516,3.042,14.133,6.851\n                        c5.614,3.806,10.229,8.754,13.846,14.842c4.38,7.806,9.657,13.754,15.846,17.847c6.184,4.093,12.419,6.136,18.699,6.136\t\tc6.28,0,11.704-0.476,16.274-1.423c4.565-0.952,8.848-2.383,12.847-4.285c1.713-12.758,6.377-22.559,13.988-29.41\t\tc-10.848-1.14-20.601-2.857-29.264-5.14c-8.658-2.286-17.605-5.996-26.835-11.14c-9.235-5.137-16.896-11.516-22.985-19.126\t\tc-6.09-7.614-11.088-17.61-14.987-29.979c-3.901-12.374-5.852-26.648-5.852-42.826c0-23.035,7.52-42.637,22.557-58.817\n                        c-7.044-17.318-6.379-36.732,1.997-58.24c5.52-1.715,13.706-0.428,24.554,3.853c10.85,4.283,18.794,7.952,23.84,10.994\t\tc5.046,3.041,9.089,5.618,12.135,7.708c17.705-4.947,35.976-7.421,54.818-7.421s37.117,2.474,54.823,7.421l10.849-6.849\t\tc7.419-4.57,16.18-8.758,26.262-12.565c10.088-3.805,17.802-4.853,23.134-3.138c8.562,21.509,9.325,40.922,2.279,58.24\t\tc15.036,16.18,22.559,35.787,22.559,58.817c0,16.178-1.958,30.497-5.853,42.966c-3.9,12.471-8.941,22.457-15.125,29.979\n                        c-6.191,7.521-13.901,13.85-23.131,18.986c-9.232,5.14-18.182,8.85-26.84,11.136c-8.662,2.286-18.415,4.004-29.263,5.146\t\tc9.894,8.562,14.842,22.077,14.842,40.539v60.237c0,3.422,1.19,6.279,3.572,8.562c2.379,2.279,6.136,2.95,11.276,1.995\t\tc44.163-14.653,80.185-41.062,108.068-79.226c27.88-38.161,41.825-81.126,41.825-128.906\t\tC438.536,184.851,428.728,148.168,409.132,114.573z\"></path>\n                </g>\n            </svg>\n        </a>\n    </div>\n</div>\n";
      /***/
    },

    /***/
    "gVDO":
    /*!*********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-table.js ***!
      \*********************************************************/

    /*! exports provided: McTable, McTableModule */

    /***/
    function gVDO(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTable", function () {
        return McTable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTableModule", function () {
        return McTableModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /**
       * @fileoverview added by tsickle
       * Generated from: table.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTable = function McTable() {
        _classCallCheck(this, McTable);
      };

      McTable.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'table[mc-table]',
          host: {
            "class": 'mc-table'
          }
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: table.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      var McTableModule = function McTableModule() {
        _classCallCheck(this, McTableModule);
      };

      McTableModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]],
          exports: [McTable],
          declarations: [McTable]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-table.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-table.js.map

      /***/
    },

    /***/
    "gWp9":
    /*!**********************************************!*\
      !*** ./packages/docs/src/app/docs.module.ts ***!
      \**********************************************/

    /*! exports provided: AppModule */

    /***/
    function gWp9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppModule", function () {
        return AppModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common/http */
      "IheW");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/platform-browser */
      "cUpR");
      /* harmony import */


      var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/platform-browser/animations */
      "omvX");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/mosaic-examples */
      "cF3b");
      /* harmony import */


      var _components_component_viewer_component_viewer_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./components/component-viewer/component-viewer.module */
      "WlSM");
      /* harmony import */


      var _components_main_layout_main_layout_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ./components/main-layout/main-layout.module */
      "RfXV");
      /* harmony import */


      var _containers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ./containers */
      "Zbv+");
      /* harmony import */


      var _docs_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ./docs.component */
      "tVw0");
      /* harmony import */


      var _docs_module_routes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! ./docs.module-routes */
      "jCoG");
      /* harmony import */


      var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! ./shared/documentation-items/documentation-items */
      "rMhK");

      var AppModule = function AppModule() {
        _classCallCheck(this, AppModule);
      };

      AppModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__["BrowserModule"], _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["BrowserAnimationsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClientModule"], _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_8__["ExampleModule"], _angular_router__WEBPACK_IMPORTED_MODULE_7__["RouterModule"].forRoot(_docs_module_routes__WEBPACK_IMPORTED_MODULE_13__["APP_ROUTES"], {
          scrollPositionRestoration: 'enabled',
          onSameUrlNavigation: 'reload',
          anchorScrolling: 'enabled'
        }), _containers__WEBPACK_IMPORTED_MODULE_11__["HomepageModule"], _components_component_viewer_component_viewer_module__WEBPACK_IMPORTED_MODULE_9__["ComponentViewerModule"], _components_main_layout_main_layout_module__WEBPACK_IMPORTED_MODULE_10__["MainLayoutModule"]],
        declarations: [_docs_component__WEBPACK_IMPORTED_MODULE_12__["DocsComponent"]],
        providers: [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_14__["DocumentationItems"], {
          provide: _angular_common__WEBPACK_IMPORTED_MODULE_1__["LocationStrategy"],
          useClass: _angular_common__WEBPACK_IMPORTED_MODULE_1__["PathLocationStrategy"]
        }],
        bootstrap: [_docs_component__WEBPACK_IMPORTED_MODULE_12__["DocsComponent"]]
      })], AppModule);
      /***/
    },

    /***/
    "gn63":
    /*!*********************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/shared/table-of-contents/table-of-contents.html ***!
      \*********************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function gn63(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div *ngIf=\"links?.length\" class=\"docs-toc-container\">\n    <div class=\"docs-toc-heading\">Contents</div>\n    <nav>\n        <a [href]=\"_rootUrl + '#' + link.id\"\n           *ngFor=\"let link of links; let i = index\"\n           class=\"docs-level-{{link.headerType}} docs-link\"\n           [class.docs-active]=\"link.active\">\n            {{link.name}}\n        </a>\n    </nav>\n</div>\n";
      /***/
    },

    /***/
    "hiYu":
    /*!*********************************************************************!*\
      !*** ./packages/docs/src/app/components/navbar/navbar.component.ts ***!
      \*********************************************************************/

    /*! exports provided: NavbarComponent */

    /***/
    function hiYu(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NavbarComponent", function () {
        return NavbarComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_navbar_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./navbar.template.html */
      "Ae4T");
      /* harmony import */


      var _navbar_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./navbar.scss */
      "jBFz");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _shared_version_version__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../shared/version/version */
      "S/AA");
      /* harmony import */


      var _navbar_property__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./navbar-property */
      "oBJt");
      /* harmony import */


      var _theme_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./theme.service */
      "toEk");

      var NavbarComponent = /*#__PURE__*/function () {
        function NavbarComponent(themeService) {
          var _this148 = this;

          _classCallCheck(this, NavbarComponent);

          this.themeService = themeService;
          this.mosaicVersion = _shared_version_version__WEBPACK_IMPORTED_MODULE_4__["mosaicVersion"]; // To add new version to dropdown add new object to the end of data array,
          // number of current version is taken from package.json, rest should be specified
          // run npm show @ptsecurity/mosaic versions --json to see all mosaic versions

          this.versionData = [{
            number: '8.1.0',
            date: '9 октября',
            selected: false,
            link: '//mosaic.ptsecurity.com'
          }, {
            number: '8.0.0',
            date: '9 октября',
            selected: false,
            link: '//v8.mosaic.ptsecurity.com'
          }]; // To add for checking of current color theme of OS preferences

          this.colorAutomaticTheme = window.matchMedia('(prefers-color-scheme: light)');
          this.activeColorProperty = {
            property: 'PT_color',
            data: [{
              code: '#2f80ed',
              className: 'active-blue',
              selected: true
            }, {
              code: '#832112',
              className: 'active-red',
              selected: false
            }, {
              code: '#07804e',
              className: 'active-green',
              selected: false
            }, {
              code: '#eaaf00',
              className: 'active-yellow',
              selected: false
            }],
            updateTemplate: true,
            updateSelected: true
          };
          this.languageProperty = {
            property: 'PT_language',
            data: ['Русский язык', 'Английский язык'],
            updateTemplate: false,
            updateSelected: false
          };
          this.themeProperty = {
            property: 'PT_theme',
            data: [{
              theme: 'auto',
              name: 'Автоматическое переключение',
              className: this.colorAutomaticTheme.matches ? 'theme-default' : 'theme-dark',
              selected: true
            }, {
              theme: 'default',
              name: 'Светлая тема',
              className: 'theme-default',
              selected: false
            }, {
              theme: 'dark',
              name: 'Темная тема',
              className: 'theme-dark',
              selected: false
            }],
            updateTemplate: true,
            updateSelected: true
          };
          this.setSelectedVersion();
          this.colorSwitch = new _navbar_property__WEBPACK_IMPORTED_MODULE_5__["NavbarProperty"](this.activeColorProperty);
          this.themeSwitch = new _navbar_property__WEBPACK_IMPORTED_MODULE_5__["NavbarProperty"](this.themeProperty);
          this.languageSwitch = new _navbar_property__WEBPACK_IMPORTED_MODULE_5__["NavbarProperty"](this.languageProperty);

          try {
            // Chrome & Firefox
            this.colorAutomaticTheme.addEventListener('change', function (e) {
              if (e.matches) {
                _this148.themeProperty.data[0].className = 'theme-default';
              } else {
                _this148.themeProperty.data[0].className = 'theme-dark';
              }
            });
          } catch (err) {
            try {
              // Safari
              this.colorAutomaticTheme.addListener(function (e) {
                if (e.matches) {
                  _this148.themeProperty.data[0].className = 'theme-default';
                } else {
                  _this148.themeProperty.data[0].className = 'theme-dark';
                }
              });
            } catch (errSafari) {
              // tslint:disable-next-line:no-console
              console.error(errSafari);
            }
          }
        }

        _createClass(NavbarComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this149 = this;

            this.themingSubscription = this.themeService.currentTheme.subscribe(function (theme) {
              if (_this149.themeSwitch.data[0].selected) {
                _this149.themeSwitch.data[0].className = theme;

                _this149.themeSwitch.setValue(0);
              }
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.themingSubscription.unsubscribe();
          }
        }, {
          key: "goToVersion",
          value: function goToVersion(i) {
            var link = this.versionData[i].link;

            if (!location.origin.match(link)) {
              location.href = "".concat(link).concat(location.pathname).concat(location.search).concat(location.hash);
            }

            this.versionSwitch.setValue(i);
          }
        }, {
          key: "setSelectedVersion",
          value: function setSelectedVersion() {
            var _this150 = this;

            /* Если мы находимся на последней версии - обновляем ее из package.json
            Если нет - последние версии предыдущих мажоров должны быть указаны в массиве*/
            if (location.origin.match(this.versionData[0].link)) {
              this.versionData[0].number = this.mosaicVersion;
              this.versionData[0].selected = true;
            } else {
              // Определяем выбранную версию
              this.versionData.forEach(function (version) {
                if (version.number === _this150.mosaicVersion) {
                  version.selected = true;
                }
              });
            }
          }
        }]);

        return NavbarComponent;
      }();

      NavbarComponent.ctorParameters = function () {
        return [{
          type: _theme_service__WEBPACK_IMPORTED_MODULE_6__["ThemeService"]
        }];
      };

      NavbarComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'navbar',
        template: _raw_loader_navbar_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_navbar_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_theme_service__WEBPACK_IMPORTED_MODULE_6__["ThemeService"]])], NavbarComponent);
      /***/
    },

    /***/
    "it0a":
    /*!**********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-button.js ***!
      \**********************************************************/

    /*! exports provided: McAnchor, McButton, McButtonBase, McButtonCssStyler, McButtonMixinBase, McButtonModule */

    /***/
    function it0a(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McAnchor", function () {
        return McAnchor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButton", function () {
        return McButton;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonBase", function () {
        return McButtonBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonCssStyler", function () {
        return McButtonCssStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonMixinBase", function () {
        return McButtonMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McButtonModule", function () {
        return McButtonModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /**
       * @fileoverview added by tsickle
       * Generated from: button.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McButtonCssStyler = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} renderer
         */
        function McButtonCssStyler(elementRef, renderer) {
          _classCallCheck(this, McButtonCssStyler);

          this.renderer = renderer;
          this.icons = [];
          this.nativeElement = elementRef.nativeElement;
        }
        /**
         * @return {?}
         */


        _createClass(McButtonCssStyler, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            /**
             * Here we had to use native selectors due to number of angular issues about ContentChildren limitations
             * https://github.com/angular/angular/issues/16299
             * https://github.com/angular/angular/issues/8563
             * https://github.com/angular/angular/issues/14769
             */
            this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));
            this.addClassModificatorForIcons();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "addClassModificatorForIcons",
          value: function addClassModificatorForIcons() {
            /** @type {?} */
            var twoIcons = 2;

            var _this$icons = _slicedToArray(this.icons, 2),
                firstIconElement = _this$icons[0],
                secondIconElement = _this$icons[1];

            if (this.icons.length === 1) {
              /** @type {?} */
              var COMMENT_NODE = 8;

              if (firstIconElement.nextSibling && firstIconElement.nextSibling.nodeType !== COMMENT_NODE) {
                this.renderer.addClass(firstIconElement, 'mc-icon_left');
                this.renderer.addClass(this.nativeElement, 'mc-icon-button_left');
              }

              if (firstIconElement.previousSibling && firstIconElement.previousSibling.nodeType !== COMMENT_NODE) {
                this.renderer.addClass(firstIconElement, 'mc-icon_right');
                this.renderer.addClass(this.nativeElement, 'mc-icon-button_right');
              }
            } else if (this.icons.length === twoIcons) {
              this.renderer.addClass(firstIconElement, 'mc-icon_left');
              this.renderer.addClass(secondIconElement, 'mc-icon_right');
            }
          }
        }, {
          key: "isIconButton",
          get: function get() {
            return this.icons.length > 0;
          }
        }]);

        return McButtonCssStyler;
      }();

      McButtonCssStyler.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'button[mc-button], a[mc-button]',
          host: {
            '[class.mc-button]': '!isIconButton',
            '[class.mc-icon-button]': 'isIconButton'
          }
        }]
      }];
      /** @nocollapse */

      McButtonCssStyler.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"]
        }];
      };

      if (false) {}

      var McButtonBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McButtonBase(_elementRef) {
        _classCallCheck(this, McButtonBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McButtonMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McButtonBase)));

      var McButton = /*#__PURE__*/function (_McButtonMixinBase) {
        _inherits(McButton, _McButtonMixinBase);

        var _super33 = _createSuper(McButton);

        /**
         * @param {?} elementRef
         * @param {?} _focusMonitor
         */
        function McButton(elementRef, _focusMonitor) {
          var _this151;

          _classCallCheck(this, McButton);

          _this151 = _super33.call(this, elementRef);
          _this151._focusMonitor = _focusMonitor;

          _this151._focusMonitor.monitor(_this151._elementRef.nativeElement, true);

          return _this151;
        }
        /**
         * @return {?}
         */


        _createClass(McButton, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.getHostElement().focus();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this._elementRef.nativeElement;
          }
        }]);

        return McButton;
      }(McButtonMixinBase);

      McButton.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'button[mc-button]',
          template: "<div class=\"mc-button-wrapper\">\n    <ng-content></ng-content>\n</div>\n<div class=\"mc-button-overlay\"></div>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          inputs: ['disabled', 'color'],
          host: {
            '[attr.disabled]': 'disabled || null'
          },
          styles: [".mc-button,.mc-icon-button,.mc-light-button{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;border:1px solid transparent;border-radius:3px;box-sizing:border-box;cursor:pointer;display:inline-block;margin:0;outline:none;position:relative;text-align:center;text-decoration:none;user-select:none;vertical-align:baseline;white-space:nowrap}.mc-button::-moz-focus-inner,.mc-icon-button::-moz-focus-inner,.mc-light-button::-moz-focus-inner{border:0}.mc-button:focus,.mc-icon-button:focus,.mc-light-button:focus{outline:none}.mc-button[disabled],.mc-icon-button[disabled],.mc-light-button[disabled]{cursor:default;pointer-events:none}.cdk-focused.mc-button,.cdk-focused.mc-icon-button,.cdk-focused.mc-light-button{z-index:1}.mc-button{padding:5px 15px}.mc-icon-button{padding:5px 7px}.mc-icon-button.mc-icon-button_left{padding-right:15px}.mc-icon-button.mc-icon-button_right{padding-left:15px}.mc-icon-button .mc-button-wrapper{display:flex}.mc-icon-button .mc-button-wrapper .mc-icon{line-height:20px;margin:auto}.mc-icon-button .mc-button-wrapper .mc-icon_left{margin-right:7px}.mc-icon-button .mc-button-wrapper .mc-icon_right{margin-left:7px}.mc-button-overlay{border-radius:inherit;bottom:-1px;left:-1px;pointer-events:none;position:absolute;right:-1px;top:-1px}"]
        }]
      }];
      /** @nocollapse */

      McButton.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }];
      };

      if (false) {}

      var McAnchor = /*#__PURE__*/function (_McButton) {
        _inherits(McAnchor, _McButton);

        var _super34 = _createSuper(McAnchor);

        /**
         * @param {?} focusMonitor
         * @param {?} elementRef
         */
        function McAnchor(focusMonitor, elementRef) {
          _classCallCheck(this, McAnchor);

          return _super34.call(this, elementRef, focusMonitor);
        }
        /**
         * @param {?} event
         * @return {?}
         */


        _createClass(McAnchor, [{
          key: "haltDisabledEvents",
          value: function haltDisabledEvents(event) {
            if (this.disabled) {
              event.preventDefault();
              event.stopImmediatePropagation();
            }
          }
        }]);

        return McAnchor;
      }(McButton);

      McAnchor.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'a[mc-button]',
          template: "<div class=\"mc-button-wrapper\">\n    <ng-content></ng-content>\n</div>\n<div class=\"mc-button-overlay\"></div>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          inputs: ['disabled', 'color', 'tabIndex'],
          host: {
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null',
            '(click)': 'haltDisabledEvents($event)'
          },
          styles: [".mc-button,.mc-icon-button,.mc-light-button{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;border:1px solid transparent;border-radius:3px;box-sizing:border-box;cursor:pointer;display:inline-block;margin:0;outline:none;position:relative;text-align:center;text-decoration:none;user-select:none;vertical-align:baseline;white-space:nowrap}.mc-button::-moz-focus-inner,.mc-icon-button::-moz-focus-inner,.mc-light-button::-moz-focus-inner{border:0}.mc-button:focus,.mc-icon-button:focus,.mc-light-button:focus{outline:none}.mc-button[disabled],.mc-icon-button[disabled],.mc-light-button[disabled]{cursor:default;pointer-events:none}.cdk-focused.mc-button,.cdk-focused.mc-icon-button,.cdk-focused.mc-light-button{z-index:1}.mc-button{padding:5px 15px}.mc-icon-button{padding:5px 7px}.mc-icon-button.mc-icon-button_left{padding-right:15px}.mc-icon-button.mc-icon-button_right{padding-left:15px}.mc-icon-button .mc-button-wrapper{display:flex}.mc-icon-button .mc-button-wrapper .mc-icon{line-height:20px;margin:auto}.mc-icon-button .mc-button-wrapper .mc-icon_left{margin-right:7px}.mc-icon-button .mc-button-wrapper .mc-icon_right{margin-left:7px}.mc-button-overlay{border-radius:inherit;bottom:-1px;left:-1px;pointer-events:none;position:absolute;right:-1px;top:-1px}"]
        }]
      }];
      /** @nocollapse */

      McAnchor.ctorParameters = function () {
        return [{
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: button.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McButtonModule = function McButtonModule() {
        _classCallCheck(this, McButtonModule);
      };

      McButtonModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]],
          exports: [McButton, McAnchor, McButtonCssStyler],
          declarations: [McButton, McAnchor, McButtonCssStyler]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-button.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-button.js.map

      /***/
    },

    /***/
    "iw/G":
    /*!***********************************************************************!*\
      !*** ./packages/docs/src/app/shared/example-viewer/example-viewer.ts ***!
      \***********************************************************************/

    /*! exports provided: ExampleViewer */

    /***/
    function iwG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExampleViewer", function () {
        return ExampleViewer;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_example_viewer_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./example-viewer.html */
      "kku+");
      /* harmony import */


      var _example_viewer_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./example-viewer.scss */
      "HEAX");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic-examples */
      "cF3b");
      /* harmony import */


      var _copier_copier_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../copier/copier.service */
      "bLap");
      /** Regular expression that matches a file name and its extension */


      var fileExtensionRegex = /(.*)\.(\w+)/;

      var ExampleViewer = /*#__PURE__*/function () {
        function ExampleViewer(copier, elementRef) {
          _classCallCheck(this, ExampleViewer);

          this.copier = copier;
          /** Whether the source for the example is being displayed. */

          this.isSourceShown = false;
          this.isSwitcherHidden = false;
          this.shadowHide = 'hljs-shadow_hidden';
          this.maxEditorLength = 15;
          this.lineNumbers = '';
          this.codeCopyDelay = 1000;
          this.codeCopySuccessClass = 'docs-example-source-copy_success';
          this.elementRef = elementRef;
        }
        /** String key of the currently displayed example. */


        _createClass(ExampleViewer, [{
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            if (!this.lineNumbers) {
              this.setLineNumbers();
            }
          }
        }, {
          key: "setLineNumbers",
          value: function setLineNumbers() {
            var exampleSource = this.elementRef.nativeElement.querySelector('.mc-tab-body__active .docs-example-source-viewer');

            if (exampleSource) {
              var text = exampleSource.textContent.match(/\n/g);
              var length = text ? text.length + 1 : 0;
              this.lineNumbers = '';

              for (var i = 1; i <= length; i++) {
                this.lineNumbers += "".concat(i, "\n");
              }

              this.isSwitcherHidden = length < this.maxEditorLength;
            }
          }
        }, {
          key: "toggleSourceView",
          value: function toggleSourceView() {
            this.isSourceShown = !this.isSourceShown;
          }
        }, {
          key: "getExampleTabNames",
          value: function getExampleTabNames() {
            return Object.keys(this.exampleTabs);
          }
        }, {
          key: "copyCode",
          value: function copyCode(event) {
            var _this152 = this;

            var code = this.elementRef.nativeElement.querySelector('.docs-example-source-viewer'); // event.target.parentNode.parentNode.select();

            var range = document.createRange();
            range.selectNodeContents(code);
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            document.execCommand('copy');
            sel.removeAllRanges();
            event.target.parentNode.classList.add(this.codeCopySuccessClass);
            setTimeout(function () {
              event.target.parentNode.classList.remove(_this152.codeCopySuccessClass);
            }, this.codeCopyDelay);
          }
        }, {
          key: "resolveHighlightedExampleFile",
          value: function resolveHighlightedExampleFile(fileName) {
            return "docs-content/examples-highlighted/".concat(fileName);
          }
        }, {
          key: "generateExampleTabs",
          value: function generateExampleTabs() {
            var _this153 = this;

            this.exampleTabs = {
              HTML: this.resolveHighlightedExampleFile("".concat(this.example, "-example-html.html")),
              TS: this.resolveHighlightedExampleFile("".concat(this.example, "-example-ts.html")),
              CSS: this.resolveHighlightedExampleFile("".concat(this.example, "-example-css.html"))
            };
            var additionalFiles = this.exampleData.additionalFiles || [];
            additionalFiles.forEach(function (fileName) {
              // Since the additional files refer to the original file name, we need to transform
              // the file name to match the highlighted HTML file that displays the source.
              var fileSourceName = fileName.replace(fileExtensionRegex, '$1-$2.html');
              _this153.exampleTabs[fileName] = _this153.resolveHighlightedExampleFile(fileSourceName);
            });
          }
        }, {
          key: "example",
          get: function get() {
            return this._example;
          },
          set: function set(exampleName) {
            if (exampleName && _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_5__["EXAMPLE_COMPONENTS"][exampleName]) {
              this._example = exampleName;
              this.exampleData = _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_5__["EXAMPLE_COMPONENTS"][exampleName];
              this.selectedPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](this.exampleData.component);
              this.generateExampleTabs();
            } else {
              // tslint:disable-next-line:no-console
              console.error("Could not find example: ".concat(exampleName));
            }
          }
        }]);

        return ExampleViewer;
      }();

      ExampleViewer.ctorParameters = function () {
        return [{
          type: _copier_copier_service__WEBPACK_IMPORTED_MODULE_6__["CopierService"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"],
            args: [_angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"]]
          }]
        }];
      };

      ExampleViewer.propDecorators = {
        example: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]
        }]
      };
      ExampleViewer = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'example-viewer',
        template: _raw_loader_example_viewer_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_example_viewer_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_copier_copier_service__WEBPACK_IMPORTED_MODULE_6__["CopierService"], _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"]])], ExampleViewer);
      /***/
    },

    /***/
    "jBFz":
    /*!*************************************************************!*\
      !*** ./packages/docs/src/app/components/navbar/navbar.scss ***!
      \*************************************************************/

    /*! exports provided: default */

    /***/
    function jBFz(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".docs-navbar-header {\n  display: flex;\n  align-items: center;\n  height: 64px;\n  padding: 16px 32px;\n}\n\n.docs-navbar-header .docs-navbar-logo {\n  display: flex;\n}\n\n.docs-navbar-header .docs-navbar-logo__img {\n  max-width: 100%;\n  width: 32px;\n  height: 32px;\n}\n\n.docs-navbar-header .docs-navbar-logo__title {\n  line-height: 32px;\n  font-size: 28px;\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n.docs-navbar-header .docs-navbar-dropdown {\n  min-width: 140px;\n}\n\n.docs-navbar-header .docs-navbar-dropdown_hidden {\n  visibility: hidden;\n}\n\n.docs-navbar-header .docs-navbar-dropdown__icon {\n  color: inherit;\n}\n\n.color-picker__icon {\n  font-size: 22px;\n}\n\n.color-picker__dropdown-content {\n  overflow: hidden;\n  display: flex;\n}\n\n.color-picker__dropdown-item {\n  padding: 5px 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.docs-navbar-version {\n  display: flex;\n  align-items: baseline;\n  margin-bottom: -5px;\n}\n\n.docs-navbar-version__number {\n  margin-left: 7px;\n}\n\n.docs-navbar-version__item {\n  display: flex;\n}\n\n.docs-navbar-version__num {\n  display: flex;\n  min-width: 50px;\n}\n\n.docs-navbar-version__date {\n  display: flex;\n  flex-grow: 1;\n  white-space: nowrap;\n}\n\n.docs-navbar-header_fixed {\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  z-index: 1000;\n}\n\n.color-picker .mc.mc-icon {\n  margin-right: 0;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL25hdmJhci9uYXZiYXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTtFQUNJLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsWUFQb0I7RUFRcEIsa0JBQWtCO0FBTHRCOztBQUNBO0VBT1EsYUFBYTtBQUpyQjs7QUFIQTtFQVVZLGVBQWU7RUFDZixXQUFXO0VBQ1gsWUFBWTtBQUh4Qjs7QUFUQTtFQWdCWSxpQkFBaUI7RUFDakIsZUFBZTtFQUVYLGlCQUFTO0VBQ1Qsa0JBQVU7QUFKMUI7O0FBaEJBO0VBMEJRLGdCQUFnQjtBQU54Qjs7QUFwQkE7RUE2Qlksa0JBQWtCO0FBTDlCOztBQXhCQTtFQWdDa0IsY0FBYztBQUpoQzs7QUFTSTtFQUNJLGVBekN3QjtBQW1DaEM7O0FBU0k7RUFDSSxnQkFBZ0I7RUFDaEIsYUFBWTtBQU5wQjs7QUFTSTtFQUNJLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQU4zQjs7QUFVQTtFQUNJLGFBQWE7RUFDYixxQkFBcUI7RUFDckIsbUJBQW1CO0FBUHZCOztBQVNJO0VBQVksZ0JBQWdCO0FBTGhDOztBQU9JO0VBQVUsYUFBYTtBQUgzQjs7QUFLSTtFQUNJLGFBQWE7RUFDYixlQUFlO0FBRnZCOztBQUtJO0VBQ0ksYUFBYTtFQUNiLFlBQVk7RUFDWixtQkFBbUI7QUFGM0I7O0FBTUE7RUFDSSxlQUFlO0VBQ2YsT0FBTztFQUNQLE1BQU07RUFDTixRQUFRO0VBQ1IsYUFBYTtBQUhqQjs7QUFNQTtFQUNJLGVBQWU7QUFIbkIiLCJmaWxlIjoicGFja2FnZXMvZG9jcy9zcmMvYXBwL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCBcIm5hdmJhci10aGVtZVwiO1xuXG4kZG9jLW5hdmJhci1oZWlnaHQ6IDY0cHg7XG4kZG9jLW5hdmJhci1pY29uLWZvbnQtc2l6ZTogMjJweDtcbiRkb2MtbmF2YmFyLXBhZGRpbmc6IDEwcHg7XG5cbi5kb2NzLW5hdmJhci1oZWFkZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBoZWlnaHQ6ICRkb2MtbmF2YmFyLWhlaWdodDtcbiAgICBwYWRkaW5nOiAxNnB4IDMycHg7XG5cbiAgICAuZG9jcy1uYXZiYXItbG9nbyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG5cbiAgICAgICAgJl9faW1nIHtcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgIHdpZHRoOiAzMnB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAzMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJl9fdGl0bGUge1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDMycHg7XG4gICAgICAgICAgICBmb250LXNpemU6IDI4cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgbGVmdDogOHB4O1xuICAgICAgICAgICAgICAgIHJpZ2h0OiA4cHg7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmRvY3MtbmF2YmFyLWRyb3Bkb3duIHtcbiAgICAgICAgbWluLXdpZHRoOiAxNDBweDtcblxuICAgICAgICAmX2hpZGRlbiB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgIH1cblxuICAgICAgICAmX19pY29uIHsgY29sb3I6IGluaGVyaXQ7IH1cbiAgICB9XG59XG5cbi5jb2xvci1waWNrZXIge1xuICAgICZfX2ljb24ge1xuICAgICAgICBmb250LXNpemU6ICRkb2MtbmF2YmFyLWljb24tZm9udC1zaXplO1xuICAgIH1cblxuICAgICZfX2Ryb3Bkb3duLWNvbnRlbnQge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBkaXNwbGF5OmZsZXg7XG4gICAgfVxuXG4gICAgJl9fZHJvcGRvd24taXRlbSB7XG4gICAgICAgIHBhZGRpbmc6IDVweCA1cHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbn1cblxuLmRvY3MtbmF2YmFyLXZlcnNpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgIG1hcmdpbi1ib3R0b206IC01cHg7XG5cbiAgICAmX19udW1iZXIgeyBtYXJnaW4tbGVmdDogN3B4OyB9XG5cbiAgICAmX19pdGVtIHsgZGlzcGxheTogZmxleDsgfVxuXG4gICAgJl9fbnVtIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgbWluLXdpZHRoOiA1MHB4O1xuICAgIH1cblxuICAgICZfX2RhdGUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgfVxufVxuXG4uZG9jcy1uYXZiYXItaGVhZGVyX2ZpeGVkIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgei1pbmRleDogMTAwMDtcbn1cblxuLmNvbG9yLXBpY2tlciAubWMubWMtaWNvbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xufVxuIl19 */";
      /***/
    },

    /***/
    "jCoG":
    /*!*****************************************************!*\
      !*** ./packages/docs/src/app/docs.module-routes.ts ***!
      \*****************************************************/

    /*! exports provided: APP_ROUTES */

    /***/
    function jCoG(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "APP_ROUTES", function () {
        return APP_ROUTES;
      });
      /* harmony import */


      var _components_component_viewer_component_viewer_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./components/component-viewer/component-viewer.component */
      "6uKg");
      /* harmony import */


      var _components_main_layout_main_layout_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./components/main-layout/main-layout.component */
      "0PwA");

      var APP_ROUTES = [{
        path: '',
        component: _components_main_layout_main_layout_component__WEBPACK_IMPORTED_MODULE_1__["MainLayoutComponent"],
        children: [{
          path: ':id',
          redirectTo: ':id',
          pathMatch: 'full'
        }, {
          path: ':id',
          component: _components_component_viewer_component_viewer_component__WEBPACK_IMPORTED_MODULE_0__["ComponentViewerComponent"],
          children: [{
            path: '',
            redirectTo: 'overview',
            pathMatch: 'full'
          }, {
            path: 'overview',
            component: _components_component_viewer_component_viewer_component__WEBPACK_IMPORTED_MODULE_0__["ComponentOverviewComponent"],
            pathMatch: 'full'
          }, {
            path: '**',
            redirectTo: 'overview'
          }]
        }]
      }, {
        path: '**',
        redirectTo: ''
      }];
      /***/
    },

    /***/
    "kGUy":
    /*!************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-dropdown.js ***!
      \************************************************************/

    /*! exports provided: MC_DROPDOWN_DEFAULT_OPTIONS, MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY, MC_DROPDOWN_PANEL, MC_DROPDOWN_SCROLL_STRATEGY, MC_DROPDOWN_SCROLL_STRATEGY_FACTORY, MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdown, McDropdownContent, McDropdownItem, McDropdownItemBase, McDropdownItemMixinBase, McDropdownModule, McDropdownTrigger, NESTED_PANEL_TOP_PADDING, fadeInItems, mcDropdownAnimations, throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY, throwMcDropdownMissingError, transformDropdown */

    /***/
    function kGUy(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_DEFAULT_OPTIONS", function () {
        return MC_DROPDOWN_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY", function () {
        return MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_PANEL", function () {
        return MC_DROPDOWN_PANEL;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_SCROLL_STRATEGY", function () {
        return MC_DROPDOWN_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_SCROLL_STRATEGY_FACTORY", function () {
        return MC_DROPDOWN_SCROLL_STRATEGY_FACTORY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
        return MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdown", function () {
        return McDropdown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdownContent", function () {
        return McDropdownContent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdownItem", function () {
        return McDropdownItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdownItemBase", function () {
        return McDropdownItemBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdownItemMixinBase", function () {
        return McDropdownItemMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdownModule", function () {
        return McDropdownModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McDropdownTrigger", function () {
        return McDropdownTrigger;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NESTED_PANEL_TOP_PADDING", function () {
        return NESTED_PANEL_TOP_PADDING;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fadeInItems", function () {
        return fadeInItems;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcDropdownAnimations", function () {
        return mcDropdownAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throwMcDropdownInvalidPositionX", function () {
        return throwMcDropdownInvalidPositionX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throwMcDropdownInvalidPositionY", function () {
        return throwMcDropdownInvalidPositionY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "throwMcDropdownMissingError", function () {
        return throwMcDropdownMissingError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "transformDropdown", function () {
        return transformDropdown;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-content.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Dropdown content that will be rendered lazily once the dropdown is opened.
       */


      var McDropdownContent = /*#__PURE__*/function () {
        /**
         * @param {?} _template
         * @param {?} _componentFactoryResolver
         * @param {?} _appRef
         * @param {?} _injector
         * @param {?} _viewContainerRef
         * @param {?} _document
         */
        function McDropdownContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {
          _classCallCheck(this, McDropdownContent);

          this._template = _template;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._appRef = _appRef;
          this._injector = _injector;
          this._viewContainerRef = _viewContainerRef;
          this._document = _document;
          /**
           * Emits when the dropdown content has been attached.
           */

          this.attached = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        }
        /**
         * Attaches the content with a particular context.
         * \@docs-private
         * @param {?=} context
         * @return {?}
         */


        _createClass(McDropdownContent, [{
          key: "attach",
          value: function attach() {
            var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (!this.portal) {
              this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["TemplatePortal"](this._template, this._viewContainerRef);
            }

            this.detach();

            if (!this.outlet) {
              this.outlet = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["DomPortalOutlet"](this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);
            }
            /** @type {?} */


            var element = this._template.elementRef.nativeElement; // Because we support opening the same dropdown from different triggers (which in turn have their
            // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we
            // risk it staying attached to a pane that's no longer in the DOM.

            /** @type {?} */
            element.parentNode.insertBefore(this.outlet.outletElement, element);
            this.portal.attach(this.outlet, context);
            this.attached.next();
          }
          /**
           * Detaches the content.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            if (this.portal.isAttached) {
              this.portal.detach();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.outlet) {
              this.outlet.dispose();
            }
          }
        }]);

        return McDropdownContent;
      }();

      McDropdownContent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'ng-template[mcDropdownContent]'
        }]
      }];
      /** @nocollapse */

      McDropdownContent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ComponentFactoryResolver"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ApplicationRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injector"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-panel.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token used to provide the parent dropdown to dropdown-specific components.
       * \@docs-private
       * @type {?}
       */


      var MC_DROPDOWN_PANEL = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MC_DROPDOWN_PANEL');
      /**
       * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.
       * \@docs-private
       * @record
       * @template T
       */

      function McDropdownPanel() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-item.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Boilerplate for applying mixins to McDropdownItem.

      /**
       * \@docs-private
       */


      var McDropdownItemBase = function McDropdownItemBase() {
        _classCallCheck(this, McDropdownItemBase);
      }; // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McDropdownItemMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["mixinDisabled"])(McDropdownItemBase));
      /**
       * This directive is intended to be used inside an mc-dropdown tag.
       * It exists mostly to set the role attribute.
       */

      var McDropdownItem = /*#__PURE__*/function (_McDropdownItemMixinB) {
        _inherits(McDropdownItem, _McDropdownItemMixinB);

        var _super35 = _createSuper(McDropdownItem);

        /**
         * @param {?} _elementRef
         * @param {?} _focusMonitor
         * @param {?} document
         * @param {?=} _parentDropdownPanel
         */
        function McDropdownItem(_elementRef, _focusMonitor, document, _parentDropdownPanel) {
          var _this154;

          _classCallCheck(this, McDropdownItem);

          _this154 = _super35.call(this);
          _this154._elementRef = _elementRef;
          _this154._focusMonitor = _focusMonitor;
          _this154.document = document;
          _this154._parentDropdownPanel = _parentDropdownPanel;
          /**
           * ARIA role for the dropdown item.
           */

          _this154.role = 'menuitem';
          /**
           * Stream that emits when the dropdown item is hovered.
           */

          _this154.hovered = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Whether the dropdown item is highlighted.
           */

          _this154.highlighted = false;
          /**
           * Whether the dropdown item acts as a trigger for a nested dropdown.
           */

          _this154.triggersNestedDropdown = false;

          if (_focusMonitor) {
            // Start monitoring the element so it gets the appropriate focused classes. We want
            // to show the focus style for dropdown items only when the focus was not caused by a
            // mouse or touch interaction.
            _focusMonitor.monitor(_this154._elementRef.nativeElement, false);
          }

          if (_parentDropdownPanel && _parentDropdownPanel.addItem) {
            _parentDropdownPanel.addItem(_assertThisInitialized(_this154));
          }

          return _this154;
        }
        /**
         * Focuses the dropdown item.
         * @param {?=} origin
         * @return {?}
         */


        _createClass(McDropdownItem, [{
          key: "focus",
          value: function focus() {
            var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';

            if (this._focusMonitor) {
              this._focusMonitor.focusVia(this.getHostElement(), origin);
            } else {
              this.getHostElement().focus();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._focusMonitor) {
              this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
            }

            if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {
              this._parentDropdownPanel.removeItem(this);
            }

            this.hovered.complete();
          }
          /**
           * Returns the host DOM element.
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this._elementRef.nativeElement;
          }
          /**
           * Prevents the default element actions if it is disabled.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "haltDisabledEvents",
          value: function haltDisabledEvents(event) {
            if (this.disabled) {
              event.preventDefault();
              event.stopPropagation();
            }
          }
          /**
           * Emits to the hover stream.
           * @return {?}
           */

        }, {
          key: "handleMouseEnter",
          value: function handleMouseEnter() {
            this.hovered.next(this);
          }
          /**
           * Gets the label to be used when determining whether the option should be focused.
           * @return {?}
           */

        }, {
          key: "getLabel",
          value: function getLabel() {
            /** @type {?} */
            var element = this.content.nativeElement; // tslint:disable-next-line:no-magic-numbers

            /** @type {?} */

            var textNodeType = this.document ? this.document.TEXT_NODE : 3;
            /** @type {?} */

            var output = '';

            if (element.childNodes) {
              /** @type {?} */
              var length = element.childNodes.length; // Go through all the top-level text nodes and extract their text.
              // We skip anything that's not a text node to prevent the text from
              // being thrown off by something like an icon.

              for (var i = 0; i < length; i++) {
                if (element.childNodes[i].nodeType === textNodeType) {
                  output += element.childNodes[i].textContent;
                }
              }
            }

            return output.trim();
          }
        }]);

        return McDropdownItem;
      }(McDropdownItemMixinBase);

      McDropdownItem.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-dropdown-item, [mc-dropdown-item]',
          exportAs: 'mcDropdownItem',
          inputs: ['disabled', 'tabIndex'],
          host: {
            "class": 'mc-dropdown__item',
            '[class.mc-dropdown__item_highlighted]': 'highlighted',
            '[class.mc-disabled]': 'disabled',
            '[attr.role]': 'role',
            '[attr.tabindex]': 'tabIndex',
            '(click)': 'haltDisabledEvents($event)',
            '(mouseenter)': 'handleMouseEnter()'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          template: "\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    "
        }]
      }];
      /** @nocollapse */

      McDropdownItem.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MC_DROPDOWN_PANEL]
          }]
        }];
      };

      McDropdownItem.propDecorators = {
        role: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        content: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['content', {
            "static": false
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance
       * \@docs-private
       * @return {?}
       */


      function throwMcDropdownMissingError() {
        throw Error("mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>");
      }
      /**
       * Throws an exception for the case when dropdown's x-position value isn't valid.
       * In other words, it doesn't match 'before' or 'after'.
       * \@docs-private
       * @return {?}
       */


      function throwMcDropdownInvalidPositionX() {
        throw Error("xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>");
      }
      /**
       * Throws an exception for the case when dropdown's y-position value isn't valid.
       * In other words, it doesn't match 'above' or 'below'.
       * \@docs-private
       * @return {?}
       */


      function throwMcDropdownInvalidPositionY() {
        throw Error("yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>");
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Animations used by the mc-dropdown component.
       * \@docs-private
       * @type {?}
       */


      var mcDropdownAnimations = {
        /**
         * This animation controls the dropdown panel's entry and exit from the page.
         *
         * When the dropdown panel is added to the DOM, it scales in and fades in its border.
         *
         * When the dropdown panel is removed from the DOM, it simply fades out after a brief
         * delay to display the ripple.
         */
        transformDropdown: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('transformDropdown', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0,
          transform: 'scale(0.8)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["group"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["query"])('.mc-dropdown__content', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('50ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1
        }))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('50ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          transform: 'scale(1)'
        }))])), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('50ms 25ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0
        })))]),

        /**
         * This animation fades in the background color and content of the dropdown panel
         * after its containing element is scaled in.
         */
        fadeInItems: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('fadeInItems', [// now. Remove next time we do breaking changes.
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 1
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => *', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
          opacity: 0
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])
      };
      /** @type {?} */

      var fadeInItems = mcDropdownAnimations.fadeInItems;
      /** @type {?} */

      var transformDropdown = mcDropdownAnimations.transformDropdown;
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Default `mc-dropdown` options that can be overridden.
       * @record
       */

      function McDropdownDefaultOptions() {}

      if (false) {}
      /**
       * Injection token to be used to override the default options for `mc-dropdown`.
       * @type {?}
       */


      var MC_DROPDOWN_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-dropdown-default-options', {
        providedIn: 'root',
        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY
      });
      /**
       * \@docs-private
       * @return {?}
       */
      // tslint:disable-next-line:naming-convention

      function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY() {
        return {
          overlapTriggerX: true,
          overlapTriggerY: false,
          xPosition: 'after',
          yPosition: 'below',
          backdropClass: 'cdk-overlay-transparent-backdrop',
          hasBackdrop: false
        };
      }

      var McDropdown = /*#__PURE__*/function () {
        /**
         * @param {?} _elementRef
         * @param {?} _ngZone
         * @param {?} _defaultOptions
         */
        function McDropdown(_elementRef, _ngZone, _defaultOptions) {
          _classCallCheck(this, McDropdown);

          this._elementRef = _elementRef;
          this._ngZone = _ngZone;
          this._defaultOptions = _defaultOptions;
          this._xPosition = this._defaultOptions.xPosition;
          this._yPosition = this._defaultOptions.yPosition;
          this._overlapTriggerX = this._defaultOptions.overlapTriggerX;
          this._overlapTriggerY = this._defaultOptions.overlapTriggerY;
          this._hasBackdrop = this._defaultOptions.hasBackdrop;
          /**
           * Config object to be passed into the dropdown's ngClass
           */

          this.classList = {};
          /**
           * Current state of the panel animation.
           */

          this.panelAnimationState = 'void';
          /**
           * Emits whenever an animation on the dropdown completes.
           */

          this.animationDone = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Class to be added to the backdrop element.
           */

          this.backdropClass = this._defaultOptions.backdropClass;
          /**
           * Event emitted when the dropdown is closed.
           */

          this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Dropdown items inside the current dropdown.
           */

          this.itemsArray = [];
          /**
           * Emits whenever the amount of dropdown items changes.
           */

          this.itemChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Subscription to tab events on the dropdown panel
           */

          this.tabSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        }
        /**
         * Position of the dropdown in the X axis.
         * @return {?}
         */


        _createClass(McDropdown, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.setPositionClasses();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this155 = this;

            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__["FocusKeyManager"](this.items).withWrap().withTypeAhead();
            this.tabSubscription = this.keyManager.tabOut.subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this155.closed.emit('tab');
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.tabSubscription.unsubscribe();
            this.closed.complete();
          }
          /**
           * Stream that emits whenever the hovered dropdown item changes.
           * @return {?}
           */

        }, {
          key: "hovered",
          value: function hovered() {
            return this.itemChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["startWith"])(this.itemsArray), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["switchMap"])(
            /**
            * @param {?} items
            * @return {?}
            */
            function (items) {
              return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, _toConsumableArray(items.map(
              /**
              * @param {?} item
              * @return {?}
              */
              function (item) {
                return item.hovered;
              })));
            }));
          }
          /**
           * Handle a keyboard event from the dropdown, delegating to the appropriate action.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            // tslint:disable-next-line:deprecation

            /** @type {?} */
            var keyCode = event.keyCode;

            switch (keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"]:
                this.closed.emit('keydown');
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"]:
                if (this.parent && this.direction === 'ltr') {
                  this.closed.emit('keydown');
                }

                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"]:
                if (this.parent && this.direction === 'rtl') {
                  this.closed.emit('keydown');
                }

                break;

              default:
                if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"]) {
                  this.keyManager.setFocusOrigin('keyboard');
                }

                this.keyManager.onKeydown(event);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick() {
            this.closed.emit('click');
          }
          /**
           * Focus the first item in the dropdown.
           * @param {?=} origin Action from which the focus originated. Used to set the correct styling.
           * @return {?}
           */

        }, {
          key: "focusFirstItem",
          value: function focusFirstItem() {
            var _this156 = this;

            var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';

            // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
            if (this.lazyContent) {
              this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1)).subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this156.keyManager.setFocusOrigin(origin).setFirstItemActive();
              });
            } else {
              this.keyManager.setFocusOrigin(origin).setFirstItemActive();
            }
          }
          /**
           * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing
           * the user to start from the first option when pressing the down arrow.
           * @return {?}
           */

        }, {
          key: "resetActiveItem",
          value: function resetActiveItem() {
            this.keyManager.setActiveItem(-1);
          }
          /**
           * Registers a dropdown item with the dropdown.
           * \@docs-private
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "addItem",
          value: function addItem(item) {
            // We register the items through this method, rather than picking them up through
            // `ContentChildren`, because we need the items to be picked up by their closest
            // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,
            // all descendant items will bleed into the top-level dropdown in the case where the consumer
            // has `mc-dropdown` instances nested inside each other.
            if (this.itemsArray.indexOf(item) === -1) {
              this.itemsArray.push(item);
              this.itemChanges.next(this.itemsArray);
            }
          }
          /**
           * Removes an item from the dropdown.
           * \@docs-private
           * @param {?} item
           * @return {?}
           */

        }, {
          key: "removeItem",
          value: function removeItem(item) {
            /** @type {?} */
            var index = this.itemsArray.indexOf(item);

            if (this.itemsArray.indexOf(item) > -1) {
              this.itemsArray.splice(index, 1);
              this.itemChanges.next(this.itemsArray);
            }
          }
          /**
           * Adds classes to the dropdown panel based on its position. Can be used by
           * consumers to add specific styling based on the position.
           * \@docs-private
           * @param {?=} posX Position of the dropdown along the x axis.
           * @param {?=} posY Position of the dropdown along the y axis.
           * @return {?}
           */

        }, {
          key: "setPositionClasses",
          value: function setPositionClasses() {
            var posX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.xPosition;
            var posY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.yPosition;

            /** @type {?} */
            var classes = this.classList;
            classes['mc-dropdown-before'] = posX === 'before';
            classes['mc-dropdown-after'] = posX === 'after';
            classes['mc-dropdown-above'] = posY === 'above';
            classes['mc-dropdown-below'] = posY === 'below';
          }
          /**
           * Starts the enter animation.
           * @return {?}
           */

        }, {
          key: "startAnimation",
          value: function startAnimation() {
            this.panelAnimationState = 'enter';
          }
          /**
           * Resets the panel animation to its initial state.
           * @return {?}
           */

        }, {
          key: "resetAnimation",
          value: function resetAnimation() {
            this.panelAnimationState = 'void';
          }
          /**
           * Callback that is invoked when the panel animation completes.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onAnimationDone",
          value: function onAnimationDone(event) {
            this.animationDone.next(event);
            this.isAnimating = false;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onAnimationStart",
          value: function onAnimationStart(event) {
            this.isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,
            // because we move focus to the first item while it's still being animated, which can throw
            // the browser off when it determines the scroll position. Alternatively we can move focus
            // when the animation is done, however moving focus asynchronously will interrupt screen
            // readers which are in the process of reading out the dropdown already. We take the `element`
            // from the `event` since we can't use a `ViewChild` to access the pane.

            if (event.toState === 'enter' && this.keyManager.activeItemIndex === 0) {
              event.element.scrollTop = 0;
            }
          }
        }, {
          key: "xPosition",
          get: function get() {
            return this._xPosition;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== 'before' && value !== 'after') {
              throwMcDropdownInvalidPositionX();
            }

            this._xPosition = value;
            this.setPositionClasses();
          }
          /**
           * Position of the dropdown in the Y axis.
           * @return {?}
           */

        }, {
          key: "yPosition",
          get: function get() {
            return this._yPosition;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== 'above' && value !== 'below') {
              throwMcDropdownInvalidPositionY();
            }

            this._yPosition = value;
            this.setPositionClasses();
          }
          /**
           * Whether the dropdown should overlap its trigger vertically.
           * @return {?}
           */

        }, {
          key: "overlapTriggerY",
          get: function get() {
            return this._overlapTriggerY;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._overlapTriggerY = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether the dropdown should overlap its trigger horizontally.
           * @return {?}
           */

        }, {
          key: "overlapTriggerX",
          get: function get() {
            return this._overlapTriggerX;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._overlapTriggerX = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
          }
          /**
           * Whether the dropdown has a backdrop.
           * @return {?}
           */

        }, {
          key: "hasBackdrop",
          get: function get() {
            return this._hasBackdrop;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
          }
          /**
           * This method takes classes set on the host mc-dropdown element and applies them on the
           * dropdown template that displays in the overlay container.  Otherwise, it's difficult
           * to style the containing dropdown from outside the component.
           * @param {?} classes list of class names
           * @return {?}
           */

        }, {
          key: "panelClass",
          set: function set(classes) {
            var _this157 = this;

            /** @type {?} */
            var previousPanelClass = this.previousPanelClass;

            if (previousPanelClass && previousPanelClass.length) {
              previousPanelClass.split(' ').forEach(
              /**
              * @param {?} className
              * @return {?}
              */
              function (className) {
                _this157.classList[className] = false;
              });
            }

            this.previousPanelClass = classes;

            if (classes && classes.length) {
              classes.split(' ').forEach(
              /**
              * @param {?} className
              * @return {?}
              */
              function (className) {
                _this157.classList[className] = true;
              });
              this._elementRef.nativeElement.className = '';
            }
          }
        }]);

        return McDropdown;
      }();

      McDropdown.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-dropdown',
          exportAs: 'mcDropdown',
          template: "<ng-template>\n    <div\n        class=\"mc-dropdown__panel\"\n        [ngClass]=\"classList\"\n        (keydown)=\"handleKeydown($event)\"\n        (click)=\"handleClick()\"\n        [@transformDropdown]=\"panelAnimationState\"\n        (@transformDropdown.start)=\"onAnimationStart($event)\"\n        (@transformDropdown.done)=\"onAnimationDone($event)\"\n        role=\"dropdown\">\n        <div class=\"mc-dropdown__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          animations: [mcDropdownAnimations.transformDropdown, mcDropdownAnimations.fadeInItems],
          providers: [{
            provide: MC_DROPDOWN_PANEL,
            useExisting: McDropdown
          }],
          styles: [".mc-dropdown__item{align-items:center;border:1px solid transparent;box-sizing:border-box;display:flex;outline:none;padding:5px 15px;position:relative;text-align:left;white-space:nowrap;width:100%}.mc-dropdown__item:not([disabled]):not(.mc-disabled){cursor:pointer}.mc-dropdown__item .mc-dropdown__item-caption{margin-top:4px}.mc-dropdown__trigger{margin-left:auto;padding-left:16px}.mc-dropdown__panel{border-bottom-left-radius:3px;border-bottom-right-radius:3px;border-style:solid;border-width:1px;margin-top:-1px;min-width:100%;overflow:auto;padding:4px 0}.mc-dropdown__content h1,.mc-dropdown__content h2,.mc-dropdown__content h3,.mc-dropdown__content h4,.mc-dropdown__content h5{margin:0;padding:8px 16px 4px}"]
        }]
      }];
      /** @nocollapse */

      McDropdown.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MC_DROPDOWN_DEFAULT_OPTIONS]
          }]
        }];
      };

      McDropdown.propDecorators = {
        xPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        yPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        overlapTriggerY: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        overlapTriggerX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        hasBackdrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        panelClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['class']
        }],
        backdropClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        templateRef: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"], {
            "static": false
          }]
        }],
        items: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [McDropdownItem]
        }],
        lazyContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"],
          args: [McDropdownContent, {
            "static": false
          }]
        }],
        closed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-trigger.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that determines the scroll handling while the dropdown is open.
       * @type {?}
       */


      var MC_DROPDOWN_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-dropdown-scroll-strategy');
      /**
       * \@docs-private
       * @param {?} overlay
       * @return {?}
       */
      // tslint:disable-next-line:naming-convention

      function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition();
          }
        );
      }
      /**
       * \@docs-private
       * @type {?}
       */


      var MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MC_DROPDOWN_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]],
        useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY
      };
      /**
       * Default top padding of the nested dropdown panel.
       * @type {?}
       */

      var NESTED_PANEL_TOP_PADDING = 2;
      /**
       * Options for binding a passive event listener.
       * @type {?}
       */

      var passiveEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["normalizePassiveListenerOptions"])({
        passive: true
      });
      /**
       * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is
       * responsible for toggling the display of the provided dropdown instance.
       */

      var McDropdownTrigger = /*#__PURE__*/function () {
        /**
         * @param {?} _overlay
         * @param {?} _element
         * @param {?} _viewContainerRef
         * @param {?} _scrollStrategy
         * @param {?} _parent
         * @param {?} _dropdownItemInstance
         * @param {?} _dir
         * @param {?=} _focusMonitor
         */
        function McDropdownTrigger(_overlay, _element, _viewContainerRef, _scrollStrategy, _parent, _dropdownItemInstance, _dir, _focusMonitor) {
          var _this158 = this;

          _classCallCheck(this, McDropdownTrigger);

          this._overlay = _overlay;
          this._element = _element;
          this._viewContainerRef = _viewContainerRef;
          this._scrollStrategy = _scrollStrategy;
          this._parent = _parent;
          this._dropdownItemInstance = _dropdownItemInstance;
          this._dir = _dir;
          this._focusMonitor = _focusMonitor; // Tracking input type is necessary so it's possible to only auto-focus
          // the first item of the list when the dropdown is opened via the keyboard

          this.openedBy = null;
          /**
           * Event emitted when the associated dropdown is opened.
           */

          this.dropdownOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Event emitted when the associated dropdown is closed.
           */

          this.dropdownClosed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this._opened = false;
          this.overlayRef = null;
          this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          this.hoverSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /**
           * Handles touch start events on the trigger.
           * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.
           */

          this.handleTouchStart =
          /**
          * @return {?}
          */
          function () {
            return _this158.openedBy = 'touch';
          };

          _element.nativeElement.addEventListener('touchstart', this.handleTouchStart, passiveEventListenerOptions);

          if (_dropdownItemInstance) {
            _dropdownItemInstance.triggersNestedDropdown = this.triggersNestedDropdown();
          }
        }
        /**
         * The text direction of the containing app.
         * @return {?}
         */


        _createClass(McDropdownTrigger, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.check();
            this.handleHover();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.overlayRef) {
              this.overlayRef.dispose();
              this.overlayRef = null;
            }

            this._element.nativeElement.removeEventListener('touchstart', this.handleTouchStart, passiveEventListenerOptions);

            this.cleanUpSubscriptions();
            this.closeSubscription.unsubscribe();
          }
          /**
           * Whether the dropdown triggers a nested dropdown or a top-level one.
           * @return {?}
           */

        }, {
          key: "triggersNestedDropdown",
          value: function triggersNestedDropdown() {
            return !!(this._dropdownItemInstance && this._parent);
          }
          /**
           * Toggles the dropdown between the open and closed states.
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            // tslint:disable-next-line:no-void-expression
            return this._opened ? this.close() : this.open();
          }
          /**
           * Opens the dropdown.
           * @return {?}
           */

        }, {
          key: "open",
          value: function open() {
            var _this159 = this;

            if (this._opened) {
              return;
            }

            this.check();
            /** @type {?} */

            var overlayRef = this.createOverlay();
            /** @type {?} */

            var overlayConfig = overlayRef.getConfig();
            this.setPosition(
            /** @type {?} */
            overlayConfig.positionStrategy);
            overlayConfig.hasBackdrop = this.dropdown.hasBackdrop ? !this.triggersNestedDropdown() : this.dropdown.hasBackdrop;
            overlayRef.attach(this.getPortal());

            if (this.dropdown.lazyContent) {
              this.dropdown.lazyContent.attach(this.data);
            }

            this.closeSubscription = this.closingActions().subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this159.close();
            });
            this.init();

            if (this.dropdown instanceof McDropdown) {
              this.dropdown.startAnimation();
            }
          }
          /**
           * Closes the dropdown.
           * @return {?}
           */

        }, {
          key: "close",
          value: function close() {
            this.dropdown.closed.emit();
          }
          /**
           * Focuses the dropdown trigger.
           * @param {?=} origin Source of the dropdown trigger's focus.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';

            if (this._focusMonitor) {
              this._focusMonitor.focusVia(this._element.nativeElement, origin);
            } else {
              this._element.nativeElement.focus();
            }
          }
          /**
           * Handles mouse presses on the trigger.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleMousedown",
          value: function handleMousedown(event) {
            // Since right or middle button clicks won't trigger the `click` event,
            // we shouldn't consider the dropdown as opened by mouse in those cases.
            this.openedBy = event.button === 0 ? 'mouse' : null; // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,
            // we should prevent focus from moving onto it via click to avoid the
            // highlight from lingering on the dropdown item.

            if (this.triggersNestedDropdown()) {
              event.preventDefault();
            }
          }
          /**
           * Handles key presses on the trigger.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(event) {
            // tslint:disable-next-line:deprecation

            /** @type {?} */
            var keyCode = event.key || event.keyCode;

            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"]) {
              this.open();
            }

            if (this.triggersNestedDropdown() && (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"] && this.dir === 'ltr' || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"] && this.dir === 'rtl')) {
              this.open();
            }
          }
          /**
           * Handles click events on the trigger.
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick(event) {
            if (this.triggersNestedDropdown()) {
              // Stop event propagation to avoid closing the parent dropdown.
              event.stopPropagation();
              this.open();
            } else {
              this.toggle();
            }
          }
          /**
           * Closes the dropdown and does the necessary cleanup.
           * @private
           * @return {?}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var _this160 = this;

            if (!this.overlayRef || !this.opened) {
              return;
            }
            /** @type {?} */


            var dropdown = this.dropdown;
            this.closeSubscription.unsubscribe();
            this.overlayRef.detach();

            if (dropdown instanceof McDropdown) {
              dropdown.resetAnimation();

              if (dropdown.lazyContent) {
                // Wait for the exit animation to finish before detaching the content.
                dropdown.animationDone.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(
                /**
                * @param {?} event
                * @return {?}
                */
                function (event) {
                  return event.toState === 'void';
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1), // Interrupt if the content got re-attached.
                Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["takeUntil"])(dropdown.lazyContent.attached)).subscribe({
                  next:
                  /**
                  * @return {?}
                  */
                  function next() {
                    return dropdown.lazyContent.detach();
                  },
                  error: undefined,
                  complete:
                  /**
                  * @return {?}
                  */
                  function complete() {
                    // No matter whether the content got re-attached, reset the dropdown.
                    _this160.reset();
                  }
                });
              } else {
                this.reset();
              }
            } else {
              this.reset();

              if (dropdown.lazyContent) {
                dropdown.lazyContent.detach();
              }
            }
          }
          /**
           * This method sets the dropdown state to open and focuses the first item if
           * the dropdown was opened via the keyboard.
           * @private
           * @return {?}
           */

        }, {
          key: "init",
          value: function init() {
            this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;
            this.dropdown.direction = this.dir;
            this.setIsOpened(true);
            this.dropdown.focusFirstItem(this.openedBy || 'program');
          }
          /**
           * This method resets the dropdown when it's closed, most importantly restoring
           * focus to the dropdown trigger if the dropdown was opened via the keyboard.
           * @private
           * @return {?}
           */

        }, {
          key: "reset",
          value: function reset() {
            this.setIsOpened(false); // We should reset focus if the user is navigating using a keyboard or
            // if we have a top-level trigger which might cause focus to be lost
            // when clicking on the backdrop.

            if (!this.openedBy) {
              // Note that the focus style will show up both for `program` and
              // `keyboard` so we don't have to specify which one it is.
              this.focus();
            } else if (!this.triggersNestedDropdown()) {
              this.focus(this.openedBy);
            }

            this.openedBy = null;
          } // set state rather than toggle to support triggers sharing a dropdown

          /**
           * @private
           * @param {?} isOpen
           * @return {?}
           */

        }, {
          key: "setIsOpened",
          value: function setIsOpened(isOpen) {
            this._opened = isOpen; // tslint:disable-next-line:no-void-expression

            this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();

            if (this.triggersNestedDropdown()) {
              this._dropdownItemInstance.highlighted = isOpen;
            }
          }
          /**
           * This method checks that a valid instance of McDropdown has been passed into
           * mcDropdownTriggerFor. If not, an exception is thrown.
           * @private
           * @return {?}
           */

        }, {
          key: "check",
          value: function check() {
            if (!this.dropdown) {
              throwMcDropdownMissingError();
            }
          }
          /**
           * This method creates the overlay from the provided dropdown's template and saves its
           * OverlayRef so that it can be attached to the DOM when open is called.
           * @private
           * @return {?}
           */

        }, {
          key: "createOverlay",
          value: function createOverlay() {
            if (!this.overlayRef) {
              /** @type {?} */
              var config = this.getOverlayConfig();
              this.subscribeToPositions(
              /** @type {?} */
              config.positionStrategy);
              this.overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.
              // Ideally we'd also have our keyboard event logic in here, however doing so will
              // break anybody that may have implemented the `McDropdownPanel` themselves.

              this.overlayRef.keydownEvents().subscribe();
            }

            return this.overlayRef;
          }
          /**
           * This method builds the configuration object needed to create the overlay, the OverlayState.
           * @private
           * @return {?} OverlayConfig
           */

        }, {
          key: "getOverlayConfig",
          value: function getOverlayConfig() {
            return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayConfig"]({
              positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withTransformOriginOn('.mc-dropdown__panel'),
              backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',
              scrollStrategy: this._scrollStrategy(),
              direction: this._dir
            });
          }
          /**
           * Listens to changes in the position of the overlay and sets the correct classes
           * on the dropdown based on the new position. This ensures the animation origin is always
           * correct, even if a fallback position is used for the overlay.
           * @private
           * @param {?} position
           * @return {?}
           */

        }, {
          key: "subscribeToPositions",
          value: function subscribeToPositions(position) {
            var _this161 = this;

            if (this.dropdown.setPositionClasses) {
              position.positionChanges.subscribe(
              /**
              * @param {?} change
              * @return {?}
              */
              function (change) {
                /** @type {?} */
                var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                /** @type {?} */

                var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';

                /** @type {?} */
                _this161.dropdown.setPositionClasses(posX, posY);
              });
            }
          }
          /**
           * Sets the appropriate positions on a position strategy
           * so the overlay connects with the trigger correctly.
           * @private
           * @param {?} positionStrategy Strategy whose position to update.
           * @return {?}
           */

        }, {
          key: "setPosition",
          value: function setPosition(positionStrategy) {
            var _ref = this.dropdown.xPosition === 'before' ? ['end', 'start', 'end', 'start'] : ['start', 'end', 'start', 'end'],
                _ref2 = _slicedToArray(_ref, 4),
                originX = _ref2[0],
                originFallbackX = _ref2[1],
                overlayX = _ref2[2],
                overlayFallbackX = _ref2[3]; // tslint:disable-next-line:prefer-const


            var _ref3 = this.dropdown.yPosition === 'above' ? ['bottom', 'top', 'bottom', 'top'] : ['top', 'bottom', 'top', 'bottom'],
                _ref4 = _slicedToArray(_ref3, 4),
                overlayY = _ref4[0],
                overlayFallbackY = _ref4[1],
                originY = _ref4[2],
                originFallbackY = _ref4[3];
            /** @type {?} */


            var offsetY = 0;

            if (this.triggersNestedDropdown()) {
              // When the dropdown is nested, it should always align itself
              // to the edges of the trigger, instead of overlapping it.
              overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';
              originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
              offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;
            } else {
              if (!this.dropdown.overlapTriggerY) {
                originY = overlayY === 'top' ? 'bottom' : 'top';
                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
              }

              if (!this.dropdown.overlapTriggerX) {
                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';
                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
              }
            }

            positionStrategy.withPositions([{
              originX: originX,
              originY: originY,
              overlayX: overlayX,
              overlayY: overlayY,
              offsetY: offsetY
            }, {
              originX: originFallbackX,
              originY: originY,
              overlayX: overlayFallbackX,
              overlayY: overlayY,
              offsetY: offsetY
            }, {
              originX: originX,
              originY: originFallbackY,
              overlayX: overlayX,
              overlayY: overlayFallbackY,
              offsetY: -offsetY
            }, {
              originX: originFallbackX,
              originY: originFallbackY,
              overlayX: overlayFallbackX,
              overlayY: overlayFallbackY,
              offsetY: -offsetY
            }]);
          }
          /**
           * Cleans up the active subscriptions.
           * @private
           * @return {?}
           */

        }, {
          key: "cleanUpSubscriptions",
          value: function cleanUpSubscriptions() {
            this.closeSubscription.unsubscribe();
            this.hoverSubscription.unsubscribe();
          }
          /**
           * Returns a stream that emits whenever an action that should close the dropdown occurs.
           * @private
           * @return {?}
           */

        }, {
          key: "closingActions",
          value: function closingActions() {
            var _this162 = this;

            /** @type {?} */
            var backdrop =
            /** @type {?} */
            this.overlayRef.backdropClick();
            /** @type {?} */

            var outsidePointerEvents =
            /** @type {?} */
            this.overlayRef.outsidePointerEvents();
            /** @type {?} */

            var detachments =
            /** @type {?} */
            this.overlayRef.detachments();
            /** @type {?} */

            var parentClose = this._parent ? this._parent.closed : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])();
            /** @type {?} */

            var hover = this._parent ? this._parent.hovered().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(
            /**
            * @param {?} active
            * @return {?}
            */
            function (active) {
              return active !== _this162._dropdownItemInstance;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(
            /**
            * @return {?}
            */
            function () {
              return _this162._opened;
            })) : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])();
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(backdrop, outsidePointerEvents, parentClose, hover, detachments);
          }
          /**
           * Handles the cases where the user hovers over the trigger.
           * @private
           * @return {?}
           */

        }, {
          key: "handleHover",
          value: function handleHover() {
            var _this163 = this;

            // Subscribe to changes in the hovered item in order to toggle the panel.
            if (!this.triggersNestedDropdown()) {
              return;
            }

            this.hoverSubscription = this._parent.hovered() // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown
            // with different data and triggers), we have to delay it by a tick to ensure that
            // it won't be closed immediately after it is opened.
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(
            /**
            * @param {?} active
            * @return {?}
            */
            function (active) {
              return active === _this163._dropdownItemInstance && !active.disabled;
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_5__["asapScheduler"])).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this163.openedBy = 'mouse'; // If the same dropdown is used between multiple triggers, it might still be animating
              // while the new trigger tries to re-open it. Wait for the animation to finish
              // before doing so. Also interrupt if the user moves to another item.

              if (_this163.dropdown instanceof McDropdown && _this163.dropdown.isAnimating) {
                // We need the `delay(0)` here in order to avoid
                // 'changed after checked' errors in some cases. See #12194.
                _this163.dropdown.animationDone.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_5__["asapScheduler"]), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["takeUntil"])(_this163._parent.hovered())).subscribe(
                /**
                * @return {?}
                */
                function () {
                  return _this163.open();
                });
              } else {
                _this163.open();
              }
            });
          }
          /**
           * Gets the portal that should be attached to the overlay.
           * @private
           * @return {?}
           */

        }, {
          key: "getPortal",
          value: function getPortal() {
            // Note that we can avoid this check by keeping the portal on the dropdown panel.
            // While it would be cleaner, we'd have to introduce another required method on
            // `McDropdownPanel`, making it harder to consume.
            if (!this.portal || this.portal.templateRef !== this.dropdown.templateRef) {
              this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["TemplatePortal"](this.dropdown.templateRef, this._viewContainerRef);
            }

            return this.portal;
          }
        }, {
          key: "dir",
          get: function get() {
            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
          }
          /**
           * References the dropdown instance that the trigger is associated with.
           * @return {?}
           */

        }, {
          key: "dropdown",
          get: function get() {
            return this._dropdown;
          }
          /**
           * @param {?} dropdown
           * @return {?}
           */
          ,
          set: function set(dropdown) {
            var _this164 = this;

            if (dropdown === this._dropdown) {
              return;
            }

            this._dropdown = dropdown;
            this.closeSubscription.unsubscribe();

            if (dropdown) {
              this.closeSubscription = dropdown.closed.asObservable().subscribe(
              /**
              * @param {?} reason
              * @return {?}
              */
              function (reason) {
                _this164.destroy(); // If a click closed the dropdown, we should close the entire chain of nested dropdowns.


                if ((reason === 'click' || reason === 'tab') && _this164._parent) {
                  _this164._parent.closed.emit(reason);
                }
              });
            }
          }
          /**
           * Whether the dropdown is open.
           * @return {?}
           */

        }, {
          key: "opened",
          get: function get() {
            return this._opened;
          }
        }]);

        return McDropdownTrigger;
      }();

      McDropdownTrigger.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: "[mcDropdownTriggerFor]",
          host: {
            'aria-haspopup': 'true',
            '[attr.aria-expanded]': 'opened || null',
            '(mousedown)': 'handleMousedown($event)',
            '(keydown)': 'handleKeydown($event)',
            '(click)': 'handleClick($event)'
          },
          exportAs: 'mcDropdownTrigger'
        }]
      }];
      /** @nocollapse */

      McDropdownTrigger.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MC_DROPDOWN_SCROLL_STRATEGY]
          }]
        }, {
          type: McDropdown,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: McDropdownItem,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"]
        }];
      };

      McDropdownTrigger.propDecorators = {
        dropdown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcDropdownTriggerFor']
        }],
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
          args: ['mcDropdownTriggerData']
        }],
        dropdownOpened: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        dropdownClosed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McDropdownModule = function McDropdownModule() {
        _classCallCheck(this, McDropdownModule);
      };

      McDropdownModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_3__["McIconModule"]],
          exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],
          declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],
          providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: dropdown-positions.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-dropdown.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-dropdown.js.map

      /***/
    },

    /***/
    "kOpU":
    /*!*******************************************************************************!*\
      !*** ./packages/docs/src/app/shared/table-of-contents/table-of-contents.scss ***!
      \*******************************************************************************/

    /*! exports provided: default */

    /***/
    function kOpU(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ":host {\n  font-size: 13px;\n  width: 19%;\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0;\n  padding-left: 25px;\n  box-sizing: border-box;\n  display: inline-flex;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9zaGFyZWQvdGFibGUtb2YtY29udGVudHMvdGFibGUtb2YtY29udGVudHMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGVBQWU7RUFFZixVQUFVO0VBQ1Ysd0JBQWdCO0VBQWhCLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixvQkFBb0I7QUFBeEIiLCJmaWxlIjoicGFja2FnZXMvZG9jcy9zcmMvYXBwL3NoYXJlZC90YWJsZS1vZi1jb250ZW50cy90YWJsZS1vZi1jb250ZW50cy5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAvLyBXaWR0aCBpcyBjb250YWluZXIgd2lkdGggbWludXMgY29udGVudCB3aWR0aFxuICAgIHdpZHRoOiAxOSU7XG4gICAgcG9zaXRpb246IHN0aWNreTtcbiAgICB0b3A6IDA7XG4gICAgcGFkZGluZy1sZWZ0OiAyNXB4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG4iXX0= */";
      /***/
    },

    /***/
    "kY4w":
    /*!***************************************************************!*\
      !*** ./packages/docs/src/app/components/sidenav/sidenav.scss ***!
      \***************************************************************/

    /*! exports provided: default */

    /***/
    function kY4w(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".nav {\n  position: fixed;\n  top: 64px;\n  bottom: 0;\n  z-index: 101;\n  overflow: hidden;\n  overflow-y: auto;\n  max-height: 100%;\n  width: 300px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n.nav__wrapper {\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.nav__trigger {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  font-size: 17px;\n  text-align: left;\n  border: none;\n  background: none;\n  padding: 14px 32px 6px 32px;\n}\n\n.nav__trigger .nav__trigger-icon {\n  transition: transform 225ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.nav__trigger .nav__trigger-icon_expanded_collapsed {\n  transform: rotate(0);\n}\n\n.nav__trigger .nav__trigger-icon_collapsed {\n  transform: rotate(-180deg);\n}\n\n.nav__item {\n  line-height: 20px;\n  font-size: 15px;\n}\n\n.nav__item > a {\n  position: relative;\n  text-decoration: none;\n  padding: 6px 32px;\n}\n\n.nav__item > a:hover, .nav__item > a:active, .nav__item > a:focus {\n  text-decoration: none;\n}\n\n.nav__item-selected {\n  pointer-events: none;\n  cursor: default;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL3NpZGVuYXYvc2lkZW5hdi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BO0VBQ0ksZUFBZTtFQUNmLFNBQVM7RUFDVCxTQUFTO0VBQ1QsWUFBWTtFQUVaLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFHUixpQkFBUztFQUNULG9CQUFZO0FBVHBCOztBQVlJO0VBQ0ksZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixVQUFVO0VBQ1YsU0FBUztBQVRqQjs7QUFZSTtFQUNJLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsV0FBVztFQUVYLGVBQWU7RUFDZixnQkFBZ0I7RUFFaEIsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQiwyQkFBMkI7QUFYbkM7O0FBQ0s7RUExQkQsd0RBdUN3RTtBQVA1RTs7QUFOSztFQWVrQyxvQkFBb0I7QUFMM0Q7O0FBVks7RUFpQnFCLDBCQUEwQjtBQUhwRDs7QUFRSTtFQUNJLGlCQUFpQjtFQUNqQixlQUFlO0FBTHZCOztBQUdLO0VBS08sa0JBQWtCO0VBQ2xCLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFKN0I7O0FBSEs7RUFTb0MscUJBQXFCO0FBRjlEOztBQUtRO0VBQ0ksb0JBQW9CO0VBQ3BCLGVBQWU7QUFGM0IiLCJmaWxlIjoicGFja2FnZXMvZG9jcy9zcmMvYXBwL2NvbXBvbmVudHMvc2lkZW5hdi9zaWRlbmF2LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAbWl4aW4gdHJhbnNpdGlvbiAoJHRyYW5zaXRpb24pIHtcbiAgICAtd2Via2l0LXRyYW5zaXRpb246ICR0cmFuc2l0aW9uO1xuICAgIC1tb3otdHJhbnNpdGlvbjogJHRyYW5zaXRpb247XG4gICAgLW8tdHJhbnNpdGlvbjogJHRyYW5zaXRpb247XG4gICAgdHJhbnNpdGlvbjogJHRyYW5zaXRpb247XG59XG5cbi5uYXYge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDY0cHg7XG4gICAgYm90dG9tOiAwO1xuICAgIHotaW5kZXg6IDEwMTtcblxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAzMDBweDtcblxuICAgIHBhZGRpbmc6IHtcbiAgICAgICAgdG9wOiAxMHB4O1xuICAgICAgICBib3R0b206IDEwcHg7XG4gICAgfTtcblxuICAgICZfX3dyYXBwZXIge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgfVxuXG4gICAgJl9fdHJpZ2dlciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgZm9udC1zaXplOiAxN3B4O1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuXG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMTRweCAzMnB4IDZweCAzMnB4O1xuXG4gICAgICAgIC5uYXZfX3RyaWdnZXItaWNvbiB7XG4gICAgICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKCB0cmFuc2Zvcm0gMjI1bXMgY3ViaWMtYmV6aWVyKDAuNCwwLjAsMC4yLDEpICk7XG5cbiAgICAgICAgICAgICZfZXhwYW5kZWQgeyAmX2NvbGxhcHNlZCB7IHRyYW5zZm9ybTogcm90YXRlKDApOyB9IH1cblxuICAgICAgICAgICAgJl9jb2xsYXBzZWQgeyB0cmFuc2Zvcm06IHJvdGF0ZSgtMTgwZGVnKTsgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAmX19pdGVtIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcblxuICAgICAgICAmID4gYSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBwYWRkaW5nOiA2cHggMzJweDtcblxuICAgICAgICAgICAgJjpob3ZlciwgJjphY3RpdmUsICY6Zm9jdXMgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgICAgICAgfVxuXG4gICAgICAgICYtc2VsZWN0ZWQge1xuICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0= */";
      /***/
    },

    /***/
    "kiQV":
    /*!**********************!*\
      !*** ./package.json ***!
      \**********************/

    /*! exports provided: name, version, description, homepage, bugs, license, repository, engines, requiredAngularVersion, dependencies, devDependencies, resolutions, scripts, husky, collective, lint-staged, snyk, default */

    /***/
    function kiQV(module) {
      module.exports = JSON.parse("{\"name\":\"mosaic\",\"version\":\"10.1.0\",\"description\":\"Components for Angular\",\"homepage\":\"https://github.com/positive-js/mosaic\",\"bugs\":\"https://github.com/positive-js/mosaic/issues\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/positive-js/mosaic.git\"},\"engines\":{\"node\":\">= 12\",\"yarn\":\">= 1.0.0\"},\"requiredAngularVersion\":\">=10.0.0\",\"dependencies\":{\"@angular/animations\":\"^10.1.6\",\"@angular/cdk\":\"^10.2.5\",\"@angular/common\":\"^10.1.6\",\"@angular/compiler\":\"^10.1.6\",\"@angular/core\":\"^10.1.6\",\"@angular/forms\":\"^10.1.6\",\"@angular/platform-browser\":\"^10.1.6\",\"@ptsecurity/mosaic-icons\":\"^5.0.0\",\"core-js\":\"^3.6.5\",\"rxjs\":\"^6.5.5\",\"zone.js\":\"~0.10.3\"},\"devDependencies\":{\"@angular-devkit/architect-cli\":\"^0.1001.7\",\"@angular-devkit/build-angular\":\"^0.1001.7\",\"@angular-devkit/build-ng-packagr\":\"^0.1001.7\",\"@angular-devkit/core\":\"^10.1.7\",\"@angular-devkit/schematics\":\"^10.1.7\",\"@angular/cli\":\"^10.1.7\",\"@angular/compiler-cli\":\"^10.1.6\",\"@angular/platform-browser-dynamic\":\"^10.1.6\",\"@angular/platform-server\":\"^10.1.6\",\"@angular/router\":\"^10.1.6\",\"@commitlint/cli\":\"8.1.0\",\"@commitlint/config-conventional\":\"^7.5.0\",\"@octokit/rest\":\"^16.2.0\",\"@ptsecurity/commitlint-config\":\"^1.0.0\",\"@ptsecurity/tslint-config\":\"0.13.1\",\"@schematics/angular\":\"^10.1.7\",\"@types/chalk\":\"^2.2.0\",\"@types/fs-extra\":\"^5.0.4\",\"@types/glob\":\"^7.1.3\",\"@types/gulp\":\"^4.0.5\",\"@types/inquirer\":\"^6.5.0\",\"@types/jasmine\":\"^3.3.8\",\"@types/merge2\":\"^0.3.30\",\"@types/node\":\"^12.12.29\",\"@types/source-map\":\"^0.5.7\",\"angular2-template-loader\":\"^0.6.2\",\"chalk\":\"^4.0.0\",\"conventional-changelog\":\"^3.1.10\",\"dgeni\":\"^0.4.12\",\"dgeni-packages\":\"~0.28.3\",\"dotenv\":\"^8.2.0\",\"firebase-tools\":\"^7.5.0\",\"fs-extra\":\"^5.0.0\",\"glob\":\"^7.1.3\",\"gulp\":\"^4.0.0\",\"gulp-clean\":\"^0.4.0\",\"gulp-clean-css\":\"^3.10.0\",\"gulp-cli\":\"^2.0.1\",\"gulp-flatten\":\"^0.3.1\",\"gulp-highlight-files\":\"^0.0.6\",\"gulp-if\":\"^2.0.2\",\"gulp-markdown\":\"5.1.0\",\"gulp-rename\":\"^2.0.0\",\"gulp-sass\":\"^4.0.2\",\"gulp-transform\":\"^2.0.0\",\"highlight.js\":\"^10.4.1\",\"husky\":\"^4.2.3\",\"inquirer\":\"^6.5.2\",\"jasmine\":\"^3.5.0\",\"jasmine-core\":\"^3.5.0\",\"karma\":\"^5.1.1\",\"karma-chrome-launcher\":\"^3.1.0\",\"karma-coverage\":\"^2.0.1\",\"karma-coverage-istanbul-reporter\":\"^2.1.1\",\"karma-jasmine\":\"^3.1.1\",\"karma-jasmine-html-reporter\":\"1.5.2\",\"karma-junit-reporter\":\"^2.0.1\",\"karma-remap-coverage\":\"^0.1.5\",\"karma-spec-reporter\":\"^0.0.32\",\"license-checker\":\"^16.0.0\",\"lint-staged\":\"^10.2.11\",\"madge\":\"^3.3.0\",\"magic-string\":\"^0.22.5\",\"merge2\":\"^1.2.3\",\"messageformat\":\"^2.0.5\",\"moment\":\"~2.23.0\",\"ng-packagr\":\"^10.1.2\",\"node-sass\":\"^4.11.0\",\"request\":\"^2.88.0\",\"resolve-bin\":\"^0.4.0\",\"scss-bundle\":\"^3.1.1\",\"snyk\":\"^1.425.4\",\"spdx-satisfies\":\"^0.1.3\",\"stylelint\":\"^13.6.1\",\"stylelint-config-standard\":\"^19.0.0\",\"stylelint-scss\":\"^3.13.0\",\"ts-node\":\"^9.0.0\",\"tsconfig-paths\":\"^3.9.0\",\"tsickle\":\"^0.39.1\",\"tslib\":\"^2.0.1\",\"tslint\":\"^5.20.1\",\"typescript\":\"~4.0.3\",\"wallaby-webpack\":\"^3.9.13\",\"yaml-lint\":\"^1.2.4\"},\"resolutions\":{\"dgeni-packages/typescript\":\"4.0.2\"},\"scripts\":{\"ng\":\"ng\",\"valid:lic\":\"ts-node --project ./tools/validate-licenses/tsconfig.json ./tools/validate-licenses/validate-licenses.ts\",\"build:cdk\":\"ng build cdk\",\"build:mosaic-moment-adapter\":\"ng build mosaic-moment-adapter\",\"build:mosaic\":\"ng build mosaic\",\"build:mosaic-examples-module\":\"ts-node --project ./tools/example-module/tsconfig.json ./tools/example-module/index.ts\",\"build:mosaic-examples\":\"ng build mosaic-examples\",\"build:schematics\":\"ng build schematics\",\"build:schematics-test\":\"ng build schematics-test\",\"build:docs\":\"gulp docs\",\"styles:built-all\":\"gulp styles:built-all\",\"unit:cdk\":\"ng test cdk\",\"unit:mosaic\":\"ng test mosaic\",\"unit:mosaic-moment-adapter\":\"ng test mosaic-moment-adapter\",\"unit:schematics\":\"gulp unit:schematics\",\"docs:start:dev\":\"ng serve --configuration=development mosaic-docs\",\"docs:start:prod\":\"ng serve --configuration=production mosaic-docs\",\"docs:prod-build\":\"ng build mosaic-docs\",\"docs:prod-build:aot\":\"ng build mosaic-docs --prod\",\"docs:publish-preview\":\"ts-node --project ./scripts/tsconfig.deploy.json ./scripts/deploy/publish-docs-preview.ts\",\"docs:cleanup-preview\":\"ts-node --project ./scripts/tsconfig.deploy.json ./scripts/deploy/cleanup-preview.ts\",\"preinstall\":\"node tools/npm/check-npm.js\",\"postinstall\":\"tsc -p tools/builders/tsconfig.json\",\"publish\":\"ts-node --project ./scripts/tsconfig.deploy.json ./scripts/deploy/publish-artifacts.ts\",\"linter:mosaic\":\"gulp tslint\",\"linter:mosaic:json\":\"gulp tslint:json\",\"linter:styles\":\"gulp stylelint\",\"linter:styles:json\":\"gulp stylelint:json\",\"linter:yaml\":\"yamllint **/*.yml --ignore=node_modules/**/*.yml\",\"release:stage\":\"ts-node --project tools/release/tsconfig.json tools/release/stage-release.ts\",\"release:publish\":\"ts-node --project tools/release/tsconfig.json tools/release/publish-release.ts\",\"server-dev:all\":\"ng serve dev-all --port 3003\",\"server-dev:alert\":\"ng serve dev-alert --port 3003\",\"server-dev:autocomplete\":\"ng serve dev-autocomplete --port 3003\",\"server-dev:badge\":\"ng serve dev-badge --port 3003\",\"server-dev:button\":\"ng serve dev-button --port 3003\",\"server-dev:button-toggle\":\"ng serve dev-button-toggle --port 3003\",\"server-dev:card\":\"ng serve dev-card --port 3003\",\"server-dev:checkbox\":\"ng serve dev-checkbox --port 3003\",\"server-dev:datepicker\":\"ng serve dev-datepicker --port 3003\",\"server-dev:date-formatter\":\"ng serve dev-date-formatter --port 3003\",\"server-dev:dropdown\":\"ng serve dev-dropdown --port 3003\",\"server-dev:icon\":\"ng serve dev-icon --port 3003\",\"server-dev:input\":\"ng serve dev-input --port 3003\",\"server-dev:flex-layout\":\"ng serve dev-flex-layout --port 3003\",\"server-dev:link\":\"ng serve dev-link --port 3003\",\"server-dev:list\":\"ng serve dev-list --port 3003\",\"server-dev:modal\":\"ng serve dev-modal --port 3003\",\"server-dev:navbar\":\"ng serve dev-navbar --port 3003\",\"server-dev:number-formatter\":\"ng serve dev-number-formatter --port 3003\",\"server-dev:panel\":\"ng serve dev-panel --port 3003\",\"server-dev:popover\":\"ng serve dev-popover --port 3003\",\"server-dev:progress-bar\":\"ng serve dev-progress-bar --port 3003\",\"server-dev:progress-spinner\":\"ng serve dev-progress-spinner --port 3003\",\"server-dev:radio\":\"ng serve dev-radio --port 3003\",\"server-dev:select\":\"ng serve dev-select --port 3003\",\"server-dev:sidebar\":\"ng serve dev-sidebar --port 3003\",\"server-dev:sidepanel\":\"ng serve dev-sidepanel --port 3003\",\"server-dev:splitter\":\"ng serve dev-splitter --port 3003\",\"server-dev:tabs\":\"ng serve dev-tabs --port 3003\",\"server-dev:tags\":\"ng serve dev-tags --port 3003\",\"server-dev:textarea\":\"ng serve dev-textarea --port 3003\",\"server-dev:toggle\":\"ng serve dev-toggle --port 3003\",\"server-dev:theme-picker\":\"ng serve dev-theme-picker --port 3003\",\"server-dev:tree\":\"ng serve dev-tree --port 3003\",\"server-dev:tree-select\":\"ng serve dev-tree-select --port 3003\",\"server-dev:typography\":\"ngx` serve dev-typography --port 3003\",\"server-dev:tooltip\":\"ng serve dev-tooltip --port 3003\",\"server-dev:timepicker\":\"ng serve dev-timepicker --port 3003\",\"server-dev:validation\":\"ng serve dev-validation --port 3003\",\"server-dev:vertical-navbar\":\"ng serve dev-vertical-navbar --port 3003\",\"snyk-protect\":\"snyk protect\",\"prepare\":\"yarn run snyk-protect\"},\"husky\":{\"hooks\":{\"commit-msg\":\"commitlint -E HUSKY_GIT_PARAMS\",\"pre-commit\":\"lint-staged\"}},\"collective\":{\"type\":\"opencollective\",\"url\":\"https://opencollective.com/mosaic\",\"logo\":\"https://opencollective.com/mosaic/logo.txt\"},\"lint-staged\":{\"*.yml\":\"yamllint\"},\"snyk\":true}");
      /***/
    },

    /***/
    "kku+":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/shared/example-viewer/example-viewer.html ***!
      \***************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function kku(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"docs-example-viewer__wrapper\">\n    <div *ngIf=\"exampleData\" class=\"docs-example-viewer__example\">\n        <div class=\"docs-example-viewer-body\">\n            <ng-template [cdkPortalOutlet]=\"selectedPortal\"></ng-template>\n        </div>\n    </div>\n\n    <div *ngIf=\"exampleData; else lostExample\" [class.docs-example-viewer__source]=\"true\"\n         [class.docs-example-viewer__source_hidden]=\"!(isSourceShown || isSwitcherHidden)\">\n        <stackblitz-button [example]=\"example\"></stackblitz-button>\n        <span class=\"docs-example-source-copy\">\n            <span class=\"code-copy__copied\"><i class=\"mc mc-check_16\"></i> Скопировано</span>\n            <i class=\"code-copy__icon mc mc-copy_16\" (click)=\"copyCode($event)\"></i>\n        </span>\n        <mc-tab-group mc-light-tabs (selectedTabChange)=\"setLineNumbers()\">\n            <mc-tab *ngFor=\"let tabName of getExampleTabNames()\" [label]=\"tabName\">\n                <div class=\"docs-example-source-wrapper\">\n                    <pre class=\"docs-example-numbers hljs-line-numbers\">{{lineNumbers}}</pre>\n                    <pre class=\"docs-example-source hljs\">\n                        <doc-viewer #viewer [documentUrl]=\"exampleTabs[tabName]\" class=\"docs-example-source-viewer\"></doc-viewer>\n                        <div class=\"hljs-shadow {{isSourceShown  || isSwitcherHidden ? shadowHide : null}}\"></div>\n                    </pre>\n                </div>\n            </mc-tab>\n        </mc-tab-group>\n        <div [class.docs-example-source__switcher]=\"true\"\n             [class.docs-example-source__switcher_hide]=\"isSwitcherHidden\">\n            <div  [class.docs-example-source__show]=\"true\"\n                  [class.docs-example-source__hide]=\"isSourceShown\">\n                <span class=\"mc-link mc-link_dashed\" (click)=\"toggleSourceView()\"\n                   [ngClass]=\"{'mc-active' : active, 'mc-focused': focus}\">\n                    <span class=\"mc-link__text\">Показать полностью</span>\n                    <i class=\"mc mc-angle-down-M_16\"></i>\n                </span>\n            </div>\n            <div [class.docs-example-source__show]=\"true\"\n                 [class.docs-example-source__hide]=\"!isSourceShown\">\n                <span class=\"mc-link mc-link_dashed\" (click)=\"toggleSourceView()\"\n                   [ngClass]=\"{'mc-active' : active, 'mc-focused': focus}\">\n                    <span class=\"mc-link__text\">Свернуть</span>\n                    <i class=\"mc mc-angle-up-M_16\"></i>\n                </span>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #lostExample>\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible\">\n            <span>Oops, this code example is lost... But you can help us find it!\n                Just send a Pull Request to this repository:\n                <a class=\"docs-markdown__a\" href=\"//github.com/positive-js/mosaic/pulls\"> Mosaic</a>\n            </span>\n        </div>\n    </ng-template>\n</div>\n";
      /***/
    },

    /***/
    "lGal":
    /*!******************************************************************!*\
      !*** ./packages/docs/src/app/components/navbar/navbar.module.ts ***!
      \******************************************************************/

    /*! exports provided: NavbarModule */

    /***/
    function lGal(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NavbarModule", function () {
        return NavbarModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/dropdown */
      "kGUy");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/mosaic/link */
      "8pH+");
      /* harmony import */


      var _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/select */
      "2nOP");
      /* harmony import */


      var _navbar_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./navbar.component */
      "hiYu");

      var NavbarModule = function NavbarModule() {
        _classCallCheck(this, NavbarModule);
      };

      NavbarModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__["McButtonModule"], _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__["McDropdownModule"], _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_6__["McLinkModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"], _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_7__["McSelectModule"]],
        exports: [_navbar_component__WEBPACK_IMPORTED_MODULE_8__["NavbarComponent"]],
        declarations: [_navbar_component__WEBPACK_IMPORTED_MODULE_8__["NavbarComponent"]]
      })], NavbarModule);
      /***/
    },

    /***/
    "lRC7":
    /*!***********************************************************************************!*\
      !*** ./packages/docs/src/app/components/component-viewer/component-overview.scss ***!
      \***********************************************************************************/

    /*! exports provided: default */

    /***/
    function lRC7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".title {\n  text-transform: capitalize;\n}\n\n.docs-header-link {\n  padding-top: 24px;\n}\n\n.docs-markdown__p {\n  margin: 0;\n  padding-top: 8px;\n}\n\n.docs-component-overview_hidden {\n  visibility: hidden;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2NvbXBvbmVudC12aWV3ZXIvY29tcG9uZW50LW92ZXJ2aWV3LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7RUFDSSxpQkFBaUI7QUFDckI7O0FBR0k7RUFDSSxTQUFTO0VBQ1QsZ0JBQWdCO0FBQXhCOztBQUlBO0VBQ0ksa0JBQWtCO0FBRHRCIiwiZmlsZSI6InBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9jb21wb25lbnRzL2NvbXBvbmVudC12aWV3ZXIvY29tcG9uZW50LW92ZXJ2aWV3LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGl0bGV7XG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG59XG5cbi5kb2NzLWhlYWRlci1saW5rIHtcbiAgICBwYWRkaW5nLXRvcDogMjRweDtcbn1cblxuLmRvY3MtbWFya2Rvd24ge1xuICAgICZfX3Age1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmctdG9wOiA4cHg7XG4gICAgfVxufVxuXG4uZG9jcy1jb21wb25lbnQtb3ZlcnZpZXdfaGlkZGVuIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG4iXX0= */";
      /***/
    },

    /***/
    "lmR3":
    /*!***************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/sidenav/sidenav.component.html ***!
      \***************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function lmR3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<nav class=\"main__nav nav\">\n    <div *ngFor=\"let category of categories;\">\n        <button cdkAccordionItem\n            #panel=\"cdkAccordionItem\" (click)=\"panel.toggle()\" expanded=\"true\" class=\"nav__trigger\">\n            {{category.name}} <i [className]=\"panel.expanded ? iconClassExpanded : iconClassCollapsed\"></i>\n        </button>\n        <ul class=\"nav__wrapper\" [@bodyExpansion]=\"panel.expanded ? 'expanded' : 'collapsed'\" >\n            <li *ngFor=\"let component of category.items\" class=\"nav__item\">\n                <a class=\"nav__item-link\" [routerLink]=\"'/' + component.id\"\n                   routerLinkActive=\"nav__item-selected\">\n                    {{component.name}}\n                </a>\n            </li>\n        </ul>\n    </div>\n</nav>\n";
      /***/
    },

    /***/
    "m73n":
    /*!***********************************************************************!*\
      !*** ./packages/docs/src/app/components/sidenav/sidenav.component.ts ***!
      \***********************************************************************/

    /*! exports provided: ComponentSidenav */

    /***/
    function m73n(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentSidenav", function () {
        return ComponentSidenav;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_sidenav_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./sidenav.component.html */
      "lmR3");
      /* harmony import */


      var _sidenav_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./sidenav.scss */
      "kY4w");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _schematics_angular_component_schema__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @schematics/angular/component/schema */
      "Z+Dp");
      /* harmony import */


      var _schematics_angular_component_schema__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_schematics_angular_component_schema__WEBPACK_IMPORTED_MODULE_5__);
      /* harmony import */


      var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../shared/documentation-items/documentation-items */
      "rMhK");

      var ComponentSidenav = function ComponentSidenav(docItems) {
        _classCallCheck(this, ComponentSidenav);

        this.docItems = docItems;
        this.icon = 'mc mc-angle-up-M_16';
        this.iconClass = 'nav__trigger-icon';
        this.iconClassExpanded = "".concat(this.icon, " ").concat(this.iconClass, " ").concat(this.iconClass, "_expanded");
        this.iconClassCollapsed = "".concat(this.icon, " ").concat(this.iconClass, " ").concat(this.iconClass, "_collapsed");
        this.categories = docItems.getCategories('components');
      };

      ComponentSidenav.ctorParameters = function () {
        return [{
          type: _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__["DocumentationItems"]
        }];
      };

      ComponentSidenav = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'app-sidenav',
        template: _raw_loader_sidenav_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        encapsulation: _schematics_angular_component_schema__WEBPACK_IMPORTED_MODULE_5__["ViewEncapsulation"].None,
        animations: [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["trigger"])('bodyExpansion', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({
          maxHeight: '0',
          visibility: 'hidden'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({
          maxHeight: '10000px',
          visibility: 'visible'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('225ms cubic-bezier(0.4,0.0,0.2,1)')), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('collapsed <=> expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('225ms cubic-bezier(0.4,0.0,0.2,1)'))])],
        styles: [_sidenav_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__["DocumentationItems"]])], ComponentSidenav);
      /***/
    },

    /***/
    "mYO9":
    /*!***********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-popover.js ***!
      \***********************************************************/

    /*! exports provided: MC_POPOVER_SCROLL_STRATEGY, MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER, McPopover, McPopoverComponent, McPopoverModule, PopoverVisibility, getMcPopoverInvalidPositionError, mcPopoverAnimations, mcPopoverScrollStrategyFactory */

    /***/
    function mYO9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_POPOVER_SCROLL_STRATEGY", function () {
        return MC_POPOVER_SCROLL_STRATEGY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
        return MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McPopover", function () {
        return McPopover;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McPopoverComponent", function () {
        return McPopoverComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McPopoverModule", function () {
        return McPopoverModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PopoverVisibility", function () {
        return PopoverVisibility;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getMcPopoverInvalidPositionError", function () {
        return getMcPopoverInvalidPositionError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcPopoverAnimations", function () {
        return mcPopoverAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mcPopoverScrollStrategyFactory", function () {
        return mcPopoverScrollStrategyFactory;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /**
       * @fileoverview added by tsickle
       * Generated from: popover-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var mcPopoverAnimations = {
        /**
         * Animation that transitions a tooltip in and out.
         */
        popoverState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["trigger"])('state', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["state"])('initial', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["style"])({
          opacity: 0,
          transform: 'scale(1, 0.8)'
        })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["style"])({
          opacity: 1,
          transform: 'scale(1, 1)'
        }))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["transition"])('* => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["style"])({
          opacity: 0
        })))])
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: popover.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {string} */

      var PopoverTriggers = {
        Click: "click",
        Focus: "focus",
        Hover: "hover"
      };
      /** @enum {string} */

      var PopoverVisibility = {
        Initial: "initial",
        Visible: "visible",
        Hidden: "hidden"
      };

      var McPopoverComponent = /*#__PURE__*/function () {
        /**
         * @param {?} changeDetectorRef
         * @param {?} componentElementRef
         */
        function McPopoverComponent(changeDetectorRef, componentElementRef) {
          _classCallCheck(this, McPopoverComponent);

          this.changeDetectorRef = changeDetectorRef;
          this.componentElementRef = componentElementRef;
          this.positions = _toConsumableArray(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["EXTENDED_OVERLAY_POSITIONS"]);
          this.popoverVisibility = PopoverVisibility.Initial;
          this.closeOnInteraction = false;
          this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          this._mcTrigger = PopoverTriggers.Hover;
          this._mcPlacement = 'top';
          this._mcVisible = new rxjs__WEBPACK_IMPORTED_MODULE_9__["BehaviorSubject"](false);
          this._classList = [];
          /**
           * Subject for notifying that the popover has been hidden from the view
           */

          this.onHideSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
          this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_MAP"];
        }
        /**
         * @return {?}
         */


        _createClass(McPopoverComponent, [{
          key: "handleKeydown",

          /**
           * @param {?} e
           * @return {?}
           */
          value: function handleKeydown(e) {
            // tslint:disable-next-line: deprecation
            if (this.isOpen && e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ESCAPE"]) {
              this.hide();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "show",
          value: function show() {
            if (this.isNonEmptyContent()) {
              this.closeOnInteraction = true;
              this.popoverVisibility = PopoverVisibility.Visible;

              this._mcVisible.next(true);

              this.mcVisibleChange.emit(true); // Mark for check so if any parent component has set the
              // ChangeDetectionStrategy to OnPush it will be checked anyways

              this.markForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "hide",
          value: function hide() {
            this.popoverVisibility = PopoverVisibility.Hidden;

            this._mcVisible.next(false);

            this.mcVisibleChange.emit(false); // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyways

            this.markForCheck();
          }
          /**
           * @return {?}
           */

        }, {
          key: "isNonEmptyContent",
          value: function isNonEmptyContent() {
            return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));
          }
          /**
           * Returns an observable that notifies when the popover has been hidden from view.
           * @return {?}
           */

        }, {
          key: "afterHidden",
          value: function afterHidden() {
            return this.onHideSubject.asObservable();
          }
          /**
           * @return {?}
           */

        }, {
          key: "isVisible",
          value: function isVisible() {
            return this.popoverVisibility === PopoverVisibility.Visible;
          }
          /**
           * @return {?}
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isTemplateRef",
          value: function isTemplateRef(value) {
            return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"];
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "isNonEmptyString",
          value: function isNonEmptyString(value) {
            return typeof value === 'string' && value !== '';
          }
          /**
           * @return {?}
           */

        }, {
          key: "animationStart",
          value: function animationStart() {
            this.closeOnInteraction = false;
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "animationDone",
          value: function animationDone(event) {
            /** @type {?} */
            var toState =
            /** @type {?} */
            event.toState;

            if (toState === PopoverVisibility.Hidden && !this.isVisible()) {
              this.onHideSubject.next();
            }

            if (toState === PopoverVisibility.Visible || toState === PopoverVisibility.Hidden) {
              this.closeOnInteraction = true;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.onHideSubject.complete();
          }
        }, {
          key: "mcTrigger",
          get: function get() {
            return this._mcTrigger;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcTrigger = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPlacement",
          get: function get() {
            return this._mcPlacement;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this._mcPlacement) {
              this._mcPlacement = value;
              this.positions.unshift(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_MAP"][this.mcPlacement]);
            } else if (!value) {
              this._mcPlacement = 'top';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPopoverSize",
          get: function get() {
            return this.popoverSize;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.popoverSize) {
              this.popoverSize = value;
            } else if (!value) {
              this.popoverSize = 'normal';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcVisible",
          get: function get() {
            return this._mcVisible.value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var visible = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);

            if (this._mcVisible.value !== visible) {
              this._mcVisible.next(visible);

              this.mcVisibleChange.emit(visible);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "classList",
          get: function get() {
            return this._classList.join(' ');
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var list = [];

            if (Array.isArray(value)) {
              list = value;
            } else {
              list.push(value);
            }

            this._classList = list;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getCssClassesList",
          get: function get() {
            return "".concat(this.classList, " mc-popover-").concat(this.mcPopoverSize, " mc-popover_placement-").concat(this.getPlacementClass);
          }
          /**
           * @return {?}
           */

        }, {
          key: "getPlacementClass",
          get: function get() {
            return _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_TO_CSS_MAP"][this.mcPlacement];
          }
          /**
           * @return {?}
           */

        }, {
          key: "isOpen",
          get: function get() {
            return this.popoverVisibility === PopoverVisibility.Visible;
          }
        }]);

        return McPopoverComponent;
      }();

      McPopoverComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-popover',
          template: "<div class=\"mc-popover\"\n     [ngClass]=\"classList\"\n     [@state]=\"popoverVisibility\"\n     (@state.start)=\"animationStart()\"\n     (@state.done)=\"animationDone($event)\">\n    <div class=\"mc-popover__container\">\n        <div class=\"mc-popover__header\" *ngIf=\"mcHeader\">\n            <ng-container *ngIf=\"isTemplateRef(mcHeader)\" [ngTemplateOutlet]=\"mcHeader\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString(mcHeader)\">\n                <div [innerHTML]=\"mcHeader\"></div>\n            </ng-container>\n        </div>\n        <div class=\"mc-popover__content\" *ngIf=\"mcContent\">\n            <ng-container *ngIf=\"isTemplateRef(mcContent)\" [ngTemplateOutlet]=\"mcContent\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString(mcContent)\">\n                <div [innerHTML]=\"mcContent\"></div>\n            </ng-container>\n        </div>\n        <div class=\"mc-popover__footer\" *ngIf=\"mcFooter\">\n            <ng-container *ngIf=\"isTemplateRef(mcFooter)\" [ngTemplateOutlet]=\"mcFooter\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString(mcFooter)\">\n                <div [innerHTML]=\"mcFooter\"></div>\n            </ng-container>\n        </div>\n    </div>\n    <div class=\"mc-popover__arrow\"\n         [ngClass]=\"{ 'mc-popover__arrow_with-footer': mcFooter }\"></div>\n</div>\n",
          preserveWhitespaces: false,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          animations: [mcPopoverAnimations.popoverState],
          host: {
            '[class]': 'getCssClassesList',
            '(keydown)': 'handleKeydown($event)'
          },
          styles: ["@-webkit-keyframes mc-progress{0%{background-position:0 0}to{background-position:29px 0}}@keyframes mc-progress{0%{background-position:0 0}to{background-position:29px 0}}.mc-progress{position:relative}.mc-progress:after{-webkit-animation:mc-progress 1s linear infinite;animation:mc-progress 1s linear infinite;background:linear-gradient(135deg,rgba(0,0,0,.05) 10px,transparent 0,transparent 20px,rgba(0,0,0,.05) 0,rgba(0,0,0,.05) 30px,transparent 0) repeat;background-size:29px 29px;border-radius:inherit;bottom:0;content:\"\";left:0;position:absolute;right:0;top:0}.cdk-overlay-container{height:100%;pointer-events:none;position:fixed;width:100%}.cdk-overlay-backdrop,.cdk-overlay-container{box-sizing:border-box;left:0;margin:0;padding:0;top:0;z-index:1000}.cdk-overlay-backdrop{-webkit-tap-highlight-color:transparent;bottom:0;opacity:0;pointer-events:auto;position:absolute;right:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-overlay-pane{max-height:100%;max-width:100%;pointer-events:auto}.cdk-overlay-connected-position-bounding-box,.cdk-overlay-pane{box-sizing:border-box;margin:0;padding:0;position:absolute;z-index:1000}.cdk-overlay-connected-position-bounding-box{display:flex;flex-direction:column;min-height:1px;min-width:1px}.mc-popover{border-radius:4px;border-style:solid;border-width:1px;box-sizing:border-box;display:block;list-style:none;margin:0;padding:0;position:relative;visibility:visible;white-space:pre-line;z-index:1060}.mc-popover-small,.mc-popover-small .mc-popover{max-width:280px}.mc-popover-normal,.mc-popover-normal .mc-popover{max-width:400px}.mc-popover-large,.mc-popover-large .mc-popover{max-width:640px}.mc-popover__container{border-radius:4px;overflow:hidden}.mc-popover__header{border-bottom-style:solid;border-bottom-width:1px;padding:10px 16px}.mc-popover__content{padding:16px}.mc-popover__footer{border-top-style:solid;border-top-width:1px;margin-top:8px;padding:12px 16px}.mc-popover_placement-top-left .mc-popover,.mc-popover_placement-top-right .mc-popover,.mc-popover_placement-top .mc-popover{margin-bottom:8px}.mc-popover_placement-right-bottom .mc-popover,.mc-popover_placement-right-top .mc-popover,.mc-popover_placement-right .mc-popover{margin-left:8px}.mc-popover_placement-bottom-left .mc-popover,.mc-popover_placement-bottom-right .mc-popover,.mc-popover_placement-bottom .mc-popover{margin-top:8px}.mc-popover_placement-left-bottom .mc-popover,.mc-popover_placement-left-top .mc-popover,.mc-popover_placement-left .mc-popover{margin-right:8px}.mc-popover__arrow{border:1px solid;height:14px;position:absolute;transform:rotate(45deg);width:14px;z-index:-1}.mc-popover_placement-top .mc-popover__arrow{bottom:-6px;left:50%;margin-left:-4px}.mc-popover_placement-top-left .mc-popover__arrow{bottom:-6px;left:20px;margin-left:0}.mc-popover_placement-top-right .mc-popover__arrow{bottom:-6px;margin-left:0;right:20px}.mc-popover_placement-right .mc-popover__arrow{left:-6px;margin-top:-4px;top:50%}.mc-popover_placement-right-top .mc-popover__arrow{left:-6px;margin-top:-4px;top:18px}.mc-popover_placement-right-bottom .mc-popover__arrow{bottom:14px;left:-6px;margin-top:-4px}.mc-popover_placement-left .mc-popover__arrow{margin-top:-4px;right:-6px;top:50%}.mc-popover_placement-left-top .mc-popover__arrow{margin-top:-4px;right:-6px;top:18px}.mc-popover_placement-left-bottom .mc-popover__arrow{bottom:14px;margin-top:-4px;right:-6px}.mc-popover_placement-bottom .mc-popover__arrow{left:50%;margin-left:-4px;top:-6px}.mc-popover_placement-bottom-left .mc-popover__arrow{left:20px;margin-left:0;top:-6px}.mc-popover_placement-bottom-right .mc-popover__arrow{margin-left:0;right:20px;top:-6px}"]
        }]
      }];
      /** @nocollapse */

      McPopoverComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };

      McPopoverComponent.propDecorators = {
        mcVisibleChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"],
          args: ['mcPopoverVisibleChange']
        }]
      };

      if (false) {}
      /** @type {?} */


      var MC_POPOVER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-popover-scroll-strategy');
      /**
       * \@docs-private
       * @param {?} overlay
       * @return {?}
       */

      function mcPopoverScrollStrategyFactory(overlay) {
        return (
          /**
          * @return {?}
          */
          function () {
            return overlay.scrollStrategies.reposition({
              scrollThrottle: 20
            });
          }
        );
      }
      /**
       * \@docs-private
       * @type {?}
       */


      var MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
        provide: MC_POPOVER_SCROLL_STRATEGY,
        deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"]],
        useFactory: mcPopoverScrollStrategyFactory
      };
      /**
       * Creates an error to be thrown if the user supplied an invalid popover position.
       * @param {?} position
       * @return {?}
       */

      function getMcPopoverInvalidPositionError(position) {
        return Error("McPopover position \"".concat(position, "\" is invalid."));
      }
      /** @type {?} */


      var VIEWPORT_MARGIN = 8;
      /* Constant distance between popover container border
      *  corner according to popover placement and middle of arrow
      * */

      /** @type {?} */

      var POPOVER_ARROW_BORDER_DISTANCE = 20; // tslint:disable-line

      /* Constant value for min height and width of anchor element used for popover.
      *  Set as POPOVER_ARROW_BORDER_DISTANCE multiplied by 2
      *  plus 2px border for both sides of element. Used in check of position management.
      * */

      /** @type {?} */

      var ANCHOR_MIN_HEIGHT_WIDTH = 44; // tslint:disable-line

      var McPopover = /*#__PURE__*/function () {
        /**
         * @param {?} overlay
         * @param {?} elementRef
         * @param {?} ngZone
         * @param {?} scrollDispatcher
         * @param {?} hostView
         * @param {?} scrollStrategy
         * @param {?} direction
         */
        function McPopover(overlay, elementRef, ngZone, scrollDispatcher, hostView, scrollStrategy, direction) {
          var _this165 = this;

          _classCallCheck(this, McPopover);

          this.overlay = overlay;
          this.elementRef = elementRef;
          this.ngZone = ngZone;
          this.scrollDispatcher = scrollDispatcher;
          this.hostView = hostView;
          this.scrollStrategy = scrollStrategy;
          this.direction = direction;
          this.isPopoverOpen = false;
          this.isDynamicPopover = false;
          this.backdropClass = 'cdk-overlay-transparent-backdrop';
          this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          this.mcPositionStrategyPlacementChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          this._hasBackdrop = false;
          this.$unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
          this._disabled = false;
          this._mcTrigger = PopoverTriggers.Click;
          this.popoverSize = 'normal';
          this._mcPlacementPriority = null;
          this._mcPlacement = 'top';
          this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
          this.manualListeners = new Map();
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();

          this.resizeListener =
          /**
          * @return {?}
          */
          function () {
            return _this165.updatePosition();
          };

          this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_MAP"];
          this.defaultPositionsMap = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["DEFAULT_4_POSITIONS_TO_CSS_MAP"];
        }
        /**
         * @return {?}
         */


        _createClass(McPopover, [{
          key: "createOverlay",

          /**
           * Create the overlay config and position strategy
           * @return {?}
           */
          value: function createOverlay() {
            var _this166 = this;

            if (this.overlayRef) {
              this.overlayRef.dispose();
            } // Create connected position strategy that listens for scroll events to reposition.

            /** @type {?} */


            var strategy = this.overlay.position().flexibleConnectedTo(this.elementRef).withTransformOriginOn('.mc-popover').withFlexibleDimensions(false).withViewportMargin(VIEWPORT_MARGIN).withPositions(_toConsumableArray(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["EXTENDED_OVERLAY_POSITIONS"]));
            /** @type {?} */

            var scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
            strategy.withScrollableContainers(scrollableAncestors);
            strategy.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @param {?} change
            * @return {?}
            */
            function (change) {
              if (_this166.popover) {
                _this166.onPositionChange(change);

                if (change.scrollableViewProperties.isOverlayClipped && _this166.popover.mcVisible) {
                  // After position changes occur and the overlay is clipped by
                  // a parent scrollable then close the popover.
                  _this166.ngZone.run(
                  /**
                  * @return {?}
                  */
                  function () {
                    return _this166.hide();
                  });
                }
              }
            });
            this.overlayRef = this.overlay.create({
              direction: this.direction,
              positionStrategy: strategy,
              panelClass: 'mc-popover__panel',
              scrollStrategy: this.scrollStrategy(),
              hasBackdrop: this.hasBackdrop,
              backdropClass: this.backdropClass
            });
            this.closeSubscription = this.closingActions() // need for close popover on trigger click, because popover fire unexpected events: hide and then show
            // todo need fix it
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["delay"])(0)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this166.hide();
            });
            this.updatePosition();
            this.overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this166.detach();
            });
            return this.overlayRef;
          }
          /**
           * @return {?}
           */

        }, {
          key: "detach",
          value: function detach() {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
              this.overlayRef.detach();
            }

            this.popover = null;
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onPositionChange",
          value: function onPositionChange($event) {
            var _this167 = this;

            /** @type {?} */
            var updatedPlacement = this.mcPlacement;
            Object.keys(this.availablePositions).some(
            /**
            * @param {?} key
            * @return {?}
            */
            function (key) {
              if ($event.connectionPair.originX === _this167.availablePositions[key].originX && $event.connectionPair.originY === _this167.availablePositions[key].originY && $event.connectionPair.overlayX === _this167.availablePositions[key].overlayX && $event.connectionPair.overlayY === _this167.availablePositions[key].overlayY) {
                updatedPlacement = key;
                return true;
              }

              return false;
            });
            this.updateCompValue('mcPlacement', updatedPlacement);
            this.mcPositionStrategyPlacementChange.emit(updatedPlacement);

            if (this.popover) {
              this.updateCompValue('classList', this.classList);
              this.popover.markForCheck();
            }

            if (!this.defaultPositionsMap[updatedPlacement]) {
              this.handlePositionUpdate(updatedPlacement);
            }
          }
          /**
           * @param {?} updatedPlacement
           * @return {?}
           */

        }, {
          key: "handlePositionUpdate",
          value: function handlePositionUpdate(updatedPlacement) {
            if (!this.overlayRef) {
              this.overlayRef = this.createOverlay();
            }
            /** @type {?} */


            var currentContainer = this.overlayRef.overlayElement.style;
            /** @type {?} */

            var elementHeight = this.hostView.element.nativeElement.clientHeight;
            /** @type {?} */

            var elementWidth = this.hostView.element.nativeElement.clientWidth;
            /** @type {?} */

            var verticalOffset = Math.floor(elementHeight / 2); // tslint:disable-line

            /** @type {?} */

            var horizontalOffset = Math.floor(elementWidth / 2 - 6); // tslint:disable-line

            /** @type {?} */

            var offsets = {
              top: verticalOffset,
              bottom: verticalOffset,
              right: horizontalOffset,
              left: horizontalOffset
            };
            /** @type {?} */

            var styleProperty = updatedPlacement.split(/(?=[A-Z])/)[1].toLowerCase();

            if ((styleProperty === 'top' || styleProperty === 'bottom') && elementHeight > ANCHOR_MIN_HEIGHT_WIDTH || (styleProperty === 'left' || styleProperty === 'right') && elementWidth > ANCHOR_MIN_HEIGHT_WIDTH) {
              return;
            }

            if (!this.overlayRef.overlayElement.style[styleProperty]) {
              this.overlayRef.overlayElement.style[styleProperty] = '0px';
            }

            this.overlayRef.overlayElement.style[styleProperty] = "".concat(parseInt(currentContainer[styleProperty].split('px')[0], 10) + offsets[styleProperty] - POPOVER_ARROW_BORDER_DISTANCE, "px");
          } // tslint:disable-next-line:no-any

          /**
           * @param {?} key
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "updateCompValue",
          value: function updateCompValue(key, value) {
            if (this.isDynamicPopover && value) {
              if (this.popover) {
                this.popover[key] = value;
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.initElementRefListeners();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this168 = this;

            if (this.overlayRef) {
              this.overlayRef.dispose();
            }

            this.manualListeners.forEach(
            /**
            * @param {?} listener
            * @param {?} event
            * @return {?}
            */
            function (listener, event) {
              _this168.elementRef.nativeElement.removeEventListener(event, listener);
            });
            this.manualListeners.clear();
            this.$unsubscribe.next();
            this.$unsubscribe.complete();
            this.closeSubscription.unsubscribe();
          }
          /**
           * @param {?} e
           * @return {?}
           */

        }, {
          key: "handleKeydown",
          value: function handleKeydown(e) {
            // tslint:disable-next-line: deprecation
            if (this.isOpen && e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ESCAPE"]) {
              this.hide();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleTouchend",
          value: function handleTouchend() {
            this.hide();
          }
          /**
           * @return {?}
           */

        }, {
          key: "initElementRefListeners",
          value: function initElementRefListeners() {
            var _this169 = this;

            if (this.mcTrigger === PopoverTriggers.Click) {
              this.manualListeners.set('click',
              /**
              * @return {?}
              */
              function () {
                return _this169.show();
              }).forEach(
              /**
              * @param {?} listener
              * @param {?} event
              * @return {?}
              */
              function (listener, event) {
                _this169.elementRef.nativeElement.addEventListener(event, listener);
              });
            } else if (this.mcTrigger === PopoverTriggers.Hover) {
              this.manualListeners.set('mouseenter',
              /**
              * @return {?}
              */
              function () {
                return _this169.show();
              }).set('mouseleave',
              /**
              * @return {?}
              */
              function () {
                return _this169.hide();
              }).forEach(
              /**
              * @param {?} listener
              * @param {?} event
              * @return {?}
              */
              function (listener, event) {
                _this169.elementRef.nativeElement.addEventListener(event, listener);
              });
            } else if (this.mcTrigger === PopoverTriggers.Focus) {
              this.manualListeners.set('focus',
              /**
              * @return {?}
              */
              function () {
                return _this169.show();
              }).set('blur',
              /**
              * @return {?}
              */
              function () {
                return _this169.hide();
              }).forEach(
              /**
              * @param {?} listener
              * @param {?} event
              * @return {?}
              */
              function (listener, event) {
                _this169.elementRef.nativeElement.addEventListener(event, listener);
              });
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "registerResizeHandler",
          value: function registerResizeHandler() {
            var _this170 = this;

            // The resize handler is currently responsible for detecting slider dimension
            // changes and therefore doesn't cause a value change that needs to be propagated.
            this.ngZone.runOutsideAngular(
            /**
            * @return {?}
            */
            function () {
              window.addEventListener('resize', _this170.resizeListener);
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "deregisterResizeHandler",
          value: function deregisterResizeHandler() {
            window.removeEventListener('resize', this.resizeListener);
          }
          /**
           * @return {?}
           */

        }, {
          key: "resetListeners",
          value: function resetListeners() {
            var _this171 = this;

            if (this.manualListeners.size) {
              this.manualListeners.forEach(
              /**
              * @param {?} listener
              * @param {?} event
              * @return {?}
              */
              function (listener, event) {
                _this171.elementRef.nativeElement.removeEventListener(event, listener);
              });
              this.manualListeners.clear();
              this.initElementRefListeners();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "show",
          value: function show() {
            var _this172 = this;

            if (this.disabled) {
              return;
            }

            if (!this.popover) {
              this.detach();
              /** @type {?} */

              var overlayRef = this.createOverlay();
              this.portal = this.portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["ComponentPortal"](McPopoverComponent, this.hostView);
              this.popover = overlayRef.attach(this.portal).instance;
              this.popover.afterHidden().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed)).subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this172.detach();
              });
              this.isDynamicPopover = true;
              /** @type {?} */

              var properties = ['mcPlacement', 'mcPopoverSize', 'mcTrigger', 'mcMouseEnterDelay', 'mcMouseLeaveDelay', 'classList', 'mcVisible', 'mcHeader', 'mcContent', 'mcFooter'];
              properties.forEach(
              /**
              * @param {?} property
              * @return {?}
              */
              function (property) {
                return _this172.updateCompValue(property, _this172[property]);
              });
              this.popover.mcVisibleChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.$unsubscribe), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["distinctUntilChanged"])()).subscribe(
              /**
              * @param {?} data
              * @return {?}
              */
              function (data) {
                _this172.mcVisible = data;

                _this172.mcVisibleChange.emit(data);

                _this172.isPopoverOpen = data;
              });
            }

            this.popover.show();
          }
          /**
           * @return {?}
           */

        }, {
          key: "hide",
          value: function hide() {
            if (this.popover) {
              this.popover.hide();
            }
          }
          /**
           * Updates the position of the current popover.
           * @param {?=} reapplyPosition
           * @return {?}
           */

        }, {
          key: "updatePosition",
          value: function updatePosition() {
            var reapplyPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!this.overlayRef) {
              this.overlayRef = this.createOverlay();
            }
            /** @type {?} */


            var position =
            /** @type {?} */
            this.overlayRef.getConfig().positionStrategy;
            position.withPositions(this.getPrioritizedPositions()).withPush(true);

            if (reapplyPosition) {
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                return position.reapplyLastPosition();
              });
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "closingActions",
          value: function closingActions() {
            /** @type {?} */
            var backdrop =
            /** @type {?} */
            this.overlayRef.backdropClick();
            /** @type {?} */

            var outsidePointerEvents =
            /** @type {?} */
            this.overlayRef.outsidePointerEvents();
            /** @type {?} */

            var detachments =
            /** @type {?} */
            this.overlayRef.detachments();
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(backdrop, outsidePointerEvents, detachments);
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "getPriorityPlacementStrategy",
          value: function getPriorityPlacementStrategy(value) {
            var _this173 = this;

            /** @type {?} */
            var result = [];
            /** @type {?} */

            var possiblePositions = Object.keys(this.availablePositions);

            if (Array.isArray(value)) {
              value.forEach(
              /**
              * @param {?} position
              * @return {?}
              */
              function (position) {
                if (possiblePositions.includes(position)) {
                  result.push(_this173.availablePositions[position]);
                }
              });
            } else if (possiblePositions.includes(value)) {
              result.push(this.availablePositions[value]);
            }

            return result;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getPrioritizedPositions",
          value: function getPrioritizedPositions() {
            if (this.mcPlacementPriority) {
              return this.getPriorityPlacementStrategy(this.mcPlacementPriority);
            }

            return _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_PRIORITY_STRATEGY"][this.mcPlacement];
          }
        }, {
          key: "hasBackdrop",
          get: function get() {
            return this._hasBackdrop;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcHeader",
          get: function get() {
            return this._mcHeader;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcHeader = value;
            this.updateCompValue('mcHeader', value);

            if (this.isPopoverOpen) {
              this.updatePosition(true);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcContent",
          get: function get() {
            return this._mcContent;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcContent = value;
            this.updateCompValue('mcContent', value);

            if (this.isPopoverOpen) {
              this.updatePosition(true);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcFooter",
          get: function get() {
            return this._mcFooter;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcFooter = value;
            this.updateCompValue('mcFooter', value);

            if (this.isPopoverOpen) {
              this.updatePosition(true);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcMouseEnterDelay",
          get: function get() {
            return this._mcMouseEnterDelay;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcMouseEnterDelay = value;
            this.updateCompValue('mcMouseEnterDelay', value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcMouseLeaveDelay",
          get: function get() {
            return this._mcMouseLeaveDelay;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._mcMouseLeaveDelay = value;
            this.updateCompValue('mcMouseLeaveDelay', value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcTrigger",
          get: function get() {
            return this._mcTrigger;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value) {
              this._mcTrigger = value;
              this.updateCompValue('mcTrigger', value);
            } else {
              this._mcTrigger = PopoverTriggers.Click;
            }

            this.resetListeners();
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPopoverSize",
          get: function get() {
            return this.popoverSize;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value && (value === 'small' || value === 'normal' || value === 'large')) {
              this.popoverSize = value;
              this.updateCompValue('mcPopoverSize', value);
            } else {
              this.popoverSize = 'normal';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPlacementPriority",
          get: function get() {
            return this._mcPlacementPriority;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value && value.length > 0) {
              this._mcPlacementPriority = value;
            } else {
              this._mcPlacementPriority = null;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcPlacement",
          get: function get() {
            return this._mcPlacement;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value) {
              this._mcPlacement = value;
              this.updateCompValue('mcPlacement', value);
            } else {
              this._mcPlacement = 'top';
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "classList",
          get: function get() {
            return this._classList;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._classList = value;
            this.updateCompValue('classList', this._classList);
          }
          /**
           * @return {?}
           */

        }, {
          key: "mcVisible",
          get: function get() {
            return this._mcVisible;
          }
          /**
           * @param {?} externalValue
           * @return {?}
           */
          ,
          set: function set(externalValue) {
            /** @type {?} */
            var value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(externalValue);

            if (this._mcVisible !== value) {
              this._mcVisible = value;
              this.updateCompValue('mcVisible', value);

              if (value) {
                this.show();
              } else {
                this.hide();
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "isOpen",
          get: function get() {
            return this.isPopoverOpen;
          }
        }]);

        return McPopover;
      }();

      McPopover.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mcPopover]',
          exportAs: 'mcPopover',
          host: {
            '(keydown)': 'handleKeydown($event)',
            '(touchend)': 'handleTouchend()',
            '[class.mc-popover_open]': 'isOpen'
          }
        }]
      }];
      /** @nocollapse */

      McPopover.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
        }, {
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MC_POPOVER_SCROLL_STRATEGY]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };

      McPopover.propDecorators = {
        backdropClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        mcVisibleChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"],
          args: ['mcPopoverVisibleChange']
        }],
        mcPositionStrategyPlacementChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"],
          args: ['mcPopoverPositionStrategyPlacementChange']
        }],
        hasBackdrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        mcHeader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverHeader']
        }],
        mcContent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverContent']
        }],
        mcFooter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverFooter']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverDisabled']
        }],
        mcMouseEnterDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverMouseEnterDelay']
        }],
        mcMouseLeaveDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverMouseLeaveDelay']
        }],
        mcTrigger: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverTrigger']
        }],
        mcPopoverSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverSize']
        }],
        mcPlacementPriority: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverPlacementPriority']
        }],
        mcPlacement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverPlacement']
        }],
        classList: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverClass']
        }],
        mcVisible: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcPopoverVisible']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: popover.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McPopoverModule = function McPopoverModule() {
        _classCallCheck(this, McPopoverModule);
      };

      McPopoverModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          declarations: [McPopoverComponent, McPopover],
          exports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], McPopoverComponent, McPopover],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["OverlayModule"]],
          providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],
          entryComponents: [McPopoverComponent]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-popover.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-popover.js.map

      /***/
    },

    /***/
    "o9p/":
    /*!***********************************!*\
      !*** ./packages/docs/src/main.ts ***!
      \***********************************/

    /*! no exports provided */

    /***/
    function o9p(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/platform-browser-dynamic */
      "wAiw");
      /* harmony import */


      var _app___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./app/ */
      "BtfD");
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./environments/environment */
      "Swjs");
      /* harmony import */


      var _polyfills_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./polyfills.ts */
      "BTJx");
      /* harmony import */


      var _unregister_service_workers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./unregister-service-workers */
      "/Wkg"); // tslint:disable-next-line:no-import-side-effect
      // Unregister all installed service workers and force reload the page if there was
      // an old service worker from a previous version of the docs.


      Object(_unregister_service_workers__WEBPACK_IMPORTED_MODULE_5__["unregisterServiceWorkers"])().then(function (hadServiceWorker) {
        return hadServiceWorker && location.reload();
      }); // tslint:disable-next-line:blank-lines

      if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
      }

      Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app___WEBPACK_IMPORTED_MODULE_2__["AppModule"]) // tslint:disable-next-line:no-console
      ["catch"](function (err) {
        return console.error(err);
      });
      /***/
    },

    /***/
    "oBJt":
    /*!********************************************************************!*\
      !*** ./packages/docs/src/app/components/navbar/navbar-property.ts ***!
      \********************************************************************/

    /*! exports provided: NavbarProperty */

    /***/
    function oBJt(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NavbarProperty", function () {
        return NavbarProperty;
      });

      var NavbarProperty = /*#__PURE__*/function () {
        function NavbarProperty(navbarProperty) {
          _classCallCheck(this, NavbarProperty);

          this.data = navbarProperty.data;
          this.currentValue = this.data[0];
          this.property = navbarProperty.property;
          this.init();
        }

        _createClass(NavbarProperty, [{
          key: "setValue",
          value: function setValue(i) {
            this.currentValue = this.data[i];
            localStorage.setItem(this.property, "".concat(i));

            if (this.updateTemplate) {
              this.updateTemplate(i);
            }

            if (this.updateSelected) {
              this.updateSelected(i);
            }
          }
        }, {
          key: "init",
          value: function init() {
            var currentValue = +localStorage.getItem(this.property);

            if (currentValue) {
              this.setValue(currentValue);
            } else {
              localStorage.setItem(this.property, '0');
            }
          }
        }, {
          key: "updateTemplate",
          value: function updateTemplate(i) {
            if (this.currentValue) {
              var _iterator7 = _createForOfIteratorHelper(this.data),
                  _step7;

              try {
                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                  var color = _step7.value;
                  document.body.classList.remove(color.className);
                }
              } catch (err) {
                _iterator7.e(err);
              } finally {
                _iterator7.f();
              }

              document.body.classList.add(this.currentValue.className);
            }
          }
        }, {
          key: "updateSelected",
          value: function updateSelected(i) {
            if (this.data[i]) {
              this.data.forEach(function (color) {
                color.selected = false;
              });
              this.data[i].selected = true;
            }
          }
        }]);

        return NavbarProperty;
      }();
      /***/

    },

    /***/
    "oFbq":
    /*!************************************************************************!*\
      !*** ./packages/docs/src/app/shared/stackblitz/stackblitz-button.scss ***!
      \************************************************************************/

    /*! exports provided: default */

    /***/
    function oFbq(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".stackblitz__wrapper {\n  position: absolute;\n  right: 0;\n  z-index: 100;\n}\n\n.stackblitz__icon {\n  width: 9.5px;\n  height: 14px;\n  margin-bottom: -2px;\n}\n\n.stackblitz__link {\n  margin-top: 11px;\n  margin-bottom: 11px;\n  background: none;\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  cursor: pointer;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9zaGFyZWQvc3RhY2tibGl0ei9zdGFja2JsaXR6LWJ1dHRvbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVJO0VBQ0ksa0JBQWtCO0VBQ2xCLFFBQVE7RUFDUixZQUFZO0FBRHBCOztBQUlJO0VBQ0ksWUFBWTtFQUNaLFlBQVk7RUFDWixtQkFBbUI7QUFEM0I7O0FBSUk7RUFFUSxnQkFBUztFQUNULG1CQUFZO0VBR2hCLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsY0FBYztFQUNkLGVBQWU7RUFDZixlQUFlO0FBSnZCIiwiZmlsZSI6InBhY2thZ2VzL2RvY3Mvc3JjL2FwcC9zaGFyZWQvc3RhY2tibGl0ei9zdGFja2JsaXR6LWJ1dHRvbi5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnN0YWNrYmxpdHoge1xuXG4gICAgJl9fd3JhcHBlciB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHotaW5kZXg6IDEwMDtcbiAgICB9XG5cbiAgICAmX19pY29uIHtcbiAgICAgICAgd2lkdGg6IDkuNXB4O1xuICAgICAgICBoZWlnaHQ6IDE0cHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IC0ycHg7XG4gICAgfVxuXG4gICAgJl9fbGluayB7XG4gICAgICAgIG1hcmdpbjoge1xuICAgICAgICAgICAgdG9wOiAxMXB4O1xuICAgICAgICAgICAgYm90dG9tOiAxMXB4O1xuICAgICAgICB9XG5cbiAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgYm9yZGVyLXRvcDogMDtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDA7XG4gICAgICAgIGJvcmRlci1yaWdodDogMDtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbn1cbiJdfQ== */";
      /***/
    },

    /***/
    "oznV":
    /*!**************************************************!*\
      !*** ./dist/cdk/fesm2015/ptsecurity-cdk-tree.js ***!
      \**************************************************/

    /*! exports provided: BaseTreeControl, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, defaultCompareValues, defaultCompareViewValues, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError */

    /***/
    function oznV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BaseTreeControl", function () {
        return BaseTreeControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkNestedTreeNode", function () {
        return CdkNestedTreeNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTree", function () {
        return CdkTree;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeModule", function () {
        return CdkTreeModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeNode", function () {
        return CdkTreeNode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeNodeDef", function () {
        return CdkTreeNodeDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutlet", function () {
        return CdkTreeNodeOutlet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutletContext", function () {
        return CdkTreeNodeOutletContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeNodePadding", function () {
        return CdkTreeNodePadding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkTreeNodeToggle", function () {
        return CdkTreeNodeToggle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FlatTreeControl", function () {
        return FlatTreeControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NestedTreeControl", function () {
        return NestedTreeControl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultCompareValues", function () {
        return defaultCompareValues;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultCompareViewValues", function () {
        return defaultCompareViewValues;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTreeControlFunctionsMissingError", function () {
        return getTreeControlFunctionsMissingError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTreeControlMissingError", function () {
        return getTreeControlMissingError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTreeMissingMatchingNodeDefError", function () {
        return getTreeMissingMatchingNodeDefError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTreeMultipleDefaultNodeDefsError", function () {
        return getTreeMultipleDefaultNodeDefsError;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getTreeNoValidDataSourceError", function () {
        return getTreeNoValidDataSourceError;
      });
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "9gLZ");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /**
       * @fileoverview added by tsickle
       * Generated from: control/base-tree-control.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Base tree control. It has basic toggle/expand/collapse operations on a single data node.
       * @abstract
       * @template T
       */

      /* tslint:disable-next-line:naming-convention */


      var BaseTreeControl = /*#__PURE__*/function () {
        function BaseTreeControl() {
          _classCallCheck(this, BaseTreeControl);

          /**
           * A selection model with multi-selection to track expansion status.
           */
          this.expansionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
          this.filterModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
          this.filterValue = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"]('');
        }
        /**
         * Toggles one single data node's expanded/collapsed state.
         * @param {?} dataNode
         * @return {?}
         */


        _createClass(BaseTreeControl, [{
          key: "toggle",
          value: function toggle(dataNode) {
            if (this.filterValue.value) {
              return;
            }

            this.expansionModel.toggle(dataNode);
          }
          /**
           * Expands one single data node.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "expand",
          value: function expand(dataNode) {
            if (this.filterValue.value) {
              return;
            }

            this.expansionModel.select(dataNode);
          }
          /**
           * Collapses one single data node.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "collapse",
          value: function collapse(dataNode) {
            if (this.filterValue.value) {
              return;
            }

            this.expansionModel.deselect(dataNode);
          }
          /**
           * Whether a given data node is expanded or not. Returns true if the data node is expanded.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "isExpanded",
          value: function isExpanded(dataNode) {
            return this.expansionModel.isSelected(dataNode);
          }
          /**
           * Toggles a subtree rooted at `node` recursively.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "toggleDescendants",
          value: function toggleDescendants(dataNode) {
            this.expansionModel.isSelected(dataNode) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);
          }
          /**
           * Collapse all dataNodes in the tree.
           * @return {?}
           */

        }, {
          key: "collapseAll",
          value: function collapseAll() {
            this.expansionModel.clear();
          }
          /**
           * Expands a subtree rooted at given data node recursively.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "expandDescendants",
          value: function expandDescendants(dataNode) {
            var _this$expansionModel;

            /** @type {?} */
            var toBeProcessed = [dataNode];
            toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));

            (_this$expansionModel = this.expansionModel).select.apply(_this$expansionModel, toBeProcessed);
          }
          /**
           * Collapses a subtree rooted at given data node recursively.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "collapseDescendants",
          value: function collapseDescendants(dataNode) {
            var _this$expansionModel2;

            /** @type {?} */
            var toBeProcessed = [dataNode];
            toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));

            (_this$expansionModel2 = this.expansionModel).deselect.apply(_this$expansionModel2, toBeProcessed);
          }
        }]);

        return BaseTreeControl;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: control/flat-tree-control.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @param {?} firstValue
       * @param {?} secondValue
       * @return {?}
       */


      function defaultCompareValues(firstValue, secondValue) {
        return firstValue === secondValue;
      }
      /**
       * @param {?} firstViewValue
       * @param {?} secondViewValue
       * @return {?}
       */


      function defaultCompareViewValues(firstViewValue, secondViewValue) {
        return RegExp(secondViewValue, 'gi').test(firstViewValue);
      }
      /**
       * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.
       * @template T
       */


      var FlatTreeControl = /*#__PURE__*/function (_BaseTreeControl) {
        _inherits(FlatTreeControl, _BaseTreeControl);

        var _super36 = _createSuper(FlatTreeControl);

        /**
         * Construct with flat tree data node functions getLevel, isExpandable, getValue and getViewValue.
         * @param {?} getLevel
         * @param {?} isExpandable
         * @param {?} getValue
         * @param {?} getViewValue
         * @param {?=} compareValues
         * @param {?=} compareViewValues
         */
        function FlatTreeControl(getLevel, isExpandable, getValue, getViewValue) {
          var _this174;

          var compareValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultCompareValues;
          var compareViewValues = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : defaultCompareViewValues;

          _classCallCheck(this, FlatTreeControl);

          _this174 = _super36.call(this);
          _this174.getLevel = getLevel;
          _this174.isExpandable = isExpandable;
          _this174.getValue = getValue;
          _this174.getViewValue = getViewValue;
          _this174.compareValues = compareValues;
          _this174.compareViewValues = compareViewValues;
          return _this174;
        }
        /**
         * Gets a list of the data node's subtree of descendent data nodes.
         *
         * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
         * with correct levels.
         * @param {?} dataNode
         * @return {?}
         */


        _createClass(FlatTreeControl, [{
          key: "getDescendants",
          value: function getDescendants(dataNode) {
            /** @type {?} */
            var startIndex = this.dataNodes.indexOf(dataNode);
            /** @type {?} */

            var results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.
            // The level of descendants of a tree node must be greater than the level of the given
            // tree node.
            // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.
            // If we reach a node whose level is greater than the level of the tree node, we hit a
            // sibling of an ancestor.

            for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {
              results.push(this.dataNodes[i]);
            }

            return results;
          }
          /**
           * Expands all data nodes in the tree.
           *
           * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
           * data nodes of the tree.
           * @return {?}
           */

        }, {
          key: "expandAll",
          value: function expandAll() {
            var _this$expansionModel3;

            (_this$expansionModel3 = this.expansionModel).select.apply(_this$expansionModel3, _toConsumableArray(this.dataNodes));
          }
          /**
           * @param {?} node
           * @param {?} result
           * @return {?}
           */

        }, {
          key: "getParents",
          value: function getParents(node, result) {
            if (node.parent) {
              result.unshift(node.parent);
              return this.getParents(node.parent, result);
            } else {
              return result;
            }
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "hasValue",
          value: function hasValue(value) {
            var _this175 = this;

            return this.dataNodes.find(
            /**
            * @param {?} node
            * @return {?}
            */
            function (node) {
              return _this175.compareValues(_this175.getValue(node), value);
            });
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "filterNodes",
          value: function filterNodes(value) {
            var _this176 = this,
                _this$filterModel;

            this.filterModel.clear();
            /** @type {?} */

            var filteredNodes = this.dataNodes.filter(
            /**
            * @param {?} node
            * @return {?}
            */
            function (node) {
              return _this176.compareViewValues(_this176.getViewValue(node), value);
            });
            /** @type {?} */

            var filteredNodesWithTheirParents = new Set();
            filteredNodes.forEach(
            /**
            * @param {?} filteredNode
            * @return {?}
            */
            function (filteredNode) {
              _this176.getParents(filteredNode, []).forEach(
              /**
              * @param {?} node
              * @return {?}
              */
              function (node) {
                return filteredNodesWithTheirParents.add(node);
              });

              filteredNodesWithTheirParents.add(filteredNode);
            });

            (_this$filterModel = this.filterModel).select.apply(_this$filterModel, _toConsumableArray(
            /** @type {?} */
            Array.from(filteredNodesWithTheirParents)));

            this.filterValue.next(value);
          }
        }]);

        return FlatTreeControl;
      }(BaseTreeControl);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: control/nested-tree-control.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.
       * @template T
       */


      var NestedTreeControl = /*#__PURE__*/function (_BaseTreeControl2) {
        _inherits(NestedTreeControl, _BaseTreeControl2);

        var _super37 = _createSuper(NestedTreeControl);

        /**
         * Construct with nested tree function getChildren.
         * @param {?} getChildren
         */
        function NestedTreeControl(getChildren) {
          var _this177;

          _classCallCheck(this, NestedTreeControl);

          _this177 = _super37.call(this);
          _this177.getChildren = getChildren;
          return _this177;
        }
        /**
         * Expands all dataNodes in the tree.
         *
         * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
         * data nodes of the tree.
         * @return {?}
         */


        _createClass(NestedTreeControl, [{
          key: "expandAll",
          value: function expandAll() {
            var _this178 = this,
                _this$expansionModel4;

            this.expansionModel.clear();
            /** @type {?} */

            var allNodes = this.dataNodes.reduce(
            /**
            * @param {?} accumulator
            * @param {?} dataNode
            * @return {?}
            */
            function (accumulator, dataNode) {
              return [].concat(_toConsumableArray(accumulator), _toConsumableArray(_this178.getDescendants(dataNode)), [dataNode]);
            }, []);

            (_this$expansionModel4 = this.expansionModel).select.apply(_this$expansionModel4, _toConsumableArray(allNodes));
          }
          /**
           * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.
           * @param {?} dataNode
           * @return {?}
           */

        }, {
          key: "getDescendants",
          value: function getDescendants(dataNode) {
            /** @type {?} */
            var descendants = [];

            this._getDescendants(descendants, dataNode);

            return descendants.splice(1);
          }
          /**
           * A helper function to get descendants recursively.
           * @private
           * @param {?} descendants
           * @param {?} dataNode
           * @return {?}
           */
          // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants

          /* tslint:disable-next-line:naming-convention */

        }, {
          key: "_getDescendants",
          value: function _getDescendants(descendants, dataNode) {
            var _this179 = this;

            descendants.push(dataNode);
            this.getChildren(dataNode).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(
            /**
            * @param {?} children
            * @return {?}
            */
            function (children) {
              if (children && children.length > 0) {
                children.forEach(
                /**
                * @param {?} child
                * @return {?}
                */
                function (child) {
                  return _this179._getDescendants(descendants, child);
                });
              }
            });
          }
        }]);

        return NestedTreeControl;
      }(BaseTreeControl);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: control/tree-control.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.
       * The CDKTree will use this TreeControl to expand/collapse a node.
       * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.
       * @record
       * @template T
       */


      function TreeControl() {}

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: outlet.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes
       * inside the outlet.
       */


      var CdkTreeNodeOutlet =
      /**
       * @param {?} viewContainer
       * @param {?} changeDetectorRef
       */
      function CdkTreeNodeOutlet(viewContainer, changeDetectorRef) {
        _classCallCheck(this, CdkTreeNodeOutlet);

        this.viewContainer = viewContainer;
        this.changeDetectorRef = changeDetectorRef;
      };

      CdkTreeNodeOutlet.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[cdkTreeNodeOutlet]'
        }]
      }];
      /** @nocollapse */

      CdkTreeNodeOutlet.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: node.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Context provided to the tree node component.
       * @template T
       */


      var CdkTreeNodeOutletContext =
      /**
       * @param {?} data
       */
      function CdkTreeNodeOutletContext(data) {
        _classCallCheck(this, CdkTreeNodeOutletContext);

        this.$implicit = data;
      };

      if (false) {}
      /**
       * Data node definition for the CdkTree.
       * Captures the node's template and a when predicate that describes when this node should be used.
       * @template T
       */


      var CdkTreeNodeDef =
      /**
       * \@docs-private
       * @param {?} template
       */
      function CdkTreeNodeDef(template) {
        _classCallCheck(this, CdkTreeNodeDef);

        this.template = template;
      };

      CdkTreeNodeDef.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[cdkTreeNodeDef]',
          inputs: ['when: cdkTreeNodeDefWhen']
        }]
      }];
      /** @nocollapse */

      CdkTreeNodeDef.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tree-errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Returns an error to be thrown when there is no usable data.
       * \@docs-private
       * @return {?}
       */


      function getTreeNoValidDataSourceError() {
        return Error("A valid data source must be provided.");
      }
      /**
       * Returns an error to be thrown when there are multiple nodes that are missing a when function.
       * \@docs-private
       * @return {?}
       */


      function getTreeMultipleDefaultNodeDefsError() {
        return Error("There can only be one default row without a when predicate function.");
      }
      /**
       * Returns an error to be thrown when there are no matching node defs for a particular set of data.
       * \@docs-private
       * @return {?}
       */


      function getTreeMissingMatchingNodeDefError() {
        return Error("Could not find a matching node definition for the provided node data.");
      }
      /**
       * Returns an error to be thrown when there are tree control.
       * \@docs-private
       * @return {?}
       */


      function getTreeControlMissingError() {
        return Error("Could not find a tree control for the tree.");
      }
      /**
       * Returns an error to be thrown when tree control did not implement functions for flat/nested node.
       * \@docs-private
       * @return {?}
       */


      function getTreeControlFunctionsMissingError() {
        return Error("Could not find functions for nested/flat tree in tree control.");
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: tree.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * CDK tree component that connects with a data source to retrieve data of type `T` and renders
       * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.
       * @template T
       */


      var CdkTree = /*#__PURE__*/function () {
        /**
         * @param {?} differs
         * @param {?} changeDetectorRef
         */
        function CdkTree(differs, changeDetectorRef) {
          _classCallCheck(this, CdkTree);

          this.differs = differs;
          this.changeDetectorRef = changeDetectorRef; // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.
          //     Remove the MAX_VALUE in viewChange

          /**
           * Stream containing the latest information on what rows are being displayed on screen.
           * Can be used by the data source to as a heuristic of what data should be provided.
           */

          this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"]({
            start: 0,
            end: Number.MAX_VALUE
          });
          /**
           * Subject that emits when the component has been destroyed.
           */

          this.onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
          /**
           * Level of nodes
           */

          this.levels = new Map();
        }
        /**
         * Provides a stream containing the latest data array to render. Influenced by the tree's
         * stream of view window (what dataNodes are currently on screen).
         * Data source can be an observable of data array, or a dara array to render.
         * @return {?}
         */


        _createClass(CdkTree, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.dataDiffer = this.differs.find([]).create(this.trackBy);

            if (!this.treeControl) {
              throw getTreeControlMissingError();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.nodeOutlet.viewContainer.clear();
            this.onDestroy.next();
            this.onDestroy.complete(); // tslint:disable-next-line:no-unbound-method

            if (this._dataSource && typeof
            /** @type {?} */
            this.dataSource.disconnect === 'function') {
              /** @type {?} */
              this.dataSource.disconnect(this);
            }

            if (this.dataSubscription) {
              this.dataSubscription.unsubscribe();
              this.dataSubscription = null;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            /** @type {?} */
            var defaultNodeDefs = this.nodeDefs.filter(
            /**
            * @param {?} def
            * @return {?}
            */
            function (def) {
              return !def.when;
            });

            if (defaultNodeDefs.length > 1) {
              throw getTreeMultipleDefaultNodeDefsError();
            }

            this.defaultNodeDef = defaultNodeDefs[0];

            if (this.dataSource && this.nodeDefs && !this.dataSubscription) {
              this.observeRenderChanges();
            }
          }
          /**
           * Check for changes made in the data and render each change (node added/removed/moved).
           * @param {?} data
           * @param {?=} dataDiffer
           * @param {?=} viewContainer
           * @param {?=} parentData
           * @return {?}
           */

        }, {
          key: "renderNodeChanges",
          value: function renderNodeChanges(data) {
            var _this180 = this;

            var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataDiffer;
            var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nodeOutlet.viewContainer;
            var parentData = arguments.length > 3 ? arguments[3] : undefined;

            /** @type {?} */
            var changes = dataDiffer.diff(data);

            if (!changes) {
              return;
            }

            changes.forEachOperation(
            /**
            * @param {?} item
            * @param {?} adjustedPreviousIndex
            * @param {?} currentIndex
            * @return {?}
            */
            function (item, adjustedPreviousIndex, currentIndex) {
              if (item.previousIndex == null) {
                _this180.insertNode(data[
                /** @type {?} */
                currentIndex],
                /** @type {?} */
                currentIndex, viewContainer, parentData);
              } else if (currentIndex == null) {
                viewContainer.remove(
                /** @type {?} */
                adjustedPreviousIndex);

                _this180.levels["delete"](item.item);
              } else {
                /** @type {?} */
                var view = viewContainer.get(
                /** @type {?} */
                adjustedPreviousIndex);
                viewContainer.move(
                /** @type {?} */
                view, currentIndex);
              }
            });
            this.changeDetectorRef.detectChanges();
          }
          /**
           * Finds the matching node definition that should be used for this node data. If there is only
           * one node definition, it is returned. Otherwise, find the node definition that has a when
           * predicate that returns true with the data. If none return true, return the default node
           * definition.
           * @param {?} data
           * @param {?} i
           * @return {?}
           */

        }, {
          key: "getNodeDef",
          value: function getNodeDef(data, i) {
            if (this.nodeDefs.length === 1) {
              return this.nodeDefs.first;
            }
            /** @type {?} */


            var nodeDef = this.nodeDefs.find(
            /**
            * @param {?} def
            * @return {?}
            */
            function (def) {
              return def.when && def.when(i, data);
            }) || this.defaultNodeDef;

            if (!nodeDef) {
              throw getTreeMissingMatchingNodeDefError();
            }

            return nodeDef;
          }
          /**
           * Create the embedded view for the data node template and place it in the correct index location
           * within the data node view container.
           * @param {?} nodeData
           * @param {?} index
           * @param {?=} viewContainer
           * @param {?=} parentData
           * @return {?}
           */

        }, {
          key: "insertNode",
          value: function insertNode(nodeData, index, viewContainer, parentData) {
            /** @type {?} */
            var node = this.getNodeDef(nodeData, index); // Node context that will be provided to created embedded view

            /** @type {?} */

            var context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control
            // Otherwise, use the level of parent node.

            if (this.treeControl.getLevel) {
              context.level = this.treeControl.getLevel(nodeData);
              /* tslint:disable-next-line:no-typeof-undefined */
            } else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {
              context.level =
              /** @type {?} */
              this.levels.get(parentData) + 1;
            } else {
              context.level = 0;
            }

            this.levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet

            /** @type {?} */

            var container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;
            container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.
            // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable
            //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.

            if (CdkTreeNode.mostRecentTreeNode) {
              CdkTreeNode.mostRecentTreeNode.data = nodeData;
            }
          }
          /**
           * Set up a subscription for the data provided by the data source.
           * @private
           * @return {?}
           */

        }, {
          key: "observeRenderChanges",
          value: function observeRenderChanges() {
            var _this181 = this;

            /** @type {?} */
            var dataStream; // Cannot use `instanceof DataSource` since the data source could be a literal with
            // `connect` function and may not extends DataSource.
            // tslint:disable-next-line:no-unbound-method

            if (typeof
            /** @type {?} */
            this._dataSource.connect === 'function') {
              dataStream =
              /** @type {?} */
              this._dataSource.connect(this);
            } else if (this._dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
              dataStream = this._dataSource;
            } else if (Array.isArray(this._dataSource)) {
              dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(this._dataSource);
            }

            if (dataStream) {
              this.dataSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.onDestroy)).subscribe(
              /**
              * @param {?} data
              * @return {?}
              */
              function (data) {
                return _this181.renderNodeChanges(data);
              });
            } else {
              throw getTreeNoValidDataSourceError();
            }
          }
          /**
           * Switch to the provided data source by resetting the data and unsubscribing from the current
           * render change subscription if one exists. If the data source is null, interpret this by
           * clearing the node outlet. Otherwise start listening for new data.
           * @private
           * @param {?} dataSource
           * @return {?}
           */

        }, {
          key: "switchDataSource",
          value: function switchDataSource(dataSource) {
            // tslint:disable-next-line:no-unbound-method
            if (this._dataSource && typeof
            /** @type {?} */
            this._dataSource.disconnect === 'function') {
              /** @type {?} */
              this.dataSource.disconnect(this);
            }

            if (this.dataSubscription) {
              this.dataSubscription.unsubscribe();
              this.dataSubscription = null;
            } // Remove the all dataNodes if there is now no data source


            if (!dataSource) {
              this.nodeOutlet.viewContainer.clear();
            }

            this._dataSource = dataSource;

            if (this.nodeDefs) {
              this.observeRenderChanges();
            }
          }
        }, {
          key: "dataSource",
          get: function get() {
            return this._dataSource;
          }
          /**
           * @param {?} dataSource
           * @return {?}
           */
          ,
          set: function set(dataSource) {
            if (this._dataSource !== dataSource) {
              this.switchDataSource(dataSource);
            }
          }
        }]);

        return CdkTree;
      }();

      CdkTree.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'cdk-tree',
          exportAs: 'cdkTree',
          template: "<ng-container cdkTreeNodeOutlet></ng-container>",
          host: {
            "class": 'cdk-tree',
            role: 'tree'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      CdkTree.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }];
      };

      CdkTree.propDecorators = {
        treeControl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        trackBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        nodeOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [CdkTreeNodeOutlet, {
            "static": true
          }]
        }],
        nodeDefs: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [CdkTreeNodeDef]
        }],
        dataSource: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * Tree node for CdkTree. It contains the data in the tree node.
       * @template T
       */


      var CdkTreeNode = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} tree
         */
        function CdkTreeNode(elementRef, tree) {
          _classCallCheck(this, CdkTreeNode);

          this.elementRef = elementRef;
          this.tree = tree;
          this.role = 'treeitem';
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
          CdkTreeNode.mostRecentTreeNode = this;
        }
        /**
         * @return {?}
         */


        _createClass(CdkTreeNode, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.destroyed.next();
            this.destroyed.complete();
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
        }, {
          key: "data",
          get: function get() {
            return this._data;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._data = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "isExpanded",
          get: function get() {
            return this.tree.treeControl.isExpanded(this._data);
          }
          /**
           * @return {?}
           */

        }, {
          key: "level",
          get: function get() {
            return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;
          }
        }]);

        return CdkTreeNode;
      }();
      /**
       * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it
       * in `CdkTree` and set the data to it.
       */


      CdkTreeNode.mostRecentTreeNode = null;
      CdkTreeNode.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'cdk-tree-node',
          exportAs: 'cdkTreeNode',
          host: {
            "class": 'cdk-tree-node',
            '[attr.aria-expanded]': 'isExpanded',
            '[attr.aria-level]': 'role === "treeitem" ? level : null',
            '[attr.role]': 'role'
          }
        }]
      }];
      /** @nocollapse */

      CdkTreeNode.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: CdkTree,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return CdkTree;
            })]
          }]
        }];
      };

      CdkTreeNode.propDecorators = {
        role: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: nested-node.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Nested node is a child of `<cdk-tree>`. It works with nested tree.
       * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will
       * be added in the `cdkTreeNodeOutlet` in tree node template.
       * For example:
       *   ```html
       *   <cdk-mested-tree-node>
       *     {{node.name}}
       *     <ng-template cdkTreeNodeOutlet></ng-template>
       *   </cdk-tree-node>
       *   ```
       * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be
       * like this:
       *   ```html
       *   <cdk-nested-tree-node>
       *     {{node.name}}
       *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>
       *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>
       *   </cdk-tree-node>
       *   ```
       * @template T
       */


      var CdkNestedTreeNode = /*#__PURE__*/function (_CdkTreeNode) {
        _inherits(CdkNestedTreeNode, _CdkTreeNode);

        var _super38 = _createSuper(CdkNestedTreeNode);

        /**
         * @param {?} elementRef
         * @param {?} tree
         * @param {?} differs
         */
        function CdkNestedTreeNode(elementRef, tree, differs) {
          var _this182;

          _classCallCheck(this, CdkNestedTreeNode);

          _this182 = _super38.call(this, elementRef, tree);
          _this182.elementRef = elementRef;
          _this182.differs = differs;
          return _this182;
        }
        /**
         * @return {?}
         */


        _createClass(CdkNestedTreeNode, [{
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            var _this183 = this;

            this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);

            if (!this.tree.treeControl.getChildren) {
              throw getTreeControlFunctionsMissingError();
            }

            this.tree.treeControl.getChildren(this.data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @param {?} result
            * @return {?}
            */
            function (result) {
              _this183.children = result;

              _this183.updateChildrenNodes();
            });
            this.nodeOutlet.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this183.updateChildrenNodes();
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.clear();

            _get(_getPrototypeOf(CdkNestedTreeNode.prototype), "ngOnDestroy", this).call(this);
          }
          /**
           * Add children dataNodes to the NodeOutlet
           * @protected
           * @return {?}
           */

        }, {
          key: "updateChildrenNodes",
          value: function updateChildrenNodes() {
            if (this.nodeOutlet.length && this.children) {
              this.tree.renderNodeChanges(this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data);
            } else {
              // Reset the data differ if there's no children nodes displayed
              this.dataDiffer.diff([]);
            }
          }
          /**
           * Clear the children dataNodes.
           * @protected
           * @return {?}
           */

        }, {
          key: "clear",
          value: function clear() {
            if (this.nodeOutlet && this.nodeOutlet.first) {
              this.nodeOutlet.first.viewContainer.clear();
              this.dataDiffer.diff([]);
            }
          }
        }]);

        return CdkNestedTreeNode;
      }(CdkTreeNode);

      CdkNestedTreeNode.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'cdk-nested-tree-node',
          exportAs: 'cdkNestedTreeNode',
          host: {
            '[attr.aria-expanded]': 'isExpanded',
            '[attr.role]': 'role',
            "class": 'cdk-tree-node cdk-nested-tree-node'
          },
          providers: [{
            provide: CdkTreeNode,
            useExisting: CdkNestedTreeNode
          }]
        }]
      }];
      /** @nocollapse */

      CdkNestedTreeNode.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: CdkTree
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"]
        }];
      };

      CdkNestedTreeNode.propDecorators = {
        nodeOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
          args: [CdkTreeNodeOutlet]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: padding.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Regex used to split a string on its CSS units.
       * @type {?}
       */


      var cssUnitPattern = /([A-Za-z%]+)$/;
      /**
       * Indent for the children tree dataNodes.
       * This directive will add left-padding to the node to show hierarchy.
       * @template T
       */

      var CdkTreeNodePadding = /*#__PURE__*/function () {
        /**
         * @param {?} treeNode
         * @param {?} tree
         * @param {?} renderer
         * @param {?} element
         * @param {?} dir
         */
        function CdkTreeNodePadding(treeNode, tree, renderer, element, dir) {
          var _this184 = this;

          _classCallCheck(this, CdkTreeNodePadding);

          this.treeNode = treeNode;
          this.tree = tree;
          this.renderer = renderer;
          this.element = element;
          this.dir = dir;
          /* tslint:disable-next-line:naming-convention orthodox-getter-and-setter */

          this._indent = 20;
          /**
           * CSS units used for the indentation value.
           */

          this.indentUnits = 'px';
          this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();

          if (this.dir && this.dir.change) {
            this.dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this184.setPadding();
            });
          }
        }
        /**
         * The level of depth of the tree node. The padding will be `level * indent` pixels.
         * @return {?}
         */


        _createClass(CdkTreeNodePadding, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.destroyed.next();
            this.destroyed.complete();
          }
          /**
           * This has been extracted to a util because of TS 4 and VE.
           * View Engine doesn't support property rename inheritance.
           * TS 4.0 doesn't allow properties to override accessors or vice-versa.
           * \@docs-private
           * @protected
           * @param {?} value
           * @return {?}
           */
          // tslint:disable-next-line:naming-convention

        }, {
          key: "setLevelInput",
          value: function setLevelInput(value) {
            // Set to null as the fallback value so that _setPadding can fall back to the node level if the
            // consumer set the directive as `cdkTreeNodePadding=""`. We still want to take this value if
            // they set 0 explicitly.
            this._level =
            /** @type {?} */
            Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value, null);
            this.setPadding();
          }
          /**
           * This has been extracted to a util because of TS 4 and VE.
           * View Engine doesn't support property rename inheritance.
           * TS 4.0 doesn't allow properties to override accessors or vice-versa.
           * \@docs-private
           * @protected
           * @param {?} indent
           * @return {?}
           */

        }, {
          key: "setIndentInput",
          value: function setIndentInput(indent) {
            /** @type {?} */
            var value = indent;
            /** @type {?} */

            var units = 'px';

            if (typeof indent === 'string') {
              /** @type {?} */
              var parts = indent.split(cssUnitPattern);
              value = parts[0];
              units = parts[1] || units;
            }

            this.indentUnits = units;
            this._indent = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value);
            this.setPadding();
          }
          /**
           * The padding indent value for the tree node. Returns a string with px numbers if not null.
           * @protected
           * @return {?}
           */

        }, {
          key: "paddingIndent",
          value: function paddingIndent() {
            /** @type {?} */
            var basicPadding = 12;
            /** @type {?} */

            var nodeLevel = this.treeNode.data && this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this.treeNode.data) : null;
            /** @type {?} */

            var level = this._level || nodeLevel;
            return "".concat(level ? level * this._indent + basicPadding : basicPadding, "px");
          }
          /**
           * @protected
           * @return {?}
           */

        }, {
          key: "setPadding",
          value: function setPadding() {
            /** @type {?} */
            var padding = this.paddingIndent();
            /** @type {?} */

            var paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
            this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);
          }
        }, {
          key: "level",
          get: function get() {
            return this._level;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.setLevelInput(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "indent",
          get: function get() {
            return this._indent;
          }
          /**
           * @param {?} indent
           * @return {?}
           */
          ,
          set: function set(indent) {
            this.setIndentInput(indent);
          }
        }]);

        return CdkTreeNodePadding;
      }();

      CdkTreeNodePadding.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[cdkTreeNodePadding]'
        }]
      }];
      /** @nocollapse */

      CdkTreeNodePadding.ctorParameters = function () {
        return [{
          type: CdkTreeNode
        }, {
          type: CdkTree
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }];
      };

      CdkTreeNodePadding.propDecorators = {
        level: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['cdkTreeNodePadding']
        }],
        indent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['cdkTreeNodePaddingIndent']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: toggle.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @template T
       */


      var CdkTreeNodeToggle = /*#__PURE__*/function () {
        /**
         * @param {?} tree
         * @param {?} treeNode
         */
        function CdkTreeNodeToggle(tree, treeNode) {
          _classCallCheck(this, CdkTreeNodeToggle);

          this.tree = tree;
          this.treeNode = treeNode;
          this._recursive = false;
        }
        /**
         * @return {?}
         */


        _createClass(CdkTreeNodeToggle, [{
          key: "toggle",

          /**
           * @param {?} event
           * @return {?}
           */
          value: function toggle(event) {
            this.recursive ? this.tree.treeControl.toggleDescendants(this.treeNode.data) : this.tree.treeControl.toggle(this.treeNode.data);
            event.stopPropagation();
          }
        }, {
          key: "recursive",
          get: function get() {
            return this._recursive;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._recursive = value;
          }
        }]);

        return CdkTreeNodeToggle;
      }();

      CdkTreeNodeToggle.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[cdkTreeNodeToggle]',
          host: {
            '(click)': 'toggle($event)'
          }
        }]
      }];
      /** @nocollapse */

      CdkTreeNodeToggle.ctorParameters = function () {
        return [{
          type: CdkTree
        }, {
          type: CdkTreeNode
        }];
      };

      CdkTreeNodeToggle.propDecorators = {
        recursive: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['cdkTreeNodeToggleRecursive']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tree.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];

      var CdkTreeModule = function CdkTreeModule() {
        _classCallCheck(this, CdkTreeModule);
      };

      CdkTreeModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
          exports: EXPORTED_DECLARATIONS,
          declarations: EXPORTED_DECLARATIONS,
          providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"]]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-cdk-tree.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-cdk-tree.js.map

      /***/
    },

    /***/
    "pNyw":
    /*!**********************************************************!*\
      !*** ./packages/docs/src/app/components/navbar/index.ts ***!
      \**********************************************************/

    /*! exports provided: NavbarModule */

    /***/
    function pNyw(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _navbar_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./navbar.module */
      "lGal");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "NavbarModule", function () {
        return _navbar_module__WEBPACK_IMPORTED_MODULE_0__["NavbarModule"];
      });
      /***/

    },

    /***/
    "qvb6":
    /*!*********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-input.js ***!
      \*********************************************************/

    /*! exports provided: BIG_STEP, MC_INPUT_VALUE_ACCESSOR, McInput, McInputBase, McInputMixinBase, McInputModule, McInputMono, McNumberInput, SMALL_STEP, add, getPrecision, isDigit, isFloat, isInt, normalizeSplitter, ɵa, ɵb, ɵc, ɵd */

    /***/
    function qvb6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BIG_STEP", function () {
        return BIG_STEP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_INPUT_VALUE_ACCESSOR", function () {
        return MC_INPUT_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McInput", function () {
        return McInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McInputBase", function () {
        return McInputBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McInputMixinBase", function () {
        return McInputMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McInputModule", function () {
        return McInputModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McInputMono", function () {
        return McInputMono;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNumberInput", function () {
        return McNumberInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SMALL_STEP", function () {
        return SMALL_STEP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "add", function () {
        return add;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getPrecision", function () {
        return getPrecision;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isDigit", function () {
        return isDigit;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFloat", function () {
        return isFloat;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isInt", function () {
        return isInt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "normalizeSplitter", function () {
        return normalizeSplitter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return MIN_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return MinValidator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return MAX_VALIDATOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵd", function () {
        return MaxValidator;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /**
       * @fileoverview added by tsickle
       * Generated from: input-errors.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @param {?} inputType
       * @return {?}
       */


      function getMcInputUnsupportedTypeError(inputType) {
        return Error("Input type \"".concat(inputType, "\" isn't supported by mcInput."));
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: input-number.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var BIG_STEP = 10;
      /** @type {?} */

      var SMALL_STEP = 1;
      /**
       * @param {?} value
       * @return {?}
       */

      function normalizeSplitter(value) {
        return value ? value.replace(/,/g, '.') : value;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      function isFloat(value) {
        return /^-?\d+\.\d+$/.test(value);
      }
      /**
       * @param {?} value
       * @return {?}
       */


      function isInt(value) {
        return /^-?\d+$/.test(value);
      }
      /**
       * @param {?} value
       * @return {?}
       */


      function isDigit(value) {
        return isFloat(value) || isInt(value);
      }
      /**
       * @param {?} value
       * @return {?}
       */


      function getPrecision(value) {
        /** @type {?} */
        var arr = value.toString().split('.');
        return arr.length === 1 ? 1 // tslint:disable-next-line:no-magic-numbers
        : Math.pow(10, arr[1].length);
      }
      /**
       * @param {?} value1
       * @param {?} value2
       * @return {?}
       */


      function add(value1, value2) {
        /** @type {?} */
        var precision = Math.max(getPrecision(value1), getPrecision(value2));
        return (value1 * precision + value2 * precision) / precision;
      }

      var McNumberInput = /*#__PURE__*/function () {
        /**
         * @param {?} platform
         * @param {?} elementRef
         * @param {?} ngControl
         * @param {?} step
         * @param {?} bigStep
         * @param {?} min
         * @param {?} max
         */
        function McNumberInput(platform, elementRef, ngControl, step, bigStep, min, max) {
          _classCallCheck(this, McNumberInput);

          this.platform = platform;
          this.elementRef = elementRef;
          this.ngControl = ngControl;
          this.focused = false;
          this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          this.step = isDigit(step) ? parseFloat(step) : SMALL_STEP;
          this.bigStep = isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;
          this.min = isDigit(min) ? parseFloat(min) : -Infinity;
          this.max = isDigit(max) ? parseFloat(max) : Infinity;

          if ('valueAsNumber' in this.nativeElement) {
            Object.defineProperty(Object.getPrototypeOf(this.nativeElement), 'valueAsNumber', {
              // tslint:disable-next-line:no-reserved-keywords

              /**
               * @return {?}
               */
              get: function get() {
                /** @type {?} */
                var res = parseFloat(normalizeSplitter(this.value));
                return isNaN(res) ? null : res;
              }
            });
          }
        }
        /**
         * @return {?}
         */


        _createClass(McNumberInput, [{
          key: "focusChanged",

          /**
           * @param {?} isFocused
           * @return {?}
           */
          value: function focusChanged(isFocused) {
            if (isFocused !== this.focused) {
              this.focused = isFocused;
              this.stateChanges.next();
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            var _this185 = this;

            // tslint:disable-next-line:deprecation

            /** @type {?} */
            var keyCode = event.keyCode;
            /** @type {?} */

            var isCtrlA =
            /**
            * @param {?} e
            * @return {?}
            */
            function isCtrlA(e) {
              return e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["A"] && (e.ctrlKey || e.metaKey);
            };
            /** @type {?} */


            var isCtrlC =
            /**
            * @param {?} e
            * @return {?}
            */
            function isCtrlC(e) {
              return e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["C"] && (e.ctrlKey || e.metaKey);
            };
            /** @type {?} */


            var isCtrlV =
            /**
            * @param {?} e
            * @return {?}
            */
            function isCtrlV(e) {
              return e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["V"] && (e.ctrlKey || e.metaKey);
            };
            /** @type {?} */


            var isCtrlX =
            /**
            * @param {?} e
            * @return {?}
            */
            function isCtrlX(e) {
              return e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["X"] && (e.ctrlKey || e.metaKey);
            };
            /** @type {?} */


            var isCtrlZ =
            /**
            * @param {?} e
            * @return {?}
            */
            function isCtrlZ(e) {
              return e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["Z"] && (e.ctrlKey || e.metaKey);
            };
            /** @type {?} */


            var isFKey =
            /**
            * @param {?} e
            * @return {?}
            */
            function isFKey(e) {
              return e.keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["F1"] && e.keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["F12"];
            };
            /** @type {?} */


            var isNumber =
            /**
            * @param {?} e
            * @return {?}
            */
            function isNumber(e) {
              return e.keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ZERO"] && e.keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NINE"] || e.keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NUMPAD_ZERO"] && e.keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NUMPAD_NINE"];
            };
            /** @type {?} */


            var isIEPeriod =
            /**
            * @param {?} e
            * @return {?}
            */
            function isIEPeriod(e) {
              return e.key === '.' || e.key === 'Decimal';
            };
            /** @type {?} */


            var isNotIEPeriod =
            /**
            * @param {?} e
            * @return {?}
            */
            function isNotIEPeriod(e) {
              return e.key === '.' || e.key === ',';
            };
            /** @type {?} */


            var minuses = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NUMPAD_MINUS"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DASH"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["FF_MINUS"]];
            /** @type {?} */

            var serviceKeys = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DELETE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["BACKSPACE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["TAB"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ESCAPE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ENTER"]];
            /** @type {?} */

            var arrows = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["LEFT_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["RIGHT_ARROW"]];
            /** @type {?} */

            var allowedKeys = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["END"]].concat(arrows).concat(serviceKeys).concat(minuses); // Decimal is for IE

            /** @type {?} */

            var isPeriod =
            /**
            * @param {?} e
            * @return {?}
            */
            function isPeriod(e) {
              return _this185.platform.EDGE || _this185.platform.TRIDENT ? isIEPeriod(e) : isNotIEPeriod(e);
            };

            if (allowedKeys.indexOf(keyCode) !== -1 || isCtrlA(event) || isCtrlC(event) || isCtrlV(event) || isCtrlX(event) || isCtrlZ(event) || isFKey(event) || isPeriod(event)) {
              // let it happen, don't do anything
              return;
            } // Ensure that it is not a number and stop the keypress


            if (event.shiftKey || !isNumber(event)) {
              event.preventDefault(); // process steps

              /** @type {?} */

              var step = event.shiftKey ? this.bigStep : this.step;

              if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["UP_ARROW"]) {
                this.stepUp(step);
              }

              if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DOWN_ARROW"]) {
                this.stepDown(step);
              }
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onPaste",
          value: function onPaste(event) {
            if (!isDigit(normalizeSplitter(event.clipboardData.getData('text')))) {
              event.preventDefault();
            }
          }
          /**
           * @param {?} step
           * @return {?}
           */

        }, {
          key: "stepUp",
          value: function stepUp(step) {
            this.elementRef.nativeElement.focus();
            /** @type {?} */

            var res = Math.max(Math.min(add(this.nativeElement.valueAsNumber || 0, step), this.max), this.min);
            this.nativeElement.value = res.toString();
            this.viewToModelUpdate(this.nativeElement.valueAsNumber);
          }
          /**
           * @param {?} step
           * @return {?}
           */

        }, {
          key: "stepDown",
          value: function stepDown(step) {
            this.elementRef.nativeElement.focus();
            /** @type {?} */

            var res = Math.min(Math.max(add(this.nativeElement.valueAsNumber || 0, -step), this.min), this.max);
            this.nativeElement.value = res.toString();
            this.viewToModelUpdate(this.nativeElement.valueAsNumber);
          }
          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "viewToModelUpdate",
          value: function viewToModelUpdate(value) {
            if (this.ngControl) {
              /** @type {?} */
              this.ngControl.control.setValue(value);
            }
          }
        }, {
          key: "nativeElement",
          get: function get() {
            return this.elementRef.nativeElement;
          }
        }]);

        return McNumberInput;
      }();

      McNumberInput.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: "input[mcInput][type=\"number\"]",
          exportAs: 'mcNumericalInput',
          host: {
            '(blur)': 'focusChanged(false)',
            '(focus)': 'focusChanged(true)',
            '(paste)': 'onPaste($event)',
            '(keydown)': 'onKeyDown($event)'
          }
        }]
      }];
      /** @nocollapse */

      McNumberInput.ctorParameters = function () {
        return [{
          type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
            args: ['step']
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
            args: ['big-step']
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
            args: ['min']
          }]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
            args: ['max']
          }]
        }];
      };

      McNumberInput.propDecorators = {
        bigStep: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        step: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        min: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        max: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: input-value-accessor.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var MC_INPUT_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MC_INPUT_VALUE_ACCESSOR');
      /**
       * @fileoverview added by tsickle
       * Generated from: input.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var MC_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];
      /** @type {?} */

      var nextUniqueId = 0;

      var McInputBase =
      /**
       * @param {?} defaultErrorStateMatcher
       * @param {?} parentForm
       * @param {?} parentFormGroup
       * @param {?} ngControl
       */
      function McInputBase(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        _classCallCheck(this, McInputBase);

        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McInputMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinErrorState"])(McInputBase);

      var McInput = /*#__PURE__*/function (_McInputMixinBase) {
        _inherits(McInput, _McInputMixinBase);

        var _super39 = _createSuper(McInput);

        // tslint:disable-next-line: naming-convention

        /**
         * @param {?} elementRef
         * @param {?} rawValidators
         * @param {?} mcValidation
         * @param {?} ngControl
         * @param {?} numberInput
         * @param {?} ngModel
         * @param {?} formControlName
         * @param {?} parentForm
         * @param {?} parentFormGroup
         * @param {?} defaultErrorStateMatcher
         * @param {?} inputValueAccessor
         */
        function McInput(elementRef, rawValidators, mcValidation, ngControl, numberInput, ngModel, formControlName, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor) {
          var _this186;

          _classCallCheck(this, McInput);

          _this186 = _super39.call(this, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
          _this186.elementRef = elementRef;
          _this186.rawValidators = rawValidators;
          _this186.mcValidation = mcValidation;
          _this186.numberInput = numberInput;
          _this186.ngModel = ngModel;
          _this186.formControlName = formControlName;
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          _this186.focused = false;
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          _this186.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          _this186.controlType = 'mc-input';
          _this186.uid = "mc-input-".concat(nextUniqueId++);
          _this186.neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(
          /**
          * @param {?} t
          * @return {?}
          */
          function (t) {
            return Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["getSupportedInputTypes"])().has(t);
          });
          _this186._disabled = false;
          _this186._required = false; // tslint:enable no-reserved-keywords

          _this186._type = 'text'; // If no input value accessor was explicitly specified, use the element as the input value
          // accessor.

          _this186._inputValueAccessor = inputValueAccessor || _this186.elementRef.nativeElement;
          _this186.previousNativeValue = _this186.value; // Force setter to be called in case id was not specified.

          _this186.id = _this186.id;
          return _this186;
        }
        /**
         * Implemented as part of McFormFieldControl.
         * \@docs-private
         * @return {?}
         */


        _createClass(McInput, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            if (!this.ngControl) {
              return;
            }

            if (this.mcValidation.useValidation) {
              Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["setMosaicValidation"])(this);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges() {
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.stateChanges.complete();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.ngControl) {
              // We need to re-evaluate this on every change detection cycle, because there are some
              // error triggers that we can't subscribe to (e.g. parent form submissions). This means
              // that whatever logic is in here has to be super lean or we risk destroying the performance.
              this.updateErrorState();
            } // We need to dirty-check the native element's value, because there are some cases where
            // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
            // updating the value using `emitEvent: false`).


            this.dirtyCheckNativeValue();
          }
          /**
           * Focuses the input.
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
          /**
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            this.focusChanged(false);

            if (this.ngControl && this.ngControl.control) {
              /** @type {?} */
              var control = this.ngControl.control;
              control.updateValueAndValidity({
                emitEvent: false
              });

              /** @type {?} */
              control.statusChanges.emit(control.status);
            }
          }
          /**
           * Callback for the cases where the focused state of the input changes.
           * @param {?} isFocused
           * @return {?}
           */

        }, {
          key: "focusChanged",
          value: function focusChanged(isFocused) {
            if (isFocused !== this.focused) {
              this.focused = isFocused;
              this.stateChanges.next();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onInput",
          value: function onInput() {// This is a noop function and is used to let Angular know whenever the value changes.
            // Angular will run a new change detection each time the `input` event has been dispatched.
            // It's necessary that Angular recognizes the value change, because when floatingLabel
            // is set to false and Angular forms aren't used, the placeholder won't recognize the
            // value changes and will not disappear.
            // Listening to the input event wouldn't be necessary when the input is using the
            // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "onContainerClick",

          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */
          value: function onContainerClick() {
            this.focus();
          }
          /**
           * Does some manual dirty checking on the native input `value` property.
           * @protected
           * @return {?}
           */

        }, {
          key: "dirtyCheckNativeValue",
          value: function dirtyCheckNativeValue() {
            /** @type {?} */
            var newValue = this.value;

            if (this.previousNativeValue !== newValue) {
              this.previousNativeValue = newValue;
              this.stateChanges.next();
            }
          }
          /**
           * Make sure the input is a supported type.
           * @protected
           * @return {?}
           */

        }, {
          key: "validateType",
          value: function validateType() {
            if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
              throw getMcInputUnsupportedTypeError(this._type);
            }
          }
          /**
           * Checks whether the input type is one of the types that are never empty.
           * @protected
           * @return {?}
           */

        }, {
          key: "isNeverEmpty",
          value: function isNeverEmpty() {
            return this.neverEmptyInputTypes.indexOf(this._type) > -1;
          }
          /**
           * Checks whether the input is invalid based on the native validation.
           * @protected
           * @return {?}
           */

        }, {
          key: "isBadInput",
          value: function isBadInput() {
            // The `validity` property won't be present on platform-server.

            /** @type {?} */
            var validity =
            /** @type {?} */
            this.elementRef.nativeElement.validity;
            return validity && validity.badInput;
          }
        }, {
          key: "disabled",
          get: function get() {
            if (this.ngControl && this.ngControl.disabled !== null) {
              return this.ngControl.disabled;
            }

            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value); // Browsers may not fire the blur event if the input is disabled too quickly.
            // Reset from here to ensure that the element doesn't become stuck.

            if (this.focused) {
              this.focused = false;
              this.stateChanges.next();
            }
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._id = value || this.uid;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          } // tslint:disable no-reserved-keywords

          /**
           * Input type of the element.
           * @return {?}
           */

        }, {
          key: "type",
          get: function get() {
            return this._type;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._type = value || 'text';
            this.validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native
            // input element. To ensure that bindings for `type` work, we need to sync the setter
            // with the native property. Textarea elements don't support the type property or attribute.

            if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["getSupportedInputTypes"])().has(this._type)) {
              this.elementRef.nativeElement.type = this._type;
            }
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._inputValueAccessor.value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (value !== this.value) {
              this._inputValueAccessor.value = value;
              this.stateChanges.next();
            }
          }
        }, {
          key: "empty",
          get: function get() {
            return !this.isNeverEmpty() && !this.elementRef.nativeElement.value && !this.isBadInput();
          }
        }]);

        return McInput;
      }(McInputMixinBase);

      McInput.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: "input[mcInput]",
          exportAs: 'mcInput',
          host: {
            "class": 'mc-input',
            // Native input properties that are overwritten by Angular inputs need to be synced with
            // the native input element. Otherwise property bindings for those don't work.
            '[attr.id]': 'id',
            '[attr.placeholder]': 'placeholder',
            '[attr.disabled]': 'disabled || null',
            '[required]': 'required',
            '(blur)': 'onBlur()',
            '(focus)': 'focusChanged(true)',
            '(input)': 'onInput()'
          },
          providers: [{
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__["McFormFieldControl"],
            useExisting: McInput
          }]
        }]
      }];
      /** @nocollapse */

      McInput.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: Array,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"]]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_VALIDATION"]]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: McNumberInput,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgModel"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlName"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["ErrorStateMatcher"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [MC_INPUT_VALUE_ACCESSOR]
          }]
        }];
      };

      McInput.propDecorators = {
        errorStateMatcher: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        type: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}

      var McInputMono = function McInputMono() {
        _classCallCheck(this, McInputMono);
      };

      McInputMono.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: 'input[mcInputMonospace]',
          exportAs: 'McInputMonospace',
          host: {
            "class": 'mc-input_monospace'
          }
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: input-number-validators.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var MIN_VALIDATOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return MinValidator;
        }),
        multi: true
      };
      /**
       * A directive which installs the {\@link MinValidator} for any `formControlName`,
       * `formControl`, or control with `ngModel` that also has a `min` attribute.
       *
       * \@experimental
       */

      var MinValidator = /*#__PURE__*/function () {
        function MinValidator() {
          _classCallCheck(this, MinValidator);
        }

        _createClass(MinValidator, [{
          key: "ngOnChanges",

          /**
           * @param {?} changes
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if ('min' in changes) {
              this.createValidator();

              if (this.onChange) {
                this.onChange();
              }
            }
          }
          /**
           * @param {?} c
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(c) {
            return this.validator(c);
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this.onChange = fn;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "createValidator",
          value: function createValidator() {
            this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].min(parseInt(this.min, 10));
          }
        }]);

        return MinValidator;
      }();

      MinValidator.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: '[min][formControlName],[min][formControl],[min][ngModel]',
          providers: [MIN_VALIDATOR],
          host: {
            '[attr.min]': 'min ? min : null'
          }
        }]
      }];
      MinValidator.propDecorators = {
        min: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /** @type {?} */


      var MAX_VALIDATOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return MaxValidator;
        }),
        multi: true
      };
      /**
       * A directive which installs the {\@link MaxValidator} for any `formControlName`,
       * `formControl`, or control with `ngModel` that also has a `min` attribute.
       *
       * \@experimental
       */

      var MaxValidator = /*#__PURE__*/function () {
        function MaxValidator() {
          _classCallCheck(this, MaxValidator);
        }

        _createClass(MaxValidator, [{
          key: "ngOnChanges",

          /**
           * @param {?} changes
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if ('max' in changes) {
              this.createValidator();

              if (this.onChange) {
                this.onChange();
              }
            }
          }
          /**
           * @param {?} c
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(c) {
            return this.validator(c);
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this.onChange = fn;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "createValidator",
          value: function createValidator() {
            this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].max(parseInt(this.max, 10));
          }
        }]);

        return MaxValidator;
      }();

      MaxValidator.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"],
        args: [{
          selector: '[max][formControlName],[max][formControl],[max][ngModel]',
          providers: [MAX_VALIDATOR],
          host: {
            '[attr.max]': 'max ? max : null'
          }
        }]
      }];
      MaxValidator.propDecorators = {
        max: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: input.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McInputModule = function McInputModule() {
        _classCallCheck(this, McInputModule);
      };

      McInputModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]],
          exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],
          declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-input.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-input.js.map

      /***/
    },

    /***/
    "rC5u":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-list.js ***!
      \********************************************************/

    /*! exports provided: MC_SELECTION_LIST_VALUE_ACCESSOR, McList, McListItem, McListModule, McListOption, McListSelection, McListSelectionBase, McListSelectionChange, McListSelectionMixinBase */

    /***/
    function rC5u(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SELECTION_LIST_VALUE_ACCESSOR", function () {
        return MC_SELECTION_LIST_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McList", function () {
        return McList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListItem", function () {
        return McListItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListModule", function () {
        return McListModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListOption", function () {
        return McListOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListSelection", function () {
        return McListSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListSelectionBase", function () {
        return McListSelectionBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListSelectionChange", function () {
        return McListSelectionChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McListSelectionMixinBase", function () {
        return McListSelectionMixinBase;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: list-selection.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function McOptionEvent() {}

      if (false) {}
      /**
       * Component for list-options of selection-list. Each list-option can automatically
       * generate a checkbox and can put current item into the selectionModel of selection-list
       * if the current item is selected.
       */


      var McListOption = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} changeDetector
         * @param {?} ngZone
         * @param {?} listSelection
         * @param {?} group
         */
        function McListOption(elementRef, changeDetector, ngZone, listSelection, group) {
          _classCallCheck(this, McListOption);

          this.elementRef = elementRef;
          this.changeDetector = changeDetector;
          this.ngZone = ngZone;
          this.listSelection = listSelection;
          this.group = group;
          this.hasFocus = false;
          this.onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
          this.onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
          /**
           * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`
           * in the first cycle.
           */

          this.inputsInitialized = false;
          this._disabled = false;
          this._selected = false;
        }
        /**
         * @return {?}
         */


        _createClass(McListOption, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            var _this187 = this;

            /** @type {?} */
            var list = this.listSelection;

            if (list._value && list._value.some(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return list.compareWith(value, _this187._value);
            })) {
              this.setSelected(true);
            }
            /** @type {?} */


            var wasSelected = this._selected; // List options that are selected at initialization can't be reported properly to the form
            // control. This is because it takes some time until the selection-list knows about all
            // available options. Also it can happen that the ControlValueAccessor has an initial value
            // that should be used instead. Deferring the value change report to the next tick ensures
            // that the form control value is not being overwritten.

            Promise.resolve().then(
            /**
            * @return {?}
            */
            function () {
              if (_this187._selected || wasSelected) {
                _this187.selected = true;

                _this187.changeDetector.markForCheck();
              }
            });
            this.inputsInitialized = true;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this188 = this;

            if (this.selected) {
              // We have to delay this until the next tick in order
              // to avoid changed after checked errors.
              Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                return _this188.selected = false;
              });
            }

            this.listSelection.removeOptionFromList(this);
          }
          /**
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.selected = !this.selected;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getLabel",
          value: function getLabel() {
            return this.text ? this.text.nativeElement.textContent : '';
          }
          /**
           * @param {?} selected
           * @return {?}
           */

        }, {
          key: "setSelected",
          value: function setSelected(selected) {
            if (this._selected === selected || !this.listSelection.selectionModel) {
              return;
            }

            this._selected = selected;

            if (selected) {
              this.listSelection.selectionModel.select(this);
            } else {
              this.listSelection.selectionModel.deselect(this);
            }

            this.changeDetector.markForCheck();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHeight",
          value: function getHeight() {
            return this.elementRef.nativeElement.getClientRects()[0].height;
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "handleClick",
          value: function handleClick($event) {
            if (this.disabled) {
              return;
            }

            this.listSelection.setSelectedOptionsByClick(this, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])($event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])($event, 'ctrlKey'));
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            var _this189 = this;

            if (!this.hasFocus) {
              this.elementRef.nativeElement.focus();
              this.onFocus.next({
                option: this
              });
              Promise.resolve().then(
              /**
              * @return {?}
              */
              function () {
                _this189.hasFocus = true;

                _this189.changeDetector.markForCheck();
              });
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            var _this190 = this;

            // When animations are enabled, Angular may end up removing the option from the DOM a little
            // earlier than usual, causing it to be blurred and throwing off the logic in the list
            // that moves focus not the next item. To work around the issue, we defer marking the option
            // as not focused until the next time the zone stabilizes.
            this.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this190.ngZone.run(
              /**
              * @return {?}
              */
              function () {
                _this190.hasFocus = false;

                _this190.onBlur.next({
                  option: _this190
                });
              });
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this.elementRef.nativeElement;
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} newValue
           * @return {?}
           */
          ,
          set: function set(newValue) {
            if (this.selected && newValue !== this.value && this.inputsInitialized) {
              this.selected = false;
            }

            this._value = newValue;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            /** @type {?} */
            var listSelectionDisabled = this.listSelection && this.listSelection.disabled;
            /** @type {?} */

            var groupDisabled = this.group && this.group.disabled;
            return listSelectionDisabled || groupDisabled || this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);

            if (newValue !== this._disabled) {
              this._disabled = newValue;
              this.changeDetector.markForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "showCheckbox",
          get: function get() {
            return this._showCheckbox !== undefined ? this._showCheckbox : this.listSelection.showCheckbox;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._showCheckbox = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this.listSelection.selectionModel && this.listSelection.selectionModel.isSelected(this) || false;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var isSelected = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);

            if (isSelected !== this._selected) {
              this.setSelected(isSelected);
              this.listSelection.reportValueChange();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabIndex",
          get: function get() {
            return this.disabled ? null : -1;
          }
        }]);

        return McListOption;
      }();

      McListOption.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          exportAs: 'mcListOption',
          selector: 'mc-list-option',
          host: {
            "class": 'mc-list-option mc-no-select',
            '[class.mc-selected]': 'selected',
            '[class.mc-focused]': 'hasFocus',
            '[class.mc-disabled]': 'disabled',
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null',
            '(focus)': 'focus()',
            '(blur)': 'blur()',
            '(click)': 'handleClick($event)'
          },
          template: "<div class=\"mc-list-item-content\">\n    <mc-pseudo-checkbox\n        *ngIf=\"showCheckbox\"\n        [state]=\"selected ? 'checked' : 'unchecked'\"\n        [disabled]=\"disabled\">\n    </mc-pseudo-checkbox>\n\n    <div class=\"mc-list-text\" #text>\n        <ng-content></ng-content>\n    </div>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          preserveWhitespaces: false,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      McListOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"]
        }, {
          type: McListSelection,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return McListSelection;
            })]
          }]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptgroup"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]
          }]
        }];
      };

      McListOption.propDecorators = {
        lines: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLine"]]
        }],
        text: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
          args: ['text', {
            "static": false
          }]
        }],
        checkboxPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        showCheckbox: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /** @type {?} */


      var MC_SELECTION_LIST_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McListSelection;
        }),
        multi: true
      };

      var McListSelectionChange =
      /**
       * @param {?} source
       * @param {?} option
       */
      function McListSelectionChange(source, option) {
        _classCallCheck(this, McListSelectionChange);

        this.source = source;
        this.option = option;
      };

      if (false) {}

      var McListSelectionBase =
      /**
       * @param {?} elementRef
       */
      function McListSelectionBase(elementRef) {
        _classCallCheck(this, McListSelectionBase);

        this.elementRef = elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McListSelectionMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McListSelectionBase));

      var McListSelection = /*#__PURE__*/function (_McListSelectionMixin) {
        _inherits(McListSelection, _McListSelectionMixin);

        var _super40 = _createSuper(McListSelection);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} multiple
         */
        function McListSelection(elementRef, changeDetectorRef, multiple) {
          var _this191;

          _classCallCheck(this, McListSelection);

          _this191 = _super40.call(this, elementRef);
          _this191.changeDetectorRef = changeDetectorRef;
          _this191._autoSelect = true;
          _this191._noUnselectLast = true;
          _this191.horizontal = false;
          _this191._tabIndex = 0;
          _this191.userTabIndex = null; // Emits a change event whenever the selected state of an option changes.

          _this191.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          /**
           * Emits whenever the component is destroyed.
           */

          _this191.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
          /**
           * Function used for comparing an option against the selected value when determining which
           * options should appear as selected. The first argument is the value of an options. The second
           * one is a value from the selected value. A boolean must be returned.
           */

          _this191.compareWith =
          /**
          * @param {?} a1
          * @param {?} a2
          * @return {?}
          */
          function (a1, a2) {
            return a1 === a2;
          }; // View to model callback that should be called if the list or its options lost focus.
          // tslint:disable-next-line:no-empty


          _this191.onTouched =
          /**
          * @return {?}
          */
          function () {}; // View to model callback that should be called whenever the selected options change.


          _this191.onChange =
          /**
          * @param {?} _
          * @return {?}
          */
          function (_) {};

          if (multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX || multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD) {
            _this191.multipleMode = multiple;
          } else if (multiple !== null) {
            _this191.multipleMode = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
          }

          if (_this191.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX) {
            _this191.autoSelect = false;
            _this191.noUnselectLast = false;
          }

          _this191.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["SelectionModel"](_this191.multiple);
          return _this191;
        }
        /**
         * @return {?}
         */


        _createClass(McListSelection, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            var _this192 = this;

            this.horizontal = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(this.horizontal);
            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__["FocusKeyManager"](this.options).withTypeAhead().withVerticalOrientation(!this.horizontal).withHorizontalOrientation(this.horizontal ? 'ltr' : null);
            this.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this192._tabIndex = -1;
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                _this192._tabIndex = _this192.userTabIndex || 0;

                _this192.changeDetectorRef.markForCheck();
              });
            });

            if (this._value) {
              this.setOptionsFromValues(this._value);
            }

            this.selectionModel.changed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              var _iterator8 = _createForOfIteratorHelper(event.added),
                  _step8;

              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var item = _step8.value;
                  item.selected = true;
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }

              var _iterator9 = _createForOfIteratorHelper(event.removed),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var _item = _step9.value;
                  _item.selected = false;
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
            });
            this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this192.resetOptions(); // Check to see if we need to update our tab index


              _this192.updateTabIndex();
            });
            this.updateScrollSize();
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed.next();
            this.destroyed.complete();
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            if (this.options.length === 0) {
              return;
            }

            this.keyManager.setFirstItemActive();
          }
          /**
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            if (!this.hasFocusedOption()) {
              this.keyManager.setActiveItem(-1);
            }

            this.onTouched();
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @return {?}
           */

        }, {
          key: "selectAll",
          value: function selectAll() {
            this.options.forEach(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.setSelected(true);
            });
            this.reportValueChange();
          }
          /**
           * @return {?}
           */

        }, {
          key: "deselectAll",
          value: function deselectAll() {
            this.options.forEach(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.setSelected(false);
            });
            this.reportValueChange();
          }
          /**
           * @return {?}
           */

        }, {
          key: "updateScrollSize",
          value: function updateScrollSize() {
            if (this.horizontal || !this.options.first) {
              return;
            }

            this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));
          }
          /**
           * @param {?} option
           * @param {?} shiftKey
           * @param {?} ctrlKey
           * @return {?}
           */

        }, {
          key: "setSelectedOptionsByClick",
          value: function setSelectedOptionsByClick(option, shiftKey, ctrlKey) {
            if (shiftKey && this.multiple) {
              this.setSelectedOptions(option);
            } else if (ctrlKey) {
              if (!this.canDeselectLast(option)) {
                return;
              }

              this.selectionModel.toggle(option);
            } else {
              if (this.autoSelect) {
                if (this.multipleMode !== _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD) {
                  this.selectionModel.toggle(option);
                }

                if (this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD || !this.multiple) {
                  this.options.forEach(
                  /**
                  * @param {?} item
                  * @return {?}
                  */
                  function (item) {
                    return item.setSelected(false);
                  });
                  option.setSelected(true);
                }
              }
            }

            this.emitChangeEvent(option);
            this.reportValueChange();
          }
          /**
           * @param {?} option
           * @param {?} shiftKey
           * @param {?} ctrlKey
           * @return {?}
           */

        }, {
          key: "setSelectedOptionsByKey",
          value: function setSelectedOptionsByKey(option, shiftKey, ctrlKey) {
            if (shiftKey && this.multiple) {
              this.setSelectedOptions(option);
            } else if (ctrlKey) {
              if (!this.canDeselectLast(option)) {
                return;
              }
            } else {
              if (this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD || !this.multiple) {
                this.options.forEach(
                /**
                * @param {?} item
                * @return {?}
                */
                function (item) {
                  return item.setSelected(false);
                });
                option.setSelected(true);
              }
            }

            this.emitChangeEvent(option);
            this.reportValueChange();
          }
          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "setSelectedOptions",
          value: function setSelectedOptions(option) {
            var _this193 = this;

            /** @type {?} */
            var selectedOptionState = option.selected;
            /** @type {?} */

            var fromIndex = this.keyManager.previousActiveItemIndex;
            /** @type {?} */

            var toIndex = this.keyManager.previousActiveItemIndex = this.keyManager.activeItemIndex;

            if (toIndex === fromIndex) {
              return;
            }

            if (fromIndex > toIndex) {
              var _ref5 = [toIndex, fromIndex];
              fromIndex = _ref5[0];
              toIndex = _ref5[1];
            }

            this.options.toArray().slice(fromIndex, toIndex + 1).filter(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return !item.disabled;
            }).forEach(
            /**
            * @param {?} renderedOption
            * @return {?}
            */
            function (renderedOption) {
              /** @type {?} */
              var isLastRenderedOption = renderedOption === _this193.keyManager.activeItem;

              if (isLastRenderedOption && renderedOption.selected && _this193.noUnselectLast) {
                return;
              }

              renderedOption.setSelected(!selectedOptionState);
            });
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} values
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(values) {
            this._value = values;

            if (this.options) {
              this.setOptionsFromValues(values || []);
            }
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          } // Implemented as part of ControlValueAccessor.

          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          } // Implemented as a part of ControlValueAccessor.

          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            if (this.options) {
              this.options.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.disabled = isDisabled;
              });
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "getSelectedOptionValues",
          value: function getSelectedOptionValues() {
            return this.options.filter(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.selected;
            }).map(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.value;
            });
          } // Toggles the selected state of the currently focused option.

          /**
           * @return {?}
           */

        }, {
          key: "toggleFocusedOption",
          value: function toggleFocusedOption() {
            /** @type {?} */
            var focusedIndex = this.keyManager.activeItemIndex;

            if (focusedIndex != null && this.isValidIndex(focusedIndex)) {
              /** @type {?} */
              var focusedOption = this.options.toArray()[focusedIndex];

              if (focusedOption && this.canDeselectLast(focusedOption)) {
                focusedOption.toggle(); // Emit a change event because the focused option changed its state through user interaction.

                this.emitChangeEvent(focusedOption);
              }
            }
          }
          /**
           * @param {?} listOption
           * @return {?}
           */

        }, {
          key: "canDeselectLast",
          value: function canDeselectLast(listOption) {
            return !(this.noUnselectLast && this.selectionModel.selected.length === 1 && listOption.selected);
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHeight",
          value: function getHeight() {
            return this.elementRef.nativeElement.getClientRects()[0].height;
          } // Removes an option from the selection list and updates the active item.

          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "removeOptionFromList",
          value: function removeOptionFromList(option) {
            if (option.hasFocus) {
              /** @type {?} */
              var optionIndex = this.getOptionIndex(option); // Check whether the option is the last item

              if (optionIndex > 0) {
                this.keyManager.setPreviousItemActive();
              } else if (optionIndex === 0 && this.options.length > 1) {
                this.keyManager.setNextItemActive();
              }
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            // tslint:disable-next-line: deprecation

            /** @type {?} */
            var keyCode = event.keyCode;

            switch (keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["SPACE"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ENTER"]:
                this.toggleFocusedOption();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["TAB"]:
                this.keyManager.tabOut.next();
                return;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["DOWN_ARROW"]:
                this.keyManager.setNextItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["UP_ARROW"]:
                this.keyManager.setPreviousItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["HOME"]:
                this.keyManager.setFirstItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["END"]:
                this.keyManager.setLastItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["PAGE_UP"]:
                this.keyManager.setPreviousPageItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["PAGE_DOWN"]:
                this.keyManager.setNextPageItemActive();
                break;

              default:
                return;
            }

            event.preventDefault();
            this.setSelectedOptionsByKey(
            /** @type {?} */
            this.keyManager.activeItem, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event, 'ctrlKey'));
          } // Reports a value change to the ControlValueAccessor

          /**
           * @return {?}
           */

        }, {
          key: "reportValueChange",
          value: function reportValueChange() {
            if (this.options) {
              /** @type {?} */
              var value = this.getSelectedOptionValues();
              this.onChange(value);
              this._value = value;
            }
          } // Emits a change event if the selected state of an option changed.

          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent(option) {
            this.selectionChange.emit(new McListSelectionChange(this, option));
          }
          /**
           * @protected
           * @return {?}
           */

        }, {
          key: "updateTabIndex",
          value: function updateTabIndex() {
            this._tabIndex = this.userTabIndex || (this.options.length === 0 ? -1 : 0);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "resetOptions",
          value: function resetOptions() {
            this.dropSubscriptions();
            this.listenToOptionsFocus();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "dropSubscriptions",
          value: function dropSubscriptions() {
            if (this.optionFocusSubscription) {
              this.optionFocusSubscription.unsubscribe();
              this.optionFocusSubscription = null;
            }

            if (this.optionBlurSubscription) {
              this.optionBlurSubscription.unsubscribe();
              this.optionBlurSubscription = null;
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "listenToOptionsFocus",
          value: function listenToOptionsFocus() {
            var _this194 = this;

            this.optionFocusSubscription = this.optionFocusChanges.subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              /** @type {?} */
              var index = _this194.options.toArray().indexOf(event.option);

              if (_this194.isValidIndex(index)) {
                _this194.keyManager.updateActiveItem(index);
              }
            });
            this.optionBlurSubscription = this.optionBlurChanges.subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this194.blur();
            });
          }
          /**
           * Checks whether any of the options is focused.
           * @private
           * @return {?}
           */

        }, {
          key: "hasFocusedOption",
          value: function hasFocusedOption() {
            return this.options.some(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.hasFocus;
            });
          } // Returns the option with the specified value.

          /**
           * @private
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "getOptionByValue",
          value: function getOptionByValue(value) {
            return this.options.find(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.value === value;
            });
          } // Sets the selected options based on the specified values.

          /**
           * @private
           * @param {?} values
           * @return {?}
           */

        }, {
          key: "setOptionsFromValues",
          value: function setOptionsFromValues(values) {
            var _this195 = this;

            this.options.forEach(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.setSelected(false);
            });
            values.map(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return _this195.getOptionByValue(value);
            }).filter(Boolean).forEach(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return (
                /** @type {?} */
                option.setSelected(true)
              );
            });
          }
          /**
           * Utility to ensure all indexes are valid.
           * @private
           * @param {?} index The index to be checked.
           * @return {?} True if the index is valid for our list of options.
           */

        }, {
          key: "isValidIndex",
          value: function isValidIndex(index) {
            return index >= 0 && index < this.options.length;
          } // Returns the index of the specified list option.

          /**
           * @private
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "getOptionIndex",
          value: function getOptionIndex(option) {
            return this.options.toArray().indexOf(option);
          }
        }, {
          key: "autoSelect",
          get: function get() {
            return this._autoSelect;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._autoSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "noUnselectLast",
          get: function get() {
            return this._noUnselectLast;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._noUnselectLast = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return !!this.multipleMode;
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabIndex",
          get: function get() {
            return this.disabled ? -1 : this._tabIndex;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.userTabIndex = value;
            this._tabIndex = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "showCheckbox",
          get: function get() {
            return this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
          }
          /**
           * @return {?}
           */

        }, {
          key: "optionFocusChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"]).apply(void 0, _toConsumableArray(this.options.map(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.onFocus;
            })));
          }
          /**
           * @return {?}
           */

        }, {
          key: "optionBlurChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"]).apply(void 0, _toConsumableArray(this.options.map(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.onBlur;
            })));
          }
        }]);

        return McListSelection;
      }(McListSelectionMixinBase);

      McListSelection.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          exportAs: 'mcListSelection',
          selector: 'mc-list-selection',
          template: '<ng-content></ng-content>',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          inputs: ['disabled'],
          host: {
            "class": 'mc-list-selection',
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null',
            '(focus)': 'focus()',
            '(blur)': 'blur()',
            '(keydown)': 'onKeyDown($event)',
            '(window:resize)': 'updateScrollSize()'
          },
          providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],
          preserveWhitespaces: false,
          styles: [".mc-divider{border-top-style:solid;border-top-width:1px;display:block;margin:0}.mc-divider.mc-divider_vertical{border-right-style:solid;border-right-width:1px;border-top:0}.mc-divider.mc-divider_inset{margin-left:80px}[dir=rtl] .mc-divider.mc-divider_inset{margin-left:auto;margin-right:80px}.mc-no-select{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.mc-list,.mc-list-selection{display:block;outline:none}.mc-list-item,.mc-list-option{border:2px solid transparent;display:block;height:28px}.mc-list-item .mc-list-item-content,.mc-list-option .mc-list-item-content{align-items:center;box-sizing:border-box;display:flex;flex-direction:row;height:100%;padding:0 15px;position:relative}.mc-list-item.mc-2-line,.mc-list-option.mc-2-line{height:72px}.mc-list-item.mc-3-line,.mc-list-option.mc-3-line{height:88px}.mc-list-item.mc-multi-line,.mc-list-option.mc-multi-line{height:auto}.mc-list-item.mc-multi-line .mc-list-item-content,.mc-list-option.mc-multi-line .mc-list-item-content{padding-bottom:16px;padding-top:16px}.mc-list-item .mc-list-text,.mc-list-option .mc-list-text{box-sizing:border-box;display:flex;flex-direction:column;overflow:hidden;padding:0;width:100%}.mc-list-item .mc-list-text>*,.mc-list-option .mc-list-text>*{font-size:inherit;font-weight:400;margin:0;padding:0}.mc-list-item .mc-list-text:empty,.mc-list-option .mc-list-text:empty{display:none}.mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),.mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-right:0}[dir=rtl] .mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),[dir=rtl] .mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-left:0}.mc-list-item .mc-list-icon,.mc-list-option .mc-list-icon{border-radius:50%;box-sizing:content-box;flex-shrink:0;font-size:24px;height:24px;padding:4px;width:24px}.mc-list-item .mc-list-icon~.mc-divider_inset,.mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:62px;width:calc(100% - 62px)}[dir=rtl] .mc-list-item .mc-list-icon~.mc-divider_inset,[dir=rtl] .mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:auto;margin-right:62px}.mc-list-item .mc-divider,.mc-list-option .mc-divider{bottom:0;left:0;margin:0;position:absolute;width:100%}[dir=rtl] .mc-list-item .mc-divider,[dir=rtl] .mc-list-option .mc-divider{margin-left:auto;margin-right:0}.mc-list-item .mc-divider.mc-divider_inset,.mc-list-option .mc-divider.mc-divider_inset{position:absolute}.mc-list-item .mc-pseudo-checkbox,.mc-list-option .mc-pseudo-checkbox{margin-right:8px}.mc-list-option:not([disabled]):not(.mc-disabled){cursor:pointer}"]
        }]
      }];
      /** @nocollapse */

      McListSelection.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"],
            args: ['multiple']
          }]
        }];
      };

      McListSelection.propDecorators = {
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [McListOption, {
            descendants: true
          }]
        }],
        autoSelect: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        noUnselectLast: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        horizontal: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        selectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        compareWith: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: list.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McList = function McList() {
        _classCallCheck(this, McList);
      };

      McList.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-list',
          host: {
            "class": 'mc-list'
          },
          template: '<ng-content></ng-content>',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          styles: [".mc-divider{border-top-style:solid;border-top-width:1px;display:block;margin:0}.mc-divider.mc-divider_vertical{border-right-style:solid;border-right-width:1px;border-top:0}.mc-divider.mc-divider_inset{margin-left:80px}[dir=rtl] .mc-divider.mc-divider_inset{margin-left:auto;margin-right:80px}.mc-no-select{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.mc-list,.mc-list-selection{display:block;outline:none}.mc-list-item,.mc-list-option{border:2px solid transparent;display:block;height:28px}.mc-list-item .mc-list-item-content,.mc-list-option .mc-list-item-content{align-items:center;box-sizing:border-box;display:flex;flex-direction:row;height:100%;padding:0 15px;position:relative}.mc-list-item.mc-2-line,.mc-list-option.mc-2-line{height:72px}.mc-list-item.mc-3-line,.mc-list-option.mc-3-line{height:88px}.mc-list-item.mc-multi-line,.mc-list-option.mc-multi-line{height:auto}.mc-list-item.mc-multi-line .mc-list-item-content,.mc-list-option.mc-multi-line .mc-list-item-content{padding-bottom:16px;padding-top:16px}.mc-list-item .mc-list-text,.mc-list-option .mc-list-text{box-sizing:border-box;display:flex;flex-direction:column;overflow:hidden;padding:0;width:100%}.mc-list-item .mc-list-text>*,.mc-list-option .mc-list-text>*{font-size:inherit;font-weight:400;margin:0;padding:0}.mc-list-item .mc-list-text:empty,.mc-list-option .mc-list-text:empty{display:none}.mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),.mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-right:0}[dir=rtl] .mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),[dir=rtl] .mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-left:0}.mc-list-item .mc-list-icon,.mc-list-option .mc-list-icon{border-radius:50%;box-sizing:content-box;flex-shrink:0;font-size:24px;height:24px;padding:4px;width:24px}.mc-list-item .mc-list-icon~.mc-divider_inset,.mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:62px;width:calc(100% - 62px)}[dir=rtl] .mc-list-item .mc-list-icon~.mc-divider_inset,[dir=rtl] .mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:auto;margin-right:62px}.mc-list-item .mc-divider,.mc-list-option .mc-divider{bottom:0;left:0;margin:0;position:absolute;width:100%}[dir=rtl] .mc-list-item .mc-divider,[dir=rtl] .mc-list-option .mc-divider{margin-left:auto;margin-right:0}.mc-list-item .mc-divider.mc-divider_inset,.mc-list-option .mc-divider.mc-divider_inset{position:absolute}.mc-list-item .mc-pseudo-checkbox,.mc-list-option .mc-pseudo-checkbox{margin-right:8px}.mc-list-option:not([disabled]):not(.mc-disabled){cursor:pointer}"]
        }]
      }];

      var McListItem = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         */
        function McListItem(elementRef) {
          _classCallCheck(this, McListItem);

          this.elementRef = elementRef;
        }
        /**
         * @return {?}
         */


        _createClass(McListItem, [{
          key: "ngAfterContentInit",
          value: function ngAfterContentInit() {
            // tslint:disable-next-line:no-unused-expression
            new _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLineSetter"](this.lines, this.elementRef);
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleFocus",
          value: function handleFocus() {
            this.elementRef.nativeElement.classList.add('mc-focused');
          }
          /**
           * @return {?}
           */

        }, {
          key: "handleBlur",
          value: function handleBlur() {
            this.elementRef.nativeElement.classList.remove('mc-focused');
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this.elementRef.nativeElement;
          }
        }]);

        return McListItem;
      }();

      McListItem.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
        args: [{
          selector: 'mc-list-item, a[mc-list-item]',
          host: {
            "class": 'mc-list-item',
            '(focus)': 'handleFocus()',
            '(blur)': 'handleBlur()'
          },
          template: "<div class=\"mc-list-item-content\">\n    <ng-content select=\"[mc-list-icon], [mcListIcon]\"></ng-content>\n\n    <div class=\"mc-list-text\">\n        <ng-content select=\"[mc-line], [mcLine]\"></ng-content>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
          preserveWhitespaces: false,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush
        }]
      }];
      /** @nocollapse */

      McListItem.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }];
      };

      McListItem.propDecorators = {
        lines: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"],
          args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLine"]]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: list.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McListModule = function McListModule() {
        _classCallCheck(this, McListModule);
      };

      McListModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McPseudoCheckboxModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLineModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"]],
          exports: [McList, McListSelection, McListItem, McListOption, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"]],
          declarations: [McList, McListSelection, McListItem, McListOption]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-list.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-list.js.map

      /***/
    },

    /***/
    "rMhK":
    /*!*********************************************************************************!*\
      !*** ./packages/docs/src/app/shared/documentation-items/documentation-items.ts ***!
      \*********************************************************************************/

    /*! exports provided: DocumentationItems */

    /***/
    function rMhK(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var _DOCS;

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DocumentationItems", function () {
        return DocumentationItems;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* tslint:disable:naming-convention */


      var COMPONENTS = 'components';
      var CDK = 'cdk';
      var DOCS = (_DOCS = {}, _defineProperty(_DOCS, COMPONENTS, [{
        id: 'indicators',
        name: 'Indicators',
        summary: '',
        items: [{
          id: 'alerts',
          name: 'Alerts',
          summary: '',
          examples: ['alerts-types']
        }, {
          id: 'badges',
          name: 'Badges',
          summary: '',
          examples: ['badges-types']
        }, {
          id: 'icon',
          name: 'Icon',
          summary: '',
          examples: ['icon-types']
        }, {
          id: 'progress-bar',
          name: 'Progress-bar',
          summary: '',
          examples: ['progress-bar-types']
        }, {
          id: 'progress-spinner',
          name: 'Progress-spinner',
          summary: '',
          examples: ['progress-spinner-types']
        }, {
          id: 'tags',
          name: 'Tags',
          summary: '',
          examples: ['tags-types']
        }]
      }, {
        id: 'modals',
        name: 'Popups & Modals',
        summary: '',
        items: [{
          id: 'modal',
          name: 'Modal',
          summary: '',
          examples: ['modal-types']
        }, {
          id: 'popover',
          name: 'Popover',
          summary: '',
          examples: ['popover-types']
        }, {
          id: 'sidepanel',
          name: 'Sidepanel',
          summary: '',
          examples: ['sidepanel-types']
        }, {
          id: 'tooltip',
          name: 'Tooltip',
          summary: '',
          examples: ['tooltip-types']
        }]
      }, {
        id: 'forms',
        name: 'Form Controls',
        summary: 'Controls that collect and validate user input.',
        items: [{
          id: 'checkbox',
          name: 'Checkbox',
          summary: '',
          examples: ['checkbox-types']
        }, {
          id: 'datepicker',
          name: 'Datepicker',
          summary: '',
          examples: ['datepicker-types']
        }, {
          id: 'dropdown',
          name: 'Dropdown',
          summary: '',
          examples: ['dropdown-types']
        }, {
          id: 'input',
          name: 'Input',
          summary: '',
          examples: ['input-types']
        }, {
          id: 'textarea',
          name: 'Textarea',
          summary: '',
          examples: ['textarea-types']
        }, {
          id: 'radio',
          name: 'Radio',
          summary: '',
          examples: ['radio-types']
        }, {
          id: 'timepicker',
          name: 'Timepicker',
          summary: '',
          examples: ['timepicker-types']
        }, {
          id: 'select',
          name: 'Select',
          summary: '',
          examples: ['select-types']
        }, {
          id: 'tree-select',
          name: 'Tree-select',
          summary: '',
          examples: ['treeSelect-types']
        }, {
          id: 'autocomplete',
          name: 'Autocomplete',
          summary: '',
          examples: ['autocomplete-types']
        }, {
          id: 'tags-input',
          name: 'Tags input',
          summary: '',
          examples: ['tags-input-types']
        }, {
          id: 'tags-autocomplete',
          name: 'Tags autocomplete',
          summary: '',
          examples: ['tags-autocomplete-types']
        }]
      }, {
        id: 'nav',
        name: 'Navigation',
        summary: 'Menus, toolbars that organise your content.',
        items: [{
          id: 'link',
          name: 'Link',
          summary: '',
          examples: ['link-types']
        }, {
          id: 'navbar',
          name: 'Navbar',
          summary: '',
          examples: ['navbar-types']
        }]
      }, {
        id: 'layout',
        name: 'Layout',
        summary: '',
        items: [{
          id: 'card',
          name: 'Card',
          summary: '',
          examples: ['card-types']
        }, {
          id: 'splitter',
          name: 'Splitter',
          summary: '',
          examples: ['splitter-types']
        }, {
          id: 'divider',
          name: 'Divider',
          summary: '',
          examples: ['divider-types']
        }, {
          id: 'tabs',
          name: 'Tabs',
          summary: '',
          examples: ['tabs-types']
        }, {
          id: 'layout-flex',
          name: 'Layout flex',
          summary: '',
          examples: ['layout-flex-types']
        }]
      }, {
        id: 'buttons',
        name: 'Buttons',
        summary: 'Buttons, toggles.',
        items: [{
          id: 'button',
          name: 'Button',
          summary: 'An interactive button with a range of presentation options.',
          examples: ['button-types']
        }, {
          id: 'button-toggle',
          name: 'Button Toggle',
          summary: '',
          examples: ['button-toggle-types']
        }, {
          id: 'toggle',
          name: 'Toggle',
          summary: '',
          examples: ['toggle-types']
        }]
      }, {
        id: 'core/styles',
        name: 'Styles',
        summary: 'styles',
        items: [{
          id: 'typography',
          name: 'Typography',
          summary: '',
          examples: ['typography-types']
        }]
      }, {
        id: 'core/styles',
        name: 'Data list',
        summary: 'styles',
        items: [{
          id: 'list',
          name: 'List',
          summary: '',
          examples: ['list-types']
        }, {
          id: 'tree',
          name: 'Tree',
          summary: '',
          examples: ['tree-types']
        }, {
          id: 'tags-list',
          name: 'Tags list',
          summary: '',
          examples: ['tags-list-types']
        }, {
          id: 'table',
          name: 'Table',
          summary: '',
          examples: ['table-types']
        }]
      }, {
        id: 'core/styles',
        name: 'Formatters',
        summary: 'styles',
        items: [{
          id: 'number-formatter',
          name: 'Number',
          summary: '',
          examples: ['number-types']
        }, {
          id: 'date-formatter',
          name: 'Date',
          summary: '',
          examples: ['date-types']
        }]
      }, {
        id: 'core/styles',
        name: 'Validation',
        summary: 'styles',
        items: [{
          id: 'validation',
          name: 'Validation',
          summary: '',
          examples: ['validation-types']
        }]
      }]), _defineProperty(_DOCS, CDK, []), _DOCS);

      var _iterator10 = _createForOfIteratorHelper(DOCS[COMPONENTS]),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var category = _step10.value;

          var _iterator12 = _createForOfIteratorHelper(category.items),
              _step12;

          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var doc = _step12.value;
              doc.packageName = 'mosaic';
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      var _iterator11 = _createForOfIteratorHelper(DOCS[CDK]),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _category = _step11.value;

          var _iterator13 = _createForOfIteratorHelper(_category.items),
              _step13;

          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var _doc = _step13.value;
              _doc.packageName = 'cdk';
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      var ALL_COMPONENTS = DOCS[COMPONENTS].reduce(function (result, category) {
        return result.concat(category.items);
      }, []);
      var ALL_CDK = DOCS[CDK].reduce(function (result, cdk) {
        return result.concat(cdk.items);
      }, []);
      var ALL_DOCS = ALL_COMPONENTS.concat(ALL_CDK);
      var ALL_CATEGORIES = DOCS[COMPONENTS].concat(DOCS[CDK]);

      var DocumentationItems = /*#__PURE__*/function () {
        function DocumentationItems() {
          _classCallCheck(this, DocumentationItems);
        }

        _createClass(DocumentationItems, [{
          key: "getCategories",
          value: function getCategories(section) {
            return DOCS[section];
          }
        }, {
          key: "getItems",
          value: function getItems(section) {
            if (section === COMPONENTS) {
              return ALL_COMPONENTS;
            }

            if (section === CDK) {
              return ALL_CDK;
            }

            return [];
          }
        }, {
          key: "getItemById",
          value: function getItemById(id, section) {
            var sectionLookup = section === 'cdk' ? 'cdk' : 'mosaic';
            return ALL_DOCS.find(function (doc) {
              return doc.id === id && doc.packageName === sectionLookup;
            });
          }
        }, {
          key: "getCategoryById",
          value: function getCategoryById(id) {
            return ALL_CATEGORIES.find(function (c) {
              return c.id === id;
            });
          }
        }]);

        return DocumentationItems;
      }();

      DocumentationItems = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], DocumentationItems);
      /***/
    },

    /***/
    "sOMx":
    /*!************************************************************!*\
      !*** ./packages/docs/src/app/containers/homepage/index.ts ***!
      \************************************************************/

    /*! exports provided: HomepageComponent, HomepageModule */

    /***/
    function sOMx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _homepage_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./homepage.component */
      "I1VR");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "HomepageComponent", function () {
        return _homepage_component__WEBPACK_IMPORTED_MODULE_0__["HomepageComponent"];
      });
      /* harmony import */


      var _homepage_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./homepage.module */
      "CYWk");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "HomepageModule", function () {
        return _homepage_module__WEBPACK_IMPORTED_MODULE_1__["HomepageModule"];
      });
      /***/

    },

    /***/
    "t/jU":
    /*!**********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-navbar.js ***!
      \**********************************************************/

    /*! exports provided: McNavbar, McNavbarBrand, McNavbarContainer, McNavbarItem, McNavbarItemBase, McNavbarLogo, McNavbarMixinBase, McNavbarModule, McNavbarTitle */

    /***/
    function tJU(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbar", function () {
        return McNavbar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarBrand", function () {
        return McNavbarBrand;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarContainer", function () {
        return McNavbarContainer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarItem", function () {
        return McNavbarItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarItemBase", function () {
        return McNavbarItemBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarLogo", function () {
        return McNavbarLogo;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarMixinBase", function () {
        return McNavbarMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarModule", function () {
        return McNavbarModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McNavbarTitle", function () {
        return McNavbarTitle;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: navbar.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var COLLAPSED_CLASS = 'mc-navbar-collapsed-title';

      var McNavbarLogo = function McNavbarLogo() {
        _classCallCheck(this, McNavbarLogo);
      };

      McNavbarLogo.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-navbar-logo',
          host: {
            "class": 'mc-navbar-logo'
          }
        }]
      }];

      var McNavbarBrand = function McNavbarBrand() {
        _classCallCheck(this, McNavbarBrand);
      };

      McNavbarBrand.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-navbar-brand',
          host: {
            "class": 'mc-navbar-brand'
          }
        }]
      }];

      var McNavbarTitle = function McNavbarTitle() {
        _classCallCheck(this, McNavbarTitle);
      };

      McNavbarTitle.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-navbar-title',
          host: {
            "class": 'mc-navbar-title'
          }
        }]
      }];

      var McNavbarItemBase =
      /**
       * @param {?} elementRef
       */
      function McNavbarItemBase(elementRef) {
        _classCallCheck(this, McNavbarItemBase);

        this.elementRef = elementRef;
      };

      if (false) {} // tslint:disable-next-line:naming-convention

      /** @type {?} */


      var McNavbarMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McNavbarItemBase));

      var McNavbarItem = /*#__PURE__*/function (_McNavbarMixinBase) {
        _inherits(McNavbarItem, _McNavbarMixinBase);

        var _super41 = _createSuper(McNavbarItem);

        /**
         * @param {?} elementRef
         * @param {?} _focusMonitor
         */
        function McNavbarItem(elementRef, _focusMonitor) {
          var _this196;

          _classCallCheck(this, McNavbarItem);

          _this196 = _super41.call(this, elementRef);
          _this196.elementRef = elementRef;
          _this196._focusMonitor = _focusMonitor;
          return _this196;
        }
        /**
         * @param {?} value
         * @return {?}
         */


        _createClass(McNavbarItem, [{
          key: "ngOnInit",

          /**
           * @return {?}
           */
          value: function ngOnInit() {
            this.denyClickIfDisabled();

            this._focusMonitor.monitor(this.elementRef.nativeElement, true);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);
          } // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200

          /**
           * @private
           * @return {?}
           */

        }, {
          key: "denyClickIfDisabled",
          value: function denyClickIfDisabled() {
            var _this197 = this;

            /** @type {?} */
            var events = this.elementRef.nativeElement.eventListeners('click');
            events.forEach(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              return _this197.elementRef.nativeElement.removeEventListener('click', event);
            });
            this.elementRef.nativeElement.addEventListener('click',
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              if (_this197.elementRef.nativeElement.hasAttribute('disabled')) {
                event.stopImmediatePropagation();
              }
            }, true);
            events.forEach(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              return _this197.elementRef.nativeElement.addEventListener('click', event);
            });
          }
        }, {
          key: "collapsedTitle",
          set: function set(value) {
            this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));
          }
        }]);

        return McNavbarItem;
      }(McNavbarMixinBase);

      McNavbarItem.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-navbar-item',
          template: "<ng-content></ng-content>",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          inputs: ['disabled', 'tabIndex'],
          host: {
            "class": 'mc-navbar-item',
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null'
          }
        }]
      }];
      /** @nocollapse */

      McNavbarItem.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"]
        }];
      };

      McNavbarItem.propDecorators = {
        collapsedTitle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}

      var McNavbarContainer = function McNavbarContainer() {
        _classCallCheck(this, McNavbarContainer);

        this.position = 'left';
      };

      McNavbarContainer.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-navbar-container',
          host: {
            '[class.mc-navbar-left]': 'this.position === "left"',
            '[class.mc-navbar-right]': 'this.position !== "left"'
          }
        }]
      }];
      McNavbarContainer.propDecorators = {
        position: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}

      var CollapsibleItem = /*#__PURE__*/function () {
        /**
         * @param {?} element
         * @param {?} width
         */
        function CollapsibleItem(element, width) {
          _classCallCheck(this, CollapsibleItem);

          this.element = element;
          this.width = width;
          this.collapsed = false;
        }
        /**
         * @param {?} collapsed
         * @return {?}
         */


        _createClass(CollapsibleItem, [{
          key: "processCollapsed",
          value: function processCollapsed(collapsed) {
            this.collapsed = collapsed;
            this.updateCollapsedClass();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateCollapsedClass",
          value: function updateCollapsedClass() {
            if (this.collapsed) {
              this.element.classList.add(COLLAPSED_CLASS);
            } else {
              this.element.classList.remove(COLLAPSED_CLASS);
            }
          }
        }]);

        return CollapsibleItem;
      }();

      if (false) {}

      var CachedItemWidth = /*#__PURE__*/function () {
        /**
         * @param {?} element
         * @param {?} width
         * @param {?=} itemsForCollapse
         */
        function CachedItemWidth(element, width) {
          var itemsForCollapse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

          _classCallCheck(this, CachedItemWidth);

          this.element = element;
          this.width = width;
          this.itemsForCollapse = itemsForCollapse;
        }
        /**
         * @return {?}
         */


        _createClass(CachedItemWidth, [{
          key: "processCollapsed",

          /**
           * @param {?} collapsed
           * @return {?}
           */
          value: function processCollapsed(collapsed) {
            if (this.itemsForCollapse.length > 0) {
              this.updateTitle(collapsed);
            }

            this.itemsForCollapse.forEach(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return item.processCollapsed(collapsed);
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "calculateAndCacheCollapsedItemsWidth",
          value: function calculateAndCacheCollapsedItemsWidth() {
            this._collapsedItemsWidth = this.itemsForCollapse.reduce(
            /**
            * @param {?} acc
            * @param {?} item
            * @return {?}
            */
            function (acc, item) {
              return acc + item.width;
            }, 0);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getTitle",
          value: function getTitle() {
            /** @type {?} */
            var computedTitle = this.element.getAttribute('computedTitle');
            return computedTitle ? decodeURI(computedTitle) : this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '';
          }
          /**
           * @private
           * @param {?} collapsed
           * @return {?}
           */

        }, {
          key: "updateTitle",
          value: function updateTitle(collapsed) {
            if (collapsed) {
              this.element.setAttribute('title', this.getTitle());
            } else {
              this.element.removeAttribute('title');
            }
          }
        }, {
          key: "canCollapse",
          get: function get() {
            return this.itemsForCollapse.length > 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "collapsedItemsWidth",
          get: function get() {
            if (this._collapsedItemsWidth !== undefined) {
              return this._collapsedItemsWidth;
            }

            this.calculateAndCacheCollapsedItemsWidth();
            return this._collapsedItemsWidth;
          }
        }]);

        return CachedItemWidth;
      }();

      if (false) {}

      var McNavbar = /*#__PURE__*/function () {
        /**
         * @param {?} _elementRef
         */
        function McNavbar(_elementRef) {
          _classCallCheck(this, McNavbar);

          this._elementRef = _elementRef;
          this.forceRecalculateItemsWidth = false;
          this.resizeDebounceInterval = 100;
          this.firstLevelElement = 'mc-navbar-container';
          this.secondLevelElements = ['mc-navbar-item', 'mc-navbar-brand', 'mc-navbar-title'];
          /** @type {?} */

          var resizeObserver = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(window, 'resize').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["debounceTime"])(this.resizeDebounceInterval));
          this.resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));
        }
        /**
         * @private
         * @return {?}
         */


        _createClass(McNavbar, [{
          key: "updateCollapsed",

          /**
           * @return {?}
           */
          value: function updateCollapsed() {
            /** @type {?} */
            var collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;

            for (var i = this.itemsWidths.length - 1; i >= 0; i--) {
              /** @type {?} */
              var item = this.itemsWidths[i];

              if (!item.canCollapse) {
                continue;
              }

              item.processCollapsed(collapseDelta > 0);
              collapseDelta -= item.collapsedItemsWidth;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this198 = this;

            // Note: this wait is required for loading and rendering fonts for icons;
            // unfortunately we cannot control font rendering
            setTimeout(
            /**
            * @return {?}
            */
            function () {
              return _this198.updateCollapsed();
            }, 0);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.resizeSubscription.unsubscribe();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "calculateAndCacheTotalItemsWidth",
          value: function calculateAndCacheTotalItemsWidth() {
            this.totalItemsWidths = this.itemsWidths.reduce(
            /**
            * @param {?} acc
            * @param {?} item
            * @return {?}
            */
            function (acc, item) {
              return acc + item.width;
            }, 0);
          }
          /**
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "getOuterElementWidth",
          value: function getOuterElementWidth(element) {
            /** @type {?} */
            var baseWidth = element.getBoundingClientRect().width;
            /** @type {?} */

            var marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));
            /** @type {?} */

            var marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));
            return baseWidth + marginRight + marginLeft;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "calculateAndCacheItemsWidth",
          value: function calculateAndCacheItemsWidth() {
            var _this199 = this;

            /** @type {?} */
            var allItemsSelector = this.secondLevelElements.map(
            /**
            * @param {?} e
            * @return {?}
            */
            function (e) {
              return "".concat(_this199.firstLevelElement, ">").concat(e);
            });
            /** @type {?} */

            var allItems = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));
            this._itemsWidths = allItems.map(
            /**
            * @param {?} el
            * @return {?}
            */
            function (el) {
              return new CachedItemWidth(el, _this199.getOuterElementWidth(el), _this199.getItemsForCollapse(el));
            });
          }
          /**
           * @private
           * @param {?} element
           * @return {?}
           */

        }, {
          key: "getItemsForCollapse",
          value: function getItemsForCollapse(element) {
            /** @type {?} */
            var icon = element.querySelector("[mc-icon],mc-navbar-logo,[mc-navbar-logo]");

            if (!icon) {
              return [];
            }

            return Array.from(element.querySelectorAll('mc-navbar-title')).map(
            /**
            * @param {?} el
            * @return {?}
            */
            function (el) {
              return new CollapsibleItem(
              /** @type {?} */
              el, el.getBoundingClientRect().width);
            });
          }
        }, {
          key: "maxAllowedWidth",
          get: function get() {
            return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "itemsWidths",
          get: function get() {
            if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {
              return this._itemsWidths;
            }

            this.calculateAndCacheItemsWidth();
            return this._itemsWidths;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "totalItemsWidth",
          get: function get() {
            if (this.totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {
              return this.totalItemsWidths;
            }

            this.calculateAndCacheTotalItemsWidth();
            return this.totalItemsWidths;
          }
        }]);

        return McNavbar;
      }();

      McNavbar.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-navbar',
          template: "\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[mc-navbar-container], mc-navbar-container\"></ng-content>\n        </nav>\n    ",
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          styles: [".mc-navbar-left,.mc-navbar-right,mc-navbar-container{flex-shrink:0;height:100%}.mc-navbar,.mc-navbar-left,.mc-navbar-right,mc-navbar-container{align-items:center;display:flex;flex-direction:row;justify-content:space-between}.mc-navbar{height:48px;padding:0;position:relative}.mc-navbar [mc-icon]+mc-navbar-title{margin-left:8px}.mc-navbar [mc-icon]{min-height:16px;min-width:16px}.mc-navbar mc-navbar-title:not(.mc-navbar-collapsed-title)+[mc-icon]{margin-left:8px}.mc-navbar-brand,.mc-navbar-item,.mc-navbar-title,mc-navbar-brand,mc-navbar-item,mc-navbar-item:first-child{align-items:center;display:flex;height:100%;padding-left:16px;padding-right:16px;position:relative}.mc-navbar-brand,mc-navbar-brand{margin-right:24px;padding-left:0;padding-right:12px}.mc-navbar-brand .mc-navbar-title,mc-navbar-brand .mc-navbar-title{padding-left:12px;padding-right:0}.mc-navbar-title{white-space:nowrap}.mc-navbar-item:not([disabled]){cursor:pointer}.mc-navbar-item .mc-navbar-title,mc-navbar-brand{padding:0}mc-navbar-item.mc-progress:not([disabled]){cursor:pointer}.mc-navbar-item[disabled],mc-navbar-item[disabled] .mc-navbar-item{cursor:default}mc-navbar-title.mc-navbar-collapsed-title{display:none}"]
        }]
      }];
      /** @nocollapse */

      McNavbar.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: navbar.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McNavbarModule = function McNavbarModule() {
        _classCallCheck(this, McNavbarModule);
      };

      McNavbarModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]],
          exports: [McNavbar, McNavbarContainer, McNavbarTitle, McNavbarItem, McNavbarBrand, McNavbarLogo],
          declarations: [McNavbar, McNavbarContainer, McNavbarTitle, McNavbarItem, McNavbarBrand, McNavbarLogo]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-navbar.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-navbar.js.map

      /***/
    },

    /***/
    "tVw0":
    /*!*************************************************!*\
      !*** ./packages/docs/src/app/docs.component.ts ***!
      \*************************************************/

    /*! exports provided: DocsComponent */

    /***/
    function tVw0(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DocsComponent", function () {
        return DocsComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_docs_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./docs.template.html */
      "W56h");
      /* harmony import */


      var _docs_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./docs.scss */
      "K0rj");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var DocsComponent = function DocsComponent() {
        _classCallCheck(this, DocsComponent);
      };

      DocsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'docs-app',
        template: _raw_loader_docs_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_docs_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      })], DocsComponent);
      /***/
    },

    /***/
    "toEk":
    /*!******************************************************************!*\
      !*** ./packages/docs/src/app/components/navbar/theme.service.ts ***!
      \******************************************************************/

    /*! exports provided: Themes, ThemeService */

    /***/
    function toEk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Themes", function () {
        return Themes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ThemeService", function () {
        return ThemeService;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");

      var Themes;

      (function (Themes) {
        Themes["Default"] = "theme-default";
        Themes["Dark"] = "theme-dark";
      })(Themes || (Themes = {}));

      var ThemeService = /*#__PURE__*/function () {
        function ThemeService(ref) {
          var _this200 = this;

          _classCallCheck(this, ThemeService);

          this.ref = ref;
          this.currentTheme = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](Themes.Default);
          var isLightTheme = window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches;
          isLightTheme ? this.currentTheme.next(Themes.Default) : this.currentTheme.next(Themes.Dark);
          var prefersColorTheme = window.matchMedia('(prefers-color-scheme: light)');

          try {
            // Chrome & Firefox
            prefersColorTheme.addEventListener('change', function (e) {
              var turnOn = e.matches;

              _this200.currentTheme.next(turnOn ? Themes.Default : Themes.Dark);

              _this200.ref.tick();
            });
          } catch (err) {
            try {
              // Safari
              prefersColorTheme.addListener(function (e) {
                var turnOn = e.matches;

                _this200.currentTheme.next(turnOn ? Themes.Default : Themes.Dark);

                _this200.ref.tick();
              });
            } catch (errSafari) {
              // tslint:disable-next-line:no-console
              console.error(errSafari);
            }
          }
        }

        _createClass(ThemeService, [{
          key: "setTheme",
          value: function setTheme(value) {
            this.currentTheme.next(value);
          }
        }, {
          key: "getTheme",
          value: function getTheme() {
            return this.currentTheme.getValue();
          }
        }]);

        return ThemeService;
      }();

      ThemeService.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]
        }];
      };

      ThemeService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]])], ThemeService);
      /***/
    },

    /***/
    "vEog":
    /*!*************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-sidepanel.js ***!
      \*************************************************************/

    /*! exports provided: MC_SIDEPANEL_DATA, MC_SIDEPANEL_DEFAULT_OPTIONS, MC_SIDEPANEL_WITH_INDENT, MC_SIDEPANEL_WITH_SHADOW, McSidepanelConfig, McSidepanelContainerComponent, McSidepanelModule, McSidepanelPosition, McSidepanelRef, McSidepanelService, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg */

    /***/
    function vEog(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_DATA", function () {
        return MC_SIDEPANEL_DATA;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_DEFAULT_OPTIONS", function () {
        return MC_SIDEPANEL_DEFAULT_OPTIONS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_WITH_INDENT", function () {
        return MC_SIDEPANEL_WITH_INDENT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_WITH_SHADOW", function () {
        return MC_SIDEPANEL_WITH_SHADOW;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSidepanelConfig", function () {
        return McSidepanelConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSidepanelContainerComponent", function () {
        return McSidepanelContainerComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSidepanelModule", function () {
        return McSidepanelModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSidepanelPosition", function () {
        return McSidepanelPosition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSidepanelRef", function () {
        return McSidepanelRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McSidepanelService", function () {
        return McSidepanelService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return mcSidepanelTransformAnimation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return mcSidepanelAnimations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return McSidepanelClose;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵd", function () {
        return McSidepanelHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵe", function () {
        return McSidepanelBody;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵf", function () {
        return McSidepanelFooter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵg", function () {
        return McSidepanelActions;
      });
      /* harmony import */


      var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/overlay */
      "1O3W");
      /* harmony import */


      var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/portal */
      "1z/I");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/icon */
      "vttY");
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/animations */
      "GS7A");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel-config.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that can be used to access the data that was passed in to a sidepanel.
       * @type {?}
       */


      var MC_SIDEPANEL_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('McSidepanelData');
      /** @enum {string} */

      var McSidepanelPosition = {
        Right: "right",
        Left: "left",
        Top: "top",
        Bottom: "bottom"
      };
      /**
       * @template D
       */

      var McSidepanelConfig = function McSidepanelConfig() {
        _classCallCheck(this, McSidepanelConfig);

        /**
         * Data being injected into the child component.
         */
        this.data = null;
        this.position = McSidepanelPosition.Right;
        /**
         * Whether the sidepanel has a backdrop.
         */

        this.hasBackdrop = true;
        /**
         * When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true.
         */

        this.requiredBackdrop = false;
        /**
         * Whether the user can use escape or clicking outside to close the sidepanel.
         */

        this.disableClose = false;
        /**
         * Custom class for the overlay pane.
         */

        this.overlayPanelClass = '';
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel-animations.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {string} */


      var McSidepanelAnimationState = {
        Void: "void",
        Visible: "visible",
        Hidden: "hidden"
      }; // TODO Find a way to use dynamic keys and avoid error "Expression form not supported."
      // tslint:disable-next-line

      /** @type {?} */

      var mcSidepanelTransformAnimation = {
        right: {
          "in": 'translateX(100%)',
          out: 'translateX(0%)'
        },
        left: {
          "in": 'translateX(-100%)',
          out: 'translateX(0%)'
        },
        top: {
          "in": 'translateY(-100%)',
          out: 'translateY(0%)'
        },
        bottom: {
          "in": 'translateY(100%)',
          out: 'translateY(0%)'
        }
      };
      /** @type {?} */

      var mcSidepanelAnimations = {
        sidepanelState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('state', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: '{{transformIn}}'
        }), {
          params: {
            transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right]["in"]
          }
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({
          transform: '{{transformOut}}'
        }), {
          params: {
            transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out
          }
        }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('visible => void, visible => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])("200ms ".concat(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["AnimationCurves"].AccelerationCurve))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('void => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])("200ms ".concat(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["AnimationCurves"].DecelerationCurve)))])
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel-container.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */

      var MC_SIDEPANEL_WITH_INDENT = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-sidepanel-with-indent');
      /** @type {?} */

      var MC_SIDEPANEL_WITH_SHADOW = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-sidepanel-with-shadow');

      var McSidepanelContainerComponent = /*#__PURE__*/function (_angular_cdk_portal__3) {
        _inherits(McSidepanelContainerComponent, _angular_cdk_portal__3);

        var _super42 = _createSuper(McSidepanelContainerComponent);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} sidepanelConfig
         * @param {?} withIndent
         * @param {?} withShadow
         */
        function McSidepanelContainerComponent(elementRef, changeDetectorRef, sidepanelConfig, withIndent, withShadow) {
          var _this201;

          _classCallCheck(this, McSidepanelContainerComponent);

          _this201 = _super42.call(this);
          _this201.elementRef = elementRef;
          _this201.changeDetectorRef = changeDetectorRef;
          _this201.sidepanelConfig = sidepanelConfig;
          _this201.withIndent = withIndent;
          _this201.withShadow = withShadow;
          /**
           * The state of the sidepanel animations.
           */

          _this201.animationState = McSidepanelAnimationState.Void;
          /**
           * Emits whenever the state of the animation changes.
           */

          _this201.animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
          return _this201;
        }
        /**
         * @return {?}
         */


        _createClass(McSidepanelContainerComponent, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroyed = true;
          }
          /**
           * Attach a component portal as content to this sidepanel container.
           * @template T
           * @param {?} portal
           * @return {?}
           */

        }, {
          key: "attachComponentPortal",
          value: function attachComponentPortal(portal) {
            this.validatePortalAttached();
            this.setAnimation();
            this.setPanelClass();
            return this.portalOutlet.attachComponentPortal(portal);
          }
          /**
           * Attach a template portal as content to this sidepanel container.
           * @template C
           * @param {?} portal
           * @return {?}
           */

        }, {
          key: "attachTemplatePortal",
          value: function attachTemplatePortal(portal) {
            this.validatePortalAttached();
            this.setAnimation();
            this.setPanelClass();
            return this.portalOutlet.attachTemplatePortal(portal);
          }
          /**
           * Begin animation of the sidepanel entrance into view.
           * @return {?}
           */

        }, {
          key: "enter",
          value: function enter() {
            if (!this.destroyed) {
              this.animationState = McSidepanelAnimationState.Visible;
              this.changeDetectorRef.detectChanges();
            }
          }
          /**
           * Begin animation of the sidepanel exiting from view.
           * @return {?}
           */

        }, {
          key: "exit",
          value: function exit() {
            if (!this.destroyed) {
              this.animationState = McSidepanelAnimationState.Hidden;
              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onAnimation",
          value: function onAnimation(event) {
            this.animationStateChanged.emit(event);
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "setAnimation",
          value: function setAnimation() {
            /** @type {?} */
            var position =
            /** @type {?} */
            this.sidepanelConfig.position;
            this.animationTransform = {
              transformIn: mcSidepanelTransformAnimation[position]["in"],
              transformOut: mcSidepanelTransformAnimation[position].out
            };
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "setPanelClass",
          value: function setPanelClass() {
            /** @type {?} */
            var element = this.elementRef.nativeElement;
            /** @type {?} */

            var position =
            /** @type {?} */
            this.sidepanelConfig.position;
            element.classList.add("mc-sidepanel-container_".concat(position));

            if (this.withShadow) {
              element.classList.add('mc-sidepanel-container_shadowed');
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "validatePortalAttached",
          value: function validatePortalAttached() {
            if (this.portalOutlet.hasAttached()) {
              throw Error('Attempting to attach sidepanel content after content is already attached');
            }
          }
        }]);

        return McSidepanelContainerComponent;
      }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["BasePortalOutlet"]);

      McSidepanelContainerComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-sidepanel-container',
          template: "<div class=\"mc-sidepanel-wrapper\">\n\n    <button *ngIf=\"withIndent\"\n            class=\"mc-sidepanel-indent mc-button_transparent\"\n            mc-button\n            mcSidepanelClose>\n        <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n    </button>\n\n    <div class=\"mc-sidepanel-content\">\n        <ng-template cdkPortalOutlet></ng-template>\n    </div>\n</div>\n\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          animations: [mcSidepanelAnimations.sidepanelState],
          host: {
            "class": 'mc-sidepanel-container',
            role: 'dialog',
            'aria-modal': 'true',
            '[attr.id]': 'id',
            '[attr.tabindex]': '-1',
            '[@state]': "{\n            value: animationState,\n            params: animationTransform\n        }",
            '(@state.start)': 'onAnimation($event)',
            '(@state.done)': 'onAnimation($event)'
          },
          styles: [".mc-no-select{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.mc-sidepanel-container{display:flex;flex:1;min-height:0;outline:none;position:fixed}.mc-sidepanel-container .flex{min-height:0}.mc-sidepanel-container_left,.mc-sidepanel-container_right{height:100%;min-width:400px;top:0;width:33%}.mc-sidepanel-container_left .mc-sidepanel-indent,.mc-sidepanel-container_right .mc-sidepanel-indent{height:100%;width:16px}.mc-sidepanel-container_right{right:0;transform:translateX(100%)}.mc-sidepanel-container_right .mc-sidepanel-wrapper{flex-direction:row}.mc-sidepanel-container_left{left:0;transform:translateX(-100%)}.mc-sidepanel-container_left .mc-sidepanel-wrapper{flex-direction:row-reverse}.mc-sidepanel-container_bottom,.mc-sidepanel-container_top{flex-direction:column;height:33%;left:0;min-height:400px;width:100%}.mc-sidepanel-container_bottom .mc-sidepanel-indent,.mc-sidepanel-container_top .mc-sidepanel-indent{height:16px;width:100%}.mc-sidepanel-container_top{top:0;transform:translateY(-100%)}.mc-sidepanel-container_top .mc-sidepanel-wrapper{flex-direction:column-reverse}.mc-sidepanel-container_bottom{bottom:0;transform:translateY(100%)}.mc-sidepanel-container_bottom .mc-sidepanel-wrapper{flex-direction:column}.mc-sidepanel-wrapper{display:flex;flex:1;min-height:0;width:100%}.mc-sidepanel-indent{display:flex;flex:0 0 auto}.mc-sidepanel-indent .mc-sidepanel-close{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;background:transparent;border:none;cursor:pointer;height:100%;outline:none;padding:0;user-select:none;width:100%}.mc-sidepanel-content{display:flex;flex:1;flex-direction:column;min-height:0;width:100%}.mc-sidepanel-header{align-items:center;display:flex;flex:0 0 auto;flex-flow:row nowrap;justify-content:space-between;padding:14px 16px}.mc-sidepanel-header .mc-sidepanel-close{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;background:transparent;border:none;cursor:pointer;outline:none;padding:0 0 0 8px;user-select:none}.mc-sidepanel-title{flex:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mc-sidepanel-body{display:flex;flex:1;flex-direction:column;min-height:0;overflow-y:auto}.mc-sidepanel-footer{align-items:center;display:flex;flex:0 0 auto;flex-flow:row nowrap;justify-content:space-between;padding:16px}.mc-sidepanel-footer .mc-sidepanel-actions{align-items:center;display:flex;flex:1;flex-direction:row}.mc-sidepanel-footer .mc-sidepanel-actions[align=left]{justify-content:start}.mc-sidepanel-footer .mc-sidepanel-actions[align=right]{justify-content:flex-end}.mc-sidepanel-footer button+button{margin-left:16px}"]
        }]
      }];
      /** @nocollapse */

      McSidepanelContainerComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }, {
          type: McSidepanelConfig
        }, {
          type: Boolean,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MC_SIDEPANEL_WITH_INDENT]
          }]
        }, {
          type: Boolean,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MC_SIDEPANEL_WITH_SHADOW]
          }]
        }];
      };

      McSidepanelContainerComponent.propDecorators = {
        portalOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
          args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortalOutlet"], {
            "static": true
          }]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel-ref.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // Counter for unique sidepanel ids.

      /** @type {?} */


      var uniqueId = 0;
      /**
       * @template T, R
       */

      var McSidepanelRef = /*#__PURE__*/function () {
        /**
         * @param {?} containerInstance
         * @param {?} overlayRef
         * @param {?} config
         */
        function McSidepanelRef(containerInstance, overlayRef, config) {
          var _this202 = this;

          _classCallCheck(this, McSidepanelRef);

          this.containerInstance = containerInstance;
          this.overlayRef = overlayRef;
          this.config = config;
          /**
           * Subject for notifying the user that the sidepanel has been closed and dismissed.
           */

          this.afterClosed$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          /**
           * Subject for notifying the user that the sidepanel has opened and appeared.
           */

          this.afterOpened$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
          this.id = this.config.id || "mc-sidepanel-".concat(uniqueId++);
          this.containerInstance.id = this.id; // Emit when opening animation completes

          containerInstance.animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            return event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(
          /**
          * @return {?}
          */
          function () {
            _this202.afterOpened$.next();

            _this202.afterOpened$.complete();
          }); // Dispose overlay when closing animation is complete

          containerInstance.animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            return event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden;
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(
          /**
          * @return {?}
          */
          function () {
            overlayRef.dispose();

            _this202.afterClosed$.next(_this202.result);

            _this202.afterClosed$.complete();
          });

          if (!containerInstance.sidepanelConfig.disableClose) {
            Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["merge"])(overlayRef.backdropClick(), overlayRef.keydownEvents().pipe( // tslint:disable:deprecation
            // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              return event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ESCAPE"];
            }))).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this202.close();
            });
          }
        }
        /**
         * @param {?=} result
         * @return {?}
         */


        _createClass(McSidepanelRef, [{
          key: "close",
          value: function close(result) {
            var _this203 = this;

            if (!this.afterClosed$.closed) {
              // Transition the backdrop in parallel to the sidepanel.
              this.containerInstance.animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(
              /**
              * @param {?} event
              * @return {?}
              */
              function (event) {
                return event.phaseName === 'done';
              }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(
              /**
              * @return {?}
              */
              function () {
                return _this203.overlayRef.detachBackdrop();
              });
              this.result = result;
              this.containerInstance.exit();
            }
          }
          /**
           * Gets an observable that is notified when the sidepanel is finished closing.
           * @return {?}
           */

        }, {
          key: "afterClosed",
          value: function afterClosed() {
            return this.afterClosed$.asObservable();
          }
          /**
           * Gets an observable that is notified when the sidepanel has opened and appeared.
           * @return {?}
           */

        }, {
          key: "afterOpened",
          value: function afterOpened() {
            return this.afterOpened$.asObservable();
          }
        }]);

        return McSidepanelRef;
      }();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel.service.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Injection token that can be used to specify default sidepanel options.
       * @type {?}
       */


      var MC_SIDEPANEL_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-sidepanel-default-options');

      var McSidepanelService = /*#__PURE__*/function () {
        /**
         * @param {?} overlay
         * @param {?} injector
         * @param {?} defaultOptions
         * @param {?} parentSidepanelService
         */
        function McSidepanelService(overlay, injector, defaultOptions, parentSidepanelService) {
          _classCallCheck(this, McSidepanelService);

          this.overlay = overlay;
          this.injector = injector;
          this.defaultOptions = defaultOptions;
          this.parentSidepanelService = parentSidepanelService;
          this.openedSidepanelsAtThisLevel = [];
        }
        /**
         * Keeps track of the currently-open sidepanels.
         * @return {?}
         */


        _createClass(McSidepanelService, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            // Only close the sidepanels at this level on destroy
            // since the parent service may still be active.
            this.closeSidepanels(this.openedSidepanelsAtThisLevel);
          }
          /**
           * @template T, D
           * @param {?} componentOrTemplateRef
           * @param {?=} config
           * @return {?}
           */

        }, {
          key: "open",
          value: function open(componentOrTemplateRef, config) {
            var _this204 = this;

            /** @type {?} */
            var fullConfig = Object.assign(Object.assign({}, this.defaultOptions || new McSidepanelConfig()), config);

            if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {
              throw Error("Sidepanel with id \"".concat(fullConfig.id, "\" exists already. The sidepanel id must be unique."));
            }
            /** @type {?} */


            var overlayRef = this.createOverlay(fullConfig);
            /** @type {?} */

            var container = this.attachContainer(overlayRef, fullConfig);
            /** @type {?} */

            var ref = new McSidepanelRef(container, overlayRef, fullConfig);

            if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]) {
              container.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](componentOrTemplateRef,
              /** @type {?} */
              null,
              /** @type {?} */
              {
                $implicit: fullConfig.data,
                sidepanelRef: ref
              }));
            } else {
              /** @type {?} */
              var injector = this.createInjector(fullConfig, ref, container);
              /** @type {?} */

              var portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["ComponentPortal"](componentOrTemplateRef, undefined, injector);
              /** @type {?} */

              var contentRef = container.attachComponentPortal(portal);
              ref.instance = contentRef.instance;
            }

            this.openedSidepanels.push(ref);
            ref.afterClosed().subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this204.removeOpenSidepanel(ref);
            });
            container.enter();
            return ref;
          }
          /**
           * Closes all of the currently-open sidepanels.
           * @return {?}
           */

        }, {
          key: "closeAll",
          value: function closeAll() {
            this.closeSidepanels(this.openedSidepanels);
          }
          /**
           * Finds an open sidepanel by its id.
           * @param {?} id ID to use when looking up the sidepanel.
           * @return {?}
           */

        }, {
          key: "getSidepanelById",
          value: function getSidepanelById(id) {
            return this.openedSidepanels.find(
            /**
            * @param {?} sidepanel
            * @return {?}
            */
            function (sidepanel) {
              return sidepanel.id === id;
            });
          }
          /**
           * Attaches the sidepanel container component to the overlay.
           * @private
           * @param {?} overlayRef
           * @param {?} config
           * @return {?}
           */

        }, {
          key: "attachContainer",
          value: function attachContainer(overlayRef, config) {
            /** @type {?} */
            var openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config); // tslint:disable-next-line:deprecation

            /** @type {?} */

            var injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalInjector"](this.injector, new WeakMap([[McSidepanelConfig, config], [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1], [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line
            ]));
            /** @type {?} */

            var containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["ComponentPortal"](McSidepanelContainerComponent, undefined, injector);
            /** @type {?} */

            var containerRef = overlayRef.attach(containerPortal);
            return containerRef.instance;
          }
          /**
           * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside
           * of a sidepanel to close itself and, optionally, to return a value.
           * @private
           * @template T
           * @param {?} config Config object that is used to construct the sidepanel.
           * @param {?} sidepanelRef Reference to the sidepanel.
           * @param {?} sidepanelContainer Sidepanel container element that wraps all of the contents.
           * @return {?} The custom injector that can be used inside the sidepanel.
           */

        }, {
          key: "createInjector",
          value: function createInjector(config, sidepanelRef, // tslint:disable-next-line:deprecation
          sidepanelContainer) {
            // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and
            // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector
            // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly
            // added to the injection tokens.

            /** @type {?} */
            var injectionTokens = new WeakMap([[McSidepanelContainerComponent, sidepanelContainer], [MC_SIDEPANEL_DATA, config.data], [McSidepanelRef, sidepanelRef]]); // tslint:disable-next-line:deprecation

            return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalInjector"](this.injector, injectionTokens);
          }
          /**
           * Creates a new overlay and places it in the correct location.
           * @private
           * @param {?} config The user-specified sidepanel config.
           * @return {?}
           */

        }, {
          key: "createOverlay",
          value: function createOverlay(config) {
            /** @type {?} */
            var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayConfig"]({
              hasBackdrop: config.hasBackdrop,
              backdropClass: this.getBackdropClass(config),
              maxWidth: '100%',
              panelClass: config.overlayPanelClass,
              scrollStrategy: this.overlay.scrollStrategies.block(),
              positionStrategy: this.overlay.position().global()
            });
            return this.overlay.create(overlayConfig);
          }
          /**
           * @private
           * @param {?} sidepanels
           * @return {?}
           */

        }, {
          key: "closeSidepanels",
          value: function closeSidepanels(sidepanels) {
            /** @type {?} */
            var reversedOpenedSidepanels = _toConsumableArray(sidepanels.reverse());

            reversedOpenedSidepanels.forEach(
            /**
            * @param {?} sidepanelRef
            * @return {?}
            */
            function (sidepanelRef) {
              sidepanelRef.close();
            });
          }
          /**
           * @private
           * @param {?} config
           * @return {?}
           */

        }, {
          key: "getBackdropClass",
          value: function getBackdropClass(config) {
            /** @type {?} */
            var hasOpenedSidepanelWithBackdrop = this.openedSidepanels.some(
            /**
            * @param {?} sidepanelRef
            * @return {?}
            */
            function (sidepanelRef) {
              return (
                /** @type {?} */
                sidepanelRef.config.hasBackdrop
              );
            });
            return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' : 'cdk-overlay-transparent-backdrop';
          }
          /**
           * @private
           * @param {?} config
           * @return {?}
           */

        }, {
          key: "getOpenedSidepanelsWithSamePosition",
          value: function getOpenedSidepanelsWithSamePosition(config) {
            return this.openedSidepanels.filter(
            /**
            * @param {?} sidepanelRef
            * @return {?}
            */
            function (sidepanelRef) {
              return sidepanelRef.config.position === config.position;
            });
          }
          /**
           * Removes a sidepanel from the array of open sidepanels.
           * @private
           * @param {?} sidepanelRef Sidepanel to be removed.
           * @return {?}
           */

        }, {
          key: "removeOpenSidepanel",
          value: function removeOpenSidepanel(sidepanelRef) {
            /** @type {?} */
            var index = this.openedSidepanels.indexOf(sidepanelRef);

            if (index > -1) {
              this.openedSidepanels.splice(index, 1);
            }
          }
        }, {
          key: "openedSidepanels",
          get: function get() {
            return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels : this.openedSidepanelsAtThisLevel;
          }
        }]);

        return McSidepanelService;
      }();

      McSidepanelService.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"]
      }];
      /** @nocollapse */

      McSidepanelService.ctorParameters = function () {
        return [{
          type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"]
        }, {
          type: McSidepanelConfig,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
            args: [MC_SIDEPANEL_DEFAULT_OPTIONS]
          }]
        }, {
          type: McSidepanelService,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"]
          }]
        }];
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel-directives.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Button that will close the current sidepanel.
       */


      var McSidepanelClose = /*#__PURE__*/function () {
        /**
         * @param {?} sidepanelRef
         * @param {?} elementRef
         * @param {?} sidepanelService
         */
        function McSidepanelClose(sidepanelRef, elementRef, sidepanelService) {
          _classCallCheck(this, McSidepanelClose);

          this.sidepanelRef = sidepanelRef;
          this.elementRef = elementRef;
          this.sidepanelService = sidepanelService;
        }
        /**
         * @return {?}
         */


        _createClass(McSidepanelClose, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this205 = this;

            if (!this.sidepanelRef) {
              // When this directive is included in a sidepanel via TemplateRef (rather than being
              // in a Component), the SidepanelRef isn't available via injection because embedded
              // views cannot be given a custom injector. Instead, we look up the SidepanelRef by
              // ID.
              // This must occur in `onInit`, as the ID binding for the sidepanel container won't
              // be resolved at constructor time. We use setTimeout by same reason.
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                _this205.sidepanelRef =
                /** @type {?} */
                getClosestSidepanel(_this205.elementRef, _this205.sidepanelService.openedSidepanels);
              });
            }
          }
          /**
           * @param {?} changes
           * @return {?}
           */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            /** @type {?} */
            var proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;

            if (proxiedChange) {
              this.sidepanelResult = proxiedChange.currentValue;
            }
          }
        }]);

        return McSidepanelClose;
      }();

      McSidepanelClose.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',
          host: {
            '(click)': 'sidepanelRef.close(sidepanelResult)',
            "class": 'mc-sidepanel-close'
          }
        }]
      }];
      /** @nocollapse */

      McSidepanelClose.ctorParameters = function () {
        return [{
          type: McSidepanelRef,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: McSidepanelService
        }];
      };

      McSidepanelClose.propDecorators = {
        sidepanelResult: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mc-sidepanel-close']
        }],
        mcSidepanelClose: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
          args: ['mcSidepanelClose']
        }]
      };

      if (false) {}
      /**
       * Header of a sidepanel.
       */


      var McSidepanelHeader = function McSidepanelHeader() {
        _classCallCheck(this, McSidepanelHeader);
      };

      McSidepanelHeader.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: 'mc-sidepanel-header',
          template: "\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    ",
          host: {
            "class": 'mc-sidepanel-header'
          }
        }]
      }];
      McSidepanelHeader.propDecorators = {
        closeable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * Scrollable content container of a sidepanel.
       */


      var McSidepanelBody = function McSidepanelBody() {
        _classCallCheck(this, McSidepanelBody);
      };

      McSidepanelBody.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',
          host: {
            "class": 'mc-sidepanel-body'
          }
        }]
      }];
      /**
       * Footer of a sidepanel.
       */

      var McSidepanelFooter = function McSidepanelFooter() {
        _classCallCheck(this, McSidepanelFooter);
      };

      McSidepanelFooter.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',
          host: {
            "class": 'mc-sidepanel-footer'
          }
        }]
      }];
      /**
       * Actions block of a sidepanel footer.
       */

      var McSidepanelActions = function McSidepanelActions() {
        _classCallCheck(this, McSidepanelActions);
      };

      McSidepanelActions.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',
          host: {
            "class": 'mc-sidepanel-actions'
          }
        }]
      }];
      /**
       * Finds the closest McSidepanelRef to an element by looking at the DOM.
       * @param {?} element Element relative to which to look for a sidepanel.
       * @param {?} openSidepanels References to the currently-open sidepanels.
       * @return {?}
       */

      function getClosestSidepanel(element, openSidepanels) {
        /** @type {?} */
        var parent = element.nativeElement.parentElement;

        while (parent && !parent.classList.contains('mc-sidepanel-container')) {
          parent = parent.parentElement;
        }

        return parent ? openSidepanels.find(
        /**
        * @param {?} sidepanel
        * @return {?}
        */
        function (sidepanel) {
          return sidepanel.id ===
          /** @type {?} */
          parent.id;
        }) : null;
      }
      /**
       * @fileoverview added by tsickle
       * Generated from: sidepanel.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McSidepanelModule = function McSidepanelModule() {
        _classCallCheck(this, McSidepanelModule);
      };

      McSidepanelModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"]],
          providers: [McSidepanelService],
          declarations: [McSidepanelContainerComponent, McSidepanelClose, McSidepanelHeader, McSidepanelBody, McSidepanelFooter, McSidepanelActions],
          entryComponents: [McSidepanelContainerComponent],
          exports: [McSidepanelContainerComponent, McSidepanelClose, McSidepanelHeader, McSidepanelBody, McSidepanelFooter, McSidepanelActions]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-sidepanel.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-sidepanel.js.map

      /***/
    },

    /***/
    "vttY":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-icon.js ***!
      \********************************************************/

    /*! exports provided: McIcon, McIconBase, McIconCSSStyler, McIconMixinBase, McIconModule */

    /***/
    function vttY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McIcon", function () {
        return McIcon;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McIconBase", function () {
        return McIconBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McIconCSSStyler", function () {
        return McIconCSSStyler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McIconMixinBase", function () {
        return McIconMixinBase;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McIconModule", function () {
        return McIconModule;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /**
       * @fileoverview added by tsickle
       * Generated from: icon.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // tslint:disable-next-line:naming-convention


      var McIconCSSStyler = function McIconCSSStyler() {
        _classCallCheck(this, McIconCSSStyler);
      };

      McIconCSSStyler.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: '[mc-icon]',
          host: {
            "class": 'mc mc-icon'
          }
        }]
      }];

      var McIconBase = // tslint:disable-next-line:naming-convention

      /**
       * @param {?} _elementRef
       */
      function McIconBase(_elementRef) {
        _classCallCheck(this, McIconBase);

        this._elementRef = _elementRef;
      };

      if (false) {} // tslint:disable-next-line: naming-convention

      /** @type {?} */


      var McIconMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(McIconBase, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["ThemePalette"].Empty);

      var McIcon = /*#__PURE__*/function (_McIconMixinBase) {
        _inherits(McIcon, _McIconMixinBase);

        var _super43 = _createSuper(McIcon);

        /**
         * @param {?} elementRef
         * @param {?} iconName
         */
        function McIcon(elementRef, iconName) {
          var _this206;

          _classCallCheck(this, McIcon);

          _this206 = _super43.call(this, elementRef);

          if (iconName) {
            elementRef.nativeElement.classList.add(iconName);
          }

          return _this206;
        }
        /**
         * @return {?}
         */


        _createClass(McIcon, [{
          key: "getHostElement",
          value: function getHostElement() {
            return this._elementRef.nativeElement;
          }
        }]);

        return McIcon;
      }(McIconMixinBase);

      McIcon.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"],
        args: [{
          selector: "[mc-icon]",
          template: '<ng-content></ng-content>',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
          inputs: ['color'],
          styles: [".mc-icon-rotate_90{transform:rotate(90deg)}.mc-icon-rotate_180{transform:rotate(180deg)}.mc-icon-rotate_270{transform:rotate(270deg)}.mc-icon-flip-h{transform:scaleY(-1)}.mc-icon-flip-v{transform:scaleX(-1)}.mc-icon-flip-vh{transform:scale(-1)}"]
        }]
      }];
      /** @nocollapse */

      McIcon.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: String,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"],
            args: ['mc-icon']
          }]
        }];
      };
      /**
       * @fileoverview added by tsickle
       * Generated from: icon.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McIconModule = function McIconModule() {
        _classCallCheck(this, McIconModule);
      };

      McIconModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]],
          exports: [McIcon, McIconCSSStyler],
          declarations: [McIcon, McIconCSSStyler]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-icon.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-icon.js.map

      /***/
    },

    /***/
    "waD+":
    /*!**********************************************************************!*\
      !*** ./packages/docs/src/app/shared/stackblitz/stackblitz-button.ts ***!
      \**********************************************************************/

    /*! exports provided: StackblitzButton, StackblitzButtonModule */

    /***/
    function waD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StackblitzButton", function () {
        return StackblitzButton;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StackblitzButtonModule", function () {
        return StackblitzButtonModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_stackblitz_button_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./stackblitz-button.html */
      "werY");
      /* harmony import */


      var _stackblitz_button_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./stackblitz-button.scss */
      "oFbq");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ptsecurity/mosaic-examples */
      "cF3b");
      /* harmony import */


      var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @ptsecurity/mosaic/button */
      "it0a");
      /* harmony import */


      var _stackblitz_writer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./stackblitz-writer */
      "wiOn");

      var StackblitzButton = /*#__PURE__*/function () {
        function StackblitzButton(stackblitzWriter) {
          _classCallCheck(this, StackblitzButton);

          this.stackblitzWriter = stackblitzWriter;
          /**
           * The button becomes disabled if the user hovers over the button before the stackblitz form
           * is created. After the form is created, the button becomes enabled again.
           * The form creation usually happens extremely quickly, but we handle the case of the
           * stackblitz not yet being ready for people will poor network connections or slow devices.
           */

          this.isDisabled = false;
        }

        _createClass(StackblitzButton, [{
          key: "openStackblitz",
          value: function openStackblitz() {
            // When the form is submitted, it must be in the document body. The standard of forms is not
            // to submit if it is detached from the document. See the following chromium commit for
            // more details:
            // https://chromium.googlesource.com/chromium/src/+/962c2a22ddc474255c776aefc7abeba00edc7470%5E!
            document.body.appendChild(this.stackblitzForm);
            this.stackblitzForm.submit();
            document.body.removeChild(this.stackblitzForm);
          }
        }, {
          key: "example",
          set: function set(example) {
            var _this207 = this;

            var exampleData = new _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_4__["ExampleData"](example);

            if (example) {
              this.stackblitzWriter.constructStackblitzForm(exampleData).then(function (stackblitzForm) {
                _this207.stackblitzForm = stackblitzForm;
                _this207.isDisabled = false;
              });
            } else {
              this.isDisabled = true;
            }
          }
        }]);

        return StackblitzButton;
      }();

      StackblitzButton.ctorParameters = function () {
        return [{
          type: _stackblitz_writer__WEBPACK_IMPORTED_MODULE_6__["StackblitzWriter"]
        }];
      };

      StackblitzButton.propDecorators = {
        example: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };
      StackblitzButton = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'stackblitz-button',
        template: _raw_loader_stackblitz_button_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        providers: [_stackblitz_writer__WEBPACK_IMPORTED_MODULE_6__["StackblitzWriter"]],
        host: {
          '(mouseover)': 'isDisabled = !stackblitzForm'
        },
        styles: [_stackblitz_button_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_stackblitz_writer__WEBPACK_IMPORTED_MODULE_6__["StackblitzWriter"]])], StackblitzButton);

      var StackblitzButtonModule = function StackblitzButtonModule() {
        _classCallCheck(this, StackblitzButtonModule);
      };

      StackblitzButtonModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__["McButtonModule"]],
        exports: [StackblitzButton],
        declarations: [StackblitzButton],
        providers: [_stackblitz_writer__WEBPACK_IMPORTED_MODULE_6__["StackblitzWriter"]]
      })], StackblitzButtonModule);
      /***/
    },

    /***/
    "wd6P":
    /*!********************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tree.js ***!
      \********************************************************/

    /*! exports provided: MC_SELECTION_TREE_VALUE_ACCESSOR, MC_TREE_OPTION_PARENT_COMPONENT, McTreeFlatDataSource, McTreeFlattener, McTreeModule, McTreeNavigationChange, McTreeNestedDataSource, McTreeNodeDef, McTreeNodePadding, McTreeNodeToggleComponent, McTreeNodeToggleDirective, McTreeOption, McTreeOptionChange, McTreeSelection, McTreeSelectionChange */

    /***/
    function wd6P(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_SELECTION_TREE_VALUE_ACCESSOR", function () {
        return MC_SELECTION_TREE_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TREE_OPTION_PARENT_COMPONENT", function () {
        return MC_TREE_OPTION_PARENT_COMPONENT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeFlatDataSource", function () {
        return McTreeFlatDataSource;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeFlattener", function () {
        return McTreeFlattener;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeModule", function () {
        return McTreeModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeNavigationChange", function () {
        return McTreeNavigationChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeNestedDataSource", function () {
        return McTreeNestedDataSource;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeNodeDef", function () {
        return McTreeNodeDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeNodePadding", function () {
        return McTreeNodePadding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeNodeToggleComponent", function () {
        return McTreeNodeToggleComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeNodeToggleDirective", function () {
        return McTreeNodeToggleDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeOption", function () {
        return McTreeOption;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeOptionChange", function () {
        return McTreeOptionChange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeSelection", function () {
        return McTreeSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTreeSelectionChange", function () {
        return McTreeSelectionChange;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @ptsecurity/cdk/tree */
      "oznV");
      /* harmony import */


      var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @ptsecurity/mosaic/core */
      "4KQ8");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/cdk/collections */
      "CtHx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @ptsecurity/cdk/a11y */
      "WPpj");
      /**
       * @fileoverview added by tsickle
       * Generated from: node.directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @template T
       */


      var McTreeNodeDef = /*#__PURE__*/function (_ptsecurity_cdk_tree_) {
        _inherits(McTreeNodeDef, _ptsecurity_cdk_tree_);

        var _super44 = _createSuper(McTreeNodeDef);

        function McTreeNodeDef() {
          _classCallCheck(this, McTreeNodeDef);

          return _super44.apply(this, arguments);
        }

        return McTreeNodeDef;
      }(_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeDef"]);

      McTreeNodeDef.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mcTreeNodeDef]',
          inputs: ['when: mcTreeNodeDefWhen'],
          providers: [{
            provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeDef"],
            useExisting: McTreeNodeDef
          }]
        }]
      }];
      McTreeNodeDef.propDecorators = {
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['mcTreeNode']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: padding.directive.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @template T
       */


      var McTreeNodePadding = /*#__PURE__*/function (_ptsecurity_cdk_tree_2) {
        _inherits(McTreeNodePadding, _ptsecurity_cdk_tree_2);

        var _super45 = _createSuper(McTreeNodePadding);

        function McTreeNodePadding() {
          var _this208;

          _classCallCheck(this, McTreeNodePadding);

          _this208 = _super45.apply(this, arguments);
          _this208.baseLeftPadding = 12;
          _this208.iconWidth = 20;
          return _this208;
        }
        /**
         * @return {?}
         */


        _createClass(McTreeNodePadding, [{
          key: "paddingIndent",

          /**
           * @return {?}
           */
          value: function paddingIndent() {
            /** @type {?} */
            var nodeLevel = this.treeNode.data && this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this.treeNode.data) : 0;
            /** @type {?} */

            var level = this.level || nodeLevel;
            return level > 0 ? "".concat(level * this._indent + this.leftPadding, "px") : "".concat(this.leftPadding, "px");
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);
            this.setPadding();
          }
        }, {
          key: "level",
          get: function get() {
            return this._level;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.setLevelInput(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "indent",
          get: function get() {
            return this._indent;
          }
          /**
           * @param {?} indent
           * @return {?}
           */
          ,
          set: function set(indent) {
            this.setIndentInput(indent);
          }
          /**
           * @return {?}
           */

        }, {
          key: "leftPadding",
          get: function get() {
            return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;
          }
        }]);

        return McTreeNodePadding;
      }(_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodePadding"]);

      McTreeNodePadding.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mcTreeNodePadding]',
          providers: [{
            provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodePadding"],
            useExisting: McTreeNodePadding
          }]
        }]
      }];
      McTreeNodePadding.propDecorators = {
        level: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['mcTreeNodePadding']
        }],
        indent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['mcTreeNodePaddingIndent']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: toggle.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @template T
       */


      var McTreeNodeToggleComponent = /*#__PURE__*/function () {
        /**
         * @param {?} tree
         * @param {?} treeNode
         */
        function McTreeNodeToggleComponent(tree, treeNode) {
          var _this209 = this;

          _classCallCheck(this, McTreeNodeToggleComponent);

          this.tree = tree;
          this.treeNode = treeNode;
          this.disabled = false;
          this._recursive = false;
          this.tree.treeControl.filterValue.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
          /**
          * @param {?} value
          * @return {?}
          */
          function (value) {
            return (value === null || value === void 0 ? void 0 : value.length) > 0;
          })).subscribe(
          /**
          * @param {?} state
          * @return {?}
          */
          function (state) {
            return _this209.disabled = state;
          });
        }
        /**
         * @return {?}
         */


        _createClass(McTreeNodeToggleComponent, [{
          key: "toggle",

          /**
           * @param {?} event
           * @return {?}
           */
          value: function toggle(event) {
            this.recursive ? this.tree.treeControl.toggleDescendants(this.treeNode.data) : this.tree.treeControl.toggle(this.treeNode.data);
            event.stopPropagation();
          }
        }, {
          key: "recursive",
          get: function get() {
            return this._recursive;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._recursive = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "iconState",
          get: function get() {
            return this.disabled || this.tree.treeControl.isExpanded(this.node);
          }
        }]);

        return McTreeNodeToggleComponent;
      }();

      McTreeNodeToggleComponent.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-tree-node-toggle',
          template: "\n        <i class=\"mc mc-icon mc-angle-down-S_16\"></i>\n    ",
          host: {
            "class": 'mc-tree-node-toggle',
            '[class.mc-opened]': 'iconState',
            '[attr.disabled]': 'disabled || null',
            '(click)': 'toggle($event)'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }]
      }];
      /** @nocollapse */

      McTreeNodeToggleComponent.ctorParameters = function () {
        return [{
          type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"]
        }, {
          type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"]
        }];
      };

      McTreeNodeToggleComponent.propDecorators = {
        node: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        recursive: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['cdkTreeNodeToggleRecursive']
        }]
      };

      if (false) {}
      /**
       * @template T
       */


      var McTreeNodeToggleDirective = /*#__PURE__*/function () {
        /**
         * @param {?} tree
         * @param {?} treeNode
         */
        function McTreeNodeToggleDirective(tree, treeNode) {
          var _this210 = this;

          _classCallCheck(this, McTreeNodeToggleDirective);

          this.tree = tree;
          this.treeNode = treeNode;
          this.disabled = false;
          this._recursive = false;
          this.tree.treeControl.filterValue.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
          /**
          * @param {?} value
          * @return {?}
          */
          function (value) {
            return value.length > 0;
          })).subscribe(
          /**
          * @param {?} state
          * @return {?}
          */
          function (state) {
            return _this210.disabled = state;
          });
        }
        /**
         * @return {?}
         */


        _createClass(McTreeNodeToggleDirective, [{
          key: "toggle",

          /**
           * @param {?} event
           * @return {?}
           */
          value: function toggle(event) {
            this.recursive ? this.tree.treeControl.toggleDescendants(this.treeNode.data) : this.tree.treeControl.toggle(this.treeNode.data);
            event.stopPropagation();
          }
        }, {
          key: "recursive",
          get: function get() {
            return this._recursive;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._recursive = value;
          }
        }]);

        return McTreeNodeToggleDirective;
      }();

      McTreeNodeToggleDirective.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          selector: '[mcTreeNodeToggle]',
          host: {
            '[attr.disabled]': 'disabled || null',
            '(click)': 'toggle($event)'
          }
        }]
      }];
      /** @nocollapse */

      McTreeNodeToggleDirective.ctorParameters = function () {
        return [{
          type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"]
        }, {
          type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"]
        }];
      };

      McTreeNodeToggleDirective.propDecorators = {
        recursive: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
          args: ['cdkTreeNodeToggleRecursive']
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tree-option.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @record
       */


      function McTreeOptionEvent() {}

      if (false) {}
      /**
       * Injection token used to provide the parent component to options.
       * @type {?}
       */


      var MC_TREE_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MC_TREE_OPTION_PARENT_COMPONENT');

      var McTreeOptionChange =
      /**
       * @param {?} source
       * @param {?=} isUserInput
       */
      function McTreeOptionChange(source) {
        var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _classCallCheck(this, McTreeOptionChange);

        this.source = source;
        this.isUserInput = isUserInput;
      };

      if (false) {}
      /** @type {?} */


      var uniqueIdCounter = 0;

      var McTreeOption = /*#__PURE__*/function (_ptsecurity_cdk_tree_3) {
        _inherits(McTreeOption, _ptsecurity_cdk_tree_3);

        var _super46 = _createSuper(McTreeOption);

        /**
         * @param {?} elementRef
         * @param {?} changeDetectorRef
         * @param {?} ngZone
         * @param {?} tree
         */
        function McTreeOption(elementRef, changeDetectorRef, ngZone, tree) {
          var _this211;

          _classCallCheck(this, McTreeOption);

          _this211 = _super46.call(this, elementRef, tree);
          _this211.changeDetectorRef = changeDetectorRef;
          _this211.ngZone = ngZone;
          _this211.tree = tree;
          _this211.onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
          _this211.onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
          _this211._disabled = false;
          _this211.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          _this211._selected = false;
          _this211._id = "mc-tree-option-".concat(uniqueIdCounter++);
          _this211.hasFocus = false;
          return _this211;
        }
        /**
         * @return {?}
         */


        _createClass(McTreeOption, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            this.value = this.tree.treeControl.getValue(this.data);
          }
          /**
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.selected = !this.selected;
          }
          /**
           * @param {?} selected
           * @return {?}
           */

        }, {
          key: "setSelected",
          value: function setSelected(selected) {
            if (this._selected === selected || !this.tree.selectionModel) {
              return;
            }

            this._selected = selected;

            if (selected) {
              this.tree.selectionModel.select(this.data);
            } else {
              this.tree.selectionModel.deselect(this.data);
            }

            this.changeDetectorRef.markForCheck();
          }
          /**
           * @param {?=} focusOrigin
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus(focusOrigin) {
            var _this212 = this;

            if (focusOrigin === 'program') {
              return;
            }

            if (this.disabled || this.hasFocus) {
              return;
            }

            this.elementRef.nativeElement.focus();
            this.onFocus.next({
              option: this
            });
            Promise.resolve().then(
            /**
            * @return {?}
            */
            function () {
              _this212.hasFocus = true;

              _this212.changeDetectorRef.markForCheck();
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            var _this213 = this;

            // When animations are enabled, Angular may end up removing the option from the DOM a little
            // earlier than usual, causing it to be blurred and throwing off the logic in the tree
            // that moves focus not the next item. To work around the issue, we defer marking the option
            // as not focused until the next time the zone stabilizes.
            this.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this213.ngZone.run(
              /**
              * @return {?}
              */
              function () {
                _this213.hasFocus = false;

                _this213.onBlur.next({
                  option: _this213
                });
              });
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHeight",
          value: function getHeight() {
            /** @type {?} */
            var clientRects = this.elementRef.nativeElement.getClientRects();

            if (clientRects.length) {
              return clientRects[0].height;
            }

            return 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "select",
          value: function select() {
            if (!this._selected) {
              this._selected = true;
              this.changeDetectorRef.markForCheck();
              this.emitSelectionChangeEvent();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "deselect",
          value: function deselect() {
            if (this._selected) {
              this._selected = false;
              this.changeDetectorRef.markForCheck();
            }
          }
          /**
           * @param {?=} $event
           * @return {?}
           */

        }, {
          key: "selectViaInteraction",
          value: function selectViaInteraction($event) {
            if (!this.disabled) {
              this.changeDetectorRef.markForCheck();
              this.emitSelectionChangeEvent(true);
              /** @type {?} */

              var shiftKey = $event ? Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])($event, 'shiftKey') : false;
              /** @type {?} */

              var ctrlKey = $event ? Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])($event, 'ctrlKey') : false;
              this.tree.setSelectedOptionsByClick(this, shiftKey, ctrlKey);
            }
          }
          /**
           * @param {?=} isUserInput
           * @return {?}
           */

        }, {
          key: "emitSelectionChangeEvent",
          value: function emitSelectionChangeEvent() {
            var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHostElement",
          value: function getHostElement() {
            return this.elementRef.nativeElement;
          }
          /**
           * @return {?}
           */

        }, {
          key: "markForCheck",
          value: function markForCheck() {
            this.changeDetectorRef.markForCheck();
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._value = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || this.tree && this.tree.disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);

            if (newValue !== this._disabled) {
              this._disabled = newValue;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "showCheckbox",
          get: function get() {
            return this._showCheckbox !== undefined ? this._showCheckbox : this.tree.showCheckbox;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._showCheckbox = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var isSelected = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);

            if (isSelected !== this._selected) {
              this.setSelected(isSelected);
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return this.tree.multiple;
          }
          /**
           * @return {?}
           */

        }, {
          key: "viewValue",
          get: function get() {
            // TODO: Add input property alternative for node envs.
            return (this.getHostElement().textContent || '').trim();
          }
        }]);

        return McTreeOption;
      }(_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"]);

      McTreeOption.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-tree-option',
          exportAs: 'mcTreeOption',
          template: "<ng-content select=\"[mc-icon]\"></ng-content>\n\n<ng-content select=\"mc-tree-node-toggle\"></ng-content>\n\n<mc-pseudo-checkbox\n    *ngIf=\"showCheckbox\"\n    [state]=\"selected ? 'checked' : 'unchecked'\"\n    [disabled]=\"disabled\">\n</mc-pseudo-checkbox>\n\n<span class=\"mc-option-text mc-no-select\"><ng-content></ng-content></span>\n\n<div class=\"mc-option-overlay\"></div>\n",
          host: {
            '[attr.id]': 'id',
            '[attr.tabindex]': '-1',
            '[attr.disabled]': 'disabled || null',
            "class": 'mc-tree-option',
            '[class.mc-selected]': 'selected',
            '[class.mc-focused]': 'hasFocus',
            '(focus)': 'focus()',
            '(blur)': 'blur()',
            '(click)': 'selectViaInteraction($event)'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          providers: [{
            provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"],
            useExisting: McTreeOption
          }]
        }]
      }];
      /** @nocollapse */

      McTreeOption.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
            args: [MC_TREE_OPTION_PARENT_COMPONENT]
          }]
        }];
      };

      McTreeOption.propDecorators = {
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        showCheckbox: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        onSelectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tree-selection.component.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var MC_SELECTION_TREE_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McTreeSelection;
        }),
        multi: true
      };
      /**
       * @template T
       */

      var McTreeNavigationChange =
      /**
       * @param {?} source
       * @param {?} option
       */
      function McTreeNavigationChange(source, option) {
        _classCallCheck(this, McTreeNavigationChange);

        this.source = source;
        this.option = option;
      };

      if (false) {}
      /**
       * @template T
       */


      var McTreeSelectionChange =
      /**
       * @param {?} source
       * @param {?} option
       */
      function McTreeSelectionChange(source, option) {
        _classCallCheck(this, McTreeSelectionChange);

        this.source = source;
        this.option = option;
      };

      if (false) {}
      /**
       * @record
       */


      function SelectionModelOption() {}

      if (false) {}
      /**
       * @template T
       */


      var McTreeSelection = /*#__PURE__*/function (_ptsecurity_cdk_tree_4) {
        _inherits(McTreeSelection, _ptsecurity_cdk_tree_4);

        var _super47 = _createSuper(McTreeSelection);

        /**
         * @param {?} elementRef
         * @param {?} differs
         * @param {?} changeDetectorRef
         * @param {?} multiple
         */
        function McTreeSelection(elementRef, differs, changeDetectorRef, multiple) {
          var _this214;

          _classCallCheck(this, McTreeSelection);

          _this214 = _super47.call(this, differs, changeDetectorRef);
          _this214.elementRef = elementRef;
          _this214.renderedOptions = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]();
          _this214.resetFocusedItemOnBlur = true;
          _this214.navigationChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          _this214.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
          _this214.multipleMode = null;
          _this214.userTabIndex = null;
          _this214.sortedNodes = [];
          _this214._autoSelect = true;
          _this214._noUnselectLast = true;
          _this214._disabled = false;
          _this214._tabIndex = 0;
          _this214.destroy = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
          /**
           * `View -> model callback called when value changes`
           */

          _this214.onChange =
          /**
          * @return {?}
          */
          function () {};
          /**
           * `View -> model callback called when select has been touched`
           */


          _this214.onTouched =
          /**
          * @return {?}
          */
          function () {};

          _this214.updateRenderedOptions =
          /**
          * @return {?}
          */
          function () {
            /** @type {?} */
            var orderedOptions = [];

            _this214.sortedNodes.forEach(
            /**
            * @param {?} node
            * @return {?}
            */
            function (node) {
              /** @type {?} */
              var found = _this214.unorderedOptions.find(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.value === _this214.treeControl.getValue(node);
              });

              if (found) {
                orderedOptions.push(found);
              }
            });

            _this214.renderedOptions.reset(orderedOptions);

            _this214.renderedOptions.notifyOnChanges();
          };

          if (multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX || multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD) {
            _this214.multipleMode = multiple;
          } else if (multiple !== null) {
            _this214.multipleMode = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
          }

          if (_this214.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX) {
            _this214.autoSelect = false;
            _this214.noUnselectLast = false;
          }

          _this214.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__["SelectionModel"](_this214.multiple);
          return _this214;
        }
        /**
         * @return {?}
         */


        _createClass(McTreeSelection, [{
          key: "ngAfterContentInit",

          /**
           * @return {?}
           */
          value: function ngAfterContentInit() {
            var _this215 = this;

            this.unorderedOptions.changes.subscribe(this.updateRenderedOptions);
            this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusKeyManager"](this.renderedOptions).withVerticalOrientation(true).withHorizontalOrientation(null);
            this.keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              if (_this215.keyManager.activeItem) {
                _this215.emitNavigationEvent(_this215.keyManager.activeItem); // todo need check this logic


                if (_this215.autoSelect && !_this215.keyManager.activeItem.disabled) {
                  _this215.updateOptionsFocus();
                }
              }
            });
            this.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this215.allowFocusEscape();
            });
            this.selectionModel.changed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @return {?}
            */
            function () {
              _this215.onChange(_this215.getSelectedValues());

              _this215.renderedOptions.notifyOnChanges();
            });
            this.renderedOptions.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy)).subscribe(
            /**
            * @param {?} options
            * @return {?}
            */
            function (options) {
              _this215.resetOptions(); // Check to see if we need to update our tab index


              _this215.updateTabIndex(); // todo need to do optimisation


              options.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                option.deselect();

                _this215.getSelectedValues().forEach(
                /**
                * @param {?} selectedValue
                * @return {?}
                */
                function (selectedValue) {
                  if (option.value === selectedValue) {
                    option.select();
                  }
                });

                option.changeDetectorRef.detectChanges();
              });
            });
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.destroy.next();
            this.destroy.complete();
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus($event) {
            if (this.renderedOptions.length === 0 || this.isFocusReceivedFromNestedOption($event)) {
              return;
            }

            this.keyManager.setFirstItemActive();
          }
          /**
           * @return {?}
           */

        }, {
          key: "blur",
          value: function blur() {
            if (!this.hasFocusedOption() && this.resetFocusedItemOnBlur) {
              this.keyManager.setActiveItem(-1);
            }

            this.onTouched();
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            this.keyManager.setFocusOrigin('keyboard'); // tslint:disable-next-line: deprecation

            /** @type {?} */

            var keyCode = event.keyCode;

            switch (keyCode) {
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["DOWN_ARROW"]:
                this.keyManager.setNextItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["UP_ARROW"]:
                this.keyManager.setPreviousItemActive();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["LEFT_ARROW"]:
                if (this.keyManager.activeItem) {
                  this.treeControl.collapse(
                  /** @type {?} */
                  this.keyManager.activeItem.data);
                }

                event.preventDefault();
                return;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["RIGHT_ARROW"]:
                if (this.keyManager.activeItem) {
                  this.treeControl.expand(
                  /** @type {?} */
                  this.keyManager.activeItem.data);
                }

                event.preventDefault();
                return;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["SPACE"]:
              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ENTER"]:
                this.toggleFocusedOption();
                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["HOME"]:
                this.keyManager.setFirstItemActive();
                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["END"]:
                this.keyManager.setLastItemActive();
                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["PAGE_UP"]:
                this.keyManager.setPreviousPageItemActive();
                event.preventDefault();
                break;

              case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["PAGE_DOWN"]:
                this.keyManager.setNextPageItemActive();
                event.preventDefault();
                break;

              default:
                return;
            }

            if (this.keyManager.activeItem) {
              this.setSelectedOptionsByKey(this.keyManager.activeItem, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])(event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])(event, 'ctrlKey'));
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "updateScrollSize",
          value: function updateScrollSize() {
            if (!this.renderedOptions.first) {
              return;
            }

            this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.renderedOptions.first.getHeight()));
          }
          /**
           * @param {?} option
           * @param {?} shiftKey
           * @param {?} ctrlKey
           * @return {?}
           */

        }, {
          key: "setSelectedOptionsByKey",
          value: function setSelectedOptionsByKey(option, shiftKey, ctrlKey) {
            if (shiftKey && this.multiple) {
              this.setSelectedOptions(option);
            } else if (ctrlKey) {
              if (!this.canDeselectLast(option)) {
                return;
              }
            } else if (this.autoSelect) {
              this.selectionModel.clear();
              this.selectionModel.toggle(option.data);
            }

            this.emitChangeEvent(option);
          }
          /**
           * @param {?} option
           * @param {?} shiftKey
           * @param {?} ctrlKey
           * @return {?}
           */

        }, {
          key: "setSelectedOptionsByClick",
          value: function setSelectedOptionsByClick(option, shiftKey, ctrlKey) {
            if (!shiftKey && !ctrlKey) {
              this.keyManager.setActiveItem(option);
            }

            if (shiftKey && this.multiple) {
              this.setSelectedOptions(option);
            } else if (ctrlKey) {
              if (!this.canDeselectLast(option)) {
                return;
              }

              this.selectionModel.toggle(option.data);
            } else if (this.autoSelect) {
              this.selectionModel.clear();
              this.selectionModel.toggle(option.data);
            } else {
              this.selectionModel.toggle(option.data);
            }

            this.emitChangeEvent(option);
          }
          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "setSelectedOptions",
          value: function setSelectedOptions(option) {
            var _this216 = this;

            /** @type {?} */
            var selectedOptionState = option.selected;
            /** @type {?} */

            var fromIndex = this.keyManager.previousActiveItemIndex;
            /** @type {?} */

            var toIndex = this.keyManager.previousActiveItemIndex = this.keyManager.activeItemIndex;

            if (toIndex === fromIndex) {
              return;
            }

            if (fromIndex > toIndex) {
              var _ref6 = [toIndex, fromIndex];
              fromIndex = _ref6[0];
              toIndex = _ref6[1];
            }

            this.renderedOptions.toArray().slice(fromIndex, toIndex + 1).filter(
            /**
            * @param {?} item
            * @return {?}
            */
            function (item) {
              return !item.disabled;
            }).forEach(
            /**
            * @param {?} renderedOption
            * @return {?}
            */
            function (renderedOption) {
              /** @type {?} */
              var isLastRenderedOption = renderedOption === _this216.keyManager.activeItem;

              if (isLastRenderedOption && renderedOption.selected && _this216.noUnselectLast) {
                return;
              }

              renderedOption.setSelected(!selectedOptionState);
            });
          }
          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "setFocusedOption",
          value: function setFocusedOption(option) {
            this.keyManager.setActiveItem(option);
          }
          /**
           * @return {?}
           */

        }, {
          key: "toggleFocusedOption",
          value: function toggleFocusedOption() {
            /** @type {?} */
            var focusedOption = this.keyManager.activeItem;

            if (focusedOption && (!focusedOption.selected || this.canDeselectLast(focusedOption))) {
              focusedOption.toggle();
              this.emitChangeEvent(focusedOption);
            }
          }
          /**
           * @param {?} data
           * @param {?=} dataDiffer
           * @param {?=} viewContainer
           * @param {?=} parentData
           * @return {?}
           */

        }, {
          key: "renderNodeChanges",
          value: function renderNodeChanges(data) {
            var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataDiffer;
            var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nodeOutlet.viewContainer;
            var parentData = arguments.length > 3 ? arguments[3] : undefined;

            _get(_getPrototypeOf(McTreeSelection.prototype), "renderNodeChanges", this).call(this, data, dataDiffer, viewContainer, parentData);

            this.sortedNodes = this.getSortedNodes(viewContainer);
            this.updateScrollSize();
            this.nodeOutlet.changeDetectorRef.detectChanges();
          }
          /**
           * @return {?}
           */

        }, {
          key: "getHeight",
          value: function getHeight() {
            /** @type {?} */
            var clientRects = this.elementRef.nativeElement.getClientRects();

            if (clientRects.length) {
              return clientRects[0].height;
            }

            return 0;
          }
          /**
           * @return {?}
           */

        }, {
          key: "getItemHeight",
          value: function getItemHeight() {
            return this.renderedOptions.first ? this.renderedOptions.first.getHeight() : 0;
          }
          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "emitNavigationEvent",
          value: function emitNavigationEvent(option) {
            this.navigationChange.emit(new McTreeNavigationChange(this, option));
          }
          /**
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "emitChangeEvent",
          value: function emitChangeEvent(option) {
            this.selectionChange.emit(new McTreeNavigationChange(this, option));
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            if (this.multiple && value && !Array.isArray(value)) {
              throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectNonArrayValueError"])();
            }

            if (this.renderedOptions.length) {
              this.setOptionsFromValues(this.multiple ? value : [value]);
            }
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this._disabled = isDisabled;
            this.changeDetectorRef.markForCheck();
          }
          /**
           * @param {?} values
           * @return {?}
           */

        }, {
          key: "setOptionsFromValues",
          value: function setOptionsFromValues(values) {
            var _this217 = this,
                _this$selectionModel2;

            this.selectionModel.clear();
            /** @type {?} */

            var valuesToSelect = values.reduce(
            /**
            * @param {?} result
            * @param {?} value
            * @return {?}
            */
            function (result, value) {
              return _this217.treeControl.hasValue(value) ? [].concat(_toConsumableArray(result), [_this217.treeControl.hasValue(value)]) : _toConsumableArray(result);
            }, []);

            (_this$selectionModel2 = this.selectionModel).select.apply(_this$selectionModel2, _toConsumableArray(valuesToSelect));
          }
          /**
           * @return {?}
           */

        }, {
          key: "getSelectedValues",
          value: function getSelectedValues() {
            var _this218 = this;

            return this.selectionModel.selected.map(
            /**
            * @param {?} selected
            * @return {?}
            */
            function (selected) {
              return _this218.treeControl.getValue(selected);
            });
          }
          /**
           * @protected
           * @return {?}
           */

        }, {
          key: "updateTabIndex",
          value: function updateTabIndex() {
            this._tabIndex = this.renderedOptions.length === 0 ? -1 : 0;
          }
          /**
           * @private
           * @param {?} viewContainer
           * @return {?}
           */

        }, {
          key: "getSortedNodes",
          value: function getSortedNodes(viewContainer) {
            /** @type {?} */
            var array = [];

            for (var i = 0; i < viewContainer.length; i++) {
              /** @type {?} */
              var viewRef =
              /** @type {?} */
              viewContainer.get(i);
              array.push(viewRef.context.$implicit);
            }

            return array;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "allowFocusEscape",
          value: function allowFocusEscape() {
            var _this219 = this;

            if (this._tabIndex !== -1) {
              this._tabIndex = -1;
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                _this219._tabIndex = _this219.userTabIndex || 0;

                _this219.changeDetectorRef.markForCheck();
              });
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "resetOptions",
          value: function resetOptions() {
            this.dropSubscriptions();
            this.listenToOptionsFocus();
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "dropSubscriptions",
          value: function dropSubscriptions() {
            if (this.optionFocusSubscription) {
              this.optionFocusSubscription.unsubscribe();
              this.optionFocusSubscription = null;
            }

            if (this.optionBlurSubscription) {
              this.optionBlurSubscription.unsubscribe();
              this.optionBlurSubscription = null;
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "listenToOptionsFocus",
          value: function listenToOptionsFocus() {
            var _this220 = this;

            this.optionFocusSubscription = this.optionFocusChanges.subscribe(
            /**
            * @param {?} event
            * @return {?}
            */
            function (event) {
              /** @type {?} */
              var index = _this220.renderedOptions.toArray().indexOf(
              /** @type {?} */
              event.option);

              _this220.renderedOptions.filter(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.hasFocus;
              }).forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.hasFocus = false;
              });

              if (_this220.isValidIndex(index)) {
                _this220.keyManager.updateActiveItem(index);
              }
            });
            this.optionBlurSubscription = this.optionBlurChanges.subscribe(
            /**
            * @return {?}
            */
            function () {
              return _this220.blur();
            });
          }
          /**
           * Utility to ensure all indexes are valid.
           * @private
           * @param {?} index The index to be checked.
           * @return {?} True if the index is valid for our list of options.
           */

        }, {
          key: "isValidIndex",
          value: function isValidIndex(index) {
            return index >= 0 && index < this.renderedOptions.length;
          }
          /**
           * Checks whether any of the options is focused.
           * @private
           * @return {?}
           */

        }, {
          key: "hasFocusedOption",
          value: function hasFocusedOption() {
            return this.renderedOptions.some(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.hasFocus;
            });
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "markOptionsForCheck",
          value: function markOptionsForCheck() {
            if (this.renderedOptions.length) {
              this.renderedOptions.forEach(
              /**
              * @param {?} option
              * @return {?}
              */
              function (option) {
                return option.markForCheck();
              });
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateOptionsFocus",
          value: function updateOptionsFocus() {
            this.renderedOptions.filter(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.hasFocus;
            }).forEach(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.hasFocus = false;
            });
          }
          /**
           * @private
           * @param {?} option
           * @return {?}
           */

        }, {
          key: "canDeselectLast",
          value: function canDeselectLast(option) {
            return !(this.noUnselectLast && this.selectionModel.selected.length === 1 && option.selected);
          }
          /**
           * @private
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "isFocusReceivedFromNestedOption",
          value: function isFocusReceivedFromNestedOption($event) {
            if (!$event || !$event.relatedTarget) {
              return false;
            }

            return (
              /** @type {?} */
              $event.relatedTarget.classList.contains('mc-tree-option')
            );
          }
        }, {
          key: "autoSelect",
          get: function get() {
            return this._autoSelect;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._autoSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "optionFocusChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"]).apply(void 0, _toConsumableArray(this.renderedOptions.map(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.onFocus;
            })));
          }
          /**
           * @return {?}
           */

        }, {
          key: "optionBlurChanges",
          get: function get() {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"]).apply(void 0, _toConsumableArray(this.renderedOptions.map(
            /**
            * @param {?} option
            * @return {?}
            */
            function (option) {
              return option.onBlur;
            })));
          }
          /**
           * @return {?}
           */

        }, {
          key: "multiple",
          get: function get() {
            return !!this.multipleMode;
          }
          /**
           * @return {?}
           */

        }, {
          key: "noUnselectLast",
          get: function get() {
            return this._noUnselectLast;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._noUnselectLast = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} rawValue
           * @return {?}
           */
          ,
          set: function set(rawValue) {
            /** @type {?} */
            var value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(rawValue);

            if (this._disabled !== value) {
              this._disabled = value;
              this.markOptionsForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabIndex",
          get: function get() {
            return this.disabled ? -1 : this._tabIndex;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._tabIndex = value;
            this.userTabIndex = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "showCheckbox",
          get: function get() {
            return this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
          }
        }]);

        return McTreeSelection;
      }(_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"]);

      McTreeSelection.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{
          selector: 'mc-tree-selection',
          exportAs: 'mcTreeSelection',
          template: '<ng-container cdkTreeNodeOutlet></ng-container>',
          host: {
            "class": 'mc-tree-selection',
            '[attr.tabindex]': 'tabIndex',
            '[attr.disabled]': 'disabled || null',
            '(blur)': 'blur()',
            '(focus)': 'focus($event)',
            '(keydown)': 'onKeyDown($event)',
            '(window:resize)': 'updateScrollSize()'
          },
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
          providers: [MC_SELECTION_TREE_VALUE_ACCESSOR, {
            provide: MC_TREE_OPTION_PARENT_COMPONENT,
            useExisting: McTreeSelection
          }, {
            provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"],
            useExisting: McTreeSelection
          }],
          styles: [".mc-tree-selection{display:block}.mc-tree-option{align-items:center;border:2px solid transparent;display:flex;height:28px;word-wrap:break-word}.mc-tree-option>.mc-icon{cursor:pointer;margin-right:4px}.mc-tree-option:focus{outline:none}.mc-tree-option:not([disabled]){cursor:pointer}.mc-tree-option .mc-pseudo-checkbox{margin-right:8px}.mc-tree-node-toggle{cursor:pointer;margin-right:4px}.mc-tree-node-toggle .mc-icon{transform:rotate(-90deg)}.mc-tree-node-toggle.mc-opened .mc-icon{transform:rotate(0)}.mc-tree-node-toggle[disabled]{cursor:default}"]
        }]
      }];
      /** @nocollapse */

      McTreeSelection.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]
        }, {
          type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
            args: ['multiple']
          }]
        }];
      };

      McTreeSelection.propDecorators = {
        nodeOutlet: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
          args: [_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeOutlet"], {
            "static": true
          }]
        }],
        unorderedOptions: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
          args: [McTreeOption]
        }],
        treeControl: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        navigationChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        selectionChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        autoSelect: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        noUnselectLast: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        tabIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: tree.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var MC_TREE_DIRECTIVES = [McTreeSelection, McTreeOption, McTreeNodeDef, McTreeNodePadding, McTreeNodeToggleComponent, McTreeNodeToggleDirective];

      var McTreeModule = function McTreeModule() {
        _classCallCheck(this, McTreeModule);
      };

      McTreeModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McPseudoCheckboxModule"]],
          exports: MC_TREE_DIRECTIVES,
          declarations: MC_TREE_DIRECTIVES
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: data-source/flat-data-source.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Tree flattener to convert a normal type of node to node with children & level information.
       * Transform nested nodes of type `T` to flattened nodes of type `F`.
       *
       * For example, the input data of type `T` is nested, and contains its children data:
       *   SomeNode: {
       *     key: 'Fruits',
       *     children: [
       *       NodeOne: {
       *         key: 'Apple',
       *       },
       *       NodeTwo: {
       *        key: 'Pear',
       *      }
       *    ]
       *  }
       *  After flattener flatten the tree, the structure will become
       *  SomeNode: {
       *    key: 'Fruits',
       *    expandable: true,
       *    level: 1
       *  },
       *  NodeOne: {
       *    key: 'Apple',
       *    expandable: false,
       *    level: 2
       *  },
       *  NodeTwo: {
       *   key: 'Pear',
       *   expandable: false,
       *   level: 2
       * }
       * and the output flattened type is `F` with additional information.
       * @template T, F
       */

      var McTreeFlattener = /*#__PURE__*/function () {
        /**
         * @param {?} transformFunction
         * @param {?} getLevel
         * @param {?} isExpandable
         * @param {?} getChildren
         */
        function McTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {
          _classCallCheck(this, McTreeFlattener);

          this.transformFunction = transformFunction;
          this.getLevel = getLevel;
          this.isExpandable = isExpandable;
          this.getChildren = getChildren;
        }
        /**
         * @param {?} node
         * @param {?} level
         * @param {?} resultNodes
         * @param {?} parent
         * @return {?}
         */


        _createClass(McTreeFlattener, [{
          key: "flattenNode",
          value: function flattenNode(node, level, resultNodes, parent) {
            var _this221 = this;

            /** @type {?} */
            var flatNode = this.transformFunction(node, level, parent);
            resultNodes.push(flatNode);

            if (this.isExpandable(flatNode)) {
              /** @type {?} */
              var childrenNodes = this.getChildren(node);

              if (childrenNodes) {
                if (Array.isArray(childrenNodes)) {
                  this.flattenChildren(childrenNodes, level, resultNodes, flatNode);
                } else {
                  childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(
                  /**
                  * @param {?} children
                  * @return {?}
                  */
                  function (children) {
                    _this221.flattenChildren(children, level, resultNodes, flatNode);
                  });
                }
              }
            }

            return resultNodes;
          }
          /**
           * @param {?} children
           * @param {?} level
           * @param {?} resultNodes
           * @param {?} parent
           * @return {?}
           */

        }, {
          key: "flattenChildren",
          value: function flattenChildren(children, level, resultNodes, parent) {
            var _this222 = this;

            children.forEach(
            /**
            * @param {?} child
            * @return {?}
            */
            function (child) {
              _this222.flattenNode(child, level + 1, resultNodes, parent);
            });
          }
          /**
           * Flatten a list of node type T to flattened version of node F.
           * Please note that type T may be nested, and the length of `structuredData` may be different
           * from that of returned list `F[]`.
           * @param {?} structuredData
           * @return {?}
           */

        }, {
          key: "flattenNodes",
          value: function flattenNodes(structuredData) {
            var _this223 = this;

            /** @type {?} */
            var resultNodes = [];
            structuredData.forEach(
            /**
            * @param {?} node
            * @return {?}
            */
            function (node) {
              return _this223.flattenNode(node, 0, resultNodes, null);
            });
            return resultNodes;
          }
          /**
           * Expand flattened node with current expansion status.
           * The returned list may have different length.
           * @param {?} nodes
           * @param {?} treeControl
           * @return {?}
           */

        }, {
          key: "expandFlattenedNodes",
          value: function expandFlattenedNodes(nodes, treeControl) {
            var _this224 = this;

            /** @type {?} */
            var results = [];
            /** @type {?} */

            var currentExpand = [];
            currentExpand[0] = true;
            nodes.forEach(
            /**
            * @param {?} node
            * @return {?}
            */
            function (node) {
              /** @type {?} */
              var expand = true;

              for (var i = 0; i <= _this224.getLevel(node); i++) {
                expand = expand && currentExpand[i];
              }

              if (expand) {
                results.push(node);
              }

              if (_this224.isExpandable(node)) {
                currentExpand[_this224.getLevel(node) + 1] = treeControl.isExpanded(node);
              }
            });
            return results;
          }
        }]);

        return McTreeFlattener;
      }();

      if (false) {}
      /** @enum {string} */


      var McTreeDataSourceChangeTypes = {
        Expansion: "expansion",
        Filter: "filter"
      };
      /**
       * Data source for flat tree.
       * The data source need to handle expansion/collapsion of the tree node and change the data feed
       * to `McTree`.
       * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted
       * to type `F` for `McTree` to consume.
       * @template T, F
       */

      var McTreeFlatDataSource = /*#__PURE__*/function (_angular_cdk_collecti) {
        _inherits(McTreeFlatDataSource, _angular_cdk_collecti);

        var _super48 = _createSuper(McTreeFlatDataSource);

        /**
         * @param {?} treeControl
         * @param {?} treeFlattener
         * @param {?=} initialData
         */
        function McTreeFlatDataSource(treeControl, treeFlattener) {
          var _this225;

          var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

          _classCallCheck(this, McTreeFlatDataSource);

          _this225 = _super48.call(this);
          _this225.treeControl = treeControl;
          _this225.treeFlattener = treeFlattener;
          _this225.flattenedData = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
          _this225.expandedData = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
          _this225.filteredData = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
          _this225._data = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"](initialData);
          return _this225;
        }
        /**
         * @return {?}
         */


        _createClass(McTreeFlatDataSource, [{
          key: "connect",

          /**
           * @param {?} collectionViewer
           * @return {?}
           */
          value: function connect(collectionViewer) {
            var _this226 = this;

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(collectionViewer.viewChange, this.treeControl.expansionModel.changed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return {
                type: McTreeDataSourceChangeTypes.Expansion,
                value: value
              };
            })), this.treeControl.filterValue.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
            /**
            * @param {?} value
            * @return {?}
            */
            function (value) {
              return {
                type: McTreeDataSourceChangeTypes.Filter,
                value: value
              };
            })), this.flattenedData).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
            /**
            * @param {?} changeObj
            * @return {?}
            */
            function (changeObj) {
              if (changeObj.type === McTreeDataSourceChangeTypes.Filter) {
                if (changeObj.value && changeObj.value.length > 0) {
                  return _this226.filterHandler();
                } else {
                  return _this226.expansionHandler();
                }
              }

              return _this226.expansionHandler();
            }));
          }
          /**
           * @return {?}
           */

        }, {
          key: "filterHandler",
          value: function filterHandler() {
            this.filteredData.next(this.treeControl.filterModel.selected);
            return this.filteredData.value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "expansionHandler",
          value: function expansionHandler() {
            /** @type {?} */
            var expandedNodes = this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl);
            this.expandedData.next(expandedNodes);
            return this.expandedData.value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "disconnect",
          value: function disconnect() {// no op
          }
        }, {
          key: "data",
          get: function get() {
            return this._data.value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._data.next(value);

            this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));
            this.treeControl.dataNodes = this.flattenedData.value;
          }
        }]);

        return McTreeFlatDataSource;
      }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__["DataSource"]);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: data-source/nested-data-source.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * Data source for nested tree.
       *
       * The data source for nested tree doesn't have to consider node flattener, or the way to expand
       * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.
       * @template T
       */


      var McTreeNestedDataSource = /*#__PURE__*/function (_angular_cdk_collecti2) {
        _inherits(McTreeNestedDataSource, _angular_cdk_collecti2);

        var _super49 = _createSuper(McTreeNestedDataSource);

        function McTreeNestedDataSource() {
          var _this227;

          _classCallCheck(this, McTreeNestedDataSource);

          _this227 = _super49.apply(this, arguments);
          /* tslint:disable-next-line:naming-convention */

          _this227._data = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
          return _this227;
        }
        /**
         * @return {?}
         */


        _createClass(McTreeNestedDataSource, [{
          key: "connect",

          /**
           * @param {?} collectionViewer
           * @return {?}
           */
          value: function connect(collectionViewer) {
            var _this228 = this;

            return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"]).apply(void 0, [collectionViewer.viewChange, this._data]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
            /**
            * @return {?}
            */
            function () {
              return _this228.data;
            }));
          }
          /**
           * @return {?}
           */

        }, {
          key: "disconnect",
          value: function disconnect() {// no op
          }
        }, {
          key: "data",
          get: function get() {
            return this._data.value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._data.next(value);
          }
        }]);

        return McTreeNestedDataSource;
      }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__["DataSource"]);

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-tree.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-tree.js.map

      /***/

    },

    /***/
    "werY":
    /*!**************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/shared/stackblitz/stackblitz-button.html ***!
      \**************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function werY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<div class=\"stackblitz__wrapper\">\n\n    <svg class=\"stackblitz__icon\" width='9.5px' height='14px' viewBox='0 0 23 34' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <desc>Created with Sketch.</desc> <g id='Symbols' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'> <g class='stackblitz__icon-g'> <polygon id='Path' points='0 19.9187087 9.87007874 19.9187087 4.12007874 34 23 13.9612393 13.0846457 13.9612393 18.7893701 0'></polygon> </g> </g> </svg>\n\n    <button\n        class = \"stackblitz__link\"\n        (click)=\"openStackblitz()\"\n        [disabled]=\"isDisabled\">\n        Stackblitz\n  </button>\n</div>\n";
      /***/
    },

    /***/
    "wiOn":
    /*!**********************************************************************!*\
      !*** ./packages/docs/src/app/shared/stackblitz/stackblitz-writer.ts ***!
      \**********************************************************************/

    /*! exports provided: StackblitzWriter */

    /***/
    function wiOn(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StackblitzWriter", function () {
        return StackblitzWriter;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common/http */
      "IheW");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _version_version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../version/version */
      "S/AA");
      /* tslint:disable:no-parameter-reassignment */


      var STACKBLITZ_URL = 'https://run.stackblitz.com/api/angular/v1';
      var COPYRIGHT = "Copyright 2020 Positive Technologies. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license.";
      /**
       * Path that refers to the docs-content from the "@ptsecurity/mosaic-examples" package. The
       * structure is defined in the repository, but we include the docs-content as assets in
       * in the CLI configuration.
       */

      var DOCS_CONTENT_PATH = 'docs-content/examples-source/';
      var TEMPLATE_PATH = 'assets/stackblitz/';
      var TEMPLATE_FILES = ['.editorconfig', '.gitignore', 'index.html', 'tsconfig.json', 'tsconfig.app.json', 'tsconfig.spec.json', 'styles.css', 'polyfills.ts', 'angular.json', 'main.ts', 'mosaic-module.ts'];
      var TAGS = ['angular', 'mosaic', 'example'];
      var angularVersion = '^9.0.0';
      var dependencies = {
        '@ptsecurity/cdk': _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"],
        '@ptsecurity/mosaic': _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"],
        '@ptsecurity/mosaic-icons': '^5.0.0',
        '@ptsecurity/mosaic-moment-adapter': _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"],
        '@angular/cdk': angularVersion,
        '@angular/animations': angularVersion,
        '@angular/common': angularVersion,
        '@angular/compiler': angularVersion,
        '@angular/core': angularVersion,
        '@angular/forms': angularVersion,
        '@angular/platform-browser': angularVersion,
        '@angular/platform-browser-dynamic': angularVersion,
        '@angular/router': angularVersion,
        'core-js': '^2.4.1',
        rxjs: '^6.5.0',
        'web-animations-js': '^2.3.1',
        messageformat: '^2.0.5',
        tslib: '^1.10.0',
        'zone.js': '~0.10.3',
        moment: '^2.24.0'
      };
      /**
       * Stackblitz writer, write example files to stackblitz
       *
       * StackBlitz API
       * URL: https://run.stackblitz.com/api/aio/v1/
       * data: {
       *   // File name, directory and content of files
       *   files[file-name1]: file-content1,
       *   files[directory-name/file-name2]: file-content2,
       *   // Can add multiple tags
       *   tags[0]: tag-0,
       *   // Description of stackblitz
       *   description: description,
       *   // Private or not
       *   private: true
       *  // Dependencies
       *  dependencies: dependencies
       * }
       */

      var StackblitzWriter = /*#__PURE__*/function () {
        function StackblitzWriter(_http) {
          _classCallCheck(this, StackblitzWriter);

          this._http = _http;
        }
        /**
         * Returns an HTMLFormElement that will open a new stackblitz template with the example data when
         * called with submit().
         */


        _createClass(StackblitzWriter, [{
          key: "constructStackblitzForm",
          value: function constructStackblitzForm(data) {
            var _this229 = this;

            var indexFile = "app%2F".concat(data.indexFilename, ".ts");
            var form = this.createFormElement(indexFile);
            TAGS.forEach(function (tag, i) {
              return _this229.appendFormInput(form, "tags[".concat(i, "]"), tag);
            });
            this.appendFormInput(form, 'private', 'true');
            this.appendFormInput(form, 'description', data.description);
            this.appendFormInput(form, 'dependencies', JSON.stringify(dependencies));
            return new Promise(function (resolve) {
              var templateContents = TEMPLATE_FILES.map(function (file) {
                return _this229.readFile(form, data, file, TEMPLATE_PATH);
              });
              var exampleContents = data.exampleFiles.map(function (file) {
                return _this229.readFile(form, data, file, DOCS_CONTENT_PATH);
              }); // TODO: Prevent including assets to be manually checked.

              if (data.selectorName === 'icon-svg-example') {
                _this229.readFile(form, data, 'assets/img/examples/thumbup-icon.svg', '', false);
              }

              Promise.all(templateContents.concat(exampleContents)).then(function () {
                resolve(form);
              });
            });
          }
          /** Constructs a new form element that will navigate to the stackblitz url. */

        }, {
          key: "createFormElement",
          value: function createFormElement(indexFile) {
            var form = document.createElement('form');
            form.action = "".concat(STACKBLITZ_URL, "?file=").concat(indexFile);
            form.method = 'post';
            form.target = '_blank';
            return form;
          }
          /** Appends the name and value as an input to the form. */

        }, {
          key: "appendFormInput",
          value: function appendFormInput(form, name, value) {
            var input = document.createElement('input');
            input.type = 'hidden';
            input.name = name;
            input.value = value;
            form.appendChild(input);
          }
          /**
           * Reads the file and adds its text to the form
           * @param form the html form you are appending to
           * @param data example metadata about the example
           * @param filename file name of the example
           * @param path path to the src
           * @param prependApp whether to prepend the 'app' prefix to the path
           */

        }, {
          key: "readFile",
          value: function readFile(form, data, filename, path) {
            var _this230 = this;

            var prependApp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

            this._http.get(path + filename, {
              responseType: 'text'
            }).subscribe(function (response) {
              return _this230.addFileToForm(form, data, response, filename, path, prependApp);
            }, // tslint:disable-next-line:no-console
            function (error) {
              return console.log(error);
            });
          }
          /**
           * Adds the file text to the form.
           * @param form the html form you are appending to
           * @param data example metadata about the example
           * @param content file contents
           * @param filename file name of the example
           * @param path path to the src
           * @param prependApp whether to prepend the 'app' prefix to the path
           */

        }, {
          key: "addFileToForm",
          value: function addFileToForm(form, data, content, filename, path) {
            var prependApp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

            if (path === TEMPLATE_PATH) {
              content = this.replaceExamplePlaceholderNames(data, filename, content);
            } else if (prependApp) {
              // tslint:disable-next-line:prefer-template
              filename = 'app/' + filename;
            }

            this.appendFormInput(form, "files[".concat(filename, "]"), this.appendCopyright(filename, content));
          }
          /**
           * The stackblitz template assets contain placeholder names for the examples:
           * "<mosaic-docs-example>" and "MosaicDocsExample".
           * This will replace those placeholders with the names from the example metadata,
           * e.g. "<basic-button-example>" and "BasicButtonExample"
           */

        }, {
          key: "replaceExamplePlaceholderNames",
          value: function replaceExamplePlaceholderNames(data, fileName, fileContent) {
            if (fileName === 'index.html') {
              // Replace the component selector in `index,html`.
              // For example, <mosaic-docs-example></mosaic-docs-example> will be replaced as
              // <button-demo></button-demo>
              fileContent = fileContent.replace(/mosaic-docs-example/g, data.selectorName);
              fileContent = fileContent.replace(/{{version}}/g, _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"]);
            } else if (fileName === 'main.ts') {
              // Replace the component name in `main.ts`.
              // Replace `import {MosaicDocsExample} from 'mosaic-docs-example'`
              // will be replaced as `import {ButtonDemo} from './button-demo'`
              fileContent = fileContent.replace(/{ MosaicDocsExample }/g, "{ ".concat(data.componentName, " }")); // Replace `declarations: [MosaicDocsExample]`
              // will be replaced as `declarations: [ButtonDemo]`

              fileContent = fileContent.replace(/declarations: \[MosaicDocsExample\]/g, "declarations: [".concat(data.componentName, "]")); // Replace `entryComponents: [MosaicDocsExample]`
              // will be replaced as `entryComponents: [DialogContent]`

              fileContent = fileContent.replace(/entryComponents: \[MosaicDocsExample\]/g, "entryComponents: [".concat(data.componentName, "]")); // Replace `bootstrap: [MosaicDocsExample]`
              // will be replaced as `bootstrap: [ButtonDemo]`
              // This assumes the first component listed in the main component

              var componentList = (data.componentName || '').split(',')[0];
              fileContent = fileContent.replace(/bootstrap: \[MosaicDocsExample\]/g, "bootstrap: [".concat(componentList, "]"));
              fileContent = fileContent.replace(/mosaic-docs-example/g, data.indexFilename);
            }

            return fileContent;
          }
        }, {
          key: "appendCopyright",
          value: function appendCopyright(filename, content) {
            if (filename.indexOf('.ts') > -1 || filename.indexOf('.scss') > -1) {
              content = "".concat(content, "\n\n/**  ").concat(COPYRIGHT, " */");
            } else if (filename.indexOf('.html') > -1) {
              content = "".concat(content, "\n\n<!-- ").concat(COPYRIGHT, " -->");
            }

            return content;
          }
        }]);

        return StackblitzWriter;
      }();

      StackblitzWriter.ctorParameters = function () {
        return [{
          type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]
        }];
      };

      StackblitzWriter = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])], StackblitzWriter);
      /***/
    },

    /***/
    "ypJ8":
    /*!**************************************************************!*\
      !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-timepicker.js ***!
      \**************************************************************/

    /*! exports provided: AM_PM_FORMAT_REGEXP, DEFAULT_TIME_FORMAT, HOURS_MINUTES_REGEXP, HOURS_MINUTES_SECONDS_REGEXP, HOURS_ONLY_REGEXP, HOURS_PER_DAY, MC_TIMEPICKER_VALIDATORS, MC_TIMEPICKER_VALUE_ACCESSOR, MINUTES_PER_HOUR, McTimepicker, McTimepickerModule, SECONDS_PER_MINUTE, TIMEFORMAT_PLACEHOLDERS, TimeFormats, TimeParts */

    /***/
    function ypJ8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var _TIMEFORMAT_PLACEHOLD;

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AM_PM_FORMAT_REGEXP", function () {
        return AM_PM_FORMAT_REGEXP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DEFAULT_TIME_FORMAT", function () {
        return DEFAULT_TIME_FORMAT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOURS_MINUTES_REGEXP", function () {
        return HOURS_MINUTES_REGEXP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOURS_MINUTES_SECONDS_REGEXP", function () {
        return HOURS_MINUTES_SECONDS_REGEXP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOURS_ONLY_REGEXP", function () {
        return HOURS_ONLY_REGEXP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HOURS_PER_DAY", function () {
        return HOURS_PER_DAY;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TIMEPICKER_VALIDATORS", function () {
        return MC_TIMEPICKER_VALIDATORS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MC_TIMEPICKER_VALUE_ACCESSOR", function () {
        return MC_TIMEPICKER_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MINUTES_PER_HOUR", function () {
        return MINUTES_PER_HOUR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTimepicker", function () {
        return McTimepicker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "McTimepickerModule", function () {
        return McTimepickerModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SECONDS_PER_MINUTE", function () {
        return SECONDS_PER_MINUTE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TIMEFORMAT_PLACEHOLDERS", function () {
        return TIMEFORMAT_PLACEHOLDERS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeFormats", function () {
        return TimeFormats;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeParts", function () {
        return TimeParts;
      });
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      "YEUz");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "SCoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @ptsecurity/cdk/datetime */
      "5vLs");
      /* harmony import */


      var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @ptsecurity/cdk/keycodes */
      "+6St");
      /* harmony import */


      var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @ptsecurity/mosaic/form-field */
      "7oHS");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /**
       * @fileoverview added by tsickle
       * Generated from: timepicker.constants.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @enum {number} */


      var TimeParts = {
        hours: 0,
        minutes: 1,
        seconds: 2
      };
      TimeParts[TimeParts.hours] = 'hours';
      TimeParts[TimeParts.minutes] = 'minutes';
      TimeParts[TimeParts.seconds] = 'seconds';
      /** @enum {string} */

      var TimeFormats = {
        HHmmss: "HH:mm:ss",
        HHmm: "HH:mm"
      };
      /** @type {?} */

      var TIMEFORMAT_PLACEHOLDERS = (_TIMEFORMAT_PLACEHOLD = {}, _defineProperty(_TIMEFORMAT_PLACEHOLD, TimeFormats.HHmmss, '  :  :  '), _defineProperty(_TIMEFORMAT_PLACEHOLD, TimeFormats.HHmm, '  :  '), _TIMEFORMAT_PLACEHOLD);
      /** @type {?} */

      var DEFAULT_TIME_FORMAT = TimeFormats.HHmm;
      /** @type {?} */

      var HOURS_MINUTES_SECONDS_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?$/;
      /** @type {?} */

      var HOURS_MINUTES_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9])?$/;
      /** @type {?} */

      var HOURS_ONLY_REGEXP = /^([0-1][0-9]|2[0-3]):?$/;
      /** @type {?} */

      var AM_PM_FORMAT_REGEXP = /^([0-1]?[0-9]):([0-5]?[0-9]) ([ap][m]?$)/i;
      /** @type {?} */

      var SECONDS_PER_MINUTE = 59;
      /** @type {?} */

      var MINUTES_PER_HOUR = 59;
      /** @type {?} */

      var HOURS_PER_DAY = 23;
      /**
       * @fileoverview added by tsickle
       * Generated from: timepicker.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * \@docs-private
       * @type {?}
       */

      var MC_TIMEPICKER_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McTimepicker;
        }),
        multi: true
      };
      /**
       * \@docs-private
       * @type {?}
       */

      var MC_TIMEPICKER_VALIDATORS = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALIDATORS"],
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return McTimepicker;
        }),
        multi: true
      };
      /** @type {?} */

      var uniqueComponentIdSuffix = 0;
      /**
       * @template D
       */

      var McTimepicker = /*#__PURE__*/function () {
        /**
         * @param {?} elementRef
         * @param {?} dateAdapter
         * @param {?} renderer
         */
        function McTimepicker(elementRef, dateAdapter, renderer) {
          var _this231 = this;

          _classCallCheck(this, McTimepicker);

          this.elementRef = elementRef;
          this.dateAdapter = dateAdapter;
          this.renderer = renderer;
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          this.focused = false;
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           */

          this.controlType = 'mc-timepicker';
          this.lastValueValid = false;
          this._format = DEFAULT_TIME_FORMAT;
          this._min = null;
          this._max = null;
          this.uid = "mc-timepicker-".concat(uniqueComponentIdSuffix++);

          this.parseValidator =
          /**
          * @return {?}
          */
          function () {
            return _this231.empty || _this231.lastValueValid ? null : {
              mcTimepickerParse: {
                text: _this231.viewValue
              }
            };
          };

          this.minValidator =
          /**
          * @param {?} control
          * @return {?}
          */
          function (control) {
            /** @type {?} */
            var controlValue = _this231.getValidDateOrNull(_this231.dateAdapter.deserialize(control.value));

            return !_this231.min || !controlValue || _this231.compareTime(_this231.min, controlValue) <= 0 ? null : {
              mcTimepickerLowerThenMin: {
                min: _this231.min,
                actual: controlValue
              }
            };
          };

          this.maxValidator =
          /**
          * @param {?} control
          * @return {?}
          */
          function (control) {
            /** @type {?} */
            var controlValue = _this231.getValidDateOrNull(_this231.dateAdapter.deserialize(control.value));

            return !_this231.max || !controlValue || _this231.compareTime(_this231.max, controlValue) >= 0 ? null : {
              mcTimepickerHigherThenMax: {
                max: _this231.max,
                actual: controlValue
              }
            };
          }; // tslint:disable-next-line:no-empty


          this.validatorOnChange =
          /**
          * @return {?}
          */
          function () {};

          if (!this.dateAdapter) {
            throw Error("McTimepicker: No provider found for DateAdapter. You must import one of the existing " + "modules at your application root or provide a custom implementation or use exists ones.");
          }

          this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([this.parseValidator, this.minValidator, this.maxValidator]);
          this.onChange = rxjs__WEBPACK_IMPORTED_MODULE_9__["noop"]; // Force setter to be called in case id was not specified.

          this.id = this.id;
          this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];
        }
        /**
         * @return {?}
         */


        _createClass(McTimepicker, [{
          key: "ngOnDestroy",

          /**
           * @return {?}
           */
          value: function ngOnDestroy() {
            this.stateChanges.complete();
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.elementRef.nativeElement.focus();
          }
          /**
           * @param {?} isFocused
           * @return {?}
           */

        }, {
          key: "focusChanged",
          value: function focusChanged(isFocused) {
            if (isFocused !== this.focused) {
              this.focused = isFocused;
              this.onTouched();
              this.stateChanges.next();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            this.lastValueValid = !!this.getDateFromTimeString(this.viewValue);
            this.control.updateValueAndValidity();
            this.focusChanged(false);
          }
          /**
           * @param {?} $event
           * @return {?}
           */

        }, {
          key: "onPaste",
          value: function onPaste($event) {
            /** @type {?} */
            var newTimeObj = this.getDateFromTimeString($event.clipboardData.getData('text'));

            if (!newTimeObj) {
              return;
            }

            $event.preventDefault();
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.getTimeStringFromDate(newTimeObj, this.format));
            this.value = newTimeObj;
            this.onChange(newTimeObj);
            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "onInput",
          value: function onInput() {
            /** @type {?} */
            var newTimeObj = this.getDateFromTimeString(this.viewValue);
            this.lastValueValid = !!newTimeObj;

            if (!newTimeObj) {
              this.control.updateValueAndValidity();
              return;
            }
            /** @type {?} */


            var selectionStart = this.selectionStart;
            /** @type {?} */

            var selectionEnd = this.selectionEnd;
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.getTimeStringFromDate(newTimeObj, this.format));
            this.selectionStart = selectionStart;
            this.selectionEnd = selectionEnd;
            this.createSelectionOfTimeComponentInInput(
            /** @type {?} */
            selectionStart + 1);
            this.value = newTimeObj;
            this.onChange(newTimeObj);
            this.stateChanges.next();
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "onContainerClick",
          value: function onContainerClick() {
            this.focus();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onKeyDown",
          value: function onKeyDown(event) {
            var _this232 = this;

            // tslint:disable-next-line: deprecation

            /** @type {?} */
            var keyCode = event.keyCode;

            if (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["hasModifierKey"])(event)) {
              Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["noop"])();
            } else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["UP_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["DOWN_ARROW"]].includes(keyCode)) {
              event.preventDefault();
              this.verticalArrowKeyHandler(keyCode);
            } else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["LEFT_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["RIGHT_ARROW"]].includes(keyCode)) {
              this.horizontalArrowKeyHandler(keyCode);
            } else {
              setTimeout(
              /**
              * @return {?}
              */
              function () {
                return _this232.onInput();
              });
            }
          }
          /**
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "validate",
          value: function validate(control) {
            this.setControl(control);
            return this.validator ? this.validator(control) : null;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnValidatorChange",
          value: function registerOnValidatorChange(fn) {
            this.validatorOnChange = fn;
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.disabled = isDisabled;
          }
          /**
           * Checks whether the input is invalid based on the native validation.
           * @private
           * @return {?}
           */

        }, {
          key: "isBadInput",
          value: function isBadInput() {
            /** @type {?} */
            var validity =
            /** @type {?} */
            this.elementRef.nativeElement.validity;
            return validity && validity.badInput;
          }
          /**
           * @private
           * @param {?} keyCode
           * @return {?}
           */

        }, {
          key: "verticalArrowKeyHandler",
          value: function verticalArrowKeyHandler(keyCode) {
            if (!this.value) {
              return;
            }
            /** @type {?} */


            var changedTime;
            /** @type {?} */

            var newEditParams = this.getTimeEditMetrics(
            /** @type {?} */
            this.selectionStart);

            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["UP_ARROW"]) {
              changedTime = this.incrementTime(this.value, newEditParams.modifiedTimePart);
            }

            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["DOWN_ARROW"]) {
              changedTime = this.decrementTime(this.value, newEditParams.modifiedTimePart);
            }

            this.value = changedTime;
            this.selectionStart = newEditParams.cursorStartPosition;
            this.selectionEnd = newEditParams.cursorEndPosition;
            this.onChange(changedTime);
            this.stateChanges.next();
          }
          /**
           * @private
           * @param {?} keyCode
           * @return {?}
           */

        }, {
          key: "horizontalArrowKeyHandler",
          value: function horizontalArrowKeyHandler(keyCode) {
            if (!this.value) {
              return;
            }
            /** @type {?} */


            var cursorPos =
            /** @type {?} */
            this.selectionStart;

            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["LEFT_ARROW"]) {
              cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;
            } else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["RIGHT_ARROW"]) {
              /** @type {?} */
              var nextDividerPos = this.viewValue.indexOf(':', cursorPos);
              cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;
            }

            this.createSelectionOfTimeComponentInInput(cursorPos);
          }
          /**
           * @private
           * @param {?} cursorPos
           * @return {?}
           */

        }, {
          key: "createSelectionOfTimeComponentInInput",
          value: function createSelectionOfTimeComponentInInput(cursorPos) {
            var _this233 = this;

            setTimeout(
            /**
            * @return {?}
            */
            function () {
              /** @type {?} */
              var newEditParams = _this233.getTimeEditMetrics(cursorPos);

              _this233.selectionStart = newEditParams.cursorStartPosition;
              _this233.selectionEnd = newEditParams.cursorEndPosition;
            });
          }
          /**
           * @private
           * @param {?} dateVal
           * @param {?=} whatToIncrement
           * @return {?}
           */

        }, {
          key: "incrementTime",
          value: function incrementTime(dateVal) {
            var whatToIncrement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TimeParts.seconds;

            /** @type {?} */
            var hours = this.dateAdapter.getHours(dateVal);
            /** @type {?} */

            var minutes = this.dateAdapter.getMinutes(dateVal);
            /** @type {?} */

            var seconds = this.dateAdapter.getSeconds(dateVal);

            switch (whatToIncrement) {
              case TimeParts.hours:
                hours++;
                break;

              case TimeParts.minutes:
                minutes++;
                break;

              case TimeParts.seconds:
                seconds++;
                break;

              default:
            }

            if (seconds > SECONDS_PER_MINUTE) {
              seconds = 0;
            }

            if (minutes > MINUTES_PER_HOUR) {
              minutes = 0;
            }

            if (hours > HOURS_PER_DAY) {
              hours = 0;
            }

            return this.dateAdapter.createDateTime(this.dateAdapter.getYear(this.value), this.dateAdapter.getMonth(this.value), this.dateAdapter.getDate(this.value), hours, minutes, seconds, this.dateAdapter.getMilliseconds(this.value));
          }
          /**
           * @private
           * @param {?} dateVal
           * @param {?=} whatToDecrement
           * @return {?}
           */

        }, {
          key: "decrementTime",
          value: function decrementTime(dateVal) {
            var whatToDecrement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TimeParts.seconds;

            /** @type {?} */
            var hours = this.dateAdapter.getHours(dateVal);
            /** @type {?} */

            var minutes = this.dateAdapter.getMinutes(dateVal);
            /** @type {?} */

            var seconds = this.dateAdapter.getSeconds(dateVal);

            switch (whatToDecrement) {
              case TimeParts.hours:
                hours--;
                break;

              case TimeParts.minutes:
                minutes--;
                break;

              case TimeParts.seconds:
                seconds--;
                break;

              default:
            }

            if (seconds < 0) {
              seconds = SECONDS_PER_MINUTE;
            }

            if (minutes < 0) {
              minutes = MINUTES_PER_HOUR;
            }

            if (hours < 0) {
              hours = HOURS_PER_DAY;
            }

            return this.dateAdapter.createDateTime(this.dateAdapter.getYear(this.value), this.dateAdapter.getMonth(this.value), this.dateAdapter.getDate(this.value), hours, minutes, seconds, this.dateAdapter.getMilliseconds(this.value));
          }
          /**
           * \@description Get params for arrow-keys (up/down) time valie edit.
           * @private
           * @param {?} cursorPosition Current cursor position in timeString
           * @return {?}
           */

        }, {
          key: "getTimeEditMetrics",
          value: function getTimeEditMetrics(cursorPosition) {
            /** @type {?} */
            var timeString = this.viewValue;
            /** @type {?} */

            var modifiedTimePart;
            /** @type {?} */

            var cursorStartPosition;
            /** @type {?} */

            var cursorEndPosition;
            /** @type {?} */

            var hoursIndex = 0;
            /** @type {?} */

            var minutesIndex = timeString.indexOf(':', hoursIndex + 1);
            /** @type {?} */

            var secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;

            if (secondsIndex !== -1 && cursorPosition > secondsIndex) {
              modifiedTimePart = TimeParts.seconds;
              cursorStartPosition = secondsIndex + 1;
              cursorEndPosition = timeString.length;
            } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {
              modifiedTimePart = TimeParts.minutes;
              cursorStartPosition = minutesIndex + 1;
              cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;
            } else {
              modifiedTimePart = TimeParts.hours;
              cursorStartPosition = hoursIndex;
              cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;
            }

            return {
              modifiedTimePart: modifiedTimePart,
              cursorStartPosition: cursorStartPosition,
              cursorEndPosition: cursorEndPosition
            };
          }
          /**
           * \@description Create time string for displaying inside input element of UI
           * @private
           * @param {?} value
           * @param {?} timeFormat
           * @return {?}
           */

        }, {
          key: "getTimeStringFromDate",
          value: function getTimeStringFromDate(value, timeFormat) {
            if (!value || !this.dateAdapter.isValid(value)) {
              return '';
            }

            return this.dateAdapter.format(value, timeFormat);
          }
          /**
           * @private
           * @param {?} timeString
           * @return {?}
           */

        }, {
          key: "getDateFromTimeString",
          value: function getDateFromTimeString(timeString) {
            if (!timeString) {
              return null;
            }
            /** @type {?} */


            var hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);
            /** @type {?} */

            var hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);
            /** @type {?} */

            var hoursOnly = timeString.match(HOURS_ONLY_REGEXP);
            /** @type {?} */

            var hoursAndMinutesInAmPm = timeString.match(AM_PM_FORMAT_REGEXP);
            /** @type {?} */

            var hours = 0;
            /** @type {?} */

            var minutes = 0;
            /** @type {?} */

            var seconds = 0; // tslint:disable:no-magic-numbers

            if (hoursAndMinutesInAmPm) {
              hours = Number(hoursAndMinutesInAmPm[1]);
              minutes = Number(hoursAndMinutesInAmPm[2]);

              if (/[p]/i.test(hoursAndMinutesInAmPm[3]) || /[a]/i.test(hoursAndMinutesInAmPm[3]) && hours === 12) {
                hours += 12;
              }
            } else if (hoursAndMinutesAndSeconds) {
              hours = Number(hoursAndMinutesAndSeconds[1]);
              minutes = Number(hoursAndMinutesAndSeconds[2]);
              seconds = Number(hoursAndMinutesAndSeconds[3]);
            } else if (hoursAndMinutes) {
              hours = Number(hoursAndMinutes[1]);
              minutes = Number(hoursAndMinutes[2]);
            } else if (hoursOnly) {
              hours = Number(hoursOnly[1]);
            } else {
              return null;
            } // tslint:enable

            /** @type {?} */


            var resultDate = this.dateAdapter.createDateTime(this.dateAdapter.getYear(this.value), this.dateAdapter.getMonth(this.value), this.dateAdapter.getDate(this.value), hours, minutes, seconds, this.dateAdapter.getMilliseconds(this.value));
            return this.getValidDateOrNull(resultDate);
          }
          /**
           * @private
           * @param {?} first
           * @param {?} second
           * @return {?}
           */

        }, {
          key: "compareTime",
          value: function compareTime(first, second) {
            /** @type {?} */
            var result = this.dateAdapter.getHours(first) - this.dateAdapter.getHours(second) || this.dateAdapter.getMinutes(first) - this.dateAdapter.getMinutes(second);

            if (TimeFormats.HHmm === this.format) {
              return result;
            } else if (TimeFormats.HHmmss === this.format) {
              return result || this.dateAdapter.getSeconds(first) - this.dateAdapter.getSeconds(second);
            } else {
              throw Error("Unknown format: ".concat(this.format));
            }
          }
          /**
           * @private
           * @param {?} obj
           * @return {?}
           */

        }, {
          key: "getValidDateOrNull",
          value: function getValidDateOrNull(obj) {
            return this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj) ? obj : null;
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "updateView",
          value: function updateView() {
            /** @type {?} */
            var formattedValue = this.getTimeStringFromDate(this.value, this.format);
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', formattedValue);
          }
          /**
           * @private
           * @param {?} control
           * @return {?}
           */

        }, {
          key: "setControl",
          value: function setControl(control) {
            if (!this.control) {
              this.control = control;
            }
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value); // Browsers may not fire the blur event if the input is disabled too quickly.
            // Reset from here to ensure that the element doesn't become stuck.

            if (this.focused) {
              this.focused = false;
            }

            this.stateChanges.next();
          }
          /**
           * @return {?}
           */

        }, {
          key: "id",
          get: function get() {
            return this._id;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._id = value || this.uid;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "required",
          get: function get() {
            return this._required;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "format",
          get: function get() {
            return this._format;
          }
          /**
           * @param {?} formatValue
           * @return {?}
           */
          ,
          set: function set(formatValue) {
            this._format = Object.keys(TimeFormats).map(
            /**
            * @param {?} timeFormatKey
            * @return {?}
            */
            function (timeFormatKey) {
              return TimeFormats[timeFormatKey];
            }).indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;
            this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._format];

            if (this.value) {
              this.updateView();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "min",
          get: function get() {
            return this._min;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.validatorOnChange();
          }
          /**
           * @return {?}
           */

        }, {
          key: "max",
          get: function get() {
            return this._max;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
            this.validatorOnChange();
          }
          /**
           * @return {?}
           */

        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            /** @type {?} */
            var newValue = this.dateAdapter.deserialize(value);
            this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);
            this._value = this.getValidDateOrNull(newValue);
            this.updateView();
          }
          /**
           * @return {?}
           */

        }, {
          key: "viewValue",
          get: function get() {
            return this.elementRef.nativeElement.value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngControl",
          get: function get() {
            return this.control;
          }
          /**
           * Implemented as part of McFormFieldControl.
           * \@docs-private
           * @return {?}
           */

        }, {
          key: "empty",
          get: function get() {
            return !this.viewValue && !this.isBadInput();
          }
          /**
           * @return {?}
           */

        }, {
          key: "selectionStart",
          get: function get() {
            return this.elementRef.nativeElement.selectionStart;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.elementRef.nativeElement.selectionStart = value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "selectionEnd",
          get: function get() {
            return this.elementRef.nativeElement.selectionEnd;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this.elementRef.nativeElement.selectionEnd = value;
          }
        }]);

        return McTimepicker;
      }();

      McTimepicker.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
        args: [{
          selector: 'input[mcTimepicker]',
          exportAs: 'mcTimepickerInput',
          host: {
            "class": 'mc-timepicker mc-input',
            // Native input properties that are overwritten by Angular inputs need to be synced with
            // the native input element. Otherwise property bindings for those don't work.
            '[attr.id]': 'id',
            '[attr.placeholder]': 'placeholder',
            '[attr.disabled]': 'disabled || null',
            '[attr.required]': 'required',
            '(blur)': 'onBlur()',
            '(focus)': 'focusChanged(true)',
            '(paste)': 'onPaste($event)',
            '(keydown)': 'onKeyDown($event)'
          },
          providers: [MC_TIMEPICKER_VALIDATORS, MC_TIMEPICKER_VALUE_ACCESSOR, {
            provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_8__["McFormFieldControl"],
            useExisting: McTimepicker
          }]
        }]
      }];
      /** @nocollapse */

      McTimepicker.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
        }, {
          type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_6__["DateAdapter"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"]
        }];
      };

      McTimepicker.propDecorators = {
        placeholder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        required: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        format: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        min: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        max: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]
        }]
      };

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * Generated from: timepicker.module.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var McTimepickerModule = function McTimepickerModule() {
        _classCallCheck(this, McTimepickerModule);
      };

      McTimepickerModule.decorators = [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"]],
          declarations: [McTimepicker],
          exports: [McTimepicker]
        }]
      }];
      /**
       * @fileoverview added by tsickle
       * Generated from: public-api.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: index.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * Generated from: ptsecurity-mosaic-timepicker.ts
       * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ptsecurity-mosaic-timepicker.js.map

      /***/
    }
  }, [[0, "runtime", "vendor"]]]);
})();
//# sourceMappingURL=main-es5.js.map