(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "+6St":
/*!******************************************************!*\
  !*** ./dist/cdk/fesm2015/ptsecurity-cdk-keycodes.js ***!
  \******************************************************/
/*! exports provided: A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PERIOD, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO, hasModifierKey, isControl, isCopy, isDigit, isFunctionKey, isHorizontalMovement, isInput, isLeftBracket, isLetterKey, isNumberKey, isRightBracket, isSelectAll, isVerticalMovement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return A; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALT", function() { return ALT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APOSTROPHE", function() { return APOSTROPHE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AT_SIGN", function() { return AT_SIGN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return B; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSLASH", function() { return BACKSLASH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSPACE", function() { return BACKSPACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return C; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CAPS_LOCK", function() { return CAPS_LOCK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_SQUARE_BRACKET", function() { return CLOSE_SQUARE_BRACKET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMA", function() { return COMMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT_MENU", function() { return CONTEXT_MENU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTROL", function() { return CONTROL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DASH", function() { return DASH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DELETE", function() { return DELETE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function() { return DOWN_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return E; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EIGHT", function() { return EIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END", function() { return END; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENTER", function() { return ENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EQUALS", function() { return EQUALS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ESCAPE", function() { return ESCAPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return F; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F1", function() { return F1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F10", function() { return F10; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F11", function() { return F11; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F12", function() { return F12; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F2", function() { return F2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F3", function() { return F3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F4", function() { return F4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F5", function() { return F5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F6", function() { return F6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F7", function() { return F7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F8", function() { return F8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F9", function() { return F9; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_EQUALS", function() { return FF_EQUALS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_MINUS", function() { return FF_MINUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_MUTE", function() { return FF_MUTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_SEMICOLON", function() { return FF_SEMICOLON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_VOLUME_DOWN", function() { return FF_VOLUME_DOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_VOLUME_UP", function() { return FF_VOLUME_UP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIRST_MEDIA", function() { return FIRST_MEDIA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIVE", function() { return FIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOUR", function() { return FOUR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return G; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return H; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOME", function() { return HOME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return I; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INSERT", function() { return INSERT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return J; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return K; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return L; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LAST_MEDIA", function() { return LAST_MEDIA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function() { return LEFT_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function() { return M; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_ENTER", function() { return MAC_ENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_META", function() { return MAC_META; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_LEFT", function() { return MAC_WK_CMD_LEFT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_RIGHT", function() { return MAC_WK_CMD_RIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "META", function() { return META; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MUTE", function() { return MUTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "N", function() { return N; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NINE", function() { return NINE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_DIVIDE", function() { return NUMPAD_DIVIDE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_EIGHT", function() { return NUMPAD_EIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_FIVE", function() { return NUMPAD_FIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_FOUR", function() { return NUMPAD_FOUR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_MINUS", function() { return NUMPAD_MINUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_MULTIPLY", function() { return NUMPAD_MULTIPLY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_NINE", function() { return NUMPAD_NINE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_ONE", function() { return NUMPAD_ONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_PERIOD", function() { return NUMPAD_PERIOD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_PLUS", function() { return NUMPAD_PLUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_SEVEN", function() { return NUMPAD_SEVEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_SIX", function() { return NUMPAD_SIX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_THREE", function() { return NUMPAD_THREE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_TWO", function() { return NUMPAD_TWO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_ZERO", function() { return NUMPAD_ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_CENTER", function() { return NUM_CENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_LOCK", function() { return NUM_LOCK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "O", function() { return O; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ONE", function() { return ONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPEN_SQUARE_BRACKET", function() { return OPEN_SQUARE_BRACKET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P", function() { return P; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function() { return PAGE_DOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_UP", function() { return PAGE_UP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAUSE", function() { return PAUSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PERIOD", function() { return PERIOD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLUS_SIGN", function() { return PLUS_SIGN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRINT_SCREEN", function() { return PRINT_SCREEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function() { return Q; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QUESTION_MARK", function() { return QUESTION_MARK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "R", function() { return R; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function() { return RIGHT_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "S", function() { return S; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_LOCK", function() { return SCROLL_LOCK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEMICOLON", function() { return SEMICOLON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEVEN", function() { return SEVEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SHIFT", function() { return SHIFT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTE", function() { return SINGLE_QUOTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIX", function() { return SIX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLASH", function() { return SLASH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACE", function() { return SPACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "T", function() { return T; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAB", function() { return TAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "THREE", function() { return THREE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TILDE", function() { return TILDE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TWO", function() { return TWO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "U", function() { return U; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UP_ARROW", function() { return UP_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "V", function() { return V; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_DOWN", function() { return VOLUME_DOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_UP", function() { return VOLUME_UP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "W", function() { return W; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X", function() { return X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y", function() { return Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z", function() { return Z; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasModifierKey", function() { return hasModifierKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isControl", function() { return isControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCopy", function() { return isCopy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDigit", function() { return isDigit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunctionKey", function() { return isFunctionKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHorizontalMovement", function() { return isHorizontalMovement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInput", function() { return isInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLeftBracket", function() { return isLeftBracket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLetterKey", function() { return isLetterKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumberKey", function() { return isNumberKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRightBracket", function() { return isRightBracket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSelectAll", function() { return isSelectAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isVerticalMovement", function() { return isVerticalMovement; });
/* tslint:disable:no-magic-numbers no-bitwise */
const MAC_ENTER = 3;
const BACKSPACE = 8;
const TAB = 9;
const NUM_CENTER = 12;
const ENTER = 13;
const SHIFT = 16;
const CONTROL = 17;
const ALT = 18;
const PAUSE = 19;
const CAPS_LOCK = 20;
const ESCAPE = 27;
const SPACE = 32;
const PAGE_UP = 33;
const PAGE_DOWN = 34;
const END = 35;
const HOME = 36;
const LEFT_ARROW = 37;
const UP_ARROW = 38;
const RIGHT_ARROW = 39;
const DOWN_ARROW = 40;
const PLUS_SIGN = 43;
const PRINT_SCREEN = 44;
const INSERT = 45;
const DELETE = 46;
const ZERO = 48;
const ONE = 49;
const TWO = 50;
const THREE = 51;
const FOUR = 52;
const FIVE = 53;
const SIX = 54;
const SEVEN = 55;
const EIGHT = 56;
const NINE = 57;
const FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186
const FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187
const QUESTION_MARK = 63;
const AT_SIGN = 64;
const A = 65;
const B = 66;
const C = 67;
const D = 68;
const E = 69;
const F = 70;
const G = 71;
const H = 72;
const I = 73;
const J = 74;
const K = 75;
const L = 76;
const M = 77;
const N = 78;
const O = 79;
const P = 80;
const Q = 81;
const R = 82;
const S = 83;
const T = 84;
const U = 85;
const V = 86;
const W = 87;
const X = 88;
const Y = 89;
const Z = 90;
const META = 91; // WIN_KEY_LEFT
const MAC_WK_CMD_LEFT = 91;
const MAC_WK_CMD_RIGHT = 93;
const CONTEXT_MENU = 93;
const NUMPAD_ZERO = 96;
const NUMPAD_ONE = 97;
const NUMPAD_TWO = 98;
const NUMPAD_THREE = 99;
const NUMPAD_FOUR = 100;
const NUMPAD_FIVE = 101;
const NUMPAD_SIX = 102;
const NUMPAD_SEVEN = 103;
const NUMPAD_EIGHT = 104;
const NUMPAD_NINE = 105;
const NUMPAD_MULTIPLY = 106;
const NUMPAD_PLUS = 107;
const NUMPAD_MINUS = 109;
const NUMPAD_PERIOD = 110;
const NUMPAD_DIVIDE = 111;
const F1 = 112;
const F2 = 113;
const F3 = 114;
const F4 = 115;
const F5 = 116;
const F6 = 117;
const F7 = 118;
const F8 = 119;
const F9 = 120;
const F10 = 121;
const F11 = 122;
const F12 = 123;
const NUM_LOCK = 144;
const SCROLL_LOCK = 145;
const FIRST_MEDIA = 166;
const FF_MINUS = 173;
const MUTE = 173; // Firefox (Gecko) fires 181 for MUTE
const VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN
const VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP
const FF_MUTE = 181;
const FF_VOLUME_DOWN = 182;
const LAST_MEDIA = 183;
const FF_VOLUME_UP = 183;
const SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON
const EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS
const COMMA = 188;
const DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS
const PERIOD = 190;
const SLASH = 191;
const APOSTROPHE = 192;
const TILDE = 192;
const OPEN_SQUARE_BRACKET = 219;
const BACKSLASH = 220;
const CLOSE_SQUARE_BRACKET = 221;
const SINGLE_QUOTE = 222;
const MAC_META = 224;
function hasModifierKey(event, ...modifiers) {
    if (modifiers.length) {
        return modifiers.some((modifier) => event[modifier]);
    }
    return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
}
function isControl(event) {
    const keyCode = event.which;
    switch (keyCode) {
        case SHIFT:
        case CONTROL:
        case ALT:
            return true;
        default:
            return !!event.metaKey;
    }
}
function isNumberKey(event) {
    const keyCode = event.which ? event.which : event;
    return keyCode >= 49 && keyCode <= 57;
}
function isLetterKey(event) {
    const keyCode = event.which ? event.which : event;
    return keyCode >= 65 && keyCode <= 90;
}
function isFunctionKey(event) {
    const keyCode = event.which ? event.which : event;
    return keyCode >= 112 && keyCode <= 123;
}
function isVerticalMovement(event) {
    return [UP_ARROW, DOWN_ARROW, PAGE_DOWN, PAGE_UP, HOME, END].indexOf(event) !== -1;
}
function isHorizontalMovement(event) {
    return [LEFT_ARROW, RIGHT_ARROW, BACKSPACE, DELETE].indexOf(event) !== -1;
}
function isSelectAll(event) {
    return event.ctrlKey && event.keyCode === 65;
}
function isCopy(event) {
    return event.ctrlKey && event.keyCode === 67;
}
function isInput(event) {
    return event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA';
}
function isLeftBracket(event) {
    return event.code === 'BracketLeft';
}
function isRightBracket(event) {
    return event.code === 'BracketRight';
}
function isDigit(event) {
    return [48, 49, 50, 51, 52, 53, 54, 55, 56, 57].indexOf(event.which) !== -1;
}

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "/Qfj":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/main-layout/main-layout.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<navbar></navbar>\n\n<main role=\"main\" class=\"site__main main\">\n    <app-sidenav></app-sidenav>\n    <article class=\"main__content content\">\n        <div class=\"content__wrapper\">\n            <router-outlet></router-outlet>\n        </div>\n    </article>\n</main>\n\n<footer></footer>\n");

/***/ }),

/***/ "/Wkg":
/*!*********************************************************!*\
  !*** ./packages/docs/src/unregister-service-workers.ts ***!
  \*********************************************************/
/*! exports provided: unregisterServiceWorkers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unregisterServiceWorkers", function() { return unregisterServiceWorkers; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");

/**
 * Unregisters all currently registered service workers and returns a boolean that indicates
 * whether there were service workers registered or not.
 */
function unregisterServiceWorkers() {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
        if (!navigator.serviceWorker) {
            return false;
        }
        const registrations = yield navigator.serviceWorker.getRegistrations();
        // Walk through every currently registered Service Worker and unregister it.
        registrations.forEach((registration) => registration.unregister());
        return registrations.length > 0;
    });
}


/***/ }),

/***/ 0:
/*!*****************************************!*\
  !*** multi ./packages/docs/src/main.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/circleci/mosaic/packages/docs/src/main.ts */"o9p/");


/***/ }),

/***/ "0PwA":
/*!*******************************************************************************!*\
  !*** ./packages/docs/src/app/components/main-layout/main-layout.component.ts ***!
  \*******************************************************************************/
/*! exports provided: MainLayoutComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainLayoutComponent", function() { return MainLayoutComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_main_layout_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./main-layout.component.html */ "/Qfj");
/* harmony import */ var _main_layout_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./main-layout.component.scss */ "9Bz7");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "iInd");





let MainLayoutComponent = class MainLayoutComponent {
    constructor(router, route) {
        this.router = router;
        this.route = route;
        this.nextRoute = '';
        this.extras = {
            preserveFragment: true,
            queryParamsHandling: 'preserve'
        };
        const href = location.href;
        if (href.match('github')) {
            this.setNextRoute();
        }
        else {
            this.setDefaultRoute();
        }
    }
    setDefaultRoute() {
        if (location.pathname === '/') {
            this.router.navigate(['button/overview'], this.extras);
        }
    }
    setNextRoute() {
        this.nextRoute = localStorage.getItem('PT_nextRoute');
        if (this.nextRoute) {
            this.router.navigate([this.nextRoute], this.extras);
        }
        else {
            this.router.navigate(['button/overview'], this.extras);
        }
        localStorage.removeItem('PT_nextRoute');
    }
};
MainLayoutComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"] }
];
MainLayoutComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        template: _raw_loader_main_layout_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_main_layout_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
        _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]])
], MainLayoutComponent);



/***/ }),

/***/ "2nOP":
/*!**********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-select.js ***!
  \**********************************************************/
/*! exports provided: McSelect, McSelectBase, McSelectChange, McSelectModule, McSelectSearch, McSelectSearchEmptyResult, McSelectTrigger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelect", function() { return McSelect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelectBase", function() { return McSelectBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelectChange", function() { return McSelectChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelectModule", function() { return McSelectModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelectSearch", function() { return McSelectSearch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelectSearchEmptyResult", function() { return McSelectSearchEmptyResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSelectTrigger", function() { return McSelectTrigger; });
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/tags */ "9hGJ");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ptsecurity/mosaic/input */ "qvb6");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ "kU1M");

















/* tslint:disable:no-empty */
let nextUniqueId = 0;
/** Change event object that is emitted when the select value has changed. */
class McSelectChange {
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
class McSelectSearch {
    constructor(formField) {
        this.searchChangesSubscription = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"]();
        this.isSearchChanged = false;
        formField.canCleanerClearByEsc = false;
    }
    focus() {
        this.input.focus();
    }
    reset() {
        this.input.ngControl.reset();
    }
    ngAfterContentInit() {
        if (!this.input) {
            throw Error('McSelectSearch does not work without mcInput');
        }
        if (!this.input.ngControl) {
            throw Error('McSelectSearch does not work without ngControl');
        }
        Promise.resolve().then(() => {
            this.searchChangesSubscription = this.input.ngControl.valueChanges.subscribe(() => {
                this.isSearchChanged = true;
            });
        });
    }
    ngOnDestroy() {
        this.searchChangesSubscription.unsubscribe();
    }
    handleKeydown(event) {
        // tslint:disable-next-line:deprecation
        if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ESCAPE"]) {
            if (this.input.value) {
                this.reset();
                event.stopPropagation();
            }
        }
        // tslint:disable-next-line:deprecation
        if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]].includes(event.keyCode)) {
            event.stopPropagation();
        }
    }
}
McSelectSearch.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[mcSelectSearch]',
                exportAs: 'mcSelectSearch',
                host: {
                    '(keydown)': 'handleKeydown($event)'
                }
            },] }
];
/** @nocollapse */
McSelectSearch.ctorParameters = () => [
    { type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormField"] }
];
McSelectSearch.propDecorators = {
    input: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [_ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_13__["McInput"], { static: false },] }]
};
class McSelectSearchEmptyResult {
}
McSelectSearchEmptyResult.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[mc-select-search-empty-result]',
                exportAs: 'mcSelectSearchEmptyResult'
            },] }
];
class McSelectTrigger {
}
McSelectTrigger.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{ selector: 'mc-select-trigger' },] }
];
class McSelectBase {
    constructor(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        this.elementRef = elementRef;
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
    }
}
// tslint:disable-next-line:naming-convention
const McSelectMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinErrorState"])(McSelectBase)));
class McSelect extends McSelectMixinBase {
    constructor(_changeDetectorRef, _ngZone, _renderer, defaultErrorStateMatcher, elementRef, rawValidators, _dir, parentForm, parentFormGroup, _parentFormField, ngControl, ngModel, formControlName, _scrollStrategyFactory, mcValidation) {
        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this.rawValidators = rawValidators;
        this._dir = _dir;
        this._parentFormField = _parentFormField;
        this.ngModel = ngModel;
        this.formControlName = formControlName;
        this._scrollStrategyFactory = _scrollStrategyFactory;
        this.mcValidation = mcValidation;
        /** A name for this control that can be used by `mc-form-field`. */
        this.controlType = 'select';
        this.hiddenItems = 0;
        /** The cached font-size of the trigger element. */
        this.triggerFontSize = 0;
        this.previousSelectionModelSelected = [];
        /** The value of the select panel's transform-origin property. */
        this.transformOrigin = 'top';
        /** Emits when the panel element is finished transforming in. */
        this.panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
        /** Strategy that will be used to handle scrolling while the select panel is open. */
        this.scrollStrategy = this._scrollStrategyFactory();
        /**
         * The y-offset of the overlay panel in relation to the trigger's top start corner.
         * This must be adjusted to align the selected option text over the trigger text.
         * when the panel opens. Will change based on the y-position of the selected option.
         */
        this.offsetY = 0;
        /**
         * This position config ensures that the top "start" corner of the overlay
         * is aligned with with the top "start" of the origin by default (overlapping
         * the trigger completely). If the panel cannot fit below the trigger, it
         * will fall back to a position above the trigger.
         */
        this.positions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            }
        ];
        this.hiddenItemsText = '...ещё';
        this.backdropClass = 'cdk-overlay-transparent-backdrop';
        /** Combined stream of all of the child options' change events. */
        this.optionSelectionChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["defer"])(() => {
            if (this.options) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(...this.options.map((option) => option.onSelectionChange), ...this.selectionModel.selected.map((option) => option.onSelectionChange));
            }
            return this._ngZone.onStable
                .asObservable()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["switchMap"])(() => this.optionSelectionChanges));
        });
        /** Event emitted when the select panel has been toggled. */
        this.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Event emitted when the select has been opened. */
        this.openedStream = this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])((o) => o), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(() => { }));
        /** Event emitted when the select has been closed. */
        this.closedStream = this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])((o) => !o), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(() => { }));
        /** Event emitted when the selected value has been changed by the user. */
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /**
         * Event that emits whenever the raw value of the select changes. This is here primarily
         * to facilitate the two-way binding for the `value` input.
         * @docs-private
         */
        this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this._hasBackdrop = false;
        this._required = false;
        this._multiple = false;
        this._focused = false;
        this._panelOpen = false;
        this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
        /** The scroll position of the overlay panel, calculated to center the selected option. */
        this.scrollTop = 0;
        /** Unique id for this input. */
        this.uid = `mc-select-${nextUniqueId++}`;
        /** Emits whenever the component is destroyed. */
        this.destroy = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
        /** `View -> model callback called when value changes` */
        this.onChange = () => { };
        /** `View -> model callback called when select has been touched` */
        this.onTouched = () => { };
        /** Comparison function to specify which option is displayed. Defaults to object equality. */
        this._compareWith = (o1, o2) => o1 === o2;
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        // Force setter to be called in case id was not specified.
        this.id = this.id;
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(value) {
        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
        this.stateChanges.next();
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        if (this.selectionModel) {
            throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectDynamicMultipleError"])();
        }
        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
    }
    /**
     * Function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    get compareWith() {
        return this._compareWith;
    }
    set compareWith(fn) {
        /* tslint:disable-next-line:strict-type-predicates */
        if (typeof fn !== 'function') {
            throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectNonFunctionValueError"])();
        }
        this._compareWith = fn;
        if (this.selectionModel) {
            // A different comparator means the selection could change.
            this.initializeSelection();
        }
    }
    /** Value of the select control. */
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue !== this._value) {
            this.writeValue(newValue);
            this._value = newValue;
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this.uid;
        this.stateChanges.next();
    }
    /** Whether the select is focused. */
    get focused() {
        return this._focused || this._panelOpen;
    }
    set focused(value) {
        this._focused = value;
    }
    get panelOpen() {
        return this._panelOpen;
    }
    get isEmptySearchResult() {
        return this.search && this.options.length === 0 && !!this.search.input.value;
    }
    get canShowCleaner() {
        return this.cleaner && this.selectionModel.hasValue();
    }
    get selected() {
        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];
    }
    get triggerValue() {
        if (this.empty) {
            return '';
        }
        return this.selectionModel.selected[0].viewValue;
    }
    get triggerValues() {
        if (this.empty) {
            return [];
        }
        const selectedOptions = this.selectionModel.selected;
        if (this.isRtl()) {
            selectedOptions.reverse();
        }
        return selectedOptions;
    }
    get empty() {
        return !this.selectionModel || this.selectionModel.isEmpty();
    }
    ngOnInit() {
        this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__["SelectionModel"](this.multiple);
        this.stateChanges.next();
        // We need `distinctUntilChanged` here, because some browsers will
        // fire the animation end event twice for the same animation. See:
        // https://github.com/angular/angular/issues/24084
        this.panelDoneAnimatingStream
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            if (this.panelOpen) {
                this.scrollTop = 0;
                if (this.search) {
                    this.search.focus();
                }
                this.openedChange.emit(true);
            }
            else {
                this.openedChange.emit(false);
                this._changeDetectorRef.markForCheck();
            }
        });
    }
    ngAfterContentInit() {
        if (this.mcValidation.useValidation) {
            Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["setMosaicValidation"])(this);
        }
        this.initKeyManager();
        this.selectionModel.changed
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe((event) => {
            event.added.forEach((option) => option.select());
            event.removed.forEach((option) => option.deselect());
        });
        this.options.changes
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            this.resetOptions();
            this.initializeSelection();
        });
    }
    ngAfterViewInit() {
        this.tags.changes
            .subscribe(() => {
            setTimeout(() => this.calculateHiddenItems(), 0);
        });
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    ngOnChanges(changes) {
        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
        // the parent form field know to run change detection when the disabled state changes.
        if (changes.disabled) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
        this.stateChanges.complete();
        this.closeSubscription.unsubscribe();
    }
    hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) {
        return `${hiddenItemsText} ${hiddenItems}`;
    }
    clearValue($event) {
        $event.stopPropagation();
        this.selectionModel.clear();
        this.keyManager.setActiveItem(-1);
        this.propagateChanges();
    }
    resetSearch() {
        if (!this.search) {
            return;
        }
        this.search.reset();
        /*
        todo the incorrect behaviour of keyManager is possible here
        to avoid first item selection (to provide correct options flipping on closed select)
        we should process options update like it is the first options appearance
        */
        this.search.isSearchChanged = false;
    }
    /** Toggles the overlay panel open or closed. */
    toggle() {
        if (this.panelOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /** Opens the overlay panel. */
    open() {
        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
            return;
        }
        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();
        // Note: The computed font-size will be a string pixel value (e.g. "16px").
        // `parseInt` ignores the trailing 'px' and converts this to a number.
        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);
        this._panelOpen = true;
        this.keyManager.withHorizontalOrientation(null);
        this.highlightCorrectOption();
        this._changeDetectorRef.markForCheck();
        // Set the font size on the panel element once it exists.
        this._ngZone.onStable.asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1))
            .subscribe(() => {
            this.scrollActiveOptionIntoView();
            if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {
                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;
            }
        });
    }
    /** Closes the overlay panel and focuses the host element. */
    close() {
        if (!this._panelOpen) {
            return;
        }
        // the order of calls is important
        this.resetSearch();
        this._panelOpen = false;
        this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');
        this._changeDetectorRef.markForCheck();
        this.onTouched();
    }
    /**
     * Sets the select's value. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param value New value to be written to the model.
     */
    writeValue(value) {
        if (this.options) {
            this.setSelectionByValue(value);
        }
    }
    /**
     * Saves a callback function to be invoked when the select's value
     * changes from user input. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the value changes.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Saves a callback function to be invoked when the select is blurred
     * by the user. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the component has been touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Disables the select. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectorRef.markForCheck();
        this.stateChanges.next();
    }
    isRtl() {
        return this._dir ? this._dir.value === 'rtl' : false;
    }
    handleKeydown(event) {
        if (this.disabled) {
            return;
        }
        if (this.panelOpen) {
            this.handleOpenKeydown(event);
        }
        else {
            this.handleClosedKeydown(event);
        }
    }
    onFocus() {
        if (!this.disabled) {
            this._focused = true;
            this.stateChanges.next();
        }
    }
    /**
     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
     * "blur" to the panel when it opens, causing a false positive.
     */
    onBlur() {
        this._focused = false;
        if (!this.disabled && !this.panelOpen) {
            this.onTouched();
            this._changeDetectorRef.markForCheck();
            this.stateChanges.next();
        }
    }
    /**
     * Callback that is invoked when the overlay panel has been attached.
     */
    onAttached() {
        this.overlayDir.positionChange
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1))
            .subscribe(() => {
            this._changeDetectorRef.detectChanges();
            this.setOverlayPosition();
            this.optionsContainer.nativeElement.scrollTop = this.scrollTop;
            this.updateScrollSize();
        });
        this.closeSubscription = this.closingActions()
            .subscribe(() => this.close());
    }
    /** Returns the theme to be used on the panel. */
    getPanelTheme() {
        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';
    }
    /** Focuses the select element. */
    focus() {
        this.elementRef.nativeElement.focus();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    onContainerClick() {
        this.focus();
        this.open();
    }
    /** Invoked when an option is clicked. */
    onRemoveMatcherItem(option, $event) {
        $event.stopPropagation();
        option.deselect();
    }
    calculateHiddenItems() {
        if (this.customTrigger || this.empty || !this.multiple) {
            return;
        }
        let visibleItems = 0;
        const totalItemsWidth = this.getTotalItemsWidthInMatcher();
        let totalVisibleItemsWidth = 0;
        this.tags.forEach((tag) => {
            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {
                totalVisibleItemsWidth += this.getItemWidth(tag.nativeElement);
                visibleItems++;
            }
        });
        this.hiddenItems = this.selected.length - visibleItems;
        if (this.hiddenItems) {
            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');
            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');
            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;
            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;
            const itemsCounterWidth = 86;
            const matcherListWidth = matcherList.getBoundingClientRect().width;
            const matcherWidth = matcherListWidth + itemsCounterWidth;
            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) {
                this.hiddenItems = 0;
            }
            if (totalVisibleItemsWidth === matcherListWidth ||
                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth) {
                this._changeDetectorRef.markForCheck();
                return;
            }
            else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {
                this.hiddenItems++;
            }
        }
        this._changeDetectorRef.markForCheck();
    }
    getItemHeight() {
        return this.options.first ? this.options.first.getHeight() : 0;
    }
    closingActions() {
        const backdrop = this.overlayDir.overlayRef.backdropClick();
        const outsidePointerEvents = this.overlayDir.overlayRef.outsidePointerEvents();
        const detachments = this.overlayDir.overlayRef.detachments();
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(backdrop, outsidePointerEvents, detachments);
    }
    getHeightOfOptionsContainer() {
        return this.optionsContainer.nativeElement.getClientRects()[0].height;
    }
    updateScrollSize() {
        if (!this.options.first) {
            return;
        }
        this.keyManager.withScrollSize(Math.floor(this.getHeightOfOptionsContainer() / this.options.first.getHeight()));
    }
    getTotalItemsWidthInMatcher() {
        const triggerClone = this.trigger.nativeElement.cloneNode(true);
        triggerClone.querySelector('.mc-select__match-hidden-text').remove();
        this._renderer.setStyle(triggerClone, 'position', 'absolute');
        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');
        this._renderer.setStyle(triggerClone, 'top', '-100%');
        this._renderer.setStyle(triggerClone, 'left', '0');
        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);
        let totalItemsWidth = 0;
        triggerClone.querySelectorAll('mc-tag').forEach((item) => {
            totalItemsWidth += this.getItemWidth(item);
        });
        triggerClone.remove();
        return totalItemsWidth;
    }
    getItemWidth(element) {
        const computedStyle = window.getComputedStyle(element);
        const width = parseInt(computedStyle.width);
        const marginLeft = parseInt(computedStyle.marginLeft);
        const marginRight = parseInt(computedStyle.marginRight);
        return width + marginLeft + marginRight;
    }
    /** Handles keyboard events while the select is closed. */
    handleClosedKeydown(event) {
        /* tslint:disable-next-line */
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"] ||
            keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["LEFT_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["RIGHT_ARROW"];
        const isOpenKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"];
        // Open the select on ALT + arrow key to match the native <select>
        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.open();
        }
        else if (!this.multiple) {
            this.keyManager.onKeydown(event);
        }
    }
    /** Handles keyboard events when the selected is open. */
    handleOpenKeydown(event) {
        /* tslint:disable-next-line */
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"];
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"]) {
            event.preventDefault();
            this.keyManager.setFirstItemActive();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]) {
            event.preventDefault();
            this.keyManager.setLastItemActive();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_UP"]) {
            event.preventDefault();
            this.keyManager.setPreviousPageItemActive();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_DOWN"]) {
            event.preventDefault();
            this.keyManager.setNextPageItemActive();
        }
        else if ((keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]) && this.keyManager.activeItem) {
            event.preventDefault();
            this.keyManager.activeItem.selectViaInteraction();
        }
        else if (this._multiple && keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["A"] && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some((option) => !option.selected);
            this.options.forEach((option) => {
                if (hasDeselectedOptions && !option.disabled) {
                    option.select();
                }
                else {
                    option.deselect();
                }
            });
        }
        else {
            const previouslyFocusedIndex = this.keyManager.activeItemIndex;
            this.keyManager.onKeydown(event);
            if (this._multiple && isArrowKey && event.shiftKey && this.keyManager.activeItem &&
                this.keyManager.activeItemIndex !== previouslyFocusedIndex) {
                this.keyManager.activeItem.selectViaInteraction();
            }
            if (this.search) {
                this.search.focus();
            }
        }
    }
    initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);
        });
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    setSelectionByValue(value) {
        this.previousSelectionModelSelected = this.selectionModel.selected;
        if (this.multiple && value) {
            if (!Array.isArray(value)) {
                throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectNonArrayValueError"])();
            }
            this.selectionModel.clear();
            value.forEach((currentValue) => this.selectValue(currentValue));
            this.sortValues();
        }
        else {
            this.selectionModel.clear();
            const correspondingOption = this.selectValue(value);
            // Shift focus to the active item. Note that we shouldn't do this in multiple
            // mode, because we don't know what option the user interacted with last.
            if (correspondingOption) {
                this.keyManager.setActiveItem(correspondingOption);
            }
        }
        this._changeDetectorRef.markForCheck();
    }
    getCorrespondOption(value) {
        return [
            ...this.options.toArray(),
            ...this.previousSelectionModelSelected
        ].find((option) => {
            try {
                // Treat null as a special reset value.
                return option.value != null && this.compareWith(option.value, value);
            }
            catch (error) {
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["isDevMode"])()) {
                    // Notify developers of errors in their comparator.
                    console.warn(error);
                }
                return false;
            }
        });
    }
    /**
     * Finds and selects and option based on its value.
     * @returns Option that has the corresponding value.
     */
    selectValue(value) {
        const correspondingOption = this.getCorrespondOption(value);
        if (correspondingOption) {
            this.selectionModel.select(correspondingOption);
        }
        return correspondingOption;
    }
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    initKeyManager() {
        const typeAheadDebounce = 200;
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__["ActiveDescendantKeyManager"](this.options)
            .withTypeAhead(typeAheadDebounce, this.search ? -1 : 0)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');
        this.keyManager.tabOut
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            // Restore focus to the trigger before closing. Ensures that the focus
            // position won't be lost if the user got focus into the overlay.
            this.focus();
            this.close();
        });
        this.keyManager.change
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            if (this._panelOpen && this.panel) {
                this.scrollActiveOptionIntoView();
            }
            else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {
                this.keyManager.activeItem.selectViaInteraction();
            }
        });
    }
    /** Drops current option subscriptions and IDs and resets from scratch. */
    resetOptions() {
        const changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(this.options.changes, this.destroy);
        this.optionSelectionChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(changedOrDestroyed))
            .subscribe((event) => {
            this.onSelect(event.source, event.isUserInput);
            if (this.search && this.search.isSearchChanged) {
                Promise.resolve().then(() => this.keyManager.updateActiveItem(0));
                this.search.isSearchChanged = false;
            }
            if (event.isUserInput && !this.multiple && this._panelOpen) {
                this.close();
                this.focus();
            }
        });
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(...this.options.map((option) => option.stateChanges))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(changedOrDestroyed))
            .subscribe(() => {
            this._changeDetectorRef.markForCheck();
            this.stateChanges.next();
        });
    }
    /** Invoked when an option is clicked. */
    onSelect(option, isUserInput) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (option.value == null && !this._multiple) {
            option.deselect();
            this.selectionModel.clear();
            this.propagateChanges(option.value);
        }
        else {
            if (option.selected) {
                this.selectionModel.select(option);
            }
            else {
                this.selectionModel.deselect(option);
            }
            if (isUserInput) {
                this.keyManager.setActiveItem(option);
            }
            if (this.multiple) {
                this.sortValues();
                if (isUserInput) {
                    // In case the user selected the option with their mouse, we
                    // want to restore focus back to the trigger, in order to
                    // prevent the select keyboard controls from clashing with
                    // the ones from `mc-option`.
                    // If search is avaliable then we focus search again.
                    if (this.search) {
                        this.search.focus();
                    }
                    else {
                        this.focus();
                    }
                }
            }
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.propagateChanges();
        }
        this.stateChanges.next();
    }
    /** Sorts the selected values in the selected based on their order in the panel. */
    sortValues() {
        if (this.multiple) {
            const options = this.options.toArray();
            this.selectionModel.sort((a, b) => {
                return this.sortComparator ? this.sortComparator(a, b, options) :
                    options.indexOf(a) - options.indexOf(b);
            });
            this.stateChanges.next();
        }
    }
    /** Emits change event to set the model value. */
    propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (this.multiple) {
            valueToEmit = this.selected.map((option) => option.value);
        }
        else {
            valueToEmit = this.selected ? this.selected.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.valueChange.emit(valueToEmit);
        this.onChange(valueToEmit);
        this.selectionChange.emit(new McSelectChange(this, valueToEmit));
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Highlights the selected item. If no option is selected, it will highlight
     * the first item instead.
     */
    highlightCorrectOption() {
        if (this.keyManager) {
            if (this.empty) {
                this.keyManager.setFirstItemActive();
            }
            else {
                this.keyManager.setActiveItem(this.selectionModel.selected[0]);
            }
        }
    }
    /** Scrolls the active option into view. */
    scrollActiveOptionIntoView() {
        if (!this.keyManager.activeItem) {
            return;
        }
        this.keyManager.activeItem.focus();
    }
    /**
     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.
     * This must be adjusted to align the selected option text over the trigger text when
     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset
     * can't be calculated until the panel has been attached, because we need to know the
     * content width in order to constrain the panel within the viewport.
     */
    setOverlayPosition() {
        this.resetOverlay();
        const overlayRect = this.getOverlayRect();
        // Window width without scrollbar
        const windowWidth = this.getOverlayWidth();
        const isRtl = this.isRtl();
        /* tslint:disable-next-line:no-magic-numbers */
        const paddingWidth = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_PADDING_X"] * 2;
        let offsetX;
        let overlayMaxWidth;
        const selected = this.selectionModel.selected[0] || this.options.first;
        offsetX = selected && selected.group ? _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_INDENT_PADDING_X"] : _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_PADDING_X"];
        // Invert the offset in LTR.
        if (!isRtl) {
            offsetX *= -1;
        }
        // Determine if select overflows on either side.
        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));
        const rightOverflow = overlayRect.right + offsetX - windowWidth
            + (isRtl ? 0 : paddingWidth);
        // If the element overflows on either side, reduce the offset to allow it to fit.
        if (leftOverflow > 0 || rightOverflow > 0) {
            [offsetX, overlayMaxWidth] = this.calculateOverlayXPosition(overlayRect, windowWidth, offsetX);
            this.overlayDir.overlayRef.overlayElement.style.maxWidth = `${overlayMaxWidth}px`;
        }
        // Set the offset directly in order to avoid having to go through change detection and
        // potentially triggering "changed after it was checked" errors. Round the value to avoid
        // blurry content in some browsers.
        this.overlayDir.offsetX = Math.round(offsetX);
        this.overlayDir.overlayRef.updatePosition();
    }
    calculateOverlayXPosition(overlayRect, windowWidth, basicOffsetX) {
        let offsetX = basicOffsetX;
        const leftIndent = this.triggerRect.left;
        const rightIndent = windowWidth - this.triggerRect.right;
        // Setting direction of dropdown expansion
        const isRightDirection = leftIndent <= rightIndent;
        let maxDropdownWidth;
        let overlayMaxWidth;
        const triggerWidth = this.triggerRect.width + _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_INDENT_PADDING_X"];
        if (isRightDirection) {
            maxDropdownWidth = rightIndent + triggerWidth - _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_VIEWPORT_PADDING"];
            overlayMaxWidth = overlayRect.width < maxDropdownWidth ? overlayRect.width : maxDropdownWidth;
        }
        else {
            let leftOffset;
            maxDropdownWidth = leftIndent + triggerWidth - _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_VIEWPORT_PADDING"];
            if (overlayRect.width < maxDropdownWidth) {
                overlayMaxWidth = overlayRect.width;
                leftOffset = this.triggerRect.right - overlayMaxWidth;
            }
            else {
                overlayMaxWidth = maxDropdownWidth;
                leftOffset = this.triggerRect.right - (overlayMaxWidth - _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["SELECT_PANEL_INDENT_PADDING_X"]);
            }
            offsetX -= this.triggerRect.left - leftOffset;
        }
        return [offsetX, overlayMaxWidth];
    }
    resetOverlay() {
        this.overlayDir.offsetX = 0;
        this.overlayDir.overlayRef.overlayElement.style.maxWidth = 'unset';
        this.overlayDir.overlayRef.updatePosition();
    }
    getOverlayRect() {
        return this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();
    }
    getOverlayWidth() {
        return this.scrollStrategy._overlayRef.hostElement.clientWidth;
    }
}
McSelect.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-select',
                exportAs: 'mcSelect',
                template: "<div cdk-overlay-origin\n     class=\"mc-select__trigger\"\n     (click)=\"toggle()\"\n     [class.mc-select__trigger_multiple]=\"multiple\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n    <div class=\"mc-select__matcher\" [ngSwitch]=\"empty\">\n        <span class=\"mc-select__placeholder\" *ngSwitchCase=\"true\">{{ placeholder || '\\u00A0' }}</span>\n        <span *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n            <div *ngSwitchDefault [ngSwitch]=\"multiple\" class=\"mc-select__match-container\">\n                <span *ngSwitchCase=\"false\" class=\"mc-select__matcher-text\">{{ triggerValue }}</span>\n                <div *ngSwitchCase=\"true\" class=\"mc-select__match-list\">\n                    <mc-tag *ngFor=\"let option of triggerValues\"\n                            [disabled]=\"option.disabled || disabled\"\n                            [selectable]=\"false\"\n                            [class.mc-error]=\"errorState\">\n                        {{ option.viewValue }}\n                        <i mc-icon=\"mc-close-S_16\"\n                           *ngIf=\"!option.disabled && !disabled\"\n                           (click)=\"onRemoveMatcherItem(option, $event)\">\n                        </i>\n                    </mc-tag>\n                </div>\n                <div class=\"mc-select__match-hidden-text\" [style.display]=\"hiddenItems > 0 ? 'block' : 'none'\">\n                    {{ hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) }}\n                </div>\n            </div>\n            <ng-content select=\"mc-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n        </span>\n    </div>\n\n    <div class=\"mc-select__cleaner\" *ngIf=\"canShowCleaner\" (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <div class=\"mc-select__arrow-wrapper\">\n        <i class=\"mc-select__arrow\" mc-icon=\"mc-angle-down-L_16\"></i>\n    </div>\n</div>\n\n<ng-template\n    cdk-connected-overlay\n    cdkConnectedOverlayLockPosition\n    [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n    [cdkConnectedOverlayBackdropClass]=\"backdropClass\"\n    [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"positions\"\n    [cdkConnectedOverlayMinWidth]=\"triggerRect?.width\"\n    [cdkConnectedOverlayOffsetY]=\"offsetY\"\n    (backdropClick)=\"close()\"\n    (attach)=\"onAttached()\"\n    (detach)=\"close()\">\n    <div\n        #panel\n        class=\"mc-select__panel {{ getPanelTheme() }}\"\n        [ngClass]=\"panelClass\"\n        [style.transformOrigin]=\"transformOrigin\"\n        [style.font-size.px]=\"triggerFontSize\"\n        (keydown)=\"handleKeydown($event)\">\n\n        <div *ngIf=\"search\" class=\"mc-select__search-container\">\n            <ng-content select=\"[mcSelectSearch]\"></ng-content>\n        </div>\n\n        <div #optionsContainer\n             class=\"mc-select__content\"\n             [@fadeInContent]=\"'showing'\"\n             (@fadeInContent.done)=\"panelDoneAnimatingStream.next($event.toState)\">\n\n            <div *ngIf=\"isEmptySearchResult\" class=\"mc-select__no-options-message\">\n                <ng-content select=\"[mc-select-search-empty-result]\"></ng-content>\n            </div>\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n",
                inputs: ['disabled', 'tabIndex'],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                host: {
                    '[attr.id]': 'id',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null',
                    class: 'mc-select',
                    '[class.mc-disabled]': 'disabled',
                    '[class.mc-invalid]': 'errorState',
                    '(keydown)': 'handleKeydown($event)',
                    '(focus)': 'onFocus()',
                    '(blur)': 'onBlur()',
                    '(window:resize)': 'calculateHiddenItems()'
                },
                animations: [
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mcSelectAnimations"].transformPanel,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mcSelectAnimations"].fadeInContent
                ],
                providers: [
                    { provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormFieldControl"], useExisting: McSelect },
                    { provide: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_OPTION_PARENT_COMPONENT"], useExisting: McSelect }
                ],
                styles: [".mc-option{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;position:relative;max-width:100%;height:var(--mc-option-size-height,32px);border:var(--mc-option-size-border-width,2px) solid transparent;cursor:pointer;outline:none;padding-left:var(--mc-option-size-horizontal-padding,16px);padding-right:var(--mc-option-size-horizontal-padding,16px);-webkit-tap-highlight-color:transparent}.mc-option.mc-disabled{cursor:default}.mc-option .mc-pseudo-checkbox{margin-right:8px}.mc-option .mc-option-overlay{position:absolute;top:calc(-1 * var(--mc-option-size-border-width, 2px));left:calc(-1 * var(--mc-option-size-border-width, 2px));right:calc(-1 * var(--mc-option-size-border-width, 2px));bottom:calc(-1 * var(--mc-option-size-border-width, 2px));pointer-events:none;border-radius:inherit}.mc-option-text{display:inline-block;flex-grow:1;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.mc-select{box-sizing:border-box;display:inline-block;width:100%;outline:none}.mc-select .mc-select__trigger{display:flex;box-sizing:border-box;position:relative;height:var(--mc-select-size-height,30px);cursor:pointer;padding-left:calc(var(--mc-select-size-left-padding, 16px) - var(--mc-form-field-size-border-width, 1px));padding-right:calc(var(--mc-select-size-right-padding, 8px) - var(--mc-form-field-size-border-width, 1px))}.mc-select .mc-select__trigger.mc-select__trigger_multiple{padding-left:calc(var(--mc-select-size-left-padding-multiple, 8px) - var(--mc-form-field-size-border-width, 1px))}.mc-select .mc-select__trigger.mc-select__trigger_multiple .mc-tag.mc-disabled .mc-tag__text{margin-right:7px}.mc-select.mc-disabled .mc-select__trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mc-select__no-options-message{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;position:relative;max-width:100%;height:var(--mc-option-size-height,32px);cursor:default;outline:none;padding-left:var(--mc-option-size-horizontal-padding,16px);padding-right:var(--mc-option-size-horizontal-padding,16px)}.mc-select__matcher{display:flex;align-items:center;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mc-select__matcher>span{width:100%}.mc-select__match-list{display:flex;flex-wrap:wrap;overflow:hidden;max-height:calc(var(--mc-select-size-height, 30px) - var(--mc-select-panel-size-border-width, 1px))}.mc-select__match-list .mc-tag{margin-right:4px}.mc-select__match-container{display:flex;flex-direction:row;justify-content:space-between;width:100%}.mc-select__match-container .mc-select__match-hidden-text{flex:0 0 70px;align-self:center;padding:0 8px;text-align:right}.mc-select__arrow-wrapper{align-self:center}.mc-form-field-appearance-fill .mc-select__arrow-wrapper,.mc-form-field-appearance-standard .mc-select__arrow-wrapper{transform:translateY(-50%)}.mc-form-field-appearance-outline .mc-select__arrow-wrapper{transform:translateY(-25%)}.mc-select__panel{min-width:100%;max-width:var(--mc-select-panel-size-max-width,640px);overflow:hidden;border-width:var(--mc-select-panel-size-border-width,1px);border-style:solid;border-bottom-left-radius:var(--mc-select-panel-size-border-radius,3px);border-bottom-right-radius:var(--mc-select-panel-size-border-radius,3px)}.mc-select__panel .mc-optgroup-label,.mc-select__panel .mc-option{font-size:inherit;line-height:var(--mc-option-size-height,32px);height:var(--mc-option-size-height,32px)}.mc-select__content{max-height:var(--mc-select-panel-size-max-height,232px);padding:var(--mc-select-panel-size-vertical-padding,4px) 0;overflow:auto}.mc-select__content .cdk-virtual-scroll-viewport{min-height:var(--mc-select-panel-size-max-height,232px)-8px;max-height:var(--mc-select-panel-size-max-height,232px)-8px}.mc-form-field-type-select:not(.mc-disabled) .mc-form-field-flex{cursor:pointer}.mc-select__search-container{border-bottom-width:1px;border-bottom-style:solid}"]
            },] }
];
/** @nocollapse */
McSelect.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_forms__WEBPACK_IMPORTED_MODULE_10__["NG_VALIDATORS"],] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormField"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["NgModel"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_10__["FormControlName"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_SELECT_SCROLL_STRATEGY"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_VALIDATION"],] }] }
];
McSelect.propDecorators = {
    trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['trigger', { static: false },] }],
    panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['panel', { static: false },] }],
    optionsContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['optionsContainer', { static: false },] }],
    overlayDir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"], { static: false },] }],
    tags: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"], args: [_ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTag"],] }],
    customTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [McSelectTrigger, { static: false },] }],
    cleaner: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: ['mcSelectCleaner', { static: true },] }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOption"], { descendants: true },] }],
    optionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptgroup"],] }],
    search: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [McSelectSearch, { static: false },] }],
    hiddenItemsText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    sortComparator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"], args: ['opened',] }],
    closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"], args: ['closed',] }],
    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    hiddenItemsTextFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McSelectModule {
}
McSelectModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"],
                    _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTagsModule"]
                ],
                exports: [
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormFieldModule"],
                    McSelect,
                    McSelectSearch,
                    McSelectSearchEmptyResult,
                    McSelectTrigger,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"],
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]
                ],
                declarations: [
                    McSelect,
                    McSelectSearch,
                    McSelectSearchEmptyResult,
                    McSelectTrigger
                ],
                providers: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_SELECT_SCROLL_STRATEGY_PROVIDER"]]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "2w20":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-card.js ***!
  \********************************************************/
/*! exports provided: McCard, McCardBase, McCardBaseMixin, McCardModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCard", function() { return McCard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCardBase", function() { return McCardBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCardBaseMixin", function() { return McCardBaseMixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCardModule", function() { return McCardModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");







class McCardBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McCardBaseMixin = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_5__["mixinColor"])(McCardBase);
class McCard extends McCardBaseMixin {
    constructor(elementRef, _focusMonitor) {
        super(elementRef);
        this._focusMonitor = _focusMonitor;
        this.readonly = false;
        this.selected = false;
        this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this._tabIndex = 0;
        this._focusMonitor.monitor(this._elementRef.nativeElement, false);
    }
    get tabIndex() {
        return this.readonly ? null : this._tabIndex;
    }
    set tabIndex(value) {
        this._tabIndex = value;
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
    }
    focus() {
        this.hostElement.focus();
    }
    onClick($event) {
        if (!this.readonly) {
            $event.stopPropagation();
            this.selectedChange.emit(!this.selected);
        }
    }
    onKeyDown($event) {
        // tslint:disable-next-line:deprecation
        switch ($event.keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["SPACE"]:
                if (!this.readonly) {
                    $event.preventDefault();
                    this.selectedChange.emit(!this.selected);
                }
                break;
            default:
        }
    }
    get hostElement() {
        return this._elementRef.nativeElement;
    }
}
McCard.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-card',
                template: "<ng-content></ng-content>\n<div class=\"mc-card__overlay\"></div>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                inputs: ['color'],
                host: {
                    class: 'mc-card',
                    '[class.mc-card_readonly]': 'readonly',
                    '[class.mc-selected]': 'selected',
                    '[attr.tabindex]': 'tabIndex',
                    '(keydown)': 'onKeyDown($event)',
                    '(click)': 'onClick($event)'
                },
                styles: [".mc-card{position:relative;box-sizing:border-box;display:flex;flex-direction:column;cursor:pointer;border-left:var(--mc-card-size-vertical-line,4px) solid transparent}.mc-card:focus{outline:none}.mc-card .mc-card__overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;background:transparent}.mc-card.mc-card_readonly{cursor:auto}"]
            },] }
];
/** @nocollapse */
McCard.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] }
];
McCard.propDecorators = {
    readonly: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};

class McCardModule {
}
McCardModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]
                ],
                exports: [McCard],
                declarations: [McCard]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "3Xtq":
/*!********************************************************************!*\
  !*** ./packages/docs/src/app/components/anchors/anchors.module.ts ***!
  \********************************************************************/
/*! exports provided: AnchorsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorsModule", function() { return AnchorsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _anchors_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./anchors.component */ "Cb09");





let AnchorsModule = class AnchorsModule {
};
AnchorsModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]],
        exports: [_anchors_component__WEBPACK_IMPORTED_MODULE_4__["AnchorsComponent"]],
        declarations: [_anchors_component__WEBPACK_IMPORTED_MODULE_4__["AnchorsComponent"]]
    })
], AnchorsModule);



/***/ }),

/***/ "4KQ8":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-core.js ***!
  \********************************************************/
/*! exports provided: AnimationCurves, BOTTOM_LEFT_POSITION_PRIORITY, BOTTOM_POSITION_PRIORITY, BOTTOM_RIGHT_POSITION_PRIORITY, DEFAULT_4_POSITIONS, DEFAULT_4_POSITIONS_TO_CSS_MAP, DEFAULT_MC_LOCALE_ID, DateFormatter, EXTENDED_OVERLAY_POSITIONS, ErrorStateMatcher, LEFT_BOTTOM_POSITION_PRIORITY, LEFT_POSITION_PRIORITY, LEFT_TOP_POSITION_PRIORITY, MC_LABEL_GLOBAL_OPTIONS, MC_LOCALE_ID, MC_OPTION_PARENT_COMPONENT, MC_SANITY_CHECKS, MC_SELECT_SCROLL_STRATEGY, MC_SELECT_SCROLL_STRATEGY_PROVIDER, MC_VALIDATION, McCommonModule, McDecimalPipe, McFormattersModule, McHighlightModule, McHighlightPipe, McLine, McLineModule, McLineSetter, McMeasureScrollbarService, McOptgroup, McOptgroupBase, McOptgroupMixinBase, McOption, McOptionModule, McOptionSelectionChange, McPseudoCheckbox, McPseudoCheckboxModule, MultipleMode, NUMBER_FORMAT_REGEXP, POSITION_MAP, POSITION_PRIORITY_STRATEGY, POSITION_TO_CSS_MAP, RIGHT_BOTTOM_POSITION_PRIORITY, RIGHT_POSITION_PRIORITY, RIGHT_TOP_POSITION_PRIORITY, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, ShowOnDirtyErrorStateMatcher, TOP_LEFT_POSITION_PRIORITY, TOP_POSITION_PRIORITY, TOP_RIGHT_POSITION_PRIORITY, ThemePalette, countGroupLabelsBeforeOption, fadeAnimation, getMcSelectDynamicMultipleError, getMcSelectNonArrayValueError, getMcSelectNonFunctionValueError, getOptionScrollPosition, isBoolean, mcSelectAnimations, mcSelectScrollStrategyProviderFactory, mixinColor, mixinDisabled, mixinErrorState, mixinTabIndex, selectEvents, setMosaicValidation, setMosaicValidationForFormControl, setMosaicValidationForModelControl, toBoolean, validationTooltipHideDelay, validationTooltipShowDelay, ɵa */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationCurves", function() { return AnimationCurves; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BOTTOM_LEFT_POSITION_PRIORITY", function() { return BOTTOM_LEFT_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BOTTOM_POSITION_PRIORITY", function() { return BOTTOM_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BOTTOM_RIGHT_POSITION_PRIORITY", function() { return BOTTOM_RIGHT_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_4_POSITIONS", function() { return DEFAULT_4_POSITIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_4_POSITIONS_TO_CSS_MAP", function() { return DEFAULT_4_POSITIONS_TO_CSS_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MC_LOCALE_ID", function() { return DEFAULT_MC_LOCALE_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateFormatter", function() { return DateFormatter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTENDED_OVERLAY_POSITIONS", function() { return EXTENDED_OVERLAY_POSITIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function() { return ErrorStateMatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_BOTTOM_POSITION_PRIORITY", function() { return LEFT_BOTTOM_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_POSITION_PRIORITY", function() { return LEFT_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_TOP_POSITION_PRIORITY", function() { return LEFT_TOP_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_LABEL_GLOBAL_OPTIONS", function() { return MC_LABEL_GLOBAL_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_LOCALE_ID", function() { return MC_LOCALE_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_OPTION_PARENT_COMPONENT", function() { return MC_OPTION_PARENT_COMPONENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SANITY_CHECKS", function() { return MC_SANITY_CHECKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SELECT_SCROLL_STRATEGY", function() { return MC_SELECT_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SELECT_SCROLL_STRATEGY_PROVIDER", function() { return MC_SELECT_SCROLL_STRATEGY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_VALIDATION", function() { return MC_VALIDATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCommonModule", function() { return McCommonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDecimalPipe", function() { return McDecimalPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormattersModule", function() { return McFormattersModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McHighlightModule", function() { return McHighlightModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McHighlightPipe", function() { return McHighlightPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLine", function() { return McLine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLineModule", function() { return McLineModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLineSetter", function() { return McLineSetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McMeasureScrollbarService", function() { return McMeasureScrollbarService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McOptgroup", function() { return McOptgroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McOptgroupBase", function() { return McOptgroupBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McOptgroupMixinBase", function() { return McOptgroupMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McOption", function() { return McOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McOptionModule", function() { return McOptionModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McOptionSelectionChange", function() { return McOptionSelectionChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McPseudoCheckbox", function() { return McPseudoCheckbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McPseudoCheckboxModule", function() { return McPseudoCheckboxModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultipleMode", function() { return MultipleMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMBER_FORMAT_REGEXP", function() { return NUMBER_FORMAT_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITION_MAP", function() { return POSITION_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITION_PRIORITY_STRATEGY", function() { return POSITION_PRIORITY_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITION_TO_CSS_MAP", function() { return POSITION_TO_CSS_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_BOTTOM_POSITION_PRIORITY", function() { return RIGHT_BOTTOM_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_POSITION_PRIORITY", function() { return RIGHT_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_TOP_POSITION_PRIORITY", function() { return RIGHT_TOP_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_INDENT_PADDING_X", function() { return SELECT_PANEL_INDENT_PADDING_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function() { return SELECT_PANEL_MAX_HEIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_PADDING_X", function() { return SELECT_PANEL_PADDING_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_VIEWPORT_PADDING", function() { return SELECT_PANEL_VIEWPORT_PADDING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShowOnDirtyErrorStateMatcher", function() { return ShowOnDirtyErrorStateMatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_LEFT_POSITION_PRIORITY", function() { return TOP_LEFT_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_POSITION_PRIORITY", function() { return TOP_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_RIGHT_POSITION_PRIORITY", function() { return TOP_RIGHT_POSITION_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemePalette", function() { return ThemePalette; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countGroupLabelsBeforeOption", function() { return countGroupLabelsBeforeOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fadeAnimation", function() { return fadeAnimation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcSelectDynamicMultipleError", function() { return getMcSelectDynamicMultipleError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcSelectNonArrayValueError", function() { return getMcSelectNonArrayValueError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcSelectNonFunctionValueError", function() { return getMcSelectNonFunctionValueError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOptionScrollPosition", function() { return getOptionScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoolean", function() { return isBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcSelectAnimations", function() { return mcSelectAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcSelectScrollStrategyProviderFactory", function() { return mcSelectScrollStrategyProviderFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinColor", function() { return mixinColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinDisabled", function() { return mixinDisabled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinErrorState", function() { return mixinErrorState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinTabIndex", function() { return mixinTabIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectEvents", function() { return selectEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMosaicValidation", function() { return setMosaicValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMosaicValidationForFormControl", function() { return setMosaicValidationForFormControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMosaicValidationForModelControl", function() { return setMosaicValidationForModelControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toBoolean", function() { return toBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validationTooltipHideDelay", function() { return validationTooltipHideDelay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validationTooltipShowDelay", function() { return validationTooltipShowDelay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return mcSanityChecksFactory; });
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/cdk/datetime */ "5vLs");
/* harmony import */ var messageformat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! messageformat */ "qkWt");
/* harmony import */ var messageformat__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(messageformat__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");












function isBoolean(val) { return typeof val === 'boolean'; }
function toBoolean(value) {
    return value != null && `${value}` !== 'false';
}

// Injection token that configures whether the Mosaic sanity checks are enabled.
const MC_SANITY_CHECKS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-sanity-checks', {
    providedIn: 'root',
    factory: mcSanityChecksFactory
});
function mcSanityChecksFactory() {
    return true;
}
/**
 * Module that captures anything that should be loaded and/or run for *all* Mosaic
 * components. This includes Bidi, etc.
 *
 * This module should be imported to each top-level component module (e.g., McTabsModule).
 */
class McCommonModule {
    constructor(_sanityChecksEnabled) {
        this._sanityChecksEnabled = _sanityChecksEnabled;
        // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).
        this.hasDoneGlobalChecks = false;
        // Reference to the global `document` object.
        // tslint:disable-next-line: orthodox-getter-and-setter
        this._document = typeof document === 'object' && document ? document : null;
        // Reference to the global 'window' object.
        // tslint:disable-next-line: orthodox-getter-and-setter
        this._window = typeof window === 'object' && window ? window : null;
        if (this.areChecksEnabled() && !this.hasDoneGlobalChecks) {
            this.checkDoctypeIsDefined();
            this.checkThemeIsPresent();
            this.hasDoneGlobalChecks = true;
        }
    }
    // Whether any sanity checks are enabled
    areChecksEnabled() {
        return this._sanityChecksEnabled && Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !this.isTestEnv();
    }
    // Whether the code is running in tests.
    isTestEnv() {
        // tslint:disable-next-line
        return this._window && (this._window['__karma__'] || this._window['jasmine']);
    }
    checkDoctypeIsDefined() {
        if (this._document && !this._document.doctype) {
            console.warn('Current document does not have a doctype. This may cause ' +
                'some Mosaic components not to behave as expected.');
        }
    }
    checkThemeIsPresent() {
        if (this._document && typeof getComputedStyle === 'function') {
            const testElement = this._document.createElement('div');
            testElement.classList.add('mc-theme-loaded-marker');
            this._document.body.appendChild(testElement);
            const computedStyle = getComputedStyle(testElement);
            // In some situations, the computed style of the test element can be null. For example in
            // Firefox, the computed style is null if an application is running inside of a hidden iframe.
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
            if (computedStyle && computedStyle.display !== 'none') {
                console.warn('Could not find Mosaic core theme. Most Mosaic ' +
                    'components may not work as expected. For more info refer ' +
                    'to the theming guide: link there');
            }
            this._document.body.removeChild(testElement);
        }
    }
}
McCommonModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["BidiModule"]],
                exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_0__["BidiModule"]]
            },] }
];
/** @nocollapse */
McCommonModule.ctorParameters = () => [
    { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_SANITY_CHECKS,] }] }
];

function mixinDisabled(base) {
    return class extends base {
        constructor(...args) {
            // tslint:disable-next-line
            super(...args);
            this._disabled = false;
        }
        get disabled() {
            return this._disabled;
        }
        set disabled(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
        }
    };
}

var ThemePalette;
(function (ThemePalette) {
    ThemePalette["Primary"] = "primary";
    ThemePalette["Second"] = "second";
    ThemePalette["Error"] = "error";
    ThemePalette["Default"] = "second";
    ThemePalette["Empty"] = "";
})(ThemePalette || (ThemePalette = {}));
/** Mixin to augment a directive with a `color` property. */
function mixinColor(base, defaultColor = ThemePalette.Default) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.color = defaultColor;
        }
        get color() {
            return this._color;
        }
        set color(value) {
            const colorPalette = value || defaultColor;
            if (colorPalette !== this._color) {
                if (this._color) {
                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);
                }
                if (colorPalette) {
                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);
                }
                this._color = colorPalette;
            }
        }
    };
}

// Mixin to augment a directive with a `tabIndex` property.
function mixinTabIndex(base, defaultTabIndex = 0) {
    // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
    // but given we `extend` it from another class, we can assume a constructor being accessible.
    // tslint:disable-next-line:naming-convention
    class Mixin extends base {
        constructor(...args) {
            super(...args);
            // tslint:disable-next-line:orthodox-getter-and-setter
            this._tabIndex = defaultTabIndex;
            this.defaultTabIndex = defaultTabIndex;
        }
        get tabIndex() {
            return this.disabled ? -1 : this._tabIndex;
        }
        set tabIndex(value) {
            // If the specified tabIndex value is null or undefined, fall back to the default value.
            this._tabIndex = value != null ? Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value) : this.defaultTabIndex;
        }
    }
    // Since we don't directly extend from `base` with it's original types, and we instruct
    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
    return Mixin;
}

/**
 * Mixin to augment a directive with updateErrorState method.
 * For component with `errorState` and need to update `errorState`.
 */
function mixinErrorState(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            /** Whether the component is in an error state. */
            this.errorState = false;
            /**
             * Stream that emits whenever the state of the input changes such that the wrapping
             * `MatFormField` needs to run change detection.
             */
            this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
        }
        updateErrorState() {
            const oldState = this.errorState;
            const parent = this.parentFormGroup || this.parentForm;
            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;
            const control = this.ngControl ? this.ngControl.control : null;
            const newState = matcher.isErrorState(control, parent);
            if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
            }
        }
    };
}

/**
 * Shared directive to count lines inside a text area, such as a list item.
 * Line elements can be extracted with a @ContentChildren(McLine) query, then
 * counted by checking the query list's length.
 */
class McLine {
}
McLine.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mc-line], [mcLine]',
                host: { class: 'mc-line' }
            },] }
];
/**
 * Helper that takes a query list of lines and sets the correct class on the host.
 * @docs-private
 */
class McLineSetter {
    constructor(_lines, _element) {
        this._lines = _lines;
        this._element = _element;
        this.setLineClass(this._lines.length);
        this._lines.changes.subscribe(() => {
            this.setLineClass(this._lines.length);
        });
    }
    setLineClass(count) {
        const minLineClassNumber = 2;
        const maxLineClassNumber = 3;
        this.resetClasses();
        if (count === minLineClassNumber || count === maxLineClassNumber) {
            this.setClass(`mc-${count}-line`, true);
        }
        else if (count > maxLineClassNumber) {
            this.setClass(`mc-multi-line`, true);
        }
    }
    resetClasses() {
        this.setClass('mc-2-line', false);
        this.setClass('mc-3-line', false);
        this.setClass('mc-multi-line', false);
    }
    setClass(className, isAdd) {
        if (isAdd) {
            this._element.nativeElement.classList.add(className);
        }
        else {
            this._element.nativeElement.classList.remove(className);
        }
    }
}
class McLineModule {
}
McLineModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [],
                exports: [McLine],
                declarations: [McLine]
            },] }
];

/** Error state matcher that matches when a control is invalid and dirty. */
class ShowOnDirtyErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));
    }
}
ShowOnDirtyErrorStateMatcher.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
];
/** Provider that defines how form controls behave with regards to displaying error messages. */
class ErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control && control.invalid && (control.touched || (form && form.submitted)));
    }
}
/** @nocollapse */ ErrorStateMatcher.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: "root" });
ErrorStateMatcher.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] }
];

const enUS = {
    relativeTemplates: {
        short: {
            SECONDS_AGO: 'Just now',
            MINUTES_AGO: '{MINUTES_PASSED}{NBSP}min ago',
            TODAY: '{TIME}',
            YESTERDAY: 'Yesterday, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{SHORT_DATE}, {TIME}} other{{SHORT_DATE}, {YEAR}}}'
        },
        long: {
            SECONDS_AGO: 'Just now',
            MINUTES_AGO: '{MINUTES_PASSED, plural, =1{#{NBSP}minute} other{#{NBSP}minutes}} ago',
            TODAY: '{TIME}',
            YESTERDAY: 'Yesterday, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{DATE}, {TIME}} other{{DATE}, {YEAR}}}'
        }
    },
    absoluteTemplates: {
        short: {
            DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE}, {YEAR}}}',
            DATETIME: `{
                CURRENT_YEAR,
                select,
                    yes{{SHORT_DATE}, {TIME}}
                    other{{SHORT_DATE}, {YEAR}, {TIME}}
            }{
                SHOW_MILLISECONDS,
                select,
                    yes{{MILLISECONDS}}
                    other{}
            }`
        },
        long: {
            DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE}, {YEAR}}}',
            DATETIME: `{
                CURRENT_YEAR,
                select,
                    yes{{DATE}, {TIME}}
                    other{{DATE}, {YEAR}, {TIME}}
            }{
                SHOW_MILLISECONDS,
                select,
                    yes{{MILLISECONDS}}
                    other{}
            }`
        }
    },
    rangeTemplates: {
        closedRange: {
            short: {
                START_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE}, {YEAR}}}',
                END_DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{DAY}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{SHORT_DATE}}
                                other{{SHORT_DATE}, {YEAR}}
                        }}
                }`,
                DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{START_DATE}{DASH}{END_DATE}}
                        other{{START_DATE}{LONG_DASH}{END_DATE}}
                }`,
                START_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{TIME}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{SHORT_DATE}, {TIME}}
                                other{{SHORT_DATE}, {YEAR}, {TIME}}
                        }}
                }`,
                END_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{
                            CURRENT_YEAR,
                            select,
                                yes{{TIME}, {SHORT_DATE}}
                                other{{TIME}, {SHORT_DATE}, {YEAR}}
                        }}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{SHORT_DATE}, {TIME}}
                                other{{SHORT_DATE}, {YEAR}, {TIME}}
                        }}
                }`,
                DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{START_DATETIME}{DASH}{END_DATETIME}}
                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}
                }`
            },
            middle: {
                START_DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{DAY}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}}
                                other{{DATE}, {YEAR}}
                        }}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE}, {YEAR}}}',
                DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{START_DATE}{DASH}{END_DATE}}
                        other{{START_DATE}{LONG_DASH}{END_DATE}}
                }`,
                START_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{TIME}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE}, {YEAR}, {TIME}}
                        }}
                }`,
                END_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{
                            CURRENT_YEAR,
                            select,
                                yes{{TIME}, {DATE}}
                                other{{TIME}, {DATE}, {YEAR}}
                        }}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE}, {YEAR}, {TIME}}
                        }}
                }`,
                DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{START_DATETIME}{DASH}{END_DATETIME}}
                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}
                }`
            },
            long: {
                START_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE}, {YEAR}}}',
                END_DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{DAY}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}}
                                other{{DATE}, {YEAR}}
                        }}
                }`,
                DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{START_DATE}{DASH}{END_DATE}}
                        other{{START_DATE}{LONG_DASH}{END_DATE}}
                }`,
                START_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, from{NBSP}{TIME}}
                                other{{DATE}, {YEAR}, from{NBSP}{TIME}}
                        }}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE}, {YEAR}, {TIME}}
                        }}
                }`,
                END_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{to{NBSP}{TIME}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE}, {YEAR}, {TIME}}
                        }}
                }`,
                DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{START_DATETIME} {END_DATETIME}}
                        other{From {START_DATETIME} to{NBSP}{END_DATETIME}}
                }`
            }
        },
        openedRange: {
            short: {
                START_DATE: `{
                    CURRENT_YEAR,
                    select,
                        yes{{SHORT_DATE}}
                        other{{SHORT_DATE} {YEAR}}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
                DATE: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{From{NBSP}{START_DATE}}
                        other{Until{NBSP}{END_DATE}}
                }`,
                START_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{SHORT_DATE}, {TIME}}
                        other{{SHORT_DATE} {YEAR}, {TIME}}
                }`,
                END_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{SHORT_DATE}, {TIME}}
                        other{{SHORT_DATE} {YEAR}, {TIME}}
                }`,
                DATETIME: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{From{NBSP}{START_DATETIME}}
                        other{Until{NBSP}{END_DATETIME}}
                }`
            },
            long: {
                START_DATE: `{
                    CURRENT_YEAR,
                    select,
                        yes{{DATE}}
                        other{{DATE} {YEAR}}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
                DATE: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{From{NBSP}{START_DATE}}
                        other{Until{NBSP}{END_DATE}}
                }`,
                START_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{DATE}, {TIME}}
                        other{{DATE} {YEAR}, {TIME}}
                }`,
                END_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{DATE}, {TIME}}
                        other{{DATE} {YEAR}, {TIME}}
                }`,
                DATETIME: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{From{NBSP}{START_DATETIME}}
                        other{Until{NBSP}{END_DATETIME}}
                }`
            }
        }
    }
};

const ruRU = {
    relativeTemplates: {
        short: {
            SECONDS_AGO: 'Только что',
            MINUTES_AGO: '{MINUTES_PASSED}{NBSP}мин назад',
            TODAY: '{TIME}',
            YESTERDAY: 'Вчера, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{SHORT_DATE}, {TIME}} other{{SHORT_DATE} {YEAR}}}'
        },
        long: {
            SECONDS_AGO: 'Только что',
            MINUTES_AGO: '{MINUTES_PASSED, plural, =1{#{NBSP}минуту} =2{#{NBSP}минуты} other{#{NBSP}минут}} назад',
            TODAY: '{TIME}',
            YESTERDAY: 'Вчера, {TIME}',
            BEFORE_YESTERDAY: '{CURRENT_YEAR, select, yes{{DATE}, {TIME}} other{{DATE} {YEAR}}}'
        }
    },
    absoluteTemplates: {
        short: {
            DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
            DATETIME: `{
                CURRENT_YEAR,
                select,
                    yes{{SHORT_DATE}, {TIME}}
                    other{{SHORT_DATE} {YEAR}, {TIME}}
            }{
                SHOW_MILLISECONDS,
                select,
                    yes{{MILLISECONDS}}
                    other{}
            }`
        },
        long: {
            DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
            DATETIME: `{
                CURRENT_YEAR,
                select,
                    yes{{DATE}, {TIME}}
                    other{{DATE} {YEAR}, {TIME}}
            }{
                SHOW_MILLISECONDS,
                select,
                    yes{{MILLISECONDS}}
                    other{}
            }`
        }
    },
    rangeTemplates: {
        closedRange: {
            short: {
                START_DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{DAY}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{SHORT_DATE}}
                                other{{SHORT_DATE} {YEAR}}
                        }}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
                DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{START_DATE}{DASH}{END_DATE}}
                        other{{START_DATE}{LONG_DASH}{END_DATE}}
                }`,
                START_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{TIME}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{SHORT_DATE}, {TIME}}
                                other{{SHORT_DATE} {YEAR}, {TIME}}
                        }}
                }`,
                END_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{
                            CURRENT_YEAR,
                            select,
                                yes{{TIME}, {SHORT_DATE}}
                                other{{TIME}, {SHORT_DATE} {YEAR}}
                        }}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{SHORT_DATE}, {TIME}}
                                other{{SHORT_DATE} {YEAR}, {TIME}}
                        }}
                }`,
                DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{START_DATETIME}{DASH}{END_DATETIME}}
                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}
                }`
            },
            middle: {
                START_DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{DAY}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}}
                                other{{DATE} {YEAR}}
                        }}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
                DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{START_DATE}{DASH}{END_DATE}}
                        other{{START_DATE}{LONG_DASH}{END_DATE}}
                }`,
                START_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{TIME}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE} {YEAR}, {TIME}}
                        }}
                }`,
                END_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{
                            CURRENT_YEAR,
                            select,
                                yes{{TIME}, {DATE}}
                                other{{TIME}, {DATE} {YEAR}}
                        }}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE} {YEAR}, {TIME}}
                        }}
                }`,
                DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{START_DATETIME}{DASH}{END_DATETIME}}
                        other{{START_DATETIME}{LONG_DASH}{END_DATETIME}}
                }`
            },
            long: {
                START_DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{DAY}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}}
                                other{{DATE} {YEAR}}
                        }}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
                DATE: `{
                    SAME_MONTH,
                    select,
                        yes{{START_DATE}{DASH}{END_DATE}}
                        other{{START_DATE}{LONG_DASH}{END_DATE}}
                }`,
                START_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, с{NBSP}{TIME}}
                                other{{DATE} {YEAR}, с{NBSP}{TIME}}
                        }}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE} {YEAR}, {TIME}}
                        }}
                }`,
                END_DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{по{NBSP}{TIME}}
                        other{{
                            CURRENT_YEAR,
                            select,
                                yes{{DATE}, {TIME}}
                                other{{DATE} {YEAR}, {TIME}}
                        }}
                }`,
                DATETIME: `{
                    SAME_DAY,
                    select,
                        yes{{START_DATETIME} {END_DATETIME}}
                        other{С{NBSP}{START_DATETIME} по{NBSP}{END_DATETIME}}
                }`
            }
        },
        openedRange: {
            short: {
                START_DATE: `{
                    CURRENT_YEAR,
                    select,
                        yes{{SHORT_DATE}}
                        other{{SHORT_DATE} {YEAR}}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{SHORT_DATE}} other{{SHORT_DATE} {YEAR}}}',
                DATE: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{С{NBSP}{START_DATE}}
                        other{По{NBSP}{END_DATE}}
                }`,
                START_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{SHORT_DATE}, {TIME}}
                        other{{SHORT_DATE} {YEAR}, {TIME}}
                }`,
                END_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{SHORT_DATE}, {TIME}}
                        other{{SHORT_DATE} {YEAR}, {TIME}}
                }`,
                DATETIME: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{С{NBSP}{START_DATETIME}}
                        other{По{NBSP}{END_DATETIME}}
                }`
            },
            long: {
                START_DATE: `{
                    CURRENT_YEAR,
                    select,
                        yes{{DATE}}
                        other{{DATE} {YEAR}}
                }`,
                END_DATE: '{CURRENT_YEAR, select, yes{{DATE}} other{{DATE} {YEAR}}}',
                DATE: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{С{NBSP}{START_DATE}}
                        other{По{NBSP}{END_DATE}}
                }`,
                START_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{DATE}, {TIME}}
                        other{{DATE} {YEAR}, {TIME}}
                }`,
                END_DATETIME: `{
                    CURRENT_YEAR,
                    select,
                        yes{{DATE}, {TIME}}
                        other{{DATE} {YEAR}, {TIME}}
                }`,
                DATETIME: `{
                    RANGE_TYPE,
                    select,
                        onlyStart{С{NBSP}{START_DATETIME}}
                        other{По{NBSP}{END_DATETIME}}
                }`
            }
        }
    }
};

// tslint:disable:no-magic-numbers
class DateFormatter {
    constructor(adapter, locale) {
        this.adapter = adapter;
        this.invalidDateErrorText = 'Invalid date';
        this.config = locale === 'en' ? enUS : ruRU;
        this.messageFormat = new messageformat__WEBPACK_IMPORTED_MODULE_5__(locale);
    }
    setLocale(locale) {
        this.config = locale === 'en' ? enUS : ruRU;
        this.adapter.setLocale(locale);
    }
    /**
     * @param date - date
     * @param template - template
     * @returns relative date by template
     */
    relativeDate(date, template) {
        if (!this.adapter.isDateInstance(date)) {
            throw new Error(this.invalidDateErrorText);
        }
        const totalSeconds = Math.abs(this.adapter.diffNow(date, 'seconds'));
        const totalMinutes = Math.floor(Math.abs(this.adapter.diffNow(date, 'minutes')));
        const isToday = this.adapter.hasSame(this.adapter.today(), date, 'days');
        const isYesterday = this.adapter.diffNow(date, 'days') <= -1 && this.adapter.diffNow(date, 'days') > -2;
        const templateVariables = Object.assign(Object.assign({}, this.adapter.config.variables), template.variables);
        const variables = this.compileVariables(date, templateVariables);
        let newTemplate;
        if (totalSeconds <= 59) { // seconds ago
            variables.SECONDS_PASSED = totalSeconds;
            newTemplate = template.SECONDS_AGO;
        }
        else if (totalMinutes <= 59) { // minutes ago
            variables.MINUTES_PASSED = totalMinutes;
            newTemplate = template.MINUTES_AGO;
        }
        else if (isToday) {
            newTemplate = template.TODAY;
        }
        else if (isYesterday) {
            newTemplate = template.YESTERDAY;
        }
        else { // before yesterday
            newTemplate = template.BEFORE_YESTERDAY;
        }
        return this.messageFormat.compile(newTemplate)(variables);
    }
    /**
     * @param date - date
     * @returns relative date in short format
     */
    relativeShortDate(date) {
        return this.relativeDate(date, this.config.relativeTemplates.short);
    }
    /**
     * @param date - date
     * @returns relative date in long format
     */
    relativeLongDate(date) {
        return this.relativeDate(date, this.config.relativeTemplates.long);
    }
    /**
     * @param date - date
     * @param params - parameters
     * @param datetime - should time be shown as well
     * @param milliseconds - should time with milliseconds be shown as well
     * @returns absolute date in common format
     */
    absoluteDate(date, params, datetime = false, milliseconds = false) {
        if (!this.adapter.isDateInstance(date)) {
            throw new Error(this.invalidDateErrorText);
        }
        const variables = this.compileVariables(date, Object.assign(Object.assign({}, this.adapter.config.variables), params.variables));
        variables.SHOW_MILLISECONDS = milliseconds ? 'yes' : 'no';
        const template = datetime ? params.DATETIME : params.DATE;
        return this.messageFormat.compile(template)(variables);
    }
    /**
     * @param date - date
     * @returns absolute date in short format
     */
    absoluteShortDate(date) {
        return this.absoluteDate(date, this.config.absoluteTemplates.short);
    }
    /**
     * @param date - date
     * @param options - AbsoluteDateTimeOptions
     * @returns absolute date in short format with time
     */
    absoluteShortDateTime(date, options) {
        return this.absoluteDate(date, this.config.absoluteTemplates.short, true, options === null || options === void 0 ? void 0 : options.milliseconds);
    }
    /**
     * @param date - date
     * @returns absolute date in long format
     */
    absoluteLongDate(date) {
        return this.absoluteDate(date, this.config.absoluteTemplates.long);
    }
    /**
     * @param date - date
     * @param options - AbsoluteDateTimeOptions
     * @returns absolute date in long format with time
     */
    absoluteLongDateTime(date, options) {
        return this.absoluteDate(date, this.config.absoluteTemplates.long, true, options === null || options === void 0 ? void 0 : options.milliseconds);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @param template - template
     * @returns opened date
     */
    openedRangeDate(startDate, endDate, template) {
        if (!this.adapter.isDateInstance(startDate) && !this.adapter.isDateInstance(endDate)) {
            throw new Error(this.invalidDateErrorText);
        }
        const variables = Object.assign(Object.assign({}, this.adapter.config.variables), template.variables);
        let params = {};
        if (startDate) {
            const startDateVariables = this.compileVariables(startDate, variables);
            params = Object.assign(Object.assign({}, variables), { START_DATE: this.messageFormat.compile(template.START_DATE)(startDateVariables), RANGE_TYPE: 'onlyStart' });
        }
        else if (endDate) {
            const endDateVariables = this.compileVariables(endDate, variables);
            params = Object.assign(Object.assign({}, variables), { END_DATE: this.messageFormat.compile(template.END_DATE)(endDateVariables), RANGE_TYPE: 'onlyEnd' });
        }
        return this.messageFormat.compile(template.DATE)(params);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @param template - template
     * @returns opened date
     */
    openedRangeDateTime(startDate, endDate, template) {
        if (!this.adapter.isDateInstance(startDate) && !this.adapter.isDateInstance(endDate)) {
            throw new Error(this.invalidDateErrorText);
        }
        const variables = Object.assign(Object.assign({}, this.adapter.config.variables), template.variables);
        let params = {};
        if (startDate) {
            const startDateVariables = this.compileVariables(startDate, variables);
            params = Object.assign(Object.assign({}, variables), { START_DATETIME: this.messageFormat.compile(template.START_DATETIME)(startDateVariables), RANGE_TYPE: 'onlyStart' });
        }
        else if (endDate) {
            const endDateVariables = this.compileVariables(endDate, variables);
            params = Object.assign(Object.assign({}, variables), { END_DATETIME: this.messageFormat.compile(template.END_DATETIME)(endDateVariables), RANGE_TYPE: 'onlyEnd' });
        }
        return this.messageFormat.compile(template.DATETIME)(params);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @param template - template
     * @returns range date in template format
     */
    rangeDate(startDate, endDate, template) {
        if (!this.adapter.isDateInstance(startDate) || !this.adapter.isDateInstance(endDate)) {
            throw new Error(this.invalidDateErrorText);
        }
        const variables = Object.assign(Object.assign({}, this.adapter.config.variables), template.variables);
        const sameMonth = this.hasSame(startDate, endDate, 'month');
        const startDateVariables = this.compileVariables(startDate, variables);
        startDateVariables.SAME_MONTH = sameMonth;
        const endDateVariables = this.compileVariables(endDate, variables);
        endDateVariables.SAME_MONTH = sameMonth;
        const bothCurrentYear = startDateVariables.CURRENT_YEAR === 'yes' && endDateVariables.CURRENT_YEAR === 'yes';
        startDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
        endDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
        const params = Object.assign(Object.assign({}, variables), { START_DATE: this.messageFormat.compile(template.START_DATE)(startDateVariables), END_DATE: this.messageFormat.compile(template.END_DATE)(endDateVariables), SAME_MONTH: sameMonth });
        return this.messageFormat.compile(template.DATE)(params);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @param template - template
     * @returns range date in template format with time
     */
    rangeDateTime(startDate, endDate, template) {
        if (!this.adapter.isDateInstance(startDate) || !this.adapter.isDateInstance(endDate)) {
            throw new Error(this.invalidDateErrorText);
        }
        const variables = Object.assign(Object.assign({}, this.adapter.config.variables), template.variables);
        const sameMonth = this.hasSame(startDate, endDate, 'month');
        const sameDay = this.hasSame(startDate, endDate, 'day');
        const startDateVariables = this.compileVariables(startDate, variables);
        startDateVariables.SAME_MONTH = sameMonth;
        startDateVariables.SAME_DAY = sameDay;
        const endDateVariables = this.compileVariables(endDate, variables);
        endDateVariables.SAME_MONTH = sameMonth;
        endDateVariables.SAME_DAY = sameDay;
        const bothCurrentYear = startDateVariables.CURRENT_YEAR === 'yes' && endDateVariables.CURRENT_YEAR === 'yes';
        startDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
        endDateVariables.CURRENT_YEAR = bothCurrentYear ? 'yes' : 'no';
        const params = Object.assign(Object.assign({}, variables), { START_DATETIME: this.messageFormat.compile(template.START_DATETIME)(startDateVariables), END_DATETIME: this.messageFormat.compile(template.END_DATETIME)(endDateVariables), SAME_MONTH: sameMonth, SAME_DAY: sameDay });
        return this.messageFormat.compile(template.DATETIME)(params);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @returns range date in short format
     */
    rangeShortDate(startDate, endDate) {
        const rangeTemplates = this.config.rangeTemplates;
        if (startDate && endDate) {
            return this.rangeDate(startDate, endDate, rangeTemplates.closedRange.short);
        }
        return this.openedRangeDate(startDate, endDate || null, rangeTemplates.openedRange.short);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @returns range date in short format with time
     */
    rangeShortDateTime(startDate, endDate) {
        const rangeTemplates = this.config.rangeTemplates;
        if (startDate && endDate) {
            return this.rangeDateTime(startDate, endDate, rangeTemplates.closedRange.short);
        }
        return this.openedRangeDateTime(startDate, endDate || null, rangeTemplates.openedRange.short);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @returns range date in long format
     */
    rangeLongDate(startDate, endDate) {
        const rangeTemplates = this.config.rangeTemplates;
        if (startDate && endDate) {
            return this.rangeDate(startDate, endDate, rangeTemplates.closedRange.long);
        }
        return this.openedRangeDate(startDate, endDate || null, rangeTemplates.openedRange.long);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @returns range date in long format with time
     */
    rangeLongDateTime(startDate, endDate) {
        const rangeTemplates = this.config.rangeTemplates;
        if (startDate && endDate) {
            return this.rangeDateTime(startDate, endDate, rangeTemplates.closedRange.long);
        }
        return this.openedRangeDateTime(startDate, endDate || null, rangeTemplates.openedRange.long);
    }
    /**
     * @param startDate - start date
     * @param endDate - end date
     * @returns range middle date with time
     */
    rangeMiddleDateTime(startDate, endDate) {
        return this.rangeDateTime(startDate, endDate, this.config.rangeTemplates.closedRange.middle);
    }
    compileVariables(date, variables) {
        const compiledVariables = {};
        // tslint:disable-next-line:no-for-in
        for (const key in variables) {
            if (!variables.hasOwnProperty(key)) {
                continue;
            }
            const value = variables[key];
            compiledVariables[key] = this.adapter.format(date, value);
        }
        compiledVariables.CURRENT_YEAR = this.hasSame(date, this.adapter.today(), 'year');
        return compiledVariables;
    }
    hasSame(startDate, endDate, unit) {
        return this.adapter.hasSame(startDate, endDate, unit) ? 'yes' : 'no';
    }
}
DateFormatter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
];
/** @nocollapse */
DateFormatter.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"],] }] }
];

/* tslint:disable:naming-convention */
const MC_LOCALE_ID = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('McLocaleId');
const DEFAULT_MC_LOCALE_ID = 'ru';
function isEmpty(value) {
    return value == null || value === '' || value !== value;
}
function strToNumber(value) {
    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
        return Number(value);
    }
    if (typeof value !== 'number') {
        throw new Error(`${value} is not a number`);
    }
    return value;
}
const NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
const minIntGroupPosition = 1;
const minFractionGroupPosition = 3;
const maxFractionGroupPosition = 5;
class ParsedDigitsInfo {
}
function parseDigitsInfo(digitsInfo) {
    const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
    if (parts === null) {
        throw new Error(`${digitsInfo} is not a valid digit info`);
    }
    const minIntPart = parts[minIntGroupPosition];
    const minFractionPart = parts[minFractionGroupPosition];
    const maxFractionPart = parts[maxFractionGroupPosition];
    const result = new ParsedDigitsInfo();
    if (minIntPart != null) {
        result.minimumIntegerDigits = parseInt(minIntPart);
    }
    if (minFractionPart != null) {
        result.minimumFractionDigits = parseInt(minFractionPart);
    }
    if (maxFractionPart != null) {
        result.maximumFractionDigits = parseInt(maxFractionPart);
    }
    else if (minFractionPart != null && result.minimumFractionDigits > result.maximumFractionDigits) {
        result.maximumFractionDigits = result.minimumFractionDigits;
    }
    return result;
}
class McDecimalPipe {
    constructor(_locale) {
        this._locale = _locale;
    }
    /**
     * @param value The number to be formatted.
     * @param digitsInfo Decimal representation options, specified by a string
     * in the following format:<br>
     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
     * Default is `1`.
     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
     * Default is `0`.
     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
     * Default is `3`.
     * @param locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `MC_LOCALE_ID`, which is `ru` by default.
     */
    transform(value, digitsInfo, locale) {
        if (isEmpty(value)) {
            return null;
        }
        const currentLocale = locale || this._locale || DEFAULT_MC_LOCALE_ID;
        let parsedDigitsInfo;
        if (digitsInfo) {
            parsedDigitsInfo = parseDigitsInfo(digitsInfo);
        }
        const options = Object.assign({ useGrouping: true, minimumIntegerDigits: 1, minimumFractionDigits: 0, maximumFractionDigits: 3 }, parsedDigitsInfo);
        try {
            const num = strToNumber(value);
            return Intl.NumberFormat.call(this, currentLocale, options).format(num);
        }
        catch (error) {
            throw Error(`InvalidPipeArgument: McDecimalPipe for pipe '${JSON.stringify(error.message)}'`);
        }
    }
}
/** @nocollapse */ McDecimalPipe.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function McDecimalPipe_Factory() { return new McDecimalPipe(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MC_LOCALE_ID, 8)); }, token: McDecimalPipe, providedIn: "root" });
McDecimalPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"], args: [{ name: 'mcNumber' },] }
];
/** @nocollapse */
McDecimalPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_LOCALE_ID,] }] }
];

class McFormattersModule {
}
McFormattersModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                exports: [McDecimalPipe],
                declarations: [McDecimalPipe],
                providers: [DateFormatter]
            },] }
];

const validationTooltipShowDelay = 10;
const validationTooltipHideDelay = 3000;
const MC_VALIDATION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('McUseValidation', { factory: () => ({ useValidation: true }) });
function setValidState(control, validator) {
    if (!control) {
        return;
    }
    control.clearValidators();
    control.updateValueAndValidity({ emitEvent: false });
    control.setValidators(validator);
}
/** This function do next:
 * - run validation on submitting parent form
 * - prevent validation in required validator if form doesn't submitted
 * - if control has focus validation will be prevented
 */
function setMosaicValidation(component) {
    const ngControl = component.ngControl;
    if (!ngControl) {
        return;
    }
    const parentForm = component.parentForm || component.parentFormGroup;
    if (parentForm) {
        parentForm.ngSubmit.subscribe(() => {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            ngControl.control.updateValueAndValidity({ emitEvent: false });
        });
    }
    if (component.ngModel) {
        setMosaicValidationForModelControl(component, component.rawValidators, parentForm);
    }
    else if (component.formControlName || component.ngControl) {
        setMosaicValidationForFormControl(component, parentForm, ngControl);
    }
}
function setMosaicValidationForModelControl(component, validators, parentForm) {
    if (!validators) {
        return;
    }
    validators.forEach((validator) => {
        // tslint:disable-next-line: no-unbound-method
        const originalValidate = validator.validate;
        if (validator instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_6__["RequiredValidator"]) {
            // changed required validation logic
            validator.validate = (control) => {
                if (parentForm && !parentForm.submitted) {
                    return null;
                }
                return originalValidate.call(validator, control);
            };
        }
        else {
            // changed all other validation logic
            validator.validate = (control) => {
                if (component.focused) {
                    return null;
                }
                return originalValidate.call(validator, control);
            };
        }
    });
}
function setMosaicValidationForFormControl(component, parentForm, ngControl) {
    const originalValidator = ngControl.control.validator;
    // changed required validation logic after initialization
    if (ngControl.invalid && ngControl.errors.required) {
        Promise.resolve().then(() => setValidState(ngControl.control, originalValidator));
    }
    // check dynamic updates
    ngControl.statusChanges
        .subscribe(() => {
        // changed required validation logic
        if (ngControl.invalid && (parentForm && !parentForm.submitted) && ngControl.errors.required) {
            setValidState(ngControl.control, originalValidator);
        }
        // changed all other validation logic
        if (ngControl.invalid && component.focused) {
            setValidState(ngControl.control, originalValidator);
        }
    });
}

class McHighlightPipe {
    transform(value, args) {
        if (!args) {
            return value;
        }
        return value.replace(new RegExp(`(${args})`, 'gi'), '<mark class="mc-highlight">$1</mark>');
    }
}
McHighlightPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"], args: [{ name: 'mcHighlight' },] }
];

class McHighlightModule {
}
McHighlightModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
                exports: [McHighlightPipe],
                declarations: [McHighlightPipe]
            },] }
];

const selectEvents = 'selectEvents';

/**
 * Returns an exception to be thrown when attempting to change a select's `multiple` option
 * after initialization.
 * @docs-private
 */
function getMcSelectDynamicMultipleError() {
    return Error('Cannot change `multiple` mode of select after initialization.');
}
/**
 * Returns an exception to be thrown when attempting to assign a non-array value to a select
 * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for
 * resetting the value.
 * @docs-private
 */
function getMcSelectNonArrayValueError() {
    return Error('Value must be an array in multiple-selection mode.');
}
/**
 * Returns an exception to be thrown when assigning a non-function value to the comparator
 * used to determine if a value corresponds to an option. Note that whether the function
 * actually takes two values and returns a boolean is not checked.
 */
function getMcSelectNonFunctionValueError() {
    return Error('`compareWith` must be a function.');
}

/** The max height of the select's overlay panel */
const SELECT_PANEL_MAX_HEIGHT = 224;
/** The panel's padding on the x-axis */
const SELECT_PANEL_PADDING_X = 1;
/** The panel's x axis padding if it is indented (e.g. there is an option group). */
/* tslint:disable-next-line:no-magic-numbers */
const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;
/**
 * The select panel will only "fit" inside the viewport if it is positioned at
 * this value or more away from the viewport boundary.
 */
const SELECT_PANEL_VIEWPORT_PADDING = 8;
/** Injection token that determines the scroll handling while a select is open. */
const MC_SELECT_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-select-scroll-strategy');
/** @docs-private */
function mcSelectScrollStrategyProviderFactory(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {
    provide: MC_SELECT_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_8__["Overlay"]],
    useFactory: mcSelectScrollStrategyProviderFactory
};

const POSITION_MAP = {
    top: {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom'
    },
    topCenter: {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom'
    },
    topLeft: {
        originX: 'start',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'bottom'
    },
    topRight: {
        originX: 'end',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'bottom'
    },
    right: {
        originX: 'end',
        originY: 'center',
        overlayX: 'start',
        overlayY: 'center'
    },
    rightTop: {
        originX: 'end',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'top'
    },
    rightBottom: {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'bottom'
    },
    bottom: {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top'
    },
    bottomCenter: {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top'
    },
    bottomLeft: {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'top'
    },
    bottomRight: {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'top'
    },
    left: {
        originX: 'start',
        originY: 'center',
        overlayX: 'end',
        overlayY: 'center'
    },
    leftTop: {
        originX: 'start',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'top'
    },
    leftBottom: {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'bottom'
    }
};
const DEFAULT_4_POSITIONS = objectValues([
    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left
]);
const EXTENDED_OVERLAY_POSITIONS = objectValues([
    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,
    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,
    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom
]);
const TOP_POSITION_PRIORITY = objectValues([
    POSITION_MAP.top,
    POSITION_MAP.bottom,
    POSITION_MAP.rightBottom,
    POSITION_MAP.leftBottom,
    POSITION_MAP.bottomLeft,
    POSITION_MAP.bottomRight
]);
const BOTTOM_POSITION_PRIORITY = objectValues([
    POSITION_MAP.bottom,
    POSITION_MAP.top,
    POSITION_MAP.topLeft,
    POSITION_MAP.topRight,
    POSITION_MAP.rightBottom,
    POSITION_MAP.leftBottom
]);
const RIGHT_POSITION_PRIORITY = objectValues([
    POSITION_MAP.right,
    POSITION_MAP.left,
    POSITION_MAP.leftTop,
    POSITION_MAP.leftBottom,
    POSITION_MAP.top,
    POSITION_MAP.bottom
]);
const LEFT_POSITION_PRIORITY = objectValues([
    POSITION_MAP.left,
    POSITION_MAP.right,
    POSITION_MAP.rightTop,
    POSITION_MAP.rightBottom,
    POSITION_MAP.top,
    POSITION_MAP.bottom
]);
const RIGHT_TOP_POSITION_PRIORITY = objectValues([
    POSITION_MAP.rightTop,
    POSITION_MAP.leftTop,
    POSITION_MAP.left,
    POSITION_MAP.leftBottom,
    POSITION_MAP.topLeft,
    POSITION_MAP.bottomLeft
]);
const RIGHT_BOTTOM_POSITION_PRIORITY = objectValues([
    POSITION_MAP.rightBottom,
    POSITION_MAP.leftBottom,
    POSITION_MAP.left,
    POSITION_MAP.leftTop,
    POSITION_MAP.topLeft,
    POSITION_MAP.bottomLeft
]);
const LEFT_TOP_POSITION_PRIORITY = objectValues([
    POSITION_MAP.leftTop,
    POSITION_MAP.rightTop,
    POSITION_MAP.right,
    POSITION_MAP.rightBottom,
    POSITION_MAP.topRight,
    POSITION_MAP.bottomRight
]);
const LEFT_BOTTOM_POSITION_PRIORITY = objectValues([
    POSITION_MAP.leftBottom,
    POSITION_MAP.rightBottom,
    POSITION_MAP.right,
    POSITION_MAP.rightTop,
    POSITION_MAP.topRight,
    POSITION_MAP.bottomRight
]);
const TOP_LEFT_POSITION_PRIORITY = objectValues([
    POSITION_MAP.topLeft,
    POSITION_MAP.topRight,
    POSITION_MAP.bottomLeft,
    POSITION_MAP.bottom,
    POSITION_MAP.bottomRight,
    POSITION_MAP.leftBottom,
    POSITION_MAP.rightBottom
]);
const TOP_RIGHT_POSITION_PRIORITY = objectValues([
    POSITION_MAP.topRight,
    POSITION_MAP.topLeft,
    POSITION_MAP.bottomRight,
    POSITION_MAP.bottom,
    POSITION_MAP.bottomLeft,
    POSITION_MAP.leftBottom,
    POSITION_MAP.rightBottom
]);
const BOTTOM_RIGHT_POSITION_PRIORITY = objectValues([
    POSITION_MAP.bottomRight,
    POSITION_MAP.bottomLeft,
    POSITION_MAP.topRight,
    POSITION_MAP.top,
    POSITION_MAP.topLeft,
    POSITION_MAP.leftTop,
    POSITION_MAP.rightTop
]);
const BOTTOM_LEFT_POSITION_PRIORITY = objectValues([
    POSITION_MAP.bottomLeft,
    POSITION_MAP.bottomRight,
    POSITION_MAP.topLeft,
    POSITION_MAP.top,
    POSITION_MAP.topRight,
    POSITION_MAP.rightTop,
    POSITION_MAP.leftTop
]);
const POSITION_PRIORITY_STRATEGY = {
    top: TOP_POSITION_PRIORITY,
    topLeft: TOP_LEFT_POSITION_PRIORITY,
    topRight: TOP_RIGHT_POSITION_PRIORITY,
    bottom: BOTTOM_POSITION_PRIORITY,
    bottomLeft: BOTTOM_LEFT_POSITION_PRIORITY,
    bottomRight: BOTTOM_RIGHT_POSITION_PRIORITY,
    left: LEFT_POSITION_PRIORITY,
    leftTop: LEFT_TOP_POSITION_PRIORITY,
    leftBottom: LEFT_BOTTOM_POSITION_PRIORITY,
    right: RIGHT_POSITION_PRIORITY,
    rightTop: RIGHT_TOP_POSITION_PRIORITY,
    rightBottom: RIGHT_BOTTOM_POSITION_PRIORITY
};
const POSITION_TO_CSS_MAP = {
    top: 'top',
    topLeft: 'top-left',
    topRight: 'top-right',
    right: 'right',
    rightTop: 'right-top',
    rightBottom: 'right-bottom',
    left: 'left',
    leftTop: 'left-top',
    leftBottom: 'left-bottom',
    bottom: 'bottom',
    bottomLeft: 'bottom-left',
    bottomRight: 'bottom-right'
};
const DEFAULT_4_POSITIONS_TO_CSS_MAP = {
    top: 'top',
    bottom: 'bottom',
    right: 'right',
    left: 'left'
};
function arrayMap(array, iteratee) {
    let index = -1;
    const length = array == null ? 0 : array.length;
    const result = Array(length);
    while (++index < length) {
        result[index] = iteratee(array[index], index, array);
    }
    return result;
}
function baseValues(object, props) {
    return arrayMap(props, (key) => {
        return object[key];
    });
}
function objectValues(object) {
    return object == null ? [] : baseValues(object, Object.keys(object));
}

const fadeAnimation = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('fadeAnimation', [
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: 0 })),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: 1 })),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: 0 })),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* => true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('150ms cubic-bezier(0.4, 0.0, 1, 1)'))
]);

var AnimationCurves;
(function (AnimationCurves) {
    AnimationCurves["StandardCurve"] = "cubic-bezier(0.4,0.0,0.2,1)";
    AnimationCurves["DecelerationCurve"] = "cubic-bezier(0.0,0.0,0.2,1)";
    AnimationCurves["AccelerationCurve"] = "cubic-bezier(0.4,0.0,1,1)";
    AnimationCurves["SharpCurve"] = "cubic-bezier(0.4,0.0,0.6,1)";
})(AnimationCurves || (AnimationCurves = {}));

/**
 * The following are all the animations for the mc-select component, with each
 * const containing the metadata for one animation.
 *
 */
const mcSelectAnimations = {
    /**
     * This animation transforms the select's overlay panel on and off the page.
     *
     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it
     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the
     * side to ensure the option text correctly overlaps the trigger text.
     *
     * When the panel is removed from the DOM, it simply fades out linearly.
     */
    transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('transformPanel', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
            transform: 'scaleY(0)',
            minWidth: '100%',
            opacity: 0
        })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["group"])([
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')
        ])),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* => void', [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('250ms 100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: 0 }))
        ])
    ]),
    /**
     * This animation fades in the background color and text content of the
     * select's options. It is time delayed to occur 100ms after the overlay
     * panel has transformed in.
     */
    fadeInContent: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('fadeInContent', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: 1 })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('void => showing', [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: 0 }),
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')
        ])
    ])
};
const transformPanel = mcSelectAnimations.transformPanel;
const fadeInContent = mcSelectAnimations.fadeInContent;

/** InjectionToken that can be used to specify the global label options. */
const MC_LABEL_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-label-global-options');

var MultipleMode;
(function (MultipleMode) {
    MultipleMode["CHECKBOX"] = "checkbox";
    MultipleMode["KEYBOARD"] = "keyboard";
})(MultipleMode || (MultipleMode = {}));

/**
 * Component that shows a simplified checkbox without including any kind of "real" checkbox.
 * Meant to be used when the checkbox is purely decorative and a large number of them will be
 * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
 * Note that theming is meant to be handled by the parent element, e.g.
 * `mc-primary .mc-pseudo-checkbox`.
 *
 * Note that this component will be completely invisible to screen-reader users. This is *not*
 * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly
 * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
 * of more complex components that appropriately handle selected / checked state.
 * @docs-private
 */
class McPseudoCheckbox {
    constructor() {
        this.state = 'unchecked';
        this.disabled = false;
    }
}
McPseudoCheckbox.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-pseudo-checkbox',
                template: "<i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n<i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n",
                host: {
                    class: 'mc-pseudo-checkbox',
                    '[class.mc-indeterminate]': 'state === "indeterminate"',
                    '[class.mc-checked]': 'state === "checked"',
                    '[class.mc-disabled]': 'disabled'
                },
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                styles: [".mc-pseudo-checkbox{position:relative;display:inline-block;box-sizing:border-box;width:var(--mc-checkbox-size-width,16px);height:var(--mc-checkbox-size-width,16px);border-radius:3px;border-width:var(--mc-checkbox-size-border-width,1px);border-style:solid;cursor:pointer;vertical-align:middle;flex-shrink:0}.mc-pseudo-checkbox .mc-checkbox-checkmark,.mc-pseudo-checkbox .mc-checkbox-mixedmark{display:none;position:absolute;top:calc(-1 * var(--mc-checkbox-size-border-width, 1px));left:calc(-1 * var(--mc-checkbox-size-border-width, 1px))}.mc-pseudo-checkbox.mc-pseudo-checkbox-checked,.mc-pseudo-checkbox.mc-pseudo-checkbox-indeterminate{border-color:transparent}.mc-pseudo-checkbox.mc-checked .mc-checkbox-checkmark,.mc-pseudo-checkbox.mc-indeterminate .mc-checkbox-mixedmark{display:inline-block}.mc-pseudo-checkbox.mc-disabled{cursor:default}"]
            },] }
];
McPseudoCheckbox.propDecorators = {
    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

class McPseudoCheckboxModule {
}
McPseudoCheckboxModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
                exports: [McPseudoCheckbox],
                declarations: [McPseudoCheckbox]
            },] }
];

class McMeasureScrollbarService {
    constructor(document) {
        this.document = document;
        this.scrollbarMeasure = {
            position: 'absolute',
            top: '-9999px',
            width: '50px',
            height: '50px',
            overflow: 'scroll'
        };
        this.initScrollBarWidth();
    }
    get scrollBarWidth() {
        if (this._scrollBarWidth) {
            return this._scrollBarWidth;
        }
        this.initScrollBarWidth();
        return this._scrollBarWidth;
    }
    initScrollBarWidth() {
        const scrollDiv = this.document.createElement('div');
        // tslint:disable-next-line
        for (const scrollProp in this.scrollbarMeasure) {
            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {
                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];
            }
        }
        this.document.body.appendChild(scrollDiv);
        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this.document.body.removeChild(scrollDiv);
        this._scrollBarWidth = width;
    }
}
/** @nocollapse */ McMeasureScrollbarService.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function McMeasureScrollbarService_Factory() { return new McMeasureScrollbarService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_7__["DOCUMENT"])); }, token: McMeasureScrollbarService, providedIn: "root" });
McMeasureScrollbarService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
McMeasureScrollbarService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["DOCUMENT"],] }] }
];

/** @docs-private */
class McOptgroupBase {
}
// tslint:disable-next-line: naming-convention
const McOptgroupMixinBase = mixinDisabled(McOptgroupBase);
let uniqueOptgroupIdCounter = 0;
/**
 * Component that is used to group instances of `mc-option`.
 */
class McOptgroup extends McOptgroupMixinBase {
    constructor() {
        super(...arguments);
        /** Unique id for the underlying label. */
        this.labelId = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;
    }
}
McOptgroup.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-optgroup',
                exportAs: 'mcOptgroup',
                template: "<label class=\"mc-optgroup-label\" [id]=\"labelId\">{{ label }}</label>\n<ng-content select=\"mc-option, mc-list-option, ng-container\"></ng-content>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                inputs: ['disabled'],
                host: {
                    class: 'mc-optgroup',
                    '[class.mc-disabled]': 'disabled'
                },
                styles: [".mc-optgroup-label{padding-left:var(--mc-optgroup-size-padding-left,17px);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}"]
            },] }
];
McOptgroup.propDecorators = {
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let uniqueIdCounter = 0;
/** Event object emitted by McOption when selected or deselected. */
class McOptionSelectionChange {
    constructor(source, isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
/**
 * Injection token used to provide the parent component to options.
 */
const MC_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MC_OPTION_PARENT_COMPONENT');
/**
 * Single option inside of a `<mc-select>` element.
 */
class McOption {
    constructor(element, changeDetectorRef, parent, group) {
        this.element = element;
        this.changeDetectorRef = changeDetectorRef;
        this.parent = parent;
        this.group = group;
        /** Event emitted when the option is selected or deselected. */
        // tslint:disable-next-line:no-output-on-prefix
        this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** Emits when the state of the option changes and any parents have to be notified. */
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
        this._id = `mc-option-${uniqueIdCounter++}`;
        this._selected = false;
        this._disabled = false;
        this._active = false;
        this.mostRecentViewValue = '';
    }
    get showCheckbox() {
        return this._showCheckbox === undefined ? this.multiple : this._showCheckbox;
    }
    set showCheckbox(value) {
        this._showCheckbox = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
    }
    /**
     * The displayed value of the option. It is necessary to show the selected option in the
     * select's trigger.
     */
    get viewValue() {
        // TODO: Add input property alternative for node envs.
        return (this.getHostElement().textContent || '').trim();
    }
    /** Whether the wrapping component is in multiple selection mode. */
    get multiple() {
        return this.parent && this.parent.multiple;
    }
    get id() {
        return this._id;
    }
    get selected() {
        return this._selected;
    }
    get disabled() {
        return (this.group && this.group.disabled) || this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
    }
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */
    get active() {
        return this._active;
    }
    ngAfterViewChecked() {
        // Since parent components could be using the option's label to display the selected values
        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        if (this._selected) {
            const viewValue = this.viewValue;
            if (viewValue !== this.mostRecentViewValue) {
                this.mostRecentViewValue = viewValue;
                this.stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    getHeight() {
        // tslint:disable-next-line:naming-convention
        const DOMRect = this.element.nativeElement.getClientRects()[0];
        return DOMRect ? DOMRect.height : 0;
    }
    select() {
        if (!this._selected) {
            this._selected = true;
            this.changeDetectorRef.markForCheck();
            this.emitSelectionChangeEvent();
        }
    }
    deselect() {
        if (this._selected) {
            this._selected = false;
            this.changeDetectorRef.markForCheck();
            this.emitSelectionChangeEvent();
        }
    }
    focus() {
        const element = this.getHostElement();
        if (typeof element.focus === 'function') {
            element.focus();
        }
    }
    /**
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setActiveStyles() {
        if (!this._active) {
            this._active = true;
            this.changeDetectorRef.markForCheck();
        }
    }
    /**
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setInactiveStyles() {
        if (this._active) {
            this._active = false;
            this.changeDetectorRef.markForCheck();
        }
    }
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel() {
        return this.viewValue;
    }
    /** Ensures the option is selected when activated from the keyboard. */
    handleKeydown(event) {
        // tslint:disable-next-line
        if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] || event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]) {
            this.selectViaInteraction();
            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
        }
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.multiple ? !this._selected : true;
            this.changeDetectorRef.markForCheck();
            this.emitSelectionChangeEvent(true);
        }
    }
    getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    getHostElement() {
        return this.element.nativeElement;
    }
    /** Emits the selection change event. */
    emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));
    }
}
McOption.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-option',
                exportAs: 'mcOption',
                host: {
                    '[attr.tabindex]': 'getTabIndex()',
                    class: 'mc-option',
                    '[class.mc-selected]': 'selected',
                    '[class.mc-option-multiple]': 'multiple',
                    '[class.mc-active]': 'active',
                    '[class.mc-disabled]': 'disabled',
                    '[id]': 'id',
                    '(click)': 'selectViaInteraction()',
                    '(keydown)': 'handleKeydown($event)'
                },
                template: "<mc-pseudo-checkbox\n    *ngIf=\"showCheckbox\"\n    [state]=\"selected ? 'checked' : ''\"\n    [disabled]=\"disabled\">\n</mc-pseudo-checkbox>\n\n<span class=\"mc-option-text\"><ng-content></ng-content></span>\n\n<div class=\"mc-option-overlay\"></div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-option{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;position:relative;max-width:100%;height:var(--mc-option-size-height,32px);border:var(--mc-option-size-border-width,2px) solid transparent;cursor:pointer;outline:none;padding-left:var(--mc-option-size-horizontal-padding,16px);padding-right:var(--mc-option-size-horizontal-padding,16px);-webkit-tap-highlight-color:transparent}.mc-option.mc-disabled{cursor:default}.mc-option .mc-pseudo-checkbox{margin-right:8px}.mc-option .mc-option-overlay{position:absolute;top:calc(-1 * var(--mc-option-size-border-width, 2px));left:calc(-1 * var(--mc-option-size-border-width, 2px));right:calc(-1 * var(--mc-option-size-border-width, 2px));bottom:calc(-1 * var(--mc-option-size-border-width, 2px));pointer-events:none;border-radius:inherit}.mc-option-text{display:inline-block;flex-grow:1;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}"]
            },] }
];
/** @nocollapse */
McOption.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_OPTION_PARENT_COMPONENT,] }] },
    { type: McOptgroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
];
McOption.propDecorators = {
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    showCheckbox: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};
/**
 * Counts the amount of option group labels that precede the specified option.
 * @param optionIndex Index of the option at which to start counting.
 * @param options Flat list of all of the options.
 * @param optionGroups Flat list of all of the option groups.
 * @docs-private
 */
function countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
    if (optionGroups.length) {
        const optionsArray = options.toArray();
        const groups = optionGroups.toArray();
        let groupCounter = 0;
        for (let i = 0; i < optionIndex + 1; i++) {
            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                groupCounter++;
            }
        }
        return groupCounter;
    }
    return 0;
}
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * @param optionIndex Index of the option to be scrolled into the view.
 * @param optionHeight Height of the options.
 * @param currentScrollPosition Current scroll position of the panel.
 * @param panelHeight Height of the panel.
 * @docs-private
 */
function getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {
    const optionOffset = optionIndex * optionHeight;
    if (optionOffset < currentScrollPosition) {
        return optionOffset;
    }
    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
    }
    return currentScrollPosition;
}

class McOptionModule {
}
McOptionModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"], McPseudoCheckboxModule],
                exports: [McOption, McOptgroup],
                declarations: [McOption, McOptgroup]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "59Z+":
/*!*********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-radio.js ***!
  \*********************************************************/
/*! exports provided: MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, McRadioButton, McRadioButtonMixinBase, McRadioChange, McRadioGroup, McRadioGroupBase, McRadioGroupMixinBase, McRadioModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR", function() { return MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioButton", function() { return McRadioButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioButtonMixinBase", function() { return McRadioButtonMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioChange", function() { return McRadioChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioGroup", function() { return McRadioGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioGroupBase", function() { return McRadioGroupBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioGroupMixinBase", function() { return McRadioGroupMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McRadioModule", function() { return McRadioModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "s7LF");







// Increasing integer for generating unique ids for radio components.
let nextUniqueId = 0;
/** Change event object emitted by McRadio. */
class McRadioChange {
    constructor(
    /** The McRadioButton that emits the change event. */
    source, 
    /** The value of the McRadioButton. */
    value) {
        this.source = source;
        this.value = value;
    }
}
// Boilerplate for applying mixins to McRadioGroup.
/** @docs-private */
class McRadioGroupBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McRadioGroupMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McRadioGroupBase);
/**
 * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This
 * allows it to support [(ngModel)] and ngControl.
 * @docs-private
 */
const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => McRadioGroup),
    multi: true
};
class McRadioGroup extends McRadioGroupMixinBase {
    constructor(elementRef, _changeDetector) {
        super(elementRef);
        this._changeDetector = _changeDetector;
        /**
         * Event emitted when the group value changes.
         * Change events are only emitted when the value changes due to user interaction with
         * a radio button (the same behavior as `<input type-"radio">`).
         */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /**
         * Selected value for group. Should equal the value of the selected radio button if there *is*
         * a corresponding radio button with a matching value. If there is *not* such a corresponding
         * radio button, this value persists to be applied in case a new radio button is added with a
         * matching value.
         */
        this._value = null;
        /** The HTML name attribute applied to radio buttons in this group. */
        this._name = `mc-radio-group-${nextUniqueId++}`;
        /** The currently selected radio button. Should match value. */
        this._selected = null;
        /** Whether the `value` has been set to its initial value. */
        this.isInitialized = false;
        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */
        this._labelPosition = 'after';
        /** Whether the radio group is disabled. */
        this._disabled = false;
        /** Whether the radio group is required. */
        this._required = false;
        /** The method to be called in order to update ngModel */
        // tslint:disable-next-line
        this.controlValueAccessorChangeFn = () => { };
        /**
         * onTouch function registered via registerOnTouch (ControlValueAccessor).
         * @docs-private
         */
        // tslint:disable-next-line
        this.onTouched = () => { };
    }
    /** Name of the radio button group. All radio buttons inside this group will use this name. */
    get name() { return this._name; }
    set name(value) {
        this._name = value;
        this.updateRadioButtonNames();
    }
    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */
    get labelPosition() {
        return this._labelPosition;
    }
    set labelPosition(v) {
        this._labelPosition = v === 'before' ? 'before' : 'after';
        this.markRadiosForCheck();
    }
    /** Value of the radio button. */
    get value() { return this._value; }
    set value(newValue) {
        if (this._value !== newValue) {
            // Set this before proceeding to ensure no circular loop occurs with selection.
            this._value = newValue;
            this.updateSelectedRadioFromValue();
            this.checkSelectedRadioButton();
        }
    }
    /** Whether the radio button is selected. */
    get selected() { return this._selected; }
    set selected(selected) {
        this._selected = selected;
        this.value = selected ? selected.value : null;
        this.checkSelectedRadioButton();
    }
    /** Whether the radio group is disabled */
    get disabled() { return this._disabled; }
    set disabled(value) {
        this._disabled = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        this.markRadiosForCheck();
    }
    /** Whether the radio group is required */
    get required() { return this._required; }
    set required(value) {
        this._required = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        this.markRadiosForCheck();
    }
    checkSelectedRadioButton() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    /**
     * Initialize properties once content children are available.
     * This allows us to propagate relevant attributes to associated buttons.
     */
    ngAfterContentInit() {
        // Mark this component as initialized in AfterContentInit because the initial value can
        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the
        // NgModel occurs *after* the OnInit of the McRadioGroup.
        this.isInitialized = true;
    }
    /**
     * Mark this group as being "touched" (for ngModel). Meant to be called by the contained
     * radio buttons upon their blur.
     */
    touch() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /** Dispatch change event with current selection and group value. */
    emitChangeEvent() {
        if (this.isInitialized) {
            this.change.emit(new McRadioChange(this._selected, this._value));
        }
    }
    markRadiosForCheck() {
        if (this.radios) {
            this.radios.forEach((radio) => radio.markForCheck());
        }
    }
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     */
    writeValue(value) {
        this.value = value;
        this._changeDetector.markForCheck();
    }
    /**
     * Registers a callback to be triggered when the model value changes.
     * Implemented as part of ControlValueAccessor.
     * @param fn Callback to be registered.
     */
    registerOnChange(fn) {
        this.controlValueAccessorChangeFn = fn;
    }
    /**
     * Registers a callback to be triggered when the control is touched.
     * Implemented as part of ControlValueAccessor.
     * @param fn Callback to be registered.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
     * @param isDisabled Whether the control should be disabled.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetector.markForCheck();
    }
    updateRadioButtonNames() {
        if (this.radios) {
            this.radios.forEach((radio) => {
                radio.name = this.name;
            });
        }
    }
    /** Updates the `selected` radio button from the internal _value state. */
    updateSelectedRadioFromValue() {
        // If the value already matches the selected radio, do nothing.
        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this.radios != null && !isAlreadySelected) {
            this._selected = null;
            this.radios.forEach((radio) => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
}
McRadioGroup.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: 'mc-radio-group',
                exportAs: 'mcRadioGroup',
                host: {
                    role: 'radiogroup',
                    class: 'mc-radio-group'
                },
                providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]
            },] }
];
/** @nocollapse */
McRadioGroup.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
];
McRadioGroup.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    radios: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => McRadioButton), { descendants: true },] }]
};
// Boilerplate for applying mixins to McRadioButton.
/** @docs-private */
// tslint:disable-next-line:naming-convention
class McRadioButtonBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McRadioButtonMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(McRadioButtonBase));
class McRadioButton extends McRadioButtonMixinBase {
    constructor(radioGroup, elementRef, _changeDetector, focusMonitor, _radioDispatcher) {
        super(elementRef);
        this._changeDetector = _changeDetector;
        this.focusMonitor = focusMonitor;
        this._radioDispatcher = _radioDispatcher;
        /**
         * Event emitted when the checked state of this radio button changes.
         * Change events are only emitted when the value changes due to user interaction with
         * the radio button (the same behavior as `<input type-"radio">`).
         */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.isFocused = false;
        /* tslint:disable:member-ordering */
        this.uniqueId = `mc-radio-${++nextUniqueId}`;
        /** Whether this radio is checked. */
        this._checked = false;
        /** Value assigned to this radio. */
        this._value = null;
        /** Unregister function for _radioDispatcher */
        // tslint:disable-next-line
        this.removeUniqueSelectionListener = () => { };
        this.id = this.uniqueId;
        this.radioGroup = radioGroup;
        this.removeUniqueSelectionListener =
            _radioDispatcher.listen((id, name) => {
                if (id !== this.id && name === this.name) {
                    this.checked = false;
                }
            });
    }
    /** Whether this radio button is checked. */
    get checked() { return this._checked; }
    set checked(value) {
        const newCheckedState = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        if (this._checked !== newCheckedState) {
            this._checked = newCheckedState;
            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {
                this.radioGroup.selected = this;
            }
            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {
                // When unchecking the selected radio button, update the selected radio
                // property on the group.
                this.radioGroup.selected = null;
            }
            if (newCheckedState) {
                // Notify all radio buttons with the same name to un-check.
                this._radioDispatcher.notify(this.id, this.name);
            }
            this._changeDetector.markForCheck();
        }
    }
    /** The value of this radio button. */
    get value() { return this._value; }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            if (this.radioGroup != null) {
                if (!this.checked) {
                    // Update checked when the value changed to match the radio group's value
                    this.checked = this.radioGroup.value === value;
                }
                if (this.checked) {
                    this.radioGroup.selected = this;
                }
            }
        }
    }
    /** Whether the radio button is disabled. */
    get disabled() {
        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
    }
    set disabled(value) {
        const newDisabledState = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        if (this._disabled !== newDisabledState) {
            this._disabled = newDisabledState;
            this._changeDetector.markForCheck();
        }
    }
    /** Whether the radio button is required. */
    get required() {
        return this._required || (this.radioGroup && this.radioGroup.required);
    }
    set required(value) {
        this._required = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    /** Whether the label should appear after or before the radio button. Defaults to 'after' */
    get labelPosition() {
        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';
    }
    set labelPosition(value) {
        this._labelPosition = value;
    }
    /** ID of the native input element inside `<mc-radio-button>` */
    get inputId() { return `${this.id || this.uniqueId}-input`; }
    ngOnInit() {
        if (this.radioGroup) {
            // If the radio is inside a radio group, determine if it should be checked
            this.checked = this.radioGroup.value === this._value;
            // Copy name from parent radio group
            this.name = this.radioGroup.name;
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this._elementRef, true)
            .subscribe((focusOrigin) => {
            if (!focusOrigin && this.radioGroup) {
                this.radioGroup.touch();
            }
        });
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this._elementRef);
        this.removeUniqueSelectionListener();
    }
    /** Focuses the radio button. */
    focus() {
        this.inputElement.nativeElement.focus();
    }
    /**
     * Marks the radio button as needing checking for change detection.
     * This method is exposed because the parent radio group will directly
     * update bound properties of the radio button.
     */
    markForCheck() {
        // When group value changes, the button will not be notified. Use `markForCheck` to explicit
        // update radio button's status
        this._changeDetector.markForCheck();
    }
    onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `radio-button` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
    }
    onInputChange(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;
        this.checked = true;
        this.emitChangeEvent();
        if (this.radioGroup) {
            this.radioGroup.controlValueAccessorChangeFn(this.value);
            this.radioGroup.touch();
            if (groupValueChanged) {
                this.radioGroup.emitChangeEvent();
            }
        }
    }
    /** Dispatch change event with current value. */
    emitChangeEvent() {
        this.change.emit(new McRadioChange(this, this._value));
    }
}
McRadioButton.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-radio-button',
                template: "<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n",
                inputs: ['color', 'tabIndex'],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                exportAs: 'mcRadioButton',
                host: {
                    class: 'mc-radio-button',
                    '[attr.id]': 'id',
                    '[class.mc-selected]': 'checked',
                    '[class.mc-disabled]': 'disabled'
                },
                styles: [".mc-radio-button{display:inline-block}.mc-radio-label{display:inline-flex;align-items:center;vertical-align:middle;cursor:pointer;white-space:nowrap;width:100%}.mc-radio-label-content{display:inline-block;position:relative;order:0;line-height:inherit;padding-left:calc(var(--mc-radio-size-size, 14px) + var(--mc-radio-size-padding, 8px));padding-right:0}.mc-radio-label-content .mc-radio-button__inner-circle,.mc-radio-label-content .mc-radio-button__outer-circle{box-sizing:content-box;position:absolute;content:\"\";border-style:solid;border-radius:50%}.mc-radio-label-content .mc-radio-button__outer-circle{left:0;top:calc(50% - 8px);width:var(--mc-radio-size-size,14px);height:var(--mc-radio-size-size,14px);border-width:1px}.mc-radio-label-content .mc-radio-button__inner-circle{display:none;left:1px;top:calc(50% - 7px);width:6px;height:6px;border-width:4px}[dir=rtl] .mc-radio-label-content{padding-right:var(--mc-radio-size-padding,8px);padding-left:0}.mc-radio-input{position:absolute;outline:none;opacity:0}"]
            },] }
];
/** @nocollapse */
McRadioButton.ctorParameters = () => [
    { type: McRadioGroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
    { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__["UniqueSelectionDispatcher"] }
];
McRadioButton.propDecorators = {
    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['aria-label',] }],
    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['aria-labelledby',] }],
    ariaDescribedby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['aria-describedby',] }],
    inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['input', { static: false },] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    isFocused: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McRadioModule {
}
McRadioModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"]],
                exports: [McRadioGroup, McRadioButton],
                declarations: [McRadioGroup, McRadioButton]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "5F9T":
/*!**************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-datepicker.js ***!
  \**************************************************************/
/*! exports provided: MC_DATEPICKER_SCROLL_STRATEGY, MC_DATEPICKER_SCROLL_STRATEGY_FACTORY, MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MC_DATEPICKER_VALIDATORS, MC_DATEPICKER_VALUE_ACCESSOR, McCalendar, McCalendarBody, McCalendarCell, McCalendarHeader, McCalendarView, McDatepicker, McDatepickerContent, McDatepickerInput, McDatepickerInputEvent, McDatepickerIntl, McDatepickerModule, McDatepickerToggle, McDatepickerToggleIcon, McMonthView, McMultiYearView, McYearView, mcDatepickerAnimations, yearsPerPage, yearsPerRow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_SCROLL_STRATEGY", function() { return MC_DATEPICKER_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_SCROLL_STRATEGY_FACTORY", function() { return MC_DATEPICKER_SCROLL_STRATEGY_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER", function() { return MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_VALIDATORS", function() { return MC_DATEPICKER_VALIDATORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATEPICKER_VALUE_ACCESSOR", function() { return MC_DATEPICKER_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCalendar", function() { return McCalendar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCalendarBody", function() { return McCalendarBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCalendarCell", function() { return McCalendarCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCalendarHeader", function() { return McCalendarHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCalendarView", function() { return McCalendarView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepicker", function() { return McDatepicker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerContent", function() { return McDatepickerContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerInput", function() { return McDatepickerInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerInputEvent", function() { return McDatepickerInputEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerIntl", function() { return McDatepickerIntl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerModule", function() { return McDatepickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerToggle", function() { return McDatepickerToggle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDatepickerToggleIcon", function() { return McDatepickerToggleIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McMonthView", function() { return McMonthView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McMultiYearView", function() { return McMultiYearView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McYearView", function() { return McYearView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcDatepickerAnimations", function() { return mcDatepickerAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yearsPerPage", function() { return yearsPerPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yearsPerRow", function() { return yearsPerRow; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/cdk/datetime */ "5vLs");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ptsecurity/mosaic/tooltip */ "YK9X");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/animations */ "GS7A");



















// tslint:disable:no-magic-numbers
/**
 * An internal class that represents the data corresponding to a single calendar cell.
 * @docs-private
 */
class McCalendarCell {
    constructor(value, displayValue, ariaLabel, enabled, cssClasses) {
        this.value = value;
        this.displayValue = displayValue;
        this.ariaLabel = ariaLabel;
        this.enabled = enabled;
        this.cssClasses = cssClasses;
    }
}
/**
 * An internal component used to display calendar data in a table.
 * @docs-private
 */
class McCalendarBody {
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /** The number of columns in the table. */
        this.numCols = 7;
        /** The cell number of the active cell in the table. */
        this.activeCell = 0;
        /**
         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
         * maintained even as the table resizes.
         */
        this.cellAspectRatio = 1;
        /** Emits when a new value is selected. */
        this.selectedValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
    }
    cellClicked(cell) {
        if (cell.enabled) {
            this.selectedValueChange.emit(cell.value);
        }
    }
    ngOnChanges(changes) {
        const columnChanges = changes.numCols;
        // tslint:disable-next-line:no-this-assignment
        const { rows, numCols } = this;
        if (changes.rows || columnChanges) {
            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;
        }
        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {
            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;
        }
        if (columnChanges || !this.cellWidth) {
            this.cellWidth = `${100 / numCols}%`;
        }
    }
    isActiveCell(rowIndex, colIndex) {
        let cellNumber = rowIndex * this.numCols + colIndex;
        // Account for the fact that the first row may not have as many cells.
        if (rowIndex) {
            cellNumber -= this.firstRowOffset;
        }
        return cellNumber === this.activeCell;
    }
    /** Focuses the active cell after the microtask queue is empty. */
    focusActiveCell() {
        this.ngZone.runOutsideAngular(() => {
            this.ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1)).subscribe(() => {
                const activeCell = this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');
                if (activeCell) {
                    activeCell.focus();
                }
            });
        });
    }
}
McCalendarBody.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: '[mc-calendar-body]',
                exportAs: 'mcCalendarBody',
                template: "<!--\n  If there's not enough space in the first row, create a separate label row. We mark this row as\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\n-->\n<tr *ngIf=\"firstRowOffset < labelMinRequiredCells\">\n    <td class=\"mc-calendar__body-label\"\n        [attr.colspan]=\"numCols\"\n        [style.paddingTop]=\"cellPadding\"\n        [style.paddingBottom]=\"cellPadding\">\n        {{ label }}\n    </td>\n</tr>\n\n<!-- Create the first row separately so we can include a special spacer cell. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\">\n    <!--\n      We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n      The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n      percentage of the width (a variant of the trick described here:\n      https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n    -->\n    <td *ngIf=\"rowIndex === 0 && firstRowOffset\"\n        class=\"mc-calendar__body-label\"\n        [attr.colspan]=\"firstRowOffset\"\n        [style.paddingTop]=\"cellPadding\"\n        [style.paddingBottom]=\"cellPadding\">\n        {{ firstRowOffset >= labelMinRequiredCells ? label : '' }}\n    </td>\n    <td *ngFor=\"let item of row; let colIndex = index\"\n        class=\"mc-calendar__body-cell\"\n        [ngClass]=\"item.cssClasses\"\n        [tabindex]=\"isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n        [class.mc-calendar__body_disabled]=\"!item.enabled\"\n        [class.mc-calendar__body_active]=\"isActiveCell(rowIndex, colIndex)\"\n        (click)=\"cellClicked(item)\"\n        [style.width]=\"cellWidth\"\n        [style.paddingTop]=\"cellPadding\"\n        [style.paddingBottom]=\"cellPadding\">\n        <div class=\"mc-calendar__body-cell-content\"\n             [class.mc-selected]=\"selectedValue === item.value\"\n             [class.mc-calendar__body-today]=\"todayValue === item.value\">\n            {{ item.displayValue }}\n        </div>\n    </td>\n</tr>\n",
                host: {
                    class: 'mc-calendar__body',
                    role: 'grid',
                    'aria-readonly': 'true'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-calendar__body{min-width:calc(7 * var(--mc-datepicker-body-size-cell-min-size, $datepicker-body-size-cell-min-size))}.mc-calendar__body-label{height:0;line-height:0;text-align:left;padding-left:var(--mc-datepicker-body-size-label-padding-side,4.71429%);padding-right:var(--mc-datepicker-body-size-label-padding-side,4.71429%)}.mc-calendar__body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mc-calendar__body_disabled{cursor:default}.mc-calendar__body-cell-content{position:absolute;top:var(--mc-datepicker-body-size-cell-margin,5%);left:var(--mc-datepicker-body-size-cell-margin,5%);padding:var(--mc-datepicker-body-size-cell-padding,8px);display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:var(--mc-datepicker-body-size-cell-border-width,1px);border-style:solid}.cdk-high-contrast-active .mc-calendar__body-cell-content,.cdk-high-contrast-active :host .mc-calendar__body-cell-content{border:none}mc-month-view .mc-calendar__body-cell-content{justify-content:flex-end}mc-multi-year-view .mc-calendar__body-cell-content,mc-year-view .mc-calendar__body-cell-content{justify-content:center}.cdk-high-contrast-active .mc-datepicker__popup:not(:empty),.cdk-high-contrast-active .mc-selected{outline:1px solid}.cdk-high-contrast-active .mc-calendar__body-today{outline:1px dotted}.cdk-high-contrast-active :host .mc-datepicker__popup:not(:empty),.cdk-high-contrast-active :host .mc-selected{outline:1px solid}.cdk-high-contrast-active :host .mc-calendar__body-today{outline:1px dotted}[dir=rtl] .mc-calendar__body-label{text-align:right}"]
            },] }
];
/** @nocollapse */
McCalendarBody.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"] }
];
McCalendarBody.propDecorators = {
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    todayValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selectedValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    labelMinRequiredCells: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    numCols: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    activeCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    cellAspectRatio: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selectedValueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }]
};

/** @docs-private */
function createMissingDateImplError(provider) {
    return Error(`McDatepicker: No provider found for ${provider}. You must import one of the existing ` +
        `modules at your application root or provide a custom implementation or use exists ones.`);
}

/** Datepicker data that requires internationalization. */
class McDatepickerIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        /** A label for the calendar popup (used by screen readers). */
        this.calendarLabel = 'Calendar';
        /** A label for the button used to open the calendar popup (used by screen readers). */
        this.openCalendarLabel = 'Open calendar';
        /** A label for the previous month button (used by screen readers). */
        this.prevMonthLabel = 'Previous month';
        /** A label for the next month button (used by screen readers). */
        this.nextMonthLabel = 'Next month';
        /** A label for the previous year button (used by screen readers). */
        this.prevYearLabel = 'Previous year';
        /** A label for the next year button (used by screen readers). */
        this.nextYearLabel = 'Next year';
        /** A label for the previous multi-year button (used by screen readers). */
        this.prevMultiYearLabel = 'Previous 20 years';
        /** A label for the next multi-year button (used by screen readers). */
        this.nextMultiYearLabel = 'Next 20 years';
        /** A label for the 'switch to month view' button (used by screen readers). */
        this.switchToMonthViewLabel = 'Choose date';
        /** A label for the 'switch to year view' button (used by screen readers). */
        this.switchToMultiYearViewLabel = 'Choose month and year';
    }
}
/** @nocollapse */ McDatepickerIntl.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"])({ factory: function McDatepickerIntl_Factory() { return new McDatepickerIntl(); }, token: McDatepickerIntl, providedIn: "root" });
McDatepickerIntl.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Injectable"], args: [{ providedIn: 'root' },] }
];

// tslint:disable:no-magic-numbers
const DAYS_PER_WEEK = 7;
/**
 * An internal component used to display a single month in the datepicker.
 * @docs-private
 */
class McMonthView {
    constructor(changeDetectorRef, dateFormats, dateAdapter, dir) {
        this.changeDetectorRef = changeDetectorRef;
        this.dateFormats = dateFormats;
        this.dateAdapter = dateAdapter;
        this.dir = dir;
        /** Emits when a new date is selected. */
        this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when any date is selected. */
        this.userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when any date is activated. */
        this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
        }
        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();
        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');
        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');
        // Rotate the labels for days of the week based on the configured first day of the week.
        const weekdays = longWeekdays.map((long, i) => {
            return { long, narrow: narrowWeekdays[i] };
        });
        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        this._activeDate = this.dateAdapter.today();
    }
    /**
     * The date to display in this month view (everything other than the month and year is ignored).
     */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
            this.init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.selectedDate = this.getDateInCurrentMonth(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this.init();
    }
    /** Handles when a new date is selected. */
    dateSelected(date) {
        if (this.selectedDate !== date) {
            const selectedYear = this.dateAdapter.getYear(this.activeDate);
            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);
            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);
            this.selectedChange.emit(selectedDate);
        }
        this.userSelection.emit();
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this.isRtl();
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 1 - this.dateAdapter.getDate(this._activeDate));
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, (this.dateAdapter.getNumDaysInMonth(this._activeDate) - this.dateAdapter.getDate(this._activeDate)));
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]:
                this.activeDate = event.altKey ?
                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :
                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]:
                this.activeDate = event.altKey ?
                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :
                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["SPACE"]:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));
                    this.userSelection.emit();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this.focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Initializes this month view. */
    init() {
        this.selectedDate = this.getDateInCurrentMonth(this.selected);
        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());
        this.monthLabel = this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate) - this.dateAdapter.firstMonth];
        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);
        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate));
        this.firstWeekOffset =
            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -
                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
        this.createWeekCells();
        this.changeDetectorRef.markForCheck();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    focusActiveCell() {
        this.mcCalendarBody.focusActiveCell();
    }
    /** Creates McCalendarCells for the dates in this month. */
    createWeekCells() {
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);
        const dateNames = this.dateAdapter.getDateNames();
        this.weeks = [[]];
        let cell = this.firstWeekOffset;
        for (let i = 0; i < daysInMonth; i++) {
            cell++;
            if (cell === DAYS_PER_WEEK) {
                this.weeks.push([]);
                cell = 0;
            }
            const date = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), i + 1);
            const enabled = this.shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.dateA11yLabel);
            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;
            this.weeks[this.weeks.length - 1]
                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));
        }
    }
    /** Date filter for the month */
    shouldEnableDate(date) {
        return !!date &&
            (!this.dateFilter || this.dateFilter(date)) &&
            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&
            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);
    }
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     */
    getDateInCurrentMonth(date) {
        return date && this.hasSameMonthAndYear(date, this.activeDate) ?
            this.dateAdapter.getDate(date) : null;
    }
    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */
    hasSameMonthAndYear(d1, d2) {
        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&
            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    isRtl() {
        return this.dir && this.dir.value === 'rtl';
    }
}
McMonthView.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-month-view',
                exportAs: 'mcMonthView',
                template: "<table class=\"mc-calendar__table\">\n    <thead class=\"mc-calendar__table-header\">\n        <tr>\n            <th *ngFor=\"let day of weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th>\n        </tr>\n        <tr>\n            <th class=\"mc-calendar__table-header-divider\" colspan=\"7\"></th>\n        </tr>\n    </thead>\n    <tbody mc-calendar-body\n           [label]=\"monthLabel\"\n           [rows]=\"weeks\"\n           [todayValue]=\"todayDate\"\n           [selectedValue]=\"selectedDate\"\n           [labelMinRequiredCells]=\"3\"\n           [activeCell]=\"dateAdapter.getDate(activeDate) - 1\"\n           (selectedValueChange)=\"dateSelected($event)\"\n           (keydown)=\"handleCalendarBodyKeydown($event)\">\n    </tbody>\n</table>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
McMonthView.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["MC_DATE_FORMATS"],] }] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] }
];
McMonthView.propDecorators = {
    activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    userSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    mcCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McCalendarBody, { static: false },] }]
};

// tslint:disable:no-magic-numbers
const yearsPerPage = 24;
const yearsPerRow = 4;
/**
 * An internal component used to display a year selector in the datepicker.
 * @docs-private
 */
class McMultiYearView {
    constructor(changeDetectorRef, dateAdapter, dir) {
        this.changeDetectorRef = changeDetectorRef;
        this.dateAdapter = dateAdapter;
        this.dir = dir;
        /** Emits when a new year is selected. */
        this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits the selected year. This doesn't imply a change on the selected date */
        this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when any date is activated. */
        this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._activeDate = this.dateAdapter.today();
    }
    /** The date to display in this multi-year view (everything other than the year is ignored). */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==
            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {
            this.init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this.init();
    }
    /** Initializes this multi-year view. */
    init() {
        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());
        const activeYear = this.dateAdapter.getYear(this._activeDate);
        const activeOffset = activeYear % yearsPerPage;
        this.years = [];
        for (let i = 0, row = []; i < yearsPerPage; i++) {
            row.push(activeYear - activeOffset + i);
            if (row.length === yearsPerRow) {
                this.years.push(row.map((year) => this.createCellForYear(year)));
                row = [];
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    /** Handles when a new year is selected. */
    onYearSelected(year) {
        this.yearSelected.emit(this.dateAdapter.createDate(year));
        const month = this.dateAdapter.getMonth(this.activeDate);
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month));
        this.selectedChange.emit(this.dateAdapter.createDate(year, month, Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));
    }
    /** Handles keydown events on the calendar body when calendar is in multi-year view. */
    handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this.isRtl();
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]:
                this.activeDate =
                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]:
                this.activeDate =
                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["SPACE"]:
                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this.focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    getActiveCell() {
        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;
    }
    /** Focuses the active cell after the microtask queue is empty. */
    focusActiveCell() {
        this.mcCalendarBody.focusActiveCell();
    }
    /** Creates an McCalendarCell for the given year. */
    createCellForYear(year) {
        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year));
        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));
    }
    /** Whether the given year is enabled. */
    shouldEnableYear(year) {
        // disable if the year is greater than maxDate lower than minDate
        if (year === undefined || year === null ||
            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||
            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {
            return false;
        }
        // enable if it reaches here and there's no filter defined
        if (!this.dateFilter) {
            return true;
        }
        const firstOfYear = this.dateAdapter.createDate(year);
        // If any date in the year is enabled count the year as enabled.
        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year; date = this.dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    isRtl() {
        return this.dir && this.dir.value === 'rtl';
    }
}
McMultiYearView.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-multi-year-view',
                exportAs: 'mcMultiYearView',
                template: "<table class=\"mc-calendar__table\">\n    <thead class=\"mc-calendar__table-header\">\n    <tr>\n        <th class=\"mc-calendar__table-header-divider\" colspan=\"4\"></th>\n    </tr>\n    </thead>\n    <tbody mc-calendar-body\n           [rows]=\"years\"\n           [todayValue]=\"todayYear\"\n           [selectedValue]=\"selectedYear\"\n           [numCols]=\"4\"\n           [cellAspectRatio]=\"4 / 7\"\n           [activeCell]=\"getActiveCell()\"\n           (selectedValueChange)=\"onYearSelected($event)\"\n           (keydown)=\"handleCalendarBodyKeydown($event)\">\n    </tbody>\n</table>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
McMultiYearView.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] }
];
McMultiYearView.propDecorators = {
    activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    mcCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McCalendarBody, { static: false },] }]
};

/**
 * An internal component used to display a single year in the datepicker.
 * @docs-private
 */
class McYearView {
    constructor(changeDetectorRef, dateFormats, dateAdapter, dir) {
        this.changeDetectorRef = changeDetectorRef;
        this.dateFormats = dateFormats;
        this.dateAdapter = dateAdapter;
        this.dir = dir;
        /** Emits when a new month is selected. */
        this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits the selected month. This doesn't imply a change on the selected date */
        this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when any date is activated. */
        this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
        }
        this._activeDate = this.dateAdapter.today();
    }
    /** The date to display in this year view (everything other than the year is ignored). */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {
            this.init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.selectedMonth = this.getMonthInCurrentYear(this._selected);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    ngAfterContentInit() {
        this.init();
    }
    /** Handles when a new month is selected. */
    onMonthSelected(month) {
        const year = this.dateAdapter.getYear(this.activeDate);
        const normalizedDate = this.dateAdapter.createDate(year, month);
        this.monthSelected.emit(normalizedDate);
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);
        this.selectedChange.emit(this.dateAdapter.createDate(year, month, Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));
    }
    /** Handles keydown events on the calendar body when calendar is in year view. */
    handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        const oldActiveDate = this._activeDate;
        const isRtl = this.isRtl();
        const VERTICAL_SHIFT = 4;
        const PAGE_SHIFT = 10;
        const MAX_MONTH_INDEX = 11;
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -this.dateAdapter.getMonth(this._activeDate));
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]:
                this.activeDate =
                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]:
                this.activeDate =
                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["SPACE"]:
                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this.focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Initializes this year view. */
    init() {
        this.selectedMonth = this.getMonthInCurrentYear(this.selected);
        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());
        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);
        const monthNames = this.dateAdapter.getMonthNames('short');
        // First row of months only contains 5 elements so we can fit the year label on the same row.
        // tslint:disable-next-line:no-magic-numbers
        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
            .map((row) => row.map((month) => this.createCellForMonth(month + this.dateAdapter.firstMonth, monthNames[month])));
        this.changeDetectorRef.markForCheck();
    }
    /** Focuses the active cell after the microtask queue is empty. */
    focusActiveCell() {
        this.mcCalendarBody.focusActiveCell();
    }
    /**
     * Gets the month in this year that the given Date falls on.
     * Returns null if the given Date is in another year.
     */
    getMonthInCurrentYear(date) {
        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?
            this.dateAdapter.getMonth(date) : null;
    }
    /** Creates an McCalendarCell for the given month. */
    createCellForMonth(month, monthName) {
        const ariaLabel = this.dateAdapter.format(this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month), this.dateFormats.monthYearA11yLabel);
        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);
        return new McCalendarCell(month, newMonthName, ariaLabel, this.shouldEnableMonth(month));
    }
    /** Whether the given month is enabled. */
    shouldEnableMonth(month) {
        const activeYear = this.dateAdapter.getYear(this.activeDate);
        if (month === undefined || month === null ||
            this.isYearAndMonthAfterMaxDate(activeYear, month) ||
            this.isYearAndMonthBeforeMinDate(activeYear, month)) {
            return false;
        }
        if (!this.dateFilter) {
            return true;
        }
        const firstOfMonth = this.dateAdapter.createDate(activeYear, month);
        // If any date in the month is enabled count the month as enabled.
        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month; date = this.dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Tests whether the combination month/year is after this.maxDate, considering
     * just the month and year of this.maxDate
     */
    isYearAndMonthAfterMaxDate(year, month) {
        if (this.maxDate) {
            const maxYear = this.dateAdapter.getYear(this.maxDate);
            const maxMonth = this.dateAdapter.getMonth(this.maxDate);
            return year > maxYear || (year === maxYear && month > maxMonth);
        }
        return false;
    }
    /**
     * Tests whether the combination month/year is before this.minDate, considering
     * just the month and year of this.minDate
     */
    isYearAndMonthBeforeMinDate(year, month) {
        if (this.minDate) {
            const minYear = this.dateAdapter.getYear(this.minDate);
            const minMonth = this.dateAdapter.getMonth(this.minDate);
            return year < minYear || (year === minYear && month < minMonth);
        }
        return false;
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
    /** Determines whether the user has the RTL layout direction. */
    isRtl() {
        return this.dir && this.dir.value === 'rtl';
    }
}
McYearView.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-year-view',
                exportAs: 'mcYearView',
                template: "<table class=\"mc-calendar__table\">\n    <thead class=\"mc-calendar__table-header\">\n    <tr>\n        <th class=\"mc-calendar__table-header-divider\" colspan=\"4\"></th>\n    </tr>\n    </thead>\n    <tbody mc-calendar-body\n           [label]=\"yearLabel\"\n           [rows]=\"months\"\n           [todayValue]=\"todayMonth\"\n           [selectedValue]=\"selectedMonth\"\n           [labelMinRequiredCells]=\"2\"\n           [numCols]=\"4\"\n           [cellAspectRatio]=\"4 / 7\"\n           [activeCell]=\"dateAdapter.getMonth(activeDate)\"\n           (selectedValueChange)=\"onMonthSelected($event)\"\n           (keydown)=\"handleCalendarBodyKeydown($event)\">\n    </tbody>\n</table>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
McYearView.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["MC_DATE_FORMATS"],] }] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] }
];
McYearView.propDecorators = {
    activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    mcCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McCalendarBody, { static: false },] }]
};

/**
 * Possible views for the calendar.
 * @docs-private
 */
var McCalendarView;
(function (McCalendarView) {
    McCalendarView["Month"] = "month";
    McCalendarView["Year"] = "year";
    McCalendarView["MultiYear"] = "multi-year";
})(McCalendarView || (McCalendarView = {}));
/** Default header for McCalendar */
class McCalendarHeader {
    constructor(intl, calendar, dateAdapter, dateFormats, changeDetectorRef) {
        this.intl = intl;
        this.calendar = calendar;
        this.dateAdapter = dateAdapter;
        this.dateFormats = dateFormats;
        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());
    }
    /** The label for the current calendar view. */
    get periodButtonText() {
        if (this.calendar.currentView === McCalendarView.Month) {
            const label = this.dateAdapter.format(this.calendar.activeDate, this.dateFormats.monthYearLabel);
            return label[0].toLocaleUpperCase() + label.substr(1);
        }
        if (this.calendar.currentView === McCalendarView.Year) {
            return this.dateAdapter.getYearName(this.calendar.activeDate);
        }
        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);
        const firstYearInView = this.dateAdapter.getYearName(
        // tslint:disable-next-line:no-magic-numbers
        this.dateAdapter.createDate(activeYear - activeYear % 24));
        const lastYearInView = this.dateAdapter.getYearName(
        // tslint:disable-next-line:no-magic-numbers
        this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24));
        return `${firstYearInView} \u2013 ${lastYearInView}`;
    }
    get periodButtonLabel() {
        return this.calendar.currentView === McCalendarView.Month ?
            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;
    }
    /** The label for the previous button. */
    get prevButtonLabel() {
        return {
            [McCalendarView.Month]: this.intl.prevMonthLabel,
            [McCalendarView.Year]: this.intl.prevYearLabel,
            [McCalendarView.MultiYear]: this.intl.prevMultiYearLabel
        }[this.calendar.currentView];
    }
    /** The label for the next button. */
    get nextButtonLabel() {
        return {
            [McCalendarView.Month]: this.intl.nextMonthLabel,
            [McCalendarView.Year]: this.intl.nextYearLabel,
            [McCalendarView.MultiYear]: this.intl.nextMultiYearLabel
        }[this.calendar.currentView];
    }
    /** Handles user clicks on the period label. */
    currentPeriodClicked() {
        if ([McCalendarView.Month, McCalendarView.MultiYear].includes(this.calendar.currentView)) {
            this.calendar.currentView = McCalendarView.Year;
        }
        else if (this.calendar.currentView === McCalendarView.Year) {
            this.calendar.currentView = McCalendarView.Month;
        }
    }
    /** Handles user clicks on the previous button. */
    previousClicked() {
        if (this.calendar.currentView === McCalendarView.Month) {
            this.calendar.activeDate = this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1);
        }
        else {
            this.calendar.activeDate = this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === McCalendarView.Year ? -1 : -yearsPerPage);
        }
    }
    /** Handles user clicks on the next button. */
    nextClicked() {
        if (this.calendar.currentView === McCalendarView.Month) {
            this.calendar.activeDate = this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1);
        }
        else {
            this.calendar.activeDate = this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === McCalendarView.Year ? 1 : yearsPerPage);
        }
    }
    /** Whether the previous period button is enabled. */
    previousEnabled() {
        if (!this.calendar.minDate) {
            return true;
        }
        return !this.calendar.minDate || !this.isSameView(this.calendar.activeDate, this.calendar.minDate);
    }
    /** Whether the next period button is enabled. */
    nextEnabled() {
        return !this.calendar.maxDate || !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);
    }
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    isSameView(firstDate, secondDate) {
        const firstYear = this.dateAdapter.getYear(firstDate);
        const secondYear = this.dateAdapter.getYear(secondDate);
        const firstMonth = this.dateAdapter.getMonth(firstDate);
        const secondMonth = this.dateAdapter.getMonth(secondDate);
        if (this.calendar.currentView === McCalendarView.Month) {
            return firstYear === secondYear && firstMonth === secondMonth;
        }
        if (this.calendar.currentView === McCalendarView.Year) {
            return firstYear === secondYear;
        }
        // Otherwise we are in 'multi-year' view.
        return Math.floor(firstYear / yearsPerPage) === Math.floor(secondYear / yearsPerPage);
    }
}
McCalendarHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-calendar-header',
                template: "<button mc-button\n        [tabindex]=\"'-1'\"\n        class=\"mc-button_transparent mc-calendar__period-button\"\n        (click)=\"currentPeriodClicked()\">\n    {{ periodButtonText }}\n\n    <i class=\"mc mc-icon\"\n       [class.mc-angle-up-M_16]=\"calendar.currentView !== 'month'\"\n       [class.mc-angle-down-M_16]=\"calendar.currentView === 'month'\">\n    </i>\n</button>\n\n<div class=\"mc-calendar-spacer\"></div>\n\n<button mc-button\n        [tabindex]=\"'-1'\"\n        class=\"mc-button_transparent mc-calendar__previous-button\"\n        [disabled]=\"!previousEnabled()\"\n        (click)=\"previousClicked()\">\n\n    <i mc-icon=\"mc-angle-left-L_16\"></i>\n</button>\n\n<button mc-button\n        [tabindex]=\"'-1'\"\n        class=\"mc-button_transparent mc-calendar__next-button\"\n        [disabled]=\"!nextEnabled()\"\n        (click)=\"nextClicked()\">\n\n    <i mc-icon=\"mc-angle-right-L_16\"></i>\n</button>\n",
                exportAs: 'mcCalendarHeader',
                host: {
                    class: 'mc-calendar-header'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
McCalendarHeader.ctorParameters = () => [
    { type: McDatepickerIntl },
    { type: McCalendar, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(() => McCalendar),] }] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["MC_DATE_FORMATS"],] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] }
];
/**
 * A calendar that is used as part of the datepicker.
 * @docs-private
 */
class McCalendar {
    constructor(intl, dateAdapter, dateFormats, changeDetectorRef) {
        this.dateAdapter = dateAdapter;
        this.dateFormats = dateFormats;
        this.changeDetectorRef = changeDetectorRef;
        /** Whether the calendar should be started in month or year view. */
        this.startView = McCalendarView.Month;
        /** Emits when the currently selected date changes. */
        this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /**
         * Emits the year chosen in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /**
         * Emits the month chosen in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when any date is selected. */
        this.userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /**
         * Emits whenever there is a state change that the header may need to respond to.
         */
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        /**
         * Used for scheduling that focus should be moved to the active cell on the next tick.
         * We need to schedule it, rather than do it immediately, because we have to wait
         * for Angular to re-evaluate the view children.
         */
        this.moveFocusOnNextTick = false;
        if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
        }
        this.intlChanges = intl.changes.subscribe(() => {
            changeDetectorRef.markForCheck();
            this.stateChanges.next();
        });
    }
    /** A date representing the period (month or year) to start the calendar in. */
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     */
    get activeDate() {
        return this.clampedActiveDate;
    }
    set activeDate(value) {
        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);
        this.stateChanges.next();
    }
    /** Whether the calendar is in month view. */
    get currentView() {
        return this._currentView;
    }
    set currentView(value) {
        this._currentView = value;
        this.moveFocusOnNextTick = true;
    }
    ngAfterContentInit() {
        this.calendarHeaderPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["ComponentPortal"](this.headerComponent || McCalendarHeader);
        this.activeDate = this.startAt || this.dateAdapter.today();
        // Assign to the private property since we don't want to move focus on init.
        this._currentView = this.startView;
    }
    ngAfterViewChecked() {
        if (this.moveFocusOnNextTick) {
            this.moveFocusOnNextTick = false;
            this.focusActiveCell();
        }
    }
    ngOnDestroy() {
        this.intlChanges.unsubscribe();
        this.stateChanges.complete();
    }
    ngOnChanges(changes) {
        const change = changes.minDate || changes.maxDate || changes.dateFilter;
        if (change && !change.firstChange) {
            const view = this.getCurrentViewComponent();
            if (view) {
                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are
                // passed down to the view via data bindings which won't be up-to-date when we call `init`.
                this.changeDetectorRef.detectChanges();
                view.init();
            }
        }
        this.stateChanges.next();
    }
    focusActiveCell() {
        this.getCurrentViewComponent().focusActiveCell();
    }
    /** Updates today's date after an update of the active date */
    updateTodaysDate() {
        const view = this.currentView === McCalendarView.Month ? this.monthView :
            (this.currentView === McCalendarView.Year ? this.yearView : this.multiYearView);
        view.ngAfterContentInit();
    }
    /** Handles date selection in the month view. */
    dateSelected(date) {
        if (!this.dateAdapter.sameDate(date, this.selected)) {
            this.selectedChange.emit(date);
        }
    }
    /** Handles year selection in the multiyear view. */
    yearSelectedInMultiYearView(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /** Handles month selection in the year view. */
    monthSelectedInYearView(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    userSelected() {
        this.userSelection.emit();
    }
    /** Handles year/month selection in the multi-year/year views. */
    goToDateInView(date, view) {
        this.activeDate = date;
        this.currentView = view;
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
    /** Returns the component instance that corresponds to the current calendar view. */
    getCurrentViewComponent() {
        return this.monthView || this.yearView || this.multiYearView;
    }
}
McCalendar.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-calendar',
                exportAs: 'mcCalendar',
                template: "<ng-template [cdkPortalOutlet]=\"calendarHeaderPortal\"></ng-template>\n\n<div class=\"mc-calendar__content\" [ngSwitch]=\"currentView\">\n    <mc-month-view\n        *ngSwitchCase=\"'month'\"\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (selectedChange)=\"dateSelected($event)\"\n        (userSelection)=\"userSelected()\">\n    </mc-month-view>\n\n    <mc-year-view\n        *ngSwitchCase=\"'year'\"\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (monthSelected)=\"monthSelectedInYearView($event)\"\n        (selectedChange)=\"goToDateInView($event, 'multi-year')\">\n    </mc-year-view>\n\n    <mc-multi-year-view\n        *ngSwitchCase=\"'multi-year'\"\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        (yearSelected)=\"yearSelectedInMultiYearView($event)\"\n        (selectedChange)=\"goToDateInView($event, 'month')\">\n    </mc-multi-year-view>\n</div>\n",
                host: {
                    class: 'mc-calendar'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-calendar{display:block}.mc-calendar-header{display:flex;padding:var(--mc-datepicker-calendar-size-padding-top,16px) var(--mc-datepicker-calendar-size-padding-horizontal,8px) var(--mc-datepicker-calendar-size-padding-blocks,12px) var(--mc-datepicker-calendar-size-padding-horizontal,8px)}.mc-calendar__content{padding:0 var(--mc-datepicker-calendar-size-padding-horizontal,8px) var(--mc-datepicker-calendar-size-padding-horizontal,8px) var(--mc-datepicker-calendar-size-padding-horizontal,8px);outline:none}.mc-calendar-spacer{flex:1 1 auto}.mc-calendar__period-button{min-width:0}.mc-calendar__previous-button:after{border-left-width:var(--mc-datepicker-calendar-size-icon-border-width,2px);transform:var(--mc-datepicker-calendar-size-icon-prev-icon-transform,translateX(2px) rotate(-45deg))}.mc-calendar__next-button:after{border-right-width:var(--mc-datepicker-calendar-size-icon-border-width,2px);transform:var(--mc-datepicker-calendar-size-icon-nex-icon-transform,translateX(-2px) rotate(45deg))}.mc-calendar__table{border-spacing:0;border-collapse:collapse;width:100%}.mc-calendar__table-header th{text-align:center;height:30px}.mc-calendar__table-header th.mc-calendar__table-header-divider{position:relative;height:calc(var(--mc-datepicker-calendar-size-padding-blocks, 12px) - 2px)}.mc-calendar__table-header th.mc-calendar__table-header-divider:after{content:\"\";position:absolute;top:0;left:calc(-1 * var(--mc-datepicker-calendar-size-padding-horizontal, 8px));right:calc(-1 * var(--mc-datepicker-calendar-size-padding-horizontal, 8px));height:var(--mc-datepicker-calendar-size-divider-width,1px)}"]
            },] }
];
/** @nocollapse */
McCalendar.ctorParameters = () => [
    { type: McDatepickerIntl },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["MC_DATE_FORMATS"],] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] }
];
McCalendar.propDecorators = {
    startAt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    headerComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    startView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    userSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    monthView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McMonthView, { static: false },] }],
    yearView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McYearView, { static: false },] }],
    multiYearView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McMultiYearView, { static: false },] }]
};

/**
 * Animations used by the mosaic datepicker.
 * @docs-private
 */
const mcDatepickerAnimations = {
    /** Transforms the height of the datepicker's calendar. */
    transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["trigger"])('transformPanel', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["style"])({
            opacity: 0,
            transform: 'scale(1, 0.8)'
        })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["style"])({
            opacity: 1,
            transform: 'scale(1, 1)'
        }))),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["style"])({ opacity: 0 })))
    ]),
    /** Fades in the content of the calendar. */
    fadeInCalendar: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["trigger"])('fadeInCalendar', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["style"])({ opacity: 0 })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["style"])({ opacity: 1 })),
        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_17__["animate"])('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
    ])
};
// todo should be put into polyfils
// https://github.com/angular/angular/issues/24769
if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector;
}

// tslint:disable:no-unbound-method
/** Used to generate a unique ID for each datepicker instance. */
let datepickerUid = 0;
/** Injection token that determines the scroll handling while the calendar is open. */
const MC_DATEPICKER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["InjectionToken"]('mc-datepicker-scroll-strategy');
/** @docs-private */
// tslint:disable-next-line:naming-convention
function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MC_DATEPICKER_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"]],
    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY
};
/**
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * McCalendar directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 * @docs-private
 */
class McDatepickerContent {
}
McDatepickerContent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-datepicker__content',
                exportAs: 'mcDatepickerContent',
                template: "<mc-calendar [id]=\"datepicker.id\"\n             [ngClass]=\"datepicker.panelClass\"\n             [startAt]=\"datepicker.startAt\"\n             [startView]=\"datepicker.startView\"\n             [minDate]=\"datepicker.minDate\"\n             [maxDate]=\"datepicker.maxDate\"\n             [dateFilter]=\"datepicker.dateFilter\"\n             [headerComponent]=\"datepicker.calendarHeaderComponent\"\n             [selected]=\"datepicker.selected\"\n             [dateClass]=\"datepicker.dateClass\"\n             [@fadeInCalendar]=\"'enter'\"\n             (selectedChange)=\"datepicker.select($event)\"\n             (yearSelected)=\"datepicker.selectYear($event)\"\n             (monthSelected)=\"datepicker.selectMonth($event)\"\n             (userSelection)=\"datepicker.close()\">\n</mc-calendar>\n",
                host: {
                    class: 'mc-datepicker__content',
                    '[@transformPanel]': '"enter"'
                },
                animations: [
                    mcDatepickerAnimations.transformPanel,
                    mcDatepickerAnimations.fadeInCalendar
                ],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-calendar{display:block}.mc-calendar-header{display:flex;padding:var(--mc-datepicker-calendar-size-padding-top,16px) var(--mc-datepicker-calendar-size-padding-horizontal,8px) var(--mc-datepicker-calendar-size-padding-blocks,12px) var(--mc-datepicker-calendar-size-padding-horizontal,8px)}.mc-calendar__content{padding:0 var(--mc-datepicker-calendar-size-padding-horizontal,8px) var(--mc-datepicker-calendar-size-padding-horizontal,8px) var(--mc-datepicker-calendar-size-padding-horizontal,8px);outline:none}.mc-calendar-spacer{flex:1 1 auto}.mc-calendar__period-button{min-width:0}.mc-calendar__previous-button:after{border-left-width:var(--mc-datepicker-calendar-size-icon-border-width,2px);transform:var(--mc-datepicker-calendar-size-icon-prev-icon-transform,translateX(2px) rotate(-45deg))}.mc-calendar__next-button:after{border-right-width:var(--mc-datepicker-calendar-size-icon-border-width,2px);transform:var(--mc-datepicker-calendar-size-icon-nex-icon-transform,translateX(-2px) rotate(45deg))}.mc-calendar__table{border-spacing:0;border-collapse:collapse;width:100%}.mc-calendar__table-header th{text-align:center;height:30px}.mc-calendar__table-header th.mc-calendar__table-header-divider{position:relative;height:calc(var(--mc-datepicker-calendar-size-padding-blocks, 12px) - 2px)}.mc-calendar__table-header th.mc-calendar__table-header-divider:after{content:\"\";position:absolute;top:0;left:calc(-1 * var(--mc-datepicker-calendar-size-padding-horizontal, 8px));right:calc(-1 * var(--mc-datepicker-calendar-size-padding-horizontal, 8px));height:var(--mc-datepicker-calendar-size-divider-width,1px)}.mc-datepicker__content{display:block;border-width:1px;border-style:solid}.mc-datepicker__content .mc-calendar{width:296px;height:348px}.mc-datepicker__content .mc-calendar__next-button[disabled],.mc-datepicker__content .mc-calendar__previous-button[disabled]{border:0}"]
            },] }
];
McDatepickerContent.propDecorators = {
    calendar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: [McCalendar, { static: false },] }]
};
// TODO: We use a component instead of a directive here so the user can use implicit
// template reference variables (e.g. #d vs #d="mcDatepicker"). We can change this to a directive
// if angular adds support for `exportAs: '$implicit'` on directives.
/** Component responsible for managing the datepicker popup/dialog. */
class McDatepicker {
    constructor(overlay, ngZone, viewContainerRef, scrollStrategy, dateAdapter, dir, document) {
        this.overlay = overlay;
        this.ngZone = ngZone;
        this.viewContainerRef = viewContainerRef;
        this.dateAdapter = dateAdapter;
        this.dir = dir;
        this.document = document;
        this._hasBackdrop = false;
        this._opened = false;
        /** The view that the calendar should start in. */
        this.startView = McCalendarView.Month;
        /**
         * Emits selected year in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /**
         * Emits selected month in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        this.backdropClass = 'cdk-overlay-transparent-backdrop';
        /** Emits when the datepicker has been opened. */
        this.openedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when the datepicker has been closed. */
        this.closedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** The id for the datepicker calendar. */
        this.id = `mc-datepicker-${datepickerUid++}`;
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        /** Emits when the datepicker is disabled. */
        this.disabledChange = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        /** Emits new selected date when selected date changes. */
        this.selectedChanged = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        this.validSelected = null;
        /** The element that was focused before the datepicker was opened. */
        this.focusedElementBeforeOpen = null;
        /** Subscription to value changes in the associated input element. */
        this.inputSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
        this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
        if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        this.scrollStrategy = scrollStrategy;
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(value) {
        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /** The date to open the calendar to initially. */
    get startAt() {
        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
        // selected value is.
        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);
    }
    set startAt(value) {
        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    /** Whether the datepicker pop-up should be disabled. */
    get disabled() {
        return this._disabled === undefined && this.datepickerInput ? this.datepickerInput.disabled : this._disabled;
    }
    set disabled(value) {
        const newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this.disabledChange.next(newValue);
        }
    }
    /** Whether the calendar is open. */
    get opened() {
        return this._opened;
    }
    set opened(value) {
        Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value) ? this.open() : this.close();
    }
    /** The currently selected date. */
    get selected() {
        return this.validSelected;
    }
    set selected(value) {
        this.validSelected = value;
    }
    /** The minimum selectable date. */
    get minDate() {
        return this.datepickerInput && this.datepickerInput.min;
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this.datepickerInput && this.datepickerInput.max;
    }
    get dateFilter() {
        return this.datepickerInput && this.datepickerInput.dateFilter;
    }
    get value() {
        return this.selected;
    }
    ngOnDestroy() {
        this.close();
        this.inputSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
        this.disabledChange.complete();
        if (this.popupRef) {
            this.popupRef.dispose();
            this.popupComponentRef = null;
        }
    }
    /** Selects the given date */
    select(date) {
        const oldValue = this.selected;
        this.selected = date;
        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {
            this.selectedChanged.next(date);
        }
    }
    /** Emits the selected year in multiyear view */
    selectYear(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /** Emits selected month in year view */
    selectMonth(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    /**
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    registerInput(input) {
        if (this.datepickerInput) {
            throw Error('A McDatepicker can only be associated with a single input.');
        }
        this.datepickerInput = input;
        this.inputSubscription = this.datepickerInput.valueChange
            .subscribe((value) => {
            var _a;
            this.selected = value;
            // @ts-ignore
            if (this.popupComponentRef) {
                (_a = this.popupComponentRef.instance.calendar.monthView) === null || _a === void 0 ? void 0 : _a.init();
                this.popupComponentRef.instance.calendar.activeDate = value;
            }
        });
    }
    /** Open the calendar. */
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this.datepickerInput) {
            throw Error('Attempted to open an McDatepicker with no associated input.');
        }
        if (this.document) {
            this.focusedElementBeforeOpen = this.document.activeElement;
        }
        this.openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    }
    /** Close the calendar. */
    close(restoreFocus = true) {
        if (!this._opened) {
            return;
        }
        if (this.popupRef && this.popupRef.hasAttached()) {
            this.popupRef.detach();
        }
        if (this.calendarPortal && this.calendarPortal.isAttached) {
            this.calendarPortal.detach();
        }
        const completeClose = () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this._opened) {
                this._opened = false;
                this.closedStream.emit();
                this.focusedElementBeforeOpen = null;
                if (restoreFocus) {
                    this.datepickerInput.elementRef.nativeElement.focus();
                }
            }
        };
        if (this.focusedElementBeforeOpen && typeof this.focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            if (restoreFocus) {
                this.focusedElementBeforeOpen.focus();
            }
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    toggle() {
        if (this.datepickerInput.isReadOnly) {
            return;
        }
        this._opened ? this.close() : this.open();
    }
    /** Open the calendar as a popup. */
    openAsPopup() {
        if (!this.calendarPortal) {
            this.calendarPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["ComponentPortal"](McDatepickerContent, this.viewContainerRef);
        }
        if (!this.popupRef) {
            this.createPopup();
        }
        if (!this.popupRef.hasAttached()) {
            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);
            this.popupComponentRef.instance.datepicker = this;
            // Update the position once the calendar has rendered.
            this.ngZone.onStable.asObservable()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1))
                .subscribe(() => this.popupRef.updatePosition());
        }
    }
    /** Create the popup. */
    createPopup() {
        const overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["OverlayConfig"]({
            positionStrategy: this.createPopupPositionStrategy(),
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass,
            direction: this.dir,
            scrollStrategy: this.scrollStrategy(),
            panelClass: 'mc-datepicker__popup'
        });
        this.popupRef = this.overlay.create(overlayConfig);
        this.closeSubscription = this.closingActions()
            .subscribe(() => this.close());
    }
    closingActions() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(this.popupRef.backdropClick(), this.popupRef.outsidePointerEvents());
    }
    /** Create the popup PositionStrategy. */
    createPopupPositionStrategy() {
        return this.overlay.position()
            .flexibleConnectedTo(this.datepickerInput.elementRef)
            .withTransformOriginOn('.mc-datepicker__content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom'
            }
        ]);
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
}
McDatepicker.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-datepicker',
                template: '',
                exportAs: 'mcDatepicker',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                providers: [{ provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_15__["McFormFieldControl"], useExisting: McDatepicker }]
            },] }
];
/** @nocollapse */
McDatepicker.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewContainerRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [MC_DATEPICKER_SCROLL_STRATEGY,] }] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"],] }] }
];
McDatepicker.propDecorators = {
    hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    startAt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    calendarHeaderComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    startView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    dateClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['opened',] }],
    closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"], args: ['closed',] }]
};

// @ts-nocheck
// tslint:disable:naming-convention
var DateParts;
(function (DateParts) {
    DateParts["year"] = "y";
    DateParts["month"] = "m";
    DateParts["day"] = "d";
})(DateParts || (DateParts = {}));
class DateDigit {
    constructor(value, start, length, firstMonth = 0) {
        this.value = value;
        this.start = start;
        this.length = length;
        this.firstMonth = firstMonth;
        this.maxDays = 31;
        if (value === DateParts.day) {
            this.parse = this.parseDay;
        }
        else if (value === DateParts.month) {
            this.parse = this.parseMonth;
        }
        else if (value === DateParts.year) {
            this.parse = this.parseYear;
        }
    }
    get maxMonth() {
        // tslint:disable-next-line:no-magic-numbers binary-expression-operand-order
        return 11 + this.firstMonth;
    }
    get end() {
        return this.start + this.length;
    }
    get isDay() {
        return this.value === DateParts.day;
    }
    get isMonth() {
        return this.value === DateParts.month;
    }
    get isYear() {
        return this.value === DateParts.year;
    }
    get fullName() {
        if (this.isDay) {
            return 'date';
        }
        if (this.isMonth) {
            return 'month';
        }
        if (this.isYear) {
            return 'year';
        }
    }
    parseDay(value) {
        const parsedValue = parseInt(value);
        if (parsedValue === 0) {
            return 1;
        }
        if (parsedValue > this.maxDays) {
            return this.maxDays;
        }
        return parsedValue;
    }
    parseMonth(value) {
        const parsedValue = parseInt(value);
        if (parsedValue === 0) {
            return 1;
        }
        if (parsedValue > this.maxMonth) {
            return this.maxMonth;
        }
        return parsedValue;
    }
    parseYear(value) {
        const parsedValue = parseInt(value);
        if (parsedValue === 0) {
            return 1;
        }
        return parsedValue;
    }
}
/** @docs-private */
const MC_DATEPICKER_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_13__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(() => McDatepickerInput),
    multi: true
};
/** @docs-private */
const MC_DATEPICKER_VALIDATORS = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_13__["NG_VALIDATORS"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(() => McDatepickerInput),
    multi: true
};
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use McDatepickerInputEvent instead.
 */
class McDatepickerInputEvent {
    constructor(
    /** Reference to the datepicker input component that emitted the event. */
    target, 
    /** Reference to the native input element associated with the datepicker input. */
    targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
let uniqueComponentIdSuffix = 0;
/** Directive used to connect an input to a McDatepicker. */
class McDatepickerInput {
    constructor(elementRef, renderer, dateAdapter, dateFormats) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.dateAdapter = dateAdapter;
        this.dateFormats = dateFormats;
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        this.controlType = 'datepicker';
        this.focused = false;
        /** Emits when the value changes (either due to user input or programmatic change). */
        this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when the disabled state has changed */
        this.disabledChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        this._disabled = false;
        this.incorrectInput = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when a `change` event is fired on this `<input>`. */
        this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        /** Emits when an `input` event is fired on this `<input>`. */
        this.dateInput = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        this.uid = `mc-datepicker-${uniqueComponentIdSuffix++}`;
        this.datepickerSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
        this.localeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
        /** Whether the last value set on the input was valid. */
        this.lastValueValid = false;
        this.onTouched = () => { };
        this.onInput = () => {
            this.correctCursorPosition();
            const formattedValue = this.replaceSymbols(this.viewValue);
            const newTimeObj = this.getDateFromString(formattedValue);
            this.lastValueValid = !!newTimeObj;
            if (!newTimeObj) {
                this.control.updateValueAndValidity();
                this._value = null;
                return;
            }
            this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.dateFormats.dateInput), true);
            this.selectNextDigitByCursor(this.selectionStart);
            this.updateValue(newTimeObj);
        };
        this.parseOnBlur = () => {
            if (!this.viewValue) {
                return null;
            }
            const date = this.getDefaultValue();
            const viewDigits = this.viewValue
                .split(this.separator)
                .map((value) => value)
                .filter((value) => value);
            const [firsViewDigit, secondViewDigit, thirdViewDigit] = viewDigits;
            // tslint:disable-next-line:no-magic-numbers
            if (viewDigits.length !== 3) {
                this.lastValueValid = false;
                this._value = null;
                return setTimeout(() => this.control.updateValueAndValidity());
            }
            date[this.firstDigit.fullName] = this.firstDigit.parse(firsViewDigit);
            date[this.secondDigit.fullName] = this.secondDigit.parse(secondViewDigit);
            date[this.thirdDigit.fullName] = this.thirdDigit.parse(thirdViewDigit);
            const [digitWithYear, viewDigitWithYear] = [this.firstDigit, this.secondDigit, this.thirdDigit]
                .reduce((acc, digit, index) => digit.value === DateParts.year ? [digit, viewDigits[index]] : acc, []);
            // tslint:disable-next-line:no-magic-numbers
            if (viewDigitWithYear.length < 3) {
                // tslint:disable-next-line:no-magic-numbers
                date.year += date.year < 30 ? 2000 : 1900;
            }
            else if (viewDigitWithYear.length < digitWithYear.length) {
                this.lastValueValid = false;
                this._value = null;
                return setTimeout(() => this.control.updateValueAndValidity());
            }
            const newTimeObj = this.getValidDateOrNull(this.dateAdapter.createDateTime(date.year, date.month, date.date, date.hours, date.minutes, date.seconds, date.milliseconds));
            this.lastValueValid = !!newTimeObj;
            this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.dateFormats.dateInput), true);
            this.updateValue(newTimeObj);
        };
        this.updateLocaleParams = () => {
            this.setFormat(this.dateFormats.dateInput);
            this.value = this.value;
        };
        this.cvaOnChange = () => { };
        this.validatorOnChange = () => { };
        /** The form control validator for whether the input parses. */
        this.parseValidator = () => {
            return this.focused ||
                this.empty ||
                this.lastValueValid ? null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };
        };
        /** The form control validator for the min date. */
        this.minValidator = (control) => {
            const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return (!this.min || !controlValue ||
                this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?
                null : { mcDatepickerMin: { min: this.min, actual: controlValue } };
        };
        /** The form control validator for the max date. */
        this.maxValidator = (control) => {
            const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return (!this.max || !controlValue ||
                this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?
                null : { mcDatepickerMax: { max: this.max, actual: controlValue } };
        };
        /** The form control validator for the date filter. */
        this.filterValidator = (control) => {
            const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?
                null : { mcDatepickerFilter: true };
        };
        this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_13__["Validators"].compose([
            this.parseValidator,
            this.minValidator,
            this.maxValidator,
            this.filterValidator
        ]);
        if (!this.dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats) {
            throw createMissingDateImplError('MC_DATE_FORMATS');
        }
        this.setFormat(dateFormats.dateInput);
        this.localeSubscription = dateAdapter.localeChanges
            .subscribe(this.updateLocaleParams);
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /** The datepicker that this input is associated with. */
    set mcDatepicker(value) {
        if (!value) {
            return;
        }
        this.datepicker = value;
        this.datepicker.registerInput(this);
        this.datepickerSubscription.unsubscribe();
        this.datepickerSubscription = this.datepicker.selectedChanged
            .subscribe((selected) => {
            this.value = selected;
            this.cvaOnChange(selected);
            this.onTouched();
            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));
        });
    }
    /** Function that can be used to filter out dates within the datepicker. */
    set mcDatepickerFilter(value) {
        this.dateFilter = value;
        this.validatorOnChange();
    }
    /** The value of the input. */
    get value() {
        return this._value;
    }
    set value(value) {
        let newValue = this.dateAdapter.deserialize(value);
        this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);
        newValue = this.getValidDateOrNull(newValue);
        const oldDate = this.value;
        this._value = newValue;
        this.formatValue(newValue);
        if (!this.dateAdapter.sameDate(oldDate, newValue)) {
            this.valueChange.emit(newValue);
        }
    }
    /** The minimum valid date. */
    get min() {
        return this._min;
    }
    set min(value) {
        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.validatorOnChange();
    }
    /** The maximum valid date. */
    get max() {
        return this._max;
    }
    set max(value) {
        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.validatorOnChange();
    }
    /** Whether the datepicker-input is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        const newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
        const element = this.elementRef.nativeElement;
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this.disabledChange.emit(newValue);
        }
        // We need to null check the `blur` method, because it's undefined during SSR.
        if (newValue && element.blur) {
            // Normally, native input elements automatically blur if they turn disabled. This behavior
            // is problematic, because it would mean that it triggers another change detection cycle,
            // which then causes a changed after checked error if the input element was focused before.
            element.blur();
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this.uid;
    }
    set mcValidationTooltip(tooltip) {
        if (!tooltip) {
            return;
        }
        tooltip.mcMouseEnterDelay = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_14__["validationTooltipShowDelay"];
        tooltip.mcTrigger = 'manual';
        tooltip.mcTooltipClass = 'mc-tooltip_warning';
        tooltip.initElementRefListeners();
        this.incorrectInput.subscribe(() => {
            if (tooltip.isTooltipOpen) {
                return;
            }
            tooltip.show();
            setTimeout(() => tooltip.hide(), _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_14__["validationTooltipHideDelay"]);
        });
    }
    get empty() {
        return !this.viewValue && !this.isBadInput();
    }
    get viewValue() {
        return this.elementRef.nativeElement.value;
    }
    get ngControl() {
        return this.control;
    }
    get isReadOnly() {
        return this.elementRef.nativeElement.readOnly;
    }
    get selectionStart() {
        return this.elementRef.nativeElement.selectionStart;
    }
    set selectionStart(value) {
        this.elementRef.nativeElement.selectionStart = value;
    }
    get selectionEnd() {
        return this.elementRef.nativeElement.selectionEnd;
    }
    set selectionEnd(value) {
        this.elementRef.nativeElement.selectionEnd = value;
    }
    onContainerClick() {
        this.focus();
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
    focusChanged(isFocused) {
        if (isFocused !== this.focused) {
            this.focused = isFocused;
            this.onTouched();
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.datepickerSubscription.unsubscribe();
        this.localeSubscription.unsubscribe();
        this.valueChange.complete();
        this.disabledChange.complete();
    }
    /** @docs-private */
    registerOnValidatorChange(fn) {
        this.validatorOnChange = fn;
    }
    /** @docs-private */
    validate(control) {
        this.setControl(control);
        return this.validator ? this.validator(control) : null;
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this.value = value;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this.cvaOnChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onKeyDown(event) {
        if (this.isReadOnly) {
            return;
        }
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        if (this.isLetterKey(event)) {
            event.preventDefault();
            this.incorrectInput.emit();
        }
        else if (this.isKeyForOpen(event)) {
            event.preventDefault();
            this.datepicker.open();
        }
        else if (this.isKeyForClose(event)) {
            event.preventDefault();
            this.datepicker.close();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["TAB"]) {
            this.datepicker.close(false);
        }
        else if (this.isKeyForByPass(event)) {
            return;
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["SPACE"]) {
            this.spaceKeyHandler(event);
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]].includes(keyCode)) {
            event.preventDefault();
            this.verticalArrowKeyHandler(keyCode);
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]].includes(keyCode)) {
            event.preventDefault();
            this.changeCaretPosition(keyCode);
        }
        else if (/^\D$/.test(event.key)) {
            event.preventDefault();
            const newValue = this.getNewValue(event.key, this.selectionStart);
            const formattedValue = this.replaceSymbols(newValue);
            if (newValue !== formattedValue) {
                this.setViewValue(formattedValue, true);
                setTimeout(this.onInput);
            }
            else {
                this.incorrectInput.emit();
            }
        }
        else {
            setTimeout(this.onInput);
        }
    }
    onChange() {
        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));
    }
    /** Handles blur events on the input. */
    onBlur() {
        // Reformat the input only if we have a valid value.
        this.parseOnBlur();
        this.focusChanged(false);
    }
    onPaste($event) {
        var _a, _b, _c;
        $event.preventDefault();
        const rawValue = $event.clipboardData.getData('text');
        const match = rawValue.match(/^(?<first>\d+)\W(?<second>\d+)\W(?<third>\d+)$/);
        if (!((_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.first) || !((_b = match === null || match === void 0 ? void 0 : match.groups) === null || _b === void 0 ? void 0 : _b.second) || !((_c = match === null || match === void 0 ? void 0 : match.groups) === null || _c === void 0 ? void 0 : _c.third)) {
            this.setViewValue(rawValue);
            return rawValue;
        }
        const value = [match.groups.first, match.groups.second, match.groups.third].join(this.separator);
        const newTimeObj = this.getDateFromString(value);
        if (!newTimeObj) {
            this.setViewValue(value);
            return value;
        }
        this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.dateFormats.dateInput));
        this.updateValue(newTimeObj);
    }
    setFormat(format) {
        this.separator = format.match(/[aA-zZ]+(?<separator>\W|\D)[aA-zZ]+/).groups.separator;
        this.separatorPositions = format
            .split('')
            .reduce((acc, item, index) => this.separator === item ? [...acc, index + 1] : acc, []);
        this.getDigitPositions(format);
    }
    updateValue(newValue) {
        if (!this.dateAdapter.sameDate(newValue, this.value)) {
            this._value = newValue;
            this.cvaOnChange(newValue);
            this.valueChange.emit(newValue);
            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));
        }
        this.control.updateValueAndValidity();
    }
    isKeyForClose(event) {
        // tslint:disable-next-line: deprecation
        return (event.altKey && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]) || event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ESCAPE"];
    }
    isKeyForOpen(event) {
        // tslint:disable-next-line: deprecation
        return event.altKey && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"];
    }
    isLetterKey(event) {
        return Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["isLetterKey"])(event) && !event.ctrlKey && !event.metaKey;
    }
    isKeyForByPass(event) {
        // tslint:disable-next-line: deprecation
        return (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["hasModifierKey"])(event) && (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["isVerticalMovement"])(event.keyCode) || Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["isHorizontalMovement"])(event.keyCode))) ||
            event.ctrlKey ||
            event.metaKey ||
            // tslint:disable-next-line: deprecation
            [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DELETE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["BACKSPACE"]].includes(event.keyCode);
    }
    spaceKeyHandler(event) {
        event.preventDefault();
        if (this.selectionStart === this.selectionEnd) {
            const value = this.getNewValue(event.key, this.selectionStart);
            this.setViewValue(value);
            setTimeout(this.onInput);
        }
        else if (this.selectionStart !== this.selectionEnd) {
            this.selectNextDigit(this.selectionStart, true);
        }
    }
    getNewValue(key, position) {
        return [this.viewValue.slice(0, position), key, this.viewValue.slice(position)].join('');
    }
    setViewValue(value, savePosition = false) {
        if (savePosition) {
            const selectionStart = this.selectionStart;
            const selectionEnd = this.selectionEnd;
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);
            this.selectionStart = selectionStart;
            this.selectionEnd = selectionEnd;
        }
        else {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);
        }
    }
    replaceSymbols(value) {
        return value
            .split(this.separator)
            .map((part) => part.replace(/^([0-9]+)\W$/, '0$1'))
            .join(this.separator);
    }
    getDateFromString(timeString) {
        if (!timeString || timeString.length < this.firstDigit.length) {
            return null;
        }
        const date = this.getDefaultValue();
        const viewDigits = timeString
            .split(this.separator)
            .map((value) => value);
        const [firsViewDigit, secondViewDigit, thirdViewDigit] = viewDigits;
        if (viewDigits.length === 1) {
            if (firsViewDigit.length < this.firstDigit.length) {
                return null;
            }
            date[this.firstDigit.fullName] = this.firstDigit.parse(firsViewDigit);
            date.month = 0;
            // tslint:disable-next-line:no-magic-numbers
        }
        else if (viewDigits.length === 2) {
            if (firsViewDigit.length < this.firstDigit.length || secondViewDigit.length < this.secondDigit.length) {
                return null;
            }
            date[this.firstDigit.fullName] = this.firstDigit.parse(firsViewDigit);
            date[this.secondDigit.fullName] = this.secondDigit.parse(secondViewDigit);
            // tslint:disable-next-line:no-magic-numbers
        }
        else if (viewDigits.length === 3) {
            if (firsViewDigit.length < this.firstDigit.length ||
                secondViewDigit.length < this.secondDigit.length ||
                thirdViewDigit.length < this.thirdDigit.length) {
                return null;
            }
            date[this.firstDigit.fullName] = this.firstDigit.parse(firsViewDigit);
            date[this.secondDigit.fullName] = this.secondDigit.parse(secondViewDigit);
            date[this.thirdDigit.fullName] = this.thirdDigit.parse(thirdViewDigit);
        }
        else {
            return null;
        }
        return this.getValidDateOrNull(this.dateAdapter.createDateTime(date.year, date.month, date.date, date.hours, date.minutes, date.seconds, date.milliseconds));
    }
    getDefaultValue() {
        const defaultValue = this.value || this.dateAdapter.today();
        return {
            year: this.dateAdapter.getYear(defaultValue),
            month: this.dateAdapter.getMonth(defaultValue),
            date: this.dateAdapter.getDate(defaultValue),
            hours: this.dateAdapter.getHours(defaultValue),
            minutes: this.dateAdapter.getMinutes(defaultValue),
            seconds: this.dateAdapter.getSeconds(defaultValue),
            milliseconds: this.dateAdapter.getMilliseconds(defaultValue)
        };
    }
    getTimeStringFromDate(value, timeFormat) {
        if (!value || !this.dateAdapter.isValid(value)) {
            return '';
        }
        return this.dateAdapter.format(value, timeFormat);
    }
    getDateEditMetrics(cursorPosition) {
        for (const digit of [this.firstDigit, this.secondDigit, this.thirdDigit]) {
            if (cursorPosition >= digit.start && cursorPosition <= digit.end) {
                return [digit.value, digit.start, digit.end];
            }
        }
        return [this.thirdDigit.value, this.thirdDigit.start, this.thirdDigit.end];
    }
    incrementDate(dateVal, whatToIncrement) {
        let year = this.dateAdapter.getYear(dateVal);
        let month = this.dateAdapter.getMonth(dateVal);
        let day = this.dateAdapter.getDate(dateVal);
        switch (whatToIncrement) {
            case DateParts.day:
                day++;
                if (day > this.dateAdapter.getNumDaysInMonth(dateVal)) {
                    day = 1;
                }
                break;
            case DateParts.month:
                month++;
                if (month > this.dateAdapter.lastMonth) {
                    month = this.dateAdapter.firstMonth;
                }
                const lastDay = this.getLastDayFor(year, month);
                if (day > lastDay) {
                    day = lastDay;
                }
                break;
            case DateParts.year:
                year++;
                break;
            default:
        }
        return this.createDate(year, month, day);
    }
    getLastDayFor(year, month) {
        return this.dateAdapter.getNumDaysInMonth(this.createDate(year, month, 1));
    }
    decrementDate(dateVal, whatToDecrement) {
        let year = this.dateAdapter.getYear(dateVal);
        let month = this.dateAdapter.getMonth(dateVal);
        let day = this.dateAdapter.getDate(dateVal);
        switch (whatToDecrement) {
            case DateParts.day:
                day--;
                if (day < 1) {
                    day = this.dateAdapter.getNumDaysInMonth(dateVal);
                }
                break;
            case DateParts.month:
                month--;
                if (month < this.dateAdapter.firstMonth) {
                    month = this.dateAdapter.lastMonth;
                }
                const lastDay = this.getLastDayFor(year, month);
                if (day > lastDay) {
                    day = lastDay;
                }
                break;
            case DateParts.year:
                year--;
                break;
            default:
        }
        return this.createDate(year, month, day);
    }
    verticalArrowKeyHandler(keyCode) {
        if (!this.value) {
            return;
        }
        let changedTime;
        const [modifiedTimePart, selectionStart, selectionEnd] = this.getDateEditMetrics(this.selectionStart);
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]) {
            changedTime = this.incrementDate(this.value, modifiedTimePart);
        }
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]) {
            changedTime = this.decrementDate(this.value, modifiedTimePart);
        }
        this.value = changedTime;
        this.selectionStart = selectionStart;
        this.selectionEnd = selectionEnd;
        this.onChange();
        this.stateChanges.next();
    }
    changeCaretPosition(keyCode) {
        if (!this.value) {
            return;
        }
        let cursorPos = this.selectionStart;
        if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]].includes(keyCode)) {
            cursorPos = 0;
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]].includes(keyCode)) {
            cursorPos = this.viewValue.length;
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]) {
            cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]) {
            const nextSeparatorPos = this.viewValue.indexOf(this.separator, cursorPos);
            cursorPos = nextSeparatorPos ? nextSeparatorPos + 1 : 0;
        }
        this.selectDigitByCursor(cursorPos);
    }
    selectDigitByCursor(cursorPos) {
        setTimeout(() => {
            const [, selectionStart, selectionEnd] = this.getDateEditMetrics(cursorPos);
            this.selectionStart = selectionStart;
            this.selectionEnd = selectionEnd;
        });
    }
    selectNextDigitByCursor(cursorPos) {
        setTimeout(() => {
            const [, , endPositionOfCurrentDigit] = this.getDateEditMetrics(cursorPos);
            const [, selectionStart, selectionEnd] = this.getDateEditMetrics(endPositionOfCurrentDigit + 1);
            this.selectionStart = selectionStart;
            this.selectionEnd = selectionEnd;
        });
    }
    selectNextDigit(cursorPos, cycle = false) {
        setTimeout(() => {
            const lastValue = cycle ? 0 : cursorPos;
            const nextSeparatorPos = this.viewValue.indexOf(this.separator, cursorPos);
            const newCursorPos = nextSeparatorPos > 0 ? nextSeparatorPos + 1 : lastValue;
            const [, selectionStart, selectionEnd] = this.getDateEditMetrics(newCursorPos);
            this.selectionStart = selectionStart;
            this.selectionEnd = selectionEnd;
        });
    }
    /** Checks whether the input is invalid based on the native validation. */
    isBadInput() {
        const validity = this.elementRef.nativeElement.validity;
        return validity && validity.badInput;
    }
    /** Formats a value and sets it on the input element. */
    formatValue(value) {
        const formattedValue = value ? this.dateAdapter.format(value, this.dateFormats.dateInput) : '';
        this.setViewValue(formattedValue);
    }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
    setControl(control) {
        if (!this.control) {
            this.control = control;
        }
    }
    getDigitPositions(format) {
        const formatInLowerCase = format.toLowerCase();
        formatInLowerCase
            .split('')
            .reduce(({ prev, length, start }, value, index, arr) => {
            if (value === this.separator || (arr.length - 1) === index) {
                if (!this.firstDigit) {
                    this.firstDigit = new DateDigit(prev, start, length, this.dateAdapter.firstMonth);
                }
                else if (!this.secondDigit) {
                    this.secondDigit = new DateDigit(prev, start, length, this.dateAdapter.firstMonth);
                }
                else if (!this.thirdDigit) {
                    this.thirdDigit = new DateDigit(prev, start, arr.length - start, this.dateAdapter.firstMonth);
                }
                // tslint:disable:no-parameter-reassignment
                length = 0;
                start = index + 1;
            }
            else {
                length++;
            }
            return { prev: value, length, start };
        }, { length: 0, start: 0 });
        if (!this.firstDigit || !this.secondDigit || !this.thirdDigit) {
            Error(`Can' t use this format: ${format}`);
        }
    }
    createDate(year, month, day) {
        return this.dateAdapter.createDateTime(year, month, day, this.dateAdapter.getHours(this.value), this.dateAdapter.getMinutes(this.value), this.dateAdapter.getSeconds(this.value), this.dateAdapter.getMilliseconds(this.value));
    }
    correctCursorPosition() {
        if (this.selectionStart && this.separatorPositions.includes(this.selectionStart)) {
            this.selectionStart = this.selectionStart - 1;
        }
    }
}
McDatepickerInput.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                selector: 'input[mcDatepicker]',
                exportAs: 'mcDatepickerInput',
                providers: [
                    MC_DATEPICKER_VALUE_ACCESSOR,
                    MC_DATEPICKER_VALIDATORS,
                    { provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_15__["McFormFieldControl"], useExisting: McDatepickerInput }
                ],
                host: {
                    class: 'mc-input mc-datepicker',
                    '[attr.placeholder]': 'placeholder',
                    '[attr.required]': 'required',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',
                    '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',
                    '[attr.autocomplete]': '"off"',
                    '(paste)': 'onPaste($event)',
                    '(change)': 'onChange()',
                    '(focus)': 'focusChanged(true)',
                    '(blur)': 'onBlur()',
                    '(keydown)': 'onKeyDown($event)'
                }
            },] }
];
/** @nocollapse */
McDatepickerInput.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Renderer2"] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_8__["MC_DATE_FORMATS"],] }] }
];
McDatepickerInput.propDecorators = {
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    mcDatepicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    mcDatepickerFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    mcValidationTooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    incorrectInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    dateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }],
    dateInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"] }]
};

/** Can be used to override the icon of a `mcDatepickerToggle`. */
class McDatepickerToggleIcon {
}
McDatepickerToggleIcon.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Directive"], args: [{
                selector: '[mcDatepickerToggleIcon]'
            },] }
];
class McDatepickerToggle {
    constructor(intl, changeDetectorRef) {
        this.intl = intl;
        this.changeDetectorRef = changeDetectorRef;
        this.stateChanges = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        return this._disabled === undefined ? this.datepicker.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    ngOnChanges(changes) {
        if (changes.datepicker) {
            this.watchStateChanges();
        }
    }
    ngOnDestroy() {
        this.stateChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this.watchStateChanges();
    }
    open(event) {
        if (this.datepicker && !this.disabled) {
            this.datepicker.open();
            event.stopPropagation();
        }
    }
    watchStateChanges() {
        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["of"])();
        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?
            this.datepicker.datepickerInput.disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["of"])();
        const datepickerToggled = this.datepicker ?
            Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(this.datepicker.openedStream, this.datepicker.closedStream) :
            Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["of"])();
        this.stateChanges.unsubscribe();
        this.stateChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(this.intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(() => this.changeDetectorRef.markForCheck());
    }
}
McDatepickerToggle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                selector: 'mc-datepicker-toggle',
                template: "<!--todo need simplify this-->\n<button\n    #button\n    mc-button\n    type=\"button\"\n    class=\"mc-datepicker-toggle__button\"\n    aria-haspopup=\"true\"\n    [attr.aria-label]=\"intl.openCalendarLabel\"\n    [attr.tabindex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    (click)=\"open($event)\">\n\n    <i *ngIf=\"!customIcon\" mc-icon=\"mc-calendar_16\" class=\"mc-datepicker-toggle__default-icon\"></i>\n\n    <ng-content select=\"[mcDatepickerToggleIcon]\"></ng-content>\n</button>\n",
                host: {
                    class: 'mc-datepicker-toggle',
                    '[class.mc-active]': 'datepicker && datepicker.opened'
                },
                exportAs: 'mcDatepickerToggle',
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-datepicker-toggle:focus{outline:0}.mc-datepicker-toggle__button.mc-icon-button{width:var(--mc-datepicker-toggle-size-width,30px);height:var(--mc-datepicker-toggle-size-height,30px);margin-left:2px}.mc-form-field-appearance-legacy .mc-form-field-prefix .mc-datepicker-toggle__default-icon,.mc-form-field-appearance-legacy .mc-form-field-suffix .mc-datepicker-toggle__default-icon{width:1em}.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-prefix .mc-datepicker-toggle__default-icon,.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-suffix .mc-datepicker-toggle__default-icon{display:block;width:1.5em;height:1.5em}.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-prefix .mc-icon-button .mc-datepicker-toggle__default-icon,.mc-form-field:not(.mc-form-field-appearance-legacy) .mc-form-field-suffix .mc-icon-button .mc-datepicker-toggle__default-icon{margin:auto}"]
            },] }
];
/** @nocollapse */
McDatepickerToggle.ctorParameters = () => [
    { type: McDatepickerIntl },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] }
];
McDatepickerToggle.propDecorators = {
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    datepicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['for',] }],
    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    customIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ContentChild"], args: [McDatepickerToggleIcon, { static: false },] }],
    button: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: ['button', { static: false },] }]
};

class McDatepickerModule {
}
McDatepickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__["McButtonModule"],
                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["OverlayModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["PortalModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__["McIconModule"]
                ],
                exports: [
                    McCalendar,
                    McCalendarBody,
                    McDatepicker,
                    McDatepickerContent,
                    McDatepickerInput,
                    McDatepickerToggle,
                    McDatepickerToggleIcon,
                    McMonthView,
                    McYearView,
                    McMultiYearView,
                    McCalendarHeader,
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__["McButtonModule"]
                ],
                declarations: [
                    McCalendar,
                    McCalendarBody,
                    McDatepicker,
                    McDatepickerContent,
                    McDatepickerInput,
                    McDatepickerToggle,
                    McDatepickerToggleIcon,
                    McMonthView,
                    McYearView,
                    McMultiYearView,
                    McCalendarHeader
                ],
                providers: [
                    McDatepickerIntl,
                    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER
                ],
                entryComponents: [
                    McDatepickerContent,
                    McCalendarHeader
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "5vLs":
/*!******************************************************!*\
  !*** ./dist/cdk/fesm2015/ptsecurity-cdk-datetime.js ***!
  \******************************************************/
/*! exports provided: DateAdapter, MC_DATE_FORMATS, MC_DATE_LOCALE, MC_DATE_LOCALE_FACTORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateAdapter", function() { return DateAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATE_FORMATS", function() { return MC_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATE_LOCALE", function() { return MC_DATE_LOCALE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DATE_LOCALE_FACTORY", function() { return MC_DATE_LOCALE_FACTORY; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "qCKp");



const MC_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mc-date-formats');

/** InjectionToken for datepicker that can be used to override default locale code. */
const MC_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MC_DATE_LOCALE', {
    providedIn: 'root',
    factory: MC_DATE_LOCALE_FACTORY
});
/** @docs-private */
// tslint:disable-next-line:naming-convention
function MC_DATE_LOCALE_FACTORY() {
    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]);
}
/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */
// tslint:disable-next-line:naming-convention
class DateAdapter {
    constructor() {
        this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
    }
    /** A stream that emits when the locale changes. */
    get localeChanges() {
        return this._localeChanges;
    }
    /**
     * Attempts to deserialize a value to a valid date object. This is different from parsing in that
     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
     * string). The default implementation does not allow any deserialization, it simply checks that
     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
     * method on all of it's `@Input()` properties that accept dates. It is therefore possible to
     * support passing values from your backend directly to these properties by overriding this method
     * to also deserialize the format used by your backend.
     * @param value The value to be deserialized into a date object.
     * @returns The deserialized date object, either a valid date, null if the value can be
     *     deserialized into a null date (e.g. the empty string), or an invalid date.
     */
    deserialize(value) {
        if (value == null || this.isDateInstance(value) && this.isValid(value)) {
            return value;
        }
        return this.invalid();
    }
    /**
     * Sets the locale used for all dates.
     * @param locale The new locale.
     */
    setLocale(locale) {
        this.locale = locale;
        this._localeChanges.next();
    }
    /**
     * Compares two dates.
     * @param first The first date to compare.
     * @param second The second date to compare.
     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
     *     a number greater than 0 if the first date is later.
     */
    compareDate(first, second) {
        return this.getYear(first) - this.getYear(second) ||
            this.getMonth(first) - this.getMonth(second) ||
            this.getDate(first) - this.getDate(second);
    }
    /**
     * Compares two dates.
     * @param first The first date to compare.
     * @param second The second date to compare.
     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
     *     a number greater than 0 if the first date is later.
     */
    compareDateTime(first, second) {
        return this.getYear(first) - this.getYear(second) ||
            this.getMonth(first) - this.getMonth(second) ||
            this.getDate(first) - this.getDate(second) ||
            this.getHours(first) - this.getHours(second) ||
            this.getMinutes(first) - this.getMinutes(second) ||
            this.getSeconds(first) - this.getSeconds(second) ||
            this.getMilliseconds(first) - this.getMilliseconds(second);
    }
    /**
     * Checks if two dates are equal.
     * @param first The first date to check.
     * @param second The second date to check.
     * @returns Whether the two dates are equal.
     *     Null dates are considered equal to other null dates.
     */
    sameDate(first, second) {
        if (first && second) {
            const firstValid = this.isValid(first);
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    /**
     * Clamp the given date between min and max dates.
     * @param date The date to clamp.
     * @param min The minimum value to allow. If null or omitted no min is enforced.
     * @param max The maximum value to allow. If null or omitted no max is enforced.
     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
     *     otherwise `date`.
     */
    clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    }
}

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "6AiE":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tabs.js ***!
  \********************************************************/
/*! exports provided: MC_TABS_CONFIG, McAlignTabsCenterCssStyler, McAlignTabsEndCssStyler, McLightTabsCssStyler, McStretchTabsCssStyler, McTab, McTabBody, McTabBodyPortal, McTabChangeEvent, McTabContent, McTabGroup, McTabGroupBase, McTabGroupMixinBase, McTabHeader, McTabLabel, McTabLabelWrapper, McTabLink, McTabNav, McTabsModule, mcTabsAnimations, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TABS_CONFIG", function() { return MC_TABS_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAlignTabsCenterCssStyler", function() { return McAlignTabsCenterCssStyler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAlignTabsEndCssStyler", function() { return McAlignTabsEndCssStyler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLightTabsCssStyler", function() { return McLightTabsCssStyler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McStretchTabsCssStyler", function() { return McStretchTabsCssStyler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTab", function() { return McTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabBody", function() { return McTabBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabBodyPortal", function() { return McTabBodyPortal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabChangeEvent", function() { return McTabChangeEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabContent", function() { return McTabContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabGroup", function() { return McTabGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabGroupBase", function() { return McTabGroupBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabGroupMixinBase", function() { return McTabGroupMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabHeader", function() { return McTabHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabLabel", function() { return McTabLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabLabelWrapper", function() { return McTabLabelWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabLink", function() { return McTabLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabNav", function() { return McTabNav; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTabsModule", function() { return McTabsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcTabsAnimations", function() { return mcTabsAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return McTabHeaderBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return McTabLabelWrapperBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return McTabLabelWrapperMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return McTabBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return McTabMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return MC_TAB_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return McTabNavBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return McTabNavMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return McTabLinkBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return McTabLinkMixinBase; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/scrolling */ "7KAL");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");














/** Decorates the `ng-template` tags and reads out the template from it. */
class McTabContent {
    constructor(template) {
        this.template = template;
    }
}
McTabContent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{ selector: '[mcTabContent]' },] }
];
/** @nocollapse */
McTabContent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] }
];

const MC_TAB_LABEL = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('McTabLabel');
/** Used to flag tab labels for use with the portal directive */
class McTabLabel extends _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortal"] {
}
McTabLabel.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[mc-tab-label], [mcTabLabel]',
                providers: [{ provide: MC_TAB_LABEL, useExisting: McTabLabel }]
            },] }
];

class McTabBase {
}
// tslint:disable-next-line:naming-convention
const McTabMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabBase);
class McTab extends McTabMixinBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        /** Plain text label for the tab, used when there is no template label. */
        this.textLabel = '';
        /** Emits whenever the internal state of the tab changes. */
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        /**
         * The relatively indexed position where 0 represents the center, negative is left, and positive
         * represents the right.
         */
        this.position = null;
        /**
         * The initial relatively index origin of the tab if it was created and selected after there
         * was already a selected tab. Provides context of what position the tab should originate from.
         */
        this.origin = null;
        /**
         * Whether the tab is currently active.
         */
        this.isActive = false;
        /** Portal that will be the hosted content of the tab */
        this.contentPortal = null;
    }
    /** @docs-private */
    get content() {
        return this.contentPortal;
    }
    get templateLabel() { return this._templateLabel; }
    set templateLabel(value) { this.setTemplateLabelInput(value); }
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    ngOnInit() {
        this.contentPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this.explicitContent || this.implicitContent, this.viewContainerRef);
    }
    /**
     * This has been extracted to a util because of TS 4 and VE.
     * View Engine doesn't support property rename inheritance.
     * TS 4.0 doesn't allow properties to override accessors or vice-versa.
     * @docs-private
     */
    setTemplateLabelInput(value) {
        // Only update the templateLabel via query if there is actually
        // a McTabLabel found. This works around an issue where a user may have
        // manually set `templateLabel` during creation mode, which would then get clobbered
        // by `undefined` when this query resolves.
        if (value) {
            this._templateLabel = value;
        }
    }
}
McTab.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-tab',
                exportAs: 'mcTab',
                // Create a template for the content of the <mc-tab> so that we can grab a reference to this
                // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the
                // tab-group.
                template: '<ng-template><ng-content></ng-content></ng-template>',
                inputs: ['disabled'],
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None
            },] }
];
/** @nocollapse */
McTab.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] }
];
McTab.propDecorators = {
    templateLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [MC_TAB_LABEL,] }],
    explicitContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [McTabContent, { read: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"], static: true },] }],
    implicitContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"], { static: true },] }],
    textLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['label',] }],
    tabId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['tabId',] }]
};

const mcTabsAnimations = {
    /** Animation translates a tab along the X axis. */
    translateTab: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["trigger"])('translateTab', [
        // Note: transitions to `none` instead of 0, because some browsers might blur the content.
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["state"])('center, void, left-origin-center, right-origin-center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({ transform: 'none' })),
        // If the tab is either on the left or right, we additionally add a `min-height` of 1px
        // in order to ensure that the element has a height before its state changes. This is
        // necessary because Chrome does seem to skip the transition in RTL mode if the element does
        // not have a static height and is not rendered. See related issue: #9465
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["state"])('left', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["state"])('right', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["transition"])('* => left, * => right, left => center, right => center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["transition"])('void => left-origin-center', [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({ transform: 'translate3d(-100%, 0, 0)' }),
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')
        ]),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["transition"])('void => right-origin-center', [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["style"])({ transform: 'translate3d(100%, 0, 0)' }),
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_8__["animate"])('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')
        ])
    ])
};

/**
 * Wrapper for the contents of a tab.
 * @docs-private
 */
class McTabBody {
    constructor(elementRef, dir, changeDetectorRef) {
        this.elementRef = elementRef;
        this.dir = dir;
        /** Event emitted when the tab begins to animate towards the center as the active tab. */
        this.onCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted before the centering of the tab begins. */
        this.beforeCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted before the centering of the tab begins. */
        this.afterLeavingCenter = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted when the tab completes its animation towards the center. */
        this.onCentered = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"](true);
        // Note that the default value will always be overwritten by `McTabBody`, but we need one
        // anyway to prevent the animations module from throwing an error if the body is used on its own.
        /** Duration for the tab's animation. */
        this.animationDuration = '0ms';
        /** Subscription to the directionality change observable. */
        this.dirChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        if (this.dir && changeDetectorRef) {
            this.dirChangeSubscription = this.dir.change
                .subscribe((direction) => {
                this.computePositionAnimationState(direction);
                changeDetectorRef.markForCheck();
            });
        }
    }
    /** The shifted index position of the tab body, where zero represents the active center tab. */
    set position(position) {
        this.positionIndex = position;
        this.computePositionAnimationState();
    }
    /**
     * After initialized, check if the content is centered and has an origin. If so, set the
     * special position states that transition the tab from the left or right before centering.
     */
    ngOnInit() {
        if (this.bodyPosition === 'center' && this.origin != null) {
            this.bodyPosition = this.computePositionFromOrigin();
        }
    }
    ngOnDestroy() {
        this.dirChangeSubscription.unsubscribe();
    }
    onTranslateTabStarted(e) {
        const isCentering = this.isCenterPosition(e.toState);
        this.beforeCentering.emit(isCentering);
        if (isCentering) {
            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);
        }
    }
    onTranslateTabComplete(e) {
        // If the transition to the center is complete, emit an event.
        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {
            this.onCentered.emit();
        }
        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {
            this.afterLeavingCenter.emit();
        }
    }
    /** The text direction of the containing app. */
    getLayoutDirection() {
        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /** Whether the provided position state is considered center, regardless of origin. */
    isCenterPosition(position) {
        return position === 'center' || position === 'left-origin-center' || position === 'right-origin-center';
    }
    /** Computes the position state that will be used for the tab-body animation trigger. */
    computePositionAnimationState(dir = this.getLayoutDirection()) {
        if (this.positionIndex < 0) {
            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';
        }
        else if (this.positionIndex > 0) {
            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';
        }
        else {
            this.bodyPosition = 'center';
        }
    }
    /**
     * Computes the position state based on the specified origin position. This is used if the
     * tab is becoming visible immediately after creation.
     */
    computePositionFromOrigin() {
        const dir = this.getLayoutDirection();
        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {
            return 'left-origin-center';
        }
        return 'right-origin-center';
    }
}
McTabBody.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-tab-body',
                template: "<div class=\"mc-tab-body__content\"\n     #content\n     [@translateTab]=\"{\n        value: bodyPosition,\n        params: {animationDuration: animationDuration}\n     }\"\n     (@translateTab.start)=\"onTranslateTabStarted($event)\"\n     (@translateTab.done)=\"onTranslateTabComplete($event)\">\n    <ng-template mcTabBodyHost></ng-template>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                animations: [mcTabsAnimations.translateTab],
                host: {
                    class: 'mc-tab-body'
                },
                styles: [".mc-tab-body__content{height:100%;overflow:auto}.mc-tab-body__content .mc-tab-group_dynamic-height{overflow:hidden}"]
            },] }
];
/** @nocollapse */
McTabBody.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
];
McTabBody.propDecorators = {
    position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    onCentering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    beforeCentering: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    afterLeavingCenter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    onCentered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    portalHost: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortalOutlet"], { static: false },] }],
    content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['content',] }],
    origin: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    animationDuration: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
/**
 * The portal host directive for the contents of the tab.
 * @docs-private
 */
class McTabBodyPortal extends _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortalOutlet"] {
    constructor(componentFactoryResolver, viewContainerRef, host) {
        super(componentFactoryResolver, viewContainerRef);
        this.host = host;
        /** Subscription to events for when the tab body begins centering. */
        this.centeringSub = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        /** Subscription to events for when the tab body finishes leaving from center position. */
        this.leavingSub = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
    }
    /** Set initial visibility or set up subscription for changing visibility. */
    ngOnInit() {
        super.ngOnInit();
        this.centeringSub = this.host.beforeCentering
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(this.host.isCenterPosition(this.host.bodyPosition)))
            .subscribe((isCentering) => {
            if (isCentering && !this.hasAttached()) {
                this.attach(this.host.content);
            }
        });
        this.leavingSub = this.host.afterLeavingCenter
            .subscribe(() => { this.detach(); });
    }
    /** Clean up centering subscription. */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.centeringSub.unsubscribe();
        this.leavingSub.unsubscribe();
    }
}
McTabBodyPortal.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[mcTabBodyHost]'
            },] }
];
/** @nocollapse */
McTabBodyPortal.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
    { type: McTabBody, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(() => McTabBody),] }] }
];

// Boilerplate for applying mixins to McTabLabelWrapper.
/** @docs-private */
class McTabLabelWrapperBase {
}
// tslint:disable-next-line:naming-convention
const McTabLabelWrapperMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabLabelWrapperBase);
/**
 * Used in the `mc-tab-group` view to display tab labels.
 * @docs-private
 */
class McTabLabelWrapper extends McTabLabelWrapperMixinBase {
    constructor(elementRef) {
        super();
        this.elementRef = elementRef;
    }
    /** Sets focus on the wrapper element */
    focus() {
        this.elementRef.nativeElement.focus();
    }
    getOffsetLeft() {
        return this.elementRef.nativeElement.offsetLeft;
    }
    getOffsetWidth() {
        return this.elementRef.nativeElement.offsetWidth;
    }
}
McTabLabelWrapper.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[mcTabLabelWrapper]',
                inputs: ['disabled'],
                host: {
                    '[class.mc-disabled]': 'disabled'
                }
            },] }
];
/** @nocollapse */
McTabLabelWrapper.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
];

const VIEWPORT_THROTTLE_TIME = 150;
const SCROLL_DISTANCE_DELIMITER = 3;
/**
 * The distance in pixels that will be overshot when scrolling a tab label into view. This helps
 * provide a small affordance to the label next to it.
 */
const EXAGGERATED_OVERSCROLL = 60;
// Boilerplate for applying mixins to McTabHeader.
/** @docs-private */
class McTabHeaderBase {
}
/**
 * The header of the tab group which displays a list of all the tabs in the tab group.
 * When the tabs list's width exceeds the width of the header container,
 * then arrows will be displayed to allow the user to scroll
 * left and right across the header.
 * @docs-private
 */
class McTabHeader extends McTabHeaderBase {
    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone) {
        super();
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.viewportRuler = viewportRuler;
        this.dir = dir;
        this.ngZone = ngZone;
        /** Whether the controls for pagination should be displayed */
        this.showPaginationControls = false;
        /** Whether the tab list can be scrolled more towards the end of the tab label list. */
        this.disableScrollAfter = true;
        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */
        this.disableScrollBefore = true;
        /** Event emitted when the option is selected. */
        this.selectFocusedIndex = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted when a label is focused. */
        this.indexFocused = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** The distance in pixels that the tab labels should be translated to the left. */
        this._scrollDistance = 0;
        /** Whether the header should scroll to the selected index after the view has been checked. */
        this.selectedIndexChanged = false;
        /** Emits when the component is destroyed. */
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        this._selectedIndex = 0;
    }
    /** The index of the active tab. */
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        const coercedValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceNumberProperty"])(value);
        this.selectedIndexChanged = this._selectedIndex !== coercedValue;
        this._selectedIndex = coercedValue;
        if (this.keyManager) {
            this.keyManager.updateActiveItem(coercedValue);
        }
    }
    /** Tracks which element has focus; used for keyboard navigation */
    get focusIndex() {
        return this.keyManager ? this.keyManager.activeItemIndex : 0;
    }
    /** When the focus index is set, we must manually send focus to the correct label */
    set focusIndex(value) {
        if (!this.isValidIndex(value) || this.focusIndex === value || !this.keyManager) {
            return;
        }
        this.keyManager.setActiveItem(value);
    }
    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
    get scrollDistance() {
        return this._scrollDistance;
    }
    set scrollDistance(v) {
        this._scrollDistance = Math.max(0, Math.min(this.getMaxScrollDistance(), v));
        // Mark that the scroll distance has changed so that after the view is checked, the CSS
        // transformation can move the header.
        this.scrollDistanceChanged = true;
        this.checkScrollingControls();
    }
    ngAfterContentChecked() {
        // If the number of tab labels have changed, check if scrolling should be enabled
        if (this.tabLabelCount !== this.labelWrappers.length) {
            this.updatePagination();
            this.tabLabelCount = this.labelWrappers.length;
            this.changeDetectorRef.markForCheck();
        }
        // If the selected index has changed, scroll to the label and check if the scrolling controls
        // should be disabled.
        if (this.selectedIndexChanged) {
            this.scrollToLabel(this._selectedIndex);
            this.checkScrollingControls();
            this.selectedIndexChanged = false;
            this.changeDetectorRef.markForCheck();
        }
        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),
        // then translate the header to reflect this.
        if (this.scrollDistanceChanged) {
            this.updateTabScrollPosition();
            this.scrollDistanceChanged = false;
            this.changeDetectorRef.markForCheck();
        }
    }
    handleKeydown(event) {
        // tslint:disable-next-line: deprecation
        switch (event.keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"]:
                this.keyManager.setFirstItemActive();
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]:
                this.keyManager.setLastItemActive();
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]:
                this.selectFocusedIndex.emit(this.focusIndex);
                event.preventDefault();
                break;
            default:
                this.keyManager.onKeydown(event);
        }
    }
    ngAfterContentInit() {
        const dirChange = this.dir ? this.dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])(null);
        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);
        const realign = () => {
            this.updatePagination();
        };
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__["FocusKeyManager"](this.labelWrappers)
            .withHorizontalOrientation(this.getLayoutDirection())
            .withWrap();
        this.keyManager.updateActiveItem(0);
        // Defer the first call in order to allow for slower browsers to lay out the elements.
        // This helps in cases where the user lands directly on a page with paginated tabs.
        typeof requestAnimationFrame === undefined
            ? realign()
            : requestAnimationFrame(realign);
        // On dir change or window resize, update the orientation of
        // the key manager if the direction has changed.
        Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(dirChange, resize)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed))
            .subscribe(() => {
            realign();
            this.keyManager.withHorizontalOrientation(this.getLayoutDirection());
        });
        // If there is a change in the focus key manager we need to emit the `indexFocused`
        // event in order to provide a public event that notifies about focus changes. Also we realign
        // the tabs container by scrolling the new focused tab into the visible section.
        this.keyManager.change
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed))
            .subscribe((newFocusIndex) => {
            this.indexFocused.emit(newFocusIndex);
            this.setTabFocus(newFocusIndex);
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    /**
     * Callback for when the MutationObserver detects that the content has changed.
     */
    onContentChanges() {
        const textContent = this.elementRef.nativeElement.textContent;
        // We need to diff the text content of the header, because the MutationObserver callback
        // will fire even if the text content didn't change which is inefficient and is prone
        // to infinite loops if a poorly constructed expression is passed in.
        if (textContent !== this.currentTextContent) {
            this.currentTextContent = textContent;
            const zoneCallback = () => {
                this.updatePagination();
                this.changeDetectorRef.markForCheck();
            };
            // The content observer runs outside the `NgZone` by default, which
            // means that we need to bring the callback back in ourselves.
            // TODO: Remove null check for `_ngZone` once it's a required parameter.
            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();
        }
    }
    /**
     * Updating the view whether pagination should be enabled or not
     *
     * WARNING: Calling this method can be very costly in terms of performance.  It should be called
     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the
     * page.
     */
    updatePagination() {
        this.checkPaginationEnabled();
        this.checkScrollingControls();
        this.updateTabScrollPosition();
    }
    /**
     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
     * providing a valid index and return true.
     */
    isValidIndex(index) {
        if (!this.labelWrappers) {
            return true;
        }
        const tab = this.labelWrappers
            ? this.labelWrappers.toArray()[index]
            : null;
        return !!tab && !tab.disabled;
    }
    /**
     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
     * scrolling is enabled.
     */
    setTabFocus(tabIndex) {
        if (this.showPaginationControls) {
            this.scrollToLabel(tabIndex);
        }
        if (this.labelWrappers && this.labelWrappers.length) {
            this.labelWrappers.toArray()[tabIndex].focus();
            // Do not let the browser manage scrolling to focus the element, this will be handled
            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width
            // should be the full width minus the offset width.
            const containerEl = this.tabListContainer.nativeElement;
            const dir = this.getLayoutDirection();
            if (dir === 'ltr') {
                containerEl.scrollLeft = 0;
            }
            else {
                containerEl.scrollLeft =
                    containerEl.scrollWidth - containerEl.offsetWidth;
            }
        }
    }
    /** The layout direction of the containing app. */
    getLayoutDirection() {
        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */
    updateTabScrollPosition() {
        const scrollDistance = this.scrollDistance;
        const translateX = this.getLayoutDirection() === 'ltr'
            ? -scrollDistance
            : scrollDistance;
        // Don't use `translate3d` here because we don't want to create a new layer. A new layer
        // seems to cause flickering and overflow in Internet Explorer.
        // See: https://github.com/angular/material2/issues/10276
        // We round the `transform` here, because transforms with sub-pixel precision cause some
        // browsers to blur the content of the element.
        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;
        // Setting the `transform` on IE will change the scroll offset of the parent, causing the
        // position to be thrown off in some cases. We have to reset it ourselves to ensure that
        // it doesn't get thrown off.
        this.tabList.nativeElement.scrollLeft = 0;
    }
    /**
     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
     * the end of the list, respectively). The distance to scroll is computed to be a third of the
     * length of the tab list view window.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     */
    scrollHeader(scrollDir) {
        const viewLength = this.tabListContainer.nativeElement.offsetWidth;
        // Move the scroll distance one-third the length of the tab list's viewport.
        this.scrollDistance +=
            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;
    }
    /**
     * Moves the tab list such that the desired tab label (marked by index) is moved into view.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     */
    scrollToLabel(labelIndex) {
        const selectedLabel = this.labelWrappers
            ? this.labelWrappers.toArray()[labelIndex]
            : null;
        if (!selectedLabel) {
            return;
        }
        // The view length is the visible width of the tab labels.
        const viewLength = this.tabListContainer.nativeElement.offsetWidth;
        let labelBeforePos;
        let labelAfterPos;
        if (this.getLayoutDirection() === 'ltr') {
            labelBeforePos = selectedLabel.getOffsetLeft();
            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
        }
        else {
            labelAfterPos =
                this.tabList.nativeElement.offsetWidth -
                    selectedLabel.getOffsetLeft();
            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
        }
        const beforeVisiblePos = this.scrollDistance;
        const afterVisiblePos = this.scrollDistance + viewLength;
        if (labelBeforePos < beforeVisiblePos) {
            // Scroll header to move label to the before direction
            this.scrollDistance -=
                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
        }
        else if (labelAfterPos > afterVisiblePos) {
            // Scroll header to move label to the after direction
            this.scrollDistance +=
                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
        }
    }
    /**
     * Evaluate whether the pagination controls should be displayed. If the scroll width of the
     * tab list is wider than the size of the header container, then the pagination controls should
     * be shown.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     */
    checkPaginationEnabled() {
        const isEnabled = this.tabList.nativeElement.scrollWidth >
            this.elementRef.nativeElement.offsetWidth;
        if (!isEnabled) {
            this.scrollDistance = 0;
        }
        if (isEnabled !== this.showPaginationControls) {
            this.changeDetectorRef.markForCheck();
        }
        this.showPaginationControls = isEnabled;
    }
    /**
     * Evaluate whether the before and after controls should be enabled or disabled.
     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
     * before button. If the header is at the end of the list (scroll distance is equal to the
     * maximum distance we can scroll), then disable the after button.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     */
    checkScrollingControls() {
        // Check if the pagination arrows should be activated.
        this.disableScrollBefore = this.scrollDistance === 0;
        this.disableScrollAfter =
            this.scrollDistance === this.getMaxScrollDistance();
        this.changeDetectorRef.markForCheck();
    }
    /**
     * Determines what is the maximum length in pixels that can be set for the scroll distance. This
     * is equal to the difference in width between the tab list container and tab header container.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     */
    getMaxScrollDistance() {
        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;
        const viewLength = this.tabListContainer.nativeElement.offsetWidth;
        return lengthOfTabList - viewLength || 0;
    }
}
McTabHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-tab-header',
                template: "<div class=\"mc-tab-header__pagination mc-tab-header__pagination_before mc-elevation-z4\"\n     [class.mc-tab-header_disabled]=\"disableScrollBefore\"\n     (click)=\"scrollHeader('before')\">\n    <div class=\"mc-tab-header__pagination-chevron\"></div>\n</div>\n\n<div class=\"mc-tab-header__content\"\n     #tabListContainer\n     (keydown)=\"handleKeydown($event)\">\n    <div class=\"mc-tab-list\"\n         #tabList\n         role=\"tablist\"\n         (cdkObserveContent)=\"onContentChanges()\">\n        <div class=\"mc-tab-list__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n\n<div class=\"mc-tab-header__pagination mc-tab-header__pagination_after mc-elevation-z4\"\n     [class.mc-tab-header_disabled]=\"disableScrollAfter\"\n     (click)=\"scrollHeader('after')\">\n    <div class=\"mc-tab-header__pagination-chevron\"></div>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                host: {
                    class: 'mc-tab-header',
                    '[class.mc-tab-header__pagination-controls_enabled]': 'showPaginationControls',
                    '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \'rtl\''
                },
                styles: [".mc-tab-header{display:flex}.mc-tab-header__pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mc-tab-header__pagination .mc-tab-header__pagination-controls_enabled{display:flex}.mc-tab-header__pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\"\";height:8px;width:8px}.mc-tab-header__pagination_after,.mc-tab-header_rtl .mc-tab-header__pagination_before{padding-right:4px}.mc-tab-header__pagination_after .mc-tab-header__pagination-chevron,.mc-tab-header_rtl .mc-tab-header__pagination_before .mc-tab-header__pagination-chevron{transform:rotate(45deg)}.mc-tab-header__pagination_before,.mc-tab-header_rtl .mc-tab-header__pagination_after{padding-left:4px}.mc-tab-header__pagination_before .mc-tab-header__pagination-chevron,.mc-tab-header_rtl .mc-tab-header__pagination_after .mc-tab-header__pagination-chevron{transform:rotate(-135deg)}.mc-tab-header_disabled{box-shadow:none;cursor:default}.mc-tab-header__content{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mc-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mc-tab-list__content{display:flex}.mc-tab-group_align-labels-center .mc-tab-list__content{justify-content:center}.mc-tab-group_align-labels-end .mc-tab-list__content{justify-content:flex-end}.mc-tab-group_stretch-labels .mc-tab-label,.mc-tab-group_stretch-labels .mc-tab-label_old{flex-basis:0;flex-grow:1}"]
            },] }
];
/** @nocollapse */
McTabHeader.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
    { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__["ViewportRuler"] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] }
];
McTabHeader.propDecorators = {
    selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    labelWrappers: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [McTabLabelWrapper,] }],
    tabListContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['tabListContainer', { static: true },] }],
    tabList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['tabList', { static: true },] }],
    selectFocusedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    indexFocused: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
};

class McLightTabsCssStyler {
}
McLightTabsCssStyler.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-tab-group[mc-old-tabs], [mc-tab-nav-bar][mc-old-tabs]',
                host: { class: 'mc-tab-group_old' }
            },] }
];
class McAlignTabsCenterCssStyler {
}
McAlignTabsCenterCssStyler.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',
                host: { class: 'mc-tab-group_align-labels-center' }
            },] }
];
class McAlignTabsEndCssStyler {
}
McAlignTabsEndCssStyler.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',
                host: { class: 'mc-tab-group_align-labels-end' }
            },] }
];
class McStretchTabsCssStyler {
}
McStretchTabsCssStyler.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',
                host: { class: 'mc-tab-group_stretch-labels' }
            },] }
];
/** Used to generate unique ID's for each tab component */
let nextId = 0;
/** A simple change event emitted on focus or selection changes. */
class McTabChangeEvent {
}
/** Injection token that can be used to provide the default options the tabs module. */
const MC_TABS_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('MC_TABS_CONFIG');
// Boilerplate for applying mixins to McTabGroup.
/** @docs-private */
class McTabGroupBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McTabGroupMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabGroupBase));
/**
 * Tab-group component.  Supports basic tab pairs (label + content) and includes
 * keyboard navigation.
 */
class McTabGroup extends McTabGroupMixinBase {
    constructor(elementRef, changeDetectorRef, lightTabs, defaultConfig) {
        super(elementRef);
        this.changeDetectorRef = changeDetectorRef;
        /** Position of the tab header. */
        this.headerPosition = 'above';
        /** Output to enable support for two-way binding on `[(selectedIndex)]` */
        this.selectedIndexChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted when focus has changed within a tab group. */
        this.focusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted when the body animation has completed */
        this.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** Event emitted when the tab selection has changed. */
        this.selectedTabChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"](true);
        /** The tab index that should be selected after the content has been checked. */
        this.indexToSelect = 0;
        /** Snapshot of the height of the tab body wrapper before another tab is activated. */
        this.tabBodyWrapperHeight = 0;
        /** Subscription to tabs being added/removed. */
        this.tabsSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        /** Subscription to changes in the tab labels. */
        this.tabLabelSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        this._dynamicHeight = false;
        this._selectedIndex = null;
        this.oldTab = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(lightTabs);
        this.groupId = nextId++;
        this.animationDuration = (defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.animationDuration) || '0ms';
    }
    /** Whether the tab group should grow to the size of the active tab. */
    get dynamicHeight() { return this._dynamicHeight; }
    set dynamicHeight(value) {
        this._dynamicHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
    }
    /** The index of the active tab. */
    get selectedIndex() { return this._selectedIndex; }
    set selectedIndex(value) {
        this.indexToSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceNumberProperty"])(value, null);
    }
    /**
     * After the content is checked, this component knows what tabs have been defined
     * and what the selected index should be. This is where we can know exactly what position
     * each tab should be in according to the new selected index, and additionally we know how
     * a new selected tab should transition in (from the left or right).
     */
    ngAfterContentChecked() {
        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
        // the amount of tabs changes before the actual change detection runs.
        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);
        // If there is a change in selected index, emit a change event. Should not trigger if
        // the selected index has not yet been initialized.
        if (this._selectedIndex !== indexToSelect) {
            const isFirstRun = this._selectedIndex == null;
            if (!isFirstRun) {
                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));
            }
            // Changing these values after change detection has run
            // since the checked content may contain references to them.
            Promise.resolve().then(() => {
                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);
                if (!isFirstRun) {
                    this.selectedIndexChange.emit(indexToSelect);
                }
            });
        }
        // Setup the position for each tab and optionally setup an origin on the next selected tab.
        this.tabs.forEach((tab, index) => {
            tab.position = index - indexToSelect;
            // If there is already a selected tab, then set up an origin for the next selected tab
            // if it doesn't have one already.
            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {
                tab.origin = indexToSelect - this._selectedIndex;
            }
        });
        if (this._selectedIndex !== indexToSelect) {
            this._selectedIndex = indexToSelect;
            this.changeDetectorRef.markForCheck();
        }
    }
    ngAfterContentInit() {
        this.subscribeToTabLabels();
        // Subscribe to changes in the amount of tabs, in order to be
        // able to re-render the content as new tabs are added or removed.
        this.tabsSubscription = this.tabs.changes.subscribe(() => {
            const indexToSelect = this.clampTabIndex(this.indexToSelect);
            // Maintain the previously-selected tab if a new tab is added or removed and there is no
            // explicit change that selects a different tab.
            if (indexToSelect === this._selectedIndex) {
                const tabs = this.tabs.toArray();
                for (let i = 0; i < tabs.length; i++) {
                    if (tabs[i].isActive) {
                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed
                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like
                        // adding a tab within the `selectedIndexChange` event.
                        this.indexToSelect = this._selectedIndex = i;
                        break;
                    }
                }
            }
            this.subscribeToTabLabels();
            this.changeDetectorRef.markForCheck();
        });
    }
    ngOnDestroy() {
        this.tabsSubscription.unsubscribe();
        this.tabLabelSubscription.unsubscribe();
    }
    focusChanged(index) {
        this.focusChange.emit(this.createChangeEvent(index));
    }
    /** Returns a unique id for each tab label element */
    getTabLabelId(i) {
        return `mc-tab-label-${this.groupId}-${i}`;
    }
    /** Returns a unique id for each tab content element */
    getTabContentId(i) {
        return `mc-tab-content-${this.groupId}-${i}`;
    }
    /**
     * Sets the height of the body wrapper to the height of the activating tab if dynamic
     * height property is true.
     */
    setTabBodyWrapperHeight(tabHeight) {
        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) {
            return;
        }
        const wrapper = this.tabBodyWrapper.nativeElement;
        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;
        // This conditional forces the browser to paint the height so that
        // the animation to the new height can have an origin.
        if (this.tabBodyWrapper.nativeElement.offsetHeight) {
            wrapper.style.height = `${tabHeight}px`;
        }
    }
    /** Removes the height of the tab body wrapper. */
    removeTabBodyWrapperHeight() {
        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;
        this.tabBodyWrapper.nativeElement.style.height = '';
        this.animationDone.emit();
    }
    /** Handle click events, setting new selected index if appropriate. */
    handleClick(tab, tabHeader, index) {
        if (!tab.disabled) {
            this.selectedIndex = tabHeader.focusIndex = index;
        }
    }
    /** Retrieves the tabindex for the tab. */
    getTabIndex(tab, index) {
        if (tab.disabled) {
            return null;
        }
        return this.selectedIndex === index ? 0 : -1;
    }
    createChangeEvent(index) {
        const event = new McTabChangeEvent();
        event.index = index;
        if (this.tabs && this.tabs.length) {
            event.tab = this.tabs.toArray()[index];
        }
        return event;
    }
    /**
     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is
     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the
     * binding to be updated, we need to subscribe to changes in it and trigger change detection
     * manually.
     */
    subscribeToTabLabels() {
        if (this.tabLabelSubscription) {
            this.tabLabelSubscription.unsubscribe();
        }
        this.tabLabelSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(...this.tabs.map((tab) => tab.stateChanges))
            .subscribe(() => this.changeDetectorRef.markForCheck());
    }
    /** Clamps the given index to the bounds of 0 and the tabs length. */
    clampTabIndex(index) {
        // Note the `|| 0`, which ensures that values like NaN can't get through
        // and which would otherwise throw the component into an infinite loop
        // (since Mch.max(NaN, 0) === NaN).
        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));
    }
}
McTabGroup.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-tab-group',
                exportAs: 'mcTabGroup',
                template: "<mc-tab-header\n    #tabHeader\n    [selectedIndex]=\"selectedIndex\"\n    (indexFocused)=\"focusChanged($event)\"\n    (selectFocusedIndex)=\"selectedIndex = $event\">\n\n    <div mcTabLabelWrapper\n         cdkMonitorElementFocus\n         [class.mc-tab-label]=\"!oldTab\"\n         [class.mc-tab-label_old]=\"oldTab\"\n         *ngFor=\"let tab of tabs; let i = index\"\n         [id]=\"getTabLabelId(i)\"\n         [attr.tabindex]=\"getTabIndex(tab, i)\"\n         [class.mc-active]=\"selectedIndex == i\"\n         [disabled]=\"tab.disabled\"\n         (click)=\"handleClick(tab, tabHeader, i)\">\n\n        <div class=\"mc-tab-label__content\"\n            [class.mc-tab-label__template]=\"tab.templateLabel\">\n            <!-- If there is a label template, use it. -->\n            <ng-template [ngIf]=\"tab.templateLabel\">\n                <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n            </ng-template>\n\n            <!-- If there is not a label template, fall back to the text label. -->\n            <ng-template [ngIf]=\"!tab.templateLabel\">{{ tab.textLabel }}</ng-template>\n        </div>\n\n        <div class=\"mc-tab-overlay\"></div>\n    </div>\n</mc-tab-header>\n\n<div class=\"mc-tab-body__wrapper\" #tabBodyWrapper>\n    <mc-tab-body\n        *ngFor=\"let tab of tabs; let i = index\"\n        [id]=\"getTabContentId(i)\"\n        [class.mc-tab-body__active]=\"selectedIndex == i\"\n        [content]=\"tab.content\"\n        [position]=\"tab.position\"\n        [origin]=\"tab.origin\"\n        [animationDuration]=\"animationDuration\"\n        (onCentered)=\"removeTabBodyWrapperHeight()\"\n        (onCentering)=\"setTabBodyWrapperHeight($event)\">\n    </mc-tab-body>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                inputs: ['color', 'disabled'],
                host: {
                    class: 'mc-tab-group',
                    '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',
                    '[class.mc-tab-group_inverted-header]': 'headerPosition === "below"'
                },
                styles: [".mc-tab-label.cdk-keyboard-focused:after,.mc-tab-label.mc-active:before,.mc-tab-label:hover:before,.mc-tab-label_old.cdk-keyboard-focused:after{display:block;position:absolute;content:\"\"}.mc-tab-label.mc-active:before,.mc-tab-label:hover:before{bottom:calc(-1 * var(--mc-tabs-size-border-width, 1px));left:0;height:var(--mc-tabs-size-highlight-height,4px);right:0}.mc-tab-group{display:flex;flex-direction:column;box-sizing:border-box;text-align:center;white-space:nowrap}.mc-tab-group.mc-tab-group_inverted-header{flex-direction:column-reverse}.mc-tab-label{position:relative;box-sizing:border-box;display:inline-flex;justify-content:center;align-items:center;height:var(--mc-tabs-size-height,40px);text-align:center;white-space:nowrap;cursor:pointer;padding-right:var(--mc-tabs-size-padding-horizontal,16px);padding-left:var(--mc-tabs-size-padding-horizontal,16px);outline:none;border-bottom-width:var(--mc-tabs-size-border-width,1px);border-bottom-style:solid}.mc-tab-label.mc-active{cursor:default}.mc-tab-label.cdk-keyboard-focused{z-index:1}.mc-tab-label.cdk-keyboard-focused:after{top:calc(-2 * var(--mc-tabs-size-border-width, 1px));right:calc(-1 * var(--mc-tabs-size-border-width, 1px));bottom:calc(-1 * var(--mc-tabs-size-border-width, 1px));left:calc(-1 * var(--mc-tabs-size-border-width, 1px));border-width:calc(var(--mc-tabs-size-border-width, 1px) * 2);border-style:solid;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px);border-bottom:none}.mc-tab-label.mc-disabled{pointer-events:none}.mc-tab-label .mc-tab-overlay{top:-1px;left:0;right:0;bottom:0;pointer-events:none}.mc-tab-label .mc-tab-label__template{display:flex;flex-direction:row;align-items:center}.mc-tab-label .mc-tab-label__template>.mc-icon:first-child{margin-right:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-label .mc-tab-label__template>.mc-icon:nth-child(2){margin-left:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-label.cdk-keyboard-focused+:hover:before{left:calc(calc(var(--mc-tabs-size-border-width, 1px) * 2) - var(--mc-tabs-size-border-width, 1px))}.mc-tab-label.cdk-keyboard-focused:after{top:calc(-1 * var(--mc-tabs-size-border-width, 1px))}.mc-tab-label .mc-tab-overlay{position:absolute;top:0}.mc-tab-label_old{position:relative;box-sizing:border-box;display:inline-flex;justify-content:center;align-items:center;height:var(--mc-tabs-size-height,40px);text-align:center;white-space:nowrap;cursor:pointer;padding-right:var(--mc-tabs-size-padding-horizontal,16px);padding-left:var(--mc-tabs-size-padding-horizontal,16px);outline:none;border-bottom-width:var(--mc-tabs-size-border-width,1px);border-bottom-style:solid;border-top-width:var(--mc-tabs-size-border-width,1px);border-top-style:solid;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px)}.mc-tab-label_old.mc-active{cursor:default}.mc-tab-label_old.cdk-keyboard-focused{z-index:1}.mc-tab-label_old.cdk-keyboard-focused:after{top:calc(-2 * var(--mc-tabs-size-border-width, 1px));right:calc(-1 * var(--mc-tabs-size-border-width, 1px));bottom:calc(-1 * var(--mc-tabs-size-border-width, 1px));left:calc(-1 * var(--mc-tabs-size-border-width, 1px));border-width:calc(var(--mc-tabs-size-border-width, 1px) * 2);border-style:solid;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px);border-bottom:none}.mc-tab-label_old.mc-disabled{pointer-events:none}.mc-tab-label_old .mc-tab-overlay{position:absolute;top:-1px;left:0;right:0;bottom:0;pointer-events:none}.mc-tab-label_old .mc-tab-label__template{display:flex;flex-direction:row;align-items:center}.mc-tab-label_old .mc-tab-label__template>.mc-icon:first-child{margin-right:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-label_old .mc-tab-label__template>.mc-icon:nth-child(2){margin-left:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-label_old.mc-active{padding-right:calc(var(--mc-tabs-size-padding-horizontal, 16px) - var(--mc-tabs-size-border-width, 1px));padding-left:calc(var(--mc-tabs-size-padding-horizontal, 16px) - var(--mc-tabs-size-border-width, 1px));border-width:var(--mc-tabs-size-border-width,1px);border-style:solid}.mc-tab-label_old.mc-active.cdk-keyboard-focused:after{z-index:1;right:calc(-2 * var(--mc-tabs-size-border-width, 1px));left:calc(-2 * var(--mc-tabs-size-border-width, 1px))}.mc-tab-label_old .mc-tab-overlay{border-top:var(--mc-tabs-size-border-width,1px) solid transparent;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px)}.mc-tab-header__content{padding:1px 1px 0}.mc-tab-body__wrapper{display:flex;overflow:hidden;position:relative}.mc-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mc-tab-body.mc-tab-body__active{overflow-x:hidden;overflow-y:auto;position:relative;z-index:1;flex-grow:1}.mc-tab-group.mc-tab-group_dynamic-height .mc-tab-body.mc-tab-body__active{overflow-y:hidden}"]
            },] }
];
/** @nocollapse */
McTabGroup.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"], args: ['mc-old-tabs',] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MC_TABS_CONFIG,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
];
McTabGroup.propDecorators = {
    dynamicHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    tabs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [McTab,] }],
    tabBodyWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['tabBodyWrapper', { static: false },] }],
    tabHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['tabHeader', { static: false },] }],
    headerPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    animationDuration: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    selectedIndexChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    focusChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    animationDone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    selectedTabChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
};

// Boilerplate for applying mixins to McTabNav.
/** @docs-private */
class McTabNavBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McTabNavMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(McTabNavBase);
/**
 * Navigation component matching the styles of the tab group header.
 */
class McTabNav extends McTabNavMixinBase {
    constructor(elementRef) {
        super(elementRef);
    }
}
McTabNav.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: '[mc-tab-nav-bar]',
                exportAs: 'mcTabNavBar, mcTabNav',
                inputs: ['color'],
                template: "<div class=\"mc-tab-links\">\n    <ng-content></ng-content>\n</div>\n",
                host: { class: 'mc-tab-nav-bar' },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.cdk-keyboard-focused:after,.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.cdk-keyboard-focused:after,.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.mc-active:before,.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link:hover:before{display:block;position:absolute;content:\"\"}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.mc-active:before,.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link:hover:before{bottom:calc(-1 * var(--mc-tabs-size-border-width, 1px));left:0;height:var(--mc-tabs-size-highlight-height,4px);right:0}.mc-tab-link{vertical-align:top;text-decoration:none;-webkit-tap-highlight-color:transparent}.mc-tab-group_stretch-labels .mc-tab-link{flex-basis:0;flex-grow:1}.mc-tab-link.mc-disabled{pointer-events:none}.mc-tab-nav-bar{display:flex}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link{position:relative;box-sizing:border-box;display:inline-flex;justify-content:center;align-items:center;height:var(--mc-tabs-size-height,40px);text-align:center;white-space:nowrap;cursor:pointer;padding-right:var(--mc-tabs-size-padding-horizontal,16px);padding-left:var(--mc-tabs-size-padding-horizontal,16px);outline:none;border-bottom-width:var(--mc-tabs-size-border-width,1px);border-bottom-style:solid}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.mc-active{cursor:default}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.cdk-keyboard-focused{z-index:1}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.cdk-keyboard-focused:after{top:calc(-2 * var(--mc-tabs-size-border-width, 1px));right:calc(-1 * var(--mc-tabs-size-border-width, 1px));bottom:calc(-1 * var(--mc-tabs-size-border-width, 1px));left:calc(-1 * var(--mc-tabs-size-border-width, 1px));border-width:calc(var(--mc-tabs-size-border-width, 1px) * 2);border-style:solid;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px);border-bottom:none}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.mc-disabled{pointer-events:none}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link .mc-tab-overlay{top:-1px;left:0;right:0;bottom:0;pointer-events:none}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link .mc-tab-label__template{display:flex;flex-direction:row;align-items:center}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link .mc-tab-label__template>.mc-icon:first-child{margin-right:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link .mc-tab-label__template>.mc-icon:nth-child(2){margin-left:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.cdk-keyboard-focused+:hover:before{left:calc(calc(var(--mc-tabs-size-border-width, 1px) * 2) - var(--mc-tabs-size-border-width, 1px))}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link.cdk-keyboard-focused:after{top:calc(-1 * var(--mc-tabs-size-border-width, 1px))}.mc-tab-nav-bar:not(.mc-tab-group_old) .mc-tab-link .mc-tab-overlay{position:absolute;top:0}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link{position:relative;box-sizing:border-box;display:inline-flex;justify-content:center;align-items:center;height:var(--mc-tabs-size-height,40px);text-align:center;white-space:nowrap;cursor:pointer;padding-right:var(--mc-tabs-size-padding-horizontal,16px);padding-left:var(--mc-tabs-size-padding-horizontal,16px);outline:none;border-bottom-width:var(--mc-tabs-size-border-width,1px);border-bottom-style:solid;border-top-width:var(--mc-tabs-size-border-width,1px);border-top-style:solid;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px)}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.mc-active{cursor:default}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.cdk-keyboard-focused{z-index:1}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.cdk-keyboard-focused:after{top:calc(-2 * var(--mc-tabs-size-border-width, 1px));right:calc(-1 * var(--mc-tabs-size-border-width, 1px));bottom:calc(-1 * var(--mc-tabs-size-border-width, 1px));left:calc(-1 * var(--mc-tabs-size-border-width, 1px));border-width:calc(var(--mc-tabs-size-border-width, 1px) * 2);border-style:solid;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px);border-bottom:none}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.mc-disabled{pointer-events:none}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link .mc-tab-overlay{position:absolute;top:-1px;left:0;right:0;bottom:0;pointer-events:none}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link .mc-tab-label__template{display:flex;flex-direction:row;align-items:center}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link .mc-tab-label__template>.mc-icon:first-child{margin-right:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link .mc-tab-label__template>.mc-icon:nth-child(2){margin-left:var(--mc-tabs-size-label-icon-margin,8px)}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.mc-active{padding-right:calc(var(--mc-tabs-size-padding-horizontal, 16px) - var(--mc-tabs-size-border-width, 1px));padding-left:calc(var(--mc-tabs-size-padding-horizontal, 16px) - var(--mc-tabs-size-border-width, 1px));border-width:var(--mc-tabs-size-border-width,1px);border-style:solid}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link.mc-active.cdk-keyboard-focused:after{z-index:1;right:calc(-2 * var(--mc-tabs-size-border-width, 1px));left:calc(-2 * var(--mc-tabs-size-border-width, 1px))}.mc-tab-nav-bar.mc-tab-group_old .mc-tab-link .mc-tab-overlay{border-top:var(--mc-tabs-size-border-width,1px) solid transparent;border-top-left-radius:var(--mc-tabs-size-border-radius,3px);border-top-right-radius:var(--mc-tabs-size-border-radius,3px)}.mc-tab-links{display:flex;position:relative;padding:1px 1px 0;flex-grow:1}.mc-tab-links .mc-tab-group_align-labels-center{justify-content:center}.mc-tab-links .mc-tab-group_align-labels-end{justify-content:flex-end}"]
            },] }
];
/** @nocollapse */
McTabNav.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
];
// Boilerplate for applying mixins to McTabLink.
class McTabLinkBase {
}
// tslint:disable-next-line:naming-convention
const McTabLinkMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McTabLinkBase));
/**
 * Link inside of a `mc-tab-nav-bar`.
 */
class McTabLink extends McTabLinkMixinBase {
    constructor(elementRef, focusMonitor) {
        super();
        this.elementRef = elementRef;
        this.focusMonitor = focusMonitor;
        /** Whether the tab link is active or not. */
        this.isActive = false;
        this.focusMonitor.monitor(this.elementRef.nativeElement);
    }
    /** Whether the link is active. */
    get active() {
        return this.isActive;
    }
    set active(value) {
        if (value !== this.isActive) {
            this.isActive = value;
        }
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
}
McTabLink.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[mc-tab-link], [mcTabLink]',
                exportAs: 'mcTabLink',
                inputs: ['disabled', 'tabIndex'],
                host: {
                    class: 'mc-tab-link',
                    '[attr.tabindex]': 'tabIndex',
                    '[class.mc-disabled]': 'disabled',
                    '[class.mc-active]': 'active'
                }
            },] }
];
/** @nocollapse */
McTabLink.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] }
];
McTabLink.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};

class McTabsModule {
}
McTabsModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"],
                    _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"]
                ],
                // Don't export all components because some are only to be used internally.
                exports: [
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"],
                    McTabGroup,
                    McTabLabel,
                    McTab,
                    McTabNav,
                    McTabLink,
                    McTabContent,
                    McLightTabsCssStyler,
                    McAlignTabsCenterCssStyler,
                    McAlignTabsEndCssStyler,
                    McStretchTabsCssStyler
                ],
                declarations: [
                    McTabGroup,
                    McTabLabel,
                    McTab,
                    McTabLabelWrapper,
                    McTabNav,
                    McTabLink,
                    McTabBody,
                    McTabBodyPortal,
                    McTabHeader,
                    McTabContent,
                    McLightTabsCssStyler,
                    McAlignTabsCenterCssStyler,
                    McAlignTabsEndCssStyler,
                    McStretchTabsCssStyler
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "6OjK":
/*!********************************************!*\
  !*** ./packages/mosaic/link/public-api.ts ***!
  \********************************************/
/*! exports provided: McLinkModule, McLinkBase, McLinkMixinBase, baseURLRegex, McLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _link_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./link.module */ "b77p");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLinkModule", function() { return _link_module__WEBPACK_IMPORTED_MODULE_0__["McLinkModule"]; });

/* harmony import */ var _link_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./link.component */ "BJwh");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLinkBase", function() { return _link_component__WEBPACK_IMPORTED_MODULE_1__["McLinkBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLinkMixinBase", function() { return _link_component__WEBPACK_IMPORTED_MODULE_1__["McLinkMixinBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "baseURLRegex", function() { return _link_component__WEBPACK_IMPORTED_MODULE_1__["baseURLRegex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLink", function() { return _link_component__WEBPACK_IMPORTED_MODULE_1__["McLink"]; });





/***/ }),

/***/ "6uKg":
/*!*****************************************************************************************!*\
  !*** ./packages/docs/src/app/components/component-viewer/component-viewer.component.ts ***!
  \*****************************************************************************************/
/*! exports provided: ComponentViewerComponent, ComponentOverviewComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentViewerComponent", function() { return ComponentViewerComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentOverviewComponent", function() { return ComponentOverviewComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_component_viewer_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./component-viewer.template.html */ "A+YV");
/* harmony import */ var _component_overview_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-overview.scss */ "lRC7");
/* harmony import */ var _raw_loader_component_overview_template_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! raw-loader!./component-overview.template.html */ "TIT3");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../shared/documentation-items/documentation-items */ "rMhK");
/* harmony import */ var _anchors_anchors_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../anchors/anchors.component */ "Cb09");











let ComponentViewerComponent = class ComponentViewerComponent {
    constructor(routeActivated, docItems) {
        // Listen to changes on the current route for the doc id (e.g. button/checkbox) and the
        // parent route for the section (mosaic/cdk).
        this.docItems = docItems;
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["combineLatest"])([routeActivated.params, routeActivated.parent.params]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["map"])((p) => ({ id: p[0].id, section: p[1].section })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["map"])((p) => ({ doc: docItems.getItemById(p.id, p.section), section: p.section }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this.destroyed))).subscribe((d) => {
            this.componentDocItem = d.doc;
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
    }
};
ComponentViewerComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"] },
    { type: _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_9__["DocumentationItems"] }
];
ComponentViewerComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_5__["Component"])({
        selector: 'docs-component-viewer',
        template: _raw_loader_component_viewer_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewEncapsulation"].None,
        styles: [_component_overview_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"],
        _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_9__["DocumentationItems"]])
], ComponentViewerComponent);

let ComponentOverviewComponent = class ComponentOverviewComponent {
    constructor(componentViewer, router, ref) {
        this.componentViewer = componentViewer;
        this.router = router;
        this.ref = ref;
        this.routeSeparator = '/overview';
        this.documentName = '';
        this.documentLost = false;
        this.isLoad = true;
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this.copyCode = (event) => {
            const codeCopyAnimationTime = 1000;
            const copyBlock = event.target.parentElement.parentElement;
            const range = document.createRange();
            range.selectNodeContents(copyBlock);
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            document.execCommand('copy');
            sel.removeAllRanges();
            copyBlock.classList.add('docs-markdown-code-block_success');
            setTimeout(() => copyBlock.classList.remove('docs-markdown-code-block_success'), codeCopyAnimationTime);
        };
        this.currentUrl = this.getRoute(router.url);
        this.router.events.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this.destroyed)).subscribe((event) => {
            if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_6__["NavigationStart"]) {
                const rootUrl = this.getRoute(event.url);
                if (rootUrl !== this.currentUrl) {
                    this.currentUrl = rootUrl;
                    this.isLoad = false;
                }
            }
        });
    }
    getRoute(route) {
        return route.split(this.routeSeparator)[0];
    }
    scrollToSelectedContentSection() {
        this.documentLost = false;
        this.showView();
        this.createCopyIcons();
        if (this.anchorsComponent) {
            this.anchorsComponent.setScrollPosition();
        }
    }
    createCopyIcons() {
        const codeBlocks = document.querySelectorAll('.docs-markdown__pre .docs-markdown__code');
        codeBlocks.forEach((codeBlock) => {
            // Creating copy code Block
            const copyBlock = document.createElement('span');
            copyBlock.className = 'docs-markdown-code-block';
            // Creating copy success message
            const copySuccessBlock = document.createElement('span');
            copySuccessBlock.className = 'docs-markdown-code-block__copied';
            copySuccessBlock.innerText = 'Скопировано';
            const succeedIcon = document.createElement('i');
            succeedIcon.className = 'mc mc-check_16';
            copySuccessBlock.prepend(succeedIcon);
            // Adding copy success message to copy code Block
            copyBlock.appendChild(copySuccessBlock);
            // Creating copy Icon
            const copyIcon = document.createElement('i');
            copyIcon.className = 'mc mc-copy_16 docs-markdown__code-icon';
            copyIcon.addEventListener('click', this.copyCode);
            // Adding copy Icon to copy code Block
            copyBlock.appendChild(copyIcon);
            codeBlock.prepend(copyBlock);
        });
    }
    showDocumentLostAlert() {
        this.documentLost = true;
        this.showView();
        if (this.anchorsComponent) {
            this.anchorsComponent.setScrollPosition();
        }
    }
    showView() {
        this.documentName = this.componentViewer.componentDocItem.id;
        this.isLoad = true;
        this.ref.detectChanges();
    }
    ngOnDestroy() {
        this.destroyed.next();
    }
};
ComponentOverviewComponent.ctorParameters = () => [
    { type: ComponentViewerComponent },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectorRef"] }
];
ComponentOverviewComponent.propDecorators = {
    anchorsComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewChild"], args: ['toc', { static: false },] }]
};
ComponentOverviewComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_5__["Component"])({
        selector: 'component-overview',
        template: _raw_loader_component_overview_template_html__WEBPACK_IMPORTED_MODULE_3__["default"],
        animations: [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('fadeInOut', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('fadeIn', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
                    opacity: 1
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('fadeOut', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
                    opacity: 0
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('fadeIn => fadeOut', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('0s')
                ]),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('fadeOut => fadeIn', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('0.3s')
                ])
            ])
        ],
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewEncapsulation"].None
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [ComponentViewerComponent,
        _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"],
        _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectorRef"]])
], ComponentOverviewComponent);



/***/ }),

/***/ "7oHS":
/*!**************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-form-field.js ***!
  \**************************************************************/
/*! exports provided: McCleaner, McFormField, McFormFieldBase, McFormFieldControl, McFormFieldMixinBase, McFormFieldModule, McFormFieldWithoutBorders, McHint, McPrefix, McStepper, McSuffix, getMcFormFieldMissingControlError, getMcFormFieldYouCanNotUseCleanerInNumberInputError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCleaner", function() { return McCleaner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormField", function() { return McFormField; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormFieldBase", function() { return McFormFieldBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormFieldControl", function() { return McFormFieldControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormFieldMixinBase", function() { return McFormFieldMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormFieldModule", function() { return McFormFieldModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McFormFieldWithoutBorders", function() { return McFormFieldWithoutBorders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McHint", function() { return McHint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McPrefix", function() { return McPrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McStepper", function() { return McStepper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSuffix", function() { return McSuffix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcFormFieldMissingControlError", function() { return getMcFormFieldMissingControlError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcFormFieldYouCanNotUseCleanerInNumberInputError", function() { return getMcFormFieldYouCanNotUseCleanerInNumberInputError; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "kU1M");








class McCleaner {
}
McCleaner.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-cleaner',
                exportAs: 'mcCleaner',
                template: `<i class="mc-icon_light" mc-icon="mc-close-circle_16" [color]="'primary'"></i>`,
                host: {
                    class: 'mc-cleaner'
                }
            },] }
];

/** An interface which allows a control to work inside of a `MсFormField`. */
// tslint:disable-next-line:naming-convention
class McFormFieldControl {
}

function getMcFormFieldMissingControlError() {
    return Error('mc-form-field must contain a McFormFieldControl.');
}
function getMcFormFieldYouCanNotUseCleanerInNumberInputError() {
    return Error(`You can't use mc-cleaner with input that have type="number"`);
}

let nextUniqueId$1 = 0;
class McHint {
    constructor() {
        this.id = `mc-hint-${nextUniqueId$1++}`;
    }
}
McHint.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: 'mc-hint',
                host: {
                    class: 'mc-hint',
                    '[attr.id]': 'id'
                }
            },] }
];
McHint.propDecorators = {
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

class McPrefix {
}
McPrefix.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mcPrefix]'
            },] }
];

class McStepper {
    constructor() {
        this.stepUp = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.stepDown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    connectTo(numberInput) {
        if (!numberInput) {
            return;
        }
        this.stepUp.subscribe(() => {
            numberInput.stepUp(numberInput.step);
        });
        this.stepDown.subscribe(() => {
            numberInput.stepDown(numberInput.step);
        });
    }
    onStepUp($event) {
        this.stepUp.emit();
        $event.preventDefault();
    }
    onStepDown($event) {
        this.stepDown.emit();
        $event.preventDefault();
    }
}
McStepper.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-stepper',
                template: `
        <i class="mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16"
           (mousedown)="onStepUp($event)">
        </i>
        <i class="mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16"
           (mousedown)="onStepDown($event)">
        </i>
    `
            },] }
];
McStepper.propDecorators = {
    stepUp: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    stepDown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
};

class McSuffix {
}
McSuffix.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mcSuffix]'
            },] }
];

let nextUniqueId = 0;
class McFormFieldBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McFormFieldMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(McFormFieldBase);
class McFormField extends McFormFieldMixinBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef, _changeDetectorRef) {
        super(_elementRef);
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        // Unique id for the internal form field label.
        this.labelId = `mc-form-field-label-${nextUniqueId++}`;
        this.hovered = false;
        this.canCleanerClearByEsc = true;
        this.$unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
    }
    get hasHint() {
        return this.hint && this.hint.length > 0;
    }
    get hasSuffix() {
        return this.suffix && this.suffix.length > 0;
    }
    get hasPrefix() {
        return this.prefix && this.prefix.length > 0;
    }
    get hasCleaner() {
        return !!this.cleaner;
    }
    get hasStepper() {
        return !!this.stepper;
    }
    get canShowCleaner() {
        return this.hasCleaner &&
            this.control &&
            this.control.ngControl
            ? this.control.ngControl.value && !this.control.disabled
            : false;
    }
    get disabled() {
        return this.control && this.control.disabled;
    }
    get canShowStepper() {
        var _a;
        return this.hasStepper &&
            !this.disabled &&
            (((_a = this.control) === null || _a === void 0 ? void 0 : _a.focused) || this.hovered);
    }
    ngAfterContentInit() {
        if (this.control.numberInput && this.hasCleaner) {
            this.cleaner = null;
            throw getMcFormFieldYouCanNotUseCleanerInNumberInputError();
        }
        this.validateControlChild();
        if (this.control.controlType) {
            this._elementRef.nativeElement.classList.add(`mc-form-field-type-${this.control.controlType}`);
        }
        // Subscribe to changes in the child control state in order to update the form field UI.
        this.control.stateChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])())
            .subscribe(() => {
            this._changeDetectorRef.markForCheck();
        });
        if (this.hasStepper) {
            this.stepper.connectTo(this.control.numberInput);
        }
        // Run change detection if the value changes.
        const valueChanges = this.control.ngControl && this.control.ngControl.valueChanges || rxjs__WEBPACK_IMPORTED_MODULE_5__["EMPTY"];
        Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(valueChanges)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this.$unsubscribe))
            .subscribe(() => this._changeDetectorRef.markForCheck());
    }
    ngAfterContentChecked() {
        this.validateControlChild();
    }
    ngAfterViewInit() {
        // Avoid animations on load.
        this._changeDetectorRef.detectChanges();
    }
    clearValue($event) {
        $event.stopPropagation();
        if (this.control && this.control.ngControl) {
            this.control.ngControl.reset();
            this.control.focus();
        }
    }
    onContainerClick($event) {
        if (this.control.onContainerClick) {
            this.control.onContainerClick($event);
        }
    }
    onKeyDown(event) {
        // tslint:disable-next-line:deprecation
        if (this.canCleanerClearByEsc && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] && this.control.focused && this.hasCleaner) {
            if (this.control && this.control.ngControl) {
                this.control.ngControl.reset();
            }
            event.preventDefault();
        }
    }
    onHoverChanged(isHovered) {
        if (isHovered !== this.hovered) {
            this.hovered = isHovered;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Gets an ElementRef for the element that a overlay attached to the form-field should be
     * positioned relative to.
     */
    getConnectedOverlayOrigin() {
        return this.connectionContainerRef || this._elementRef;
    }
    /** Determines whether a class from the NgControl should be forwarded to the host element. */
    shouldForward(prop) {
        const ngControl = this.control ? this.control.ngControl : null;
        return ngControl && ngControl[prop];
    }
    ngOnDestroy() {
        this.$unsubscribe.next();
        this.$unsubscribe.complete();
    }
    /** Throws an error if the form field's control is missing. */
    validateControlChild() {
        if (!this.control) {
            throw getMcFormFieldMissingControlError();
        }
    }
}
McFormField.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-form-field',
                exportAs: 'mcFormField',
                template: "<div class=\"mc-form-field__container\" (click)=\"onContainerClick($event)\">\n\n    <div class=\"mc-form-field__prefix\" *ngIf=\"hasPrefix\">\n        <ng-content select=\"[mcPrefix]\"></ng-content>\n    </div>\n\n    <div class=\"mc-form-field__infix\">\n        <ng-content></ng-content>\n    </div>\n\n    <div class=\"mc-form-field__suffix\" *ngIf=\"hasSuffix\">\n        <ng-content select=\"[mcSuffix]\"></ng-content>\n    </div>\n\n    <div class=\"mc-form-field__cleaner\"\n         *ngIf=\"canShowCleaner && !hasSuffix\"\n         (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <ng-content *ngIf=\"canShowStepper\" select=\"mc-stepper\"></ng-content>\n</div>\n\n<div class=\"mc-form-field__hint\">\n    <ng-content select=\"mc-hint\"></ng-content>\n</div>\n",
                host: {
                    class: 'mc-form-field',
                    '[class.mc-form-field_invalid]': 'control.errorState',
                    '[class.mc-form-field_has-prefix]': 'hasPrefix',
                    '[class.mc-form-field_has-suffix]': 'hasSuffix',
                    '[class.mc-form-field_has-cleaner]': 'canShowCleaner',
                    '[class.mc-form-field_has-stepper]': 'canShowStepper',
                    '[class.mc-disabled]': 'control.disabled',
                    '[class.mc-focused]': 'control.focused',
                    '[class.ng-untouched]': 'shouldForward("untouched")',
                    '[class.ng-touched]': 'shouldForward("touched")',
                    '[class.ng-pristine]': 'shouldForward("pristine")',
                    '[class.ng-dirty]': 'shouldForward("dirty")',
                    '[class.ng-valid]': 'shouldForward("valid")',
                    '[class.ng-invalid]': 'shouldForward("invalid")',
                    '[class.ng-pending]': 'shouldForward("pending")',
                    '(keydown)': 'onKeyDown($event)',
                    '(mouseenter)': 'onHoverChanged(true)',
                    '(mouseleave)': 'onHoverChanged(false)'
                },
                inputs: ['color'],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-form-field{position:relative;display:inline-block;width:100%;border-radius:var(--mc-form-field-size-border-radius,3px)}.mc-form-field:hover{z-index:1}.mc-form-field.mc-focused{z-index:2}.mc-hint{display:block}.mc-form-field__hint>.mc-hint{margin-top:var(--mc-form-field-hint-size-margin-top,4px)}.mc-form-field__container{position:relative;border:var(--mc-form-field-size-border-width,1px) solid transparent;border-radius:var(--mc-form-field-size-border-radius,3px)}.mc-form-field_without-borders .mc-form-field__container{border-color:transparent}.mc-form-field__prefix,.mc-form-field__suffix{position:absolute;top:0;bottom:0;width:32px;display:flex;flex-direction:row;justify-content:center;align-items:center}.mc-form-field__prefix{left:0}.mc-form-field__suffix{right:0}.mc-form-field_has-cleaner .mc-input,.mc-form-field_has-stepper .mc-input,.mc-form-field_has-suffix .mc-input{padding-right:var(--mc-form-field-size-button-width,32px)}.mc-form-field_has-prefix .mc-input{padding-left:var(--mc-form-field-size-button-width,32px)}.mc-cleaner{display:flex;width:var(--mc-form-field-size-button-width,32px);height:100%;cursor:pointer}.mc-cleaner .mc-icon{display:flex;align-items:center;justify-content:center;width:100%;height:100%}.mc-form-field__cleaner .mc-cleaner,mc-stepper{position:absolute;top:0;bottom:0;right:0}mc-stepper{display:flex;flex-direction:column;justify-content:center;align-items:center;width:var(--mc-form-field-size-button-width,32px)}mc-stepper .mc-stepper-step-down,mc-stepper .mc-stepper-step-up{cursor:pointer;width:var(--mc-form-field-size-button-width,32px);text-align:center}mc-stepper .mc-stepper-step-up{transform:scaleY(-1)}", ".mc-input{background:transparent;padding:0;margin:0;border:none;outline:none;box-sizing:border-box;padding:var(--mc-input-size-padding,5px 16px);width:var(--mc-input-size-width,100%);min-height:var(--mc-input-size-min-height,30px)}.mc-input::-ms-clear,.mc-input::-ms-reveal{display:none;width:0;height:0}.mc-input::-webkit-search-cancel-button,.mc-input::-webkit-search-decoration,.mc-input::-webkit-search-results-button,.mc-input::-webkit-search-results-decoration{display:none}.mc-input{display:inline-block}input.mc-input[type=number]{-moz-appearance:textfield}input.mc-input[type=number]::-webkit-inner-spin-button,input.mc-input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none}input.mc-input:invalid{box-shadow:unset}", ".mc-timepicker{padding-right:calc(var(--mc-timepicker-size-padding-right, 16px) - var(--mc-form-field-size-border-width, 1px))}.mc-form-field-type-timepicker{width:auto}", ".mc-form-field-type-datepicker{width:auto}.mc-datepicker{width:var(--mc-datepicker-input-size-width,130px)}", ".mc-textarea{background:transparent;margin:0;border:none;outline:none;resize:none;overflow:auto;width:100%;box-sizing:border-box;padding:var(--mc-textarea-size-padding,5px 16px);display:inline-block;-webkit-appearance:none;vertical-align:bottom}.mc-textarea:not(.mc-textarea-resizable){box-sizing:border-box;overflow-y:hidden}.mc-textarea.mc-textarea-resizable{resize:vertical;min-height:var(--mc-textarea-size-min-height,50px)}.mc-textarea:invalid{box-shadow:unset}"]
            },] }
];
/** @nocollapse */
McFormField.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
McFormField.propDecorators = {
    control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [McFormFieldControl, { static: false },] }],
    stepper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [McStepper, { static: false },] }],
    cleaner: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [McCleaner, { static: false },] }],
    hint: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [McHint,] }],
    suffix: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [McSuffix,] }],
    prefix: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [McPrefix,] }],
    connectionContainerRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['connectionContainer', { static: true },] }]
};
class McFormFieldWithoutBorders {
}
McFormFieldWithoutBorders.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: 'mc-form-field[mcFormFieldWithoutBorders]',
                exportAs: 'mcFormFieldWithoutBorders',
                host: { class: 'mc-form-field_without-borders' }
            },] }
];

class McFormFieldModule {
}
McFormFieldModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                declarations: [
                    McFormField,
                    McFormFieldWithoutBorders,
                    McHint,
                    McPrefix,
                    McSuffix,
                    McCleaner,
                    McStepper
                ],
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__["McIconModule"]],
                exports: [
                    McFormField,
                    McFormFieldWithoutBorders,
                    McHint,
                    McPrefix,
                    McSuffix,
                    McCleaner,
                    McStepper
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "8pH+":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-link.js ***!
  \********************************************************/
/*! exports provided: McLink, McLinkBase, McLinkMixinBase, McLinkModule, baseURLRegex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLink", function() { return McLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLinkBase", function() { return McLinkBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLinkMixinBase", function() { return McLinkMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLinkModule", function() { return McLinkModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseURLRegex", function() { return baseURLRegex; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");






class McLinkBase {
}
// tslint:disable-next-line: naming-convention
const McLinkMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McLinkBase));
const baseURLRegex = /^http(s)?:\/\//;
class McLink extends McLinkMixinBase {
    constructor(elementRef, focusMonitor, changeDetector) {
        super();
        this.elementRef = elementRef;
        this.focusMonitor = focusMonitor;
        this.changeDetector = changeDetector;
        this._disabled = false;
        this._pseudo = false;
        this._noUnderline = false;
        this._useVisited = false;
        this.focusMonitor.monitor(elementRef.nativeElement, true);
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        const newValue = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this.changeDetector.markForCheck();
        }
    }
    get pseudo() {
        return this._pseudo;
    }
    set pseudo(value) {
        this._pseudo = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    get noUnderline() {
        return this._noUnderline;
    }
    set noUnderline(value) {
        this._noUnderline = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    get useVisited() {
        return this._useVisited;
    }
    set useVisited(value) {
        this._useVisited = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    get hasIcon() {
        return !!this.icon;
    }
    get print() {
        var _a;
        return this._print || ((_a = this.getHostElement().href) === null || _a === void 0 ? void 0 : _a.replace(baseURLRegex, ''));
    }
    set print(value) {
        this.printMode = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        this._print = value;
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    focus() {
        this.getHostElement().focus();
    }
    getHostElement() {
        return this.elementRef.nativeElement;
    }
}
McLink.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[mc-link]',
                exportAs: 'mcLink',
                inputs: ['tabIndex'],
                host: {
                    class: 'mc-link',
                    '[class.mc-link_no-underline]': 'noUnderline',
                    '[class.mc-link_use-visited]': 'useVisited',
                    '[class.mc-link_pseudo]': 'pseudo',
                    '[class.mc-link_print]': 'printMode',
                    '[class.mc-text-only]': '!hasIcon',
                    '[class.mc-text-with-icon]': 'hasIcon',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.print]': 'print'
                }
            },] }
];
/** @nocollapse */
McLink.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
];
McLink.propDecorators = {
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    pseudo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    noUnderline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    useVisited: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    print: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_4__["McIcon"],] }]
};

class McLinkModule {
}
McLinkModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"]
                ],
                declarations: [McLink],
                exports: [McLink]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "9Bz7":
/*!*********************************************************************************!*\
  !*** ./packages/docs/src/app/components/main-layout/main-layout.component.scss ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".main {\n  display: flex;\n  height: 100%;\n  width: 100%;\n}\n\n.content {\n  width: calc(100% - 600px);\n  margin-top: 64px;\n  margin-left: 300px;\n  margin-right: 300px;\n  margin-bottom: 62px;\n  padding: 20px 69px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21haW4tbGF5b3V0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBYTtFQUNiLFlBQVk7RUFDWixXQUFXO0FBQ2Y7O0FBRUE7RUFDSSx5QkFBeUI7RUFFckIsZ0JBQVM7RUFDVCxrQkFBVztFQUNYLG1CQUFZO0VBQ1osbUJBQVk7RUFHaEIsa0JBQWtCO0FBRnRCIiwiZmlsZSI6Im1haW4tbGF5b3V0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW4ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4uY29udGVudCB7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDYwMHB4KTsgLy8gZm9yIEVkZ2VcbiAgICBtYXJnaW46IHtcbiAgICAgICAgdG9wOiA2NHB4O1xuICAgICAgICBsZWZ0OiAzMDBweDtcbiAgICAgICAgcmlnaHQ6IDMwMHB4O1xuICAgICAgICBib3R0b206IDYycHg7XG4gICAgfVxuXG4gICAgcGFkZGluZzogMjBweCA2OXB4O1xufVxuIl19 */");

/***/ }),

/***/ "9hGJ":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tags.js ***!
  \********************************************************/
/*! exports provided: MC_TAGS_DEFAULT_OPTIONS, McTag, McTagAvatar, McTagBase, McTagInput, McTagList, McTagListBase, McTagListChange, McTagListMixinBase, McTagMixinBase, McTagRemove, McTagSelectionChange, McTagTrailingIcon, McTagsModule, ɵ0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TAGS_DEFAULT_OPTIONS", function() { return MC_TAGS_DEFAULT_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTag", function() { return McTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagAvatar", function() { return McTagAvatar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagBase", function() { return McTagBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagInput", function() { return McTagInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagList", function() { return McTagList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagListBase", function() { return McTagListBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagListChange", function() { return McTagListChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagListMixinBase", function() { return McTagListMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagMixinBase", function() { return McTagMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagRemove", function() { return McTagRemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagSelectionChange", function() { return McTagSelectionChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagTrailingIcon", function() { return McTagTrailingIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTagsModule", function() { return McTagsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵ0", function() { return ɵ0; });
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");















/** Injection token to be used to override the default options for the chips module. */
const MC_TAGS_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-tags-default-options');

/** Event object emitted by McTag when selected or deselected. */
class McTagSelectionChange {
    constructor(source, selected, isUserInput = false) {
        this.source = source;
        this.selected = selected;
        this.isUserInput = isUserInput;
    }
}
const TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];
/**
 * Dummy directive to add CSS class to tag avatar.
 * @docs-private
 */
class McTagAvatar {
}
McTagAvatar.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: 'mc-tag-avatar, [mcTagAvatar]',
                host: { class: 'mc-tag-avatar' }
            },] }
];
/**
 * Dummy directive to add CSS class to tag trailing icon.
 * @docs-private
 */
class McTagTrailingIcon {
}
McTagTrailingIcon.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',
                host: { class: 'mc-tag-trailing-icon' }
            },] }
];
class McTagBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McTagMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["mixinDisabled"])(McTagBase));
class McTag extends McTagMixinBase {
    constructor(elementRef, changeDetectorRef, _ngZone) {
        super(elementRef);
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this._ngZone = _ngZone;
        /** Emits when the tag is focused. */
        this.onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        /** Emits when the tag is blured. */
        this.onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        /** Whether the tag has focus. */
        this.hasFocus = false;
        /** Whether the tag list is selectable */
        this.tagListSelectable = true;
        /** Emitted when the tag is selected or deselected. */
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Emitted when the tag is destroyed. */
        this.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Emitted when a tag is to be removed. */
        this.removed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this._selected = false;
        this._selectable = true;
        this._removable = true;
        this._disabled = false;
        this.addHostClassName();
        this.nativeElement = elementRef.nativeElement;
    }
    /** Whether the tag is selected. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        const coercedValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        if (coercedValue !== this._selected) {
            this._selected = coercedValue;
            this.dispatchSelectionChange();
        }
    }
    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */
    get value() {
        return this._value !== undefined
            ? this._value
            : this.elementRef.nativeElement.textContent;
    }
    set value(value) {
        this._value = value;
    }
    /**
     * Whether or not the tag is selectable. When a tag is not selectable,
     * changes to its selected state are always ignored. By default a tag is
     * selectable, and it becomes non-selectable if its parent tag list is
     * not selectable.
     */
    get selectable() {
        return this._selectable && this.tagListSelectable;
    }
    set selectable(value) {
        this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    /**
     * Determines whether or not the tag displays the remove styling and emits (removed) events.
     */
    get removable() {
        return this._removable;
    }
    set removable(value) {
        this._removable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    get tabindex() {
        if (!this.selectable) {
            return null;
        }
        return this.disabled ? null : -1;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== this.disabled) {
            this._disabled = value;
        }
    }
    ngAfterContentInit() {
        this.addClassModificatorForIcons();
    }
    addClassModificatorForIcons() {
        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);
        if (icons.length === 1) {
            const iconElement = icons[0];
            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {
                if (iconElement.nextSibling) {
                    iconElement.classList.add('mc-icon_left');
                    this.nativeElement.classList.add('mc-left-icon');
                }
                if (iconElement.previousSibling) {
                    iconElement.classList.add('mc-icon_right');
                    this.nativeElement.classList.add('mc-right-icon');
                }
            }
        }
        else if (icons.length > 1) {
            const firstIconElement = icons[0];
            const secondIconElement = icons[1];
            firstIconElement.classList.add('mc-icon_left');
            secondIconElement.classList.add('mc-icon_right');
        }
    }
    addHostClassName() {
        // Add class for the different tags
        for (const attr of TAG_ATTRIBUTE_NAMES) {
            if (this.elementRef.nativeElement.hasAttribute(attr) ||
                this.elementRef.nativeElement.tagName.toLowerCase() === attr) {
                this.elementRef.nativeElement.classList.add(attr);
                return;
            }
        }
        this.elementRef.nativeElement.classList.add('mc-standard-tag');
    }
    ngOnDestroy() {
        this.destroyed.emit({ tag: this });
    }
    select() {
        if (!this._selected) {
            this._selected = true;
            this.dispatchSelectionChange();
        }
    }
    deselect() {
        if (this._selected) {
            this._selected = false;
            this.dispatchSelectionChange();
        }
    }
    selectViaInteraction() {
        if (!this._selected) {
            this._selected = true;
            this.dispatchSelectionChange(true);
        }
    }
    toggleSelected(isUserInput = false) {
        this._selected = !this.selected;
        this.dispatchSelectionChange(isUserInput);
        return this.selected;
    }
    /** Allows for programmatic focusing of the tag. */
    focus() {
        if (!this.selectable) {
            return;
        }
        if (!this.hasFocus) {
            this.elementRef.nativeElement.focus();
            this.onFocus.next({ tag: this });
            Promise.resolve().then(() => {
                this.hasFocus = true;
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    /**
     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or
     * BACKSPACE keys are pressed.
     *
     * Informs any listeners of the removal request. Does not remove the tag from the DOM.
     */
    remove() {
        if (this.removable) {
            this.removed.emit({ tag: this });
        }
    }
    handleClick(event) {
        if (this.disabled) {
            event.preventDefault();
        }
        else {
            event.stopPropagation();
        }
    }
    handleKeydown(event) {
        if (this.disabled) {
            return;
        }
        // tslint:disable-next-line: deprecation
        switch (event.keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DELETE"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["BACKSPACE"]:
                // If we are removable, remove the focused tag
                this.remove();
                // Always prevent so page navigation does not occur
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]:
                // If we are selectable, toggle the focused tag
                if (this.selectable) {
                    this.toggleSelected(true);
                }
                // Always prevent space from scrolling the page since the list has focus
                event.preventDefault();
                break;
            default:
        }
    }
    blur() {
        // When animations are enabled, Angular may end up removing the tag from the DOM a little
        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list
        // that moves focus not the next item. To work around the issue, we defer marking the tag
        // as not focused until the next time the zone stabilizes.
        this._ngZone.onStable
            .asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["take"])(1))
            .subscribe(() => {
            this._ngZone.run(() => {
                this.hasFocus = false;
                this.onBlur.next({ tag: this });
            });
        });
    }
    dispatchSelectionChange(isUserInput = false) {
        this.selectionChange.emit({
            source: this,
            isUserInput,
            selected: this._selected
        });
    }
}
McTag.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',
                exportAs: 'mcTag',
                template: "<div class=\"mc-tag__wrapper\">\n    <span class=\"mc-tag__text\"><ng-content></ng-content></span>\n    <ng-content select=\"[mc-icon]\"></ng-content>\n    <div class=\"mc-tag-overlay\"></div>\n</div>\n",
                inputs: ['color'],
                host: {
                    class: 'mc-tag',
                    '[attr.tabindex]': 'tabindex',
                    '[attr.disabled]': 'disabled || null',
                    '[class.mc-selected]': 'selected',
                    '[class.mc-focused]': 'hasFocus',
                    '[class.mc-tag-with-avatar]': 'avatar',
                    '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',
                    '[class.mc-disabled]': 'disabled',
                    '(click)': 'handleClick($event)',
                    '(keydown)': 'handleKeydown($event)',
                    '(focus)': 'focus()',
                    '(blur)': 'blur()'
                },
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                styles: [".mc-tag{position:relative;display:inline-block;overflow:hidden;margin:var(--mc-tags-size-margin,2px);height:var(--mc-tags-size-height,24px);border-width:var(--mc-tags-size-border-width,1px);border-style:solid;border-radius:var(--mc-tags-size-border-radius,4px);cursor:default;outline:none;box-sizing:border-box}.mc-tag.mc-left-icon{padding-left:var(--mc-tags-size-icon-padding,3px)}.mc-tag.mc-right-icon{padding-right:var(--mc-tags-size-icon-padding,3px)}.mc-tag__wrapper{display:flex;align-items:center;height:100%;flex:1 1 100%}.mc-tag__wrapper .mc-icon{display:flex;align-items:center;justify-content:center;flex-shrink:0;width:var(--mc-tags-size-height,24px);height:var(--mc-tags-size-height,24px)}.mc-tag__wrapper .mc-icon_left{margin-right:var(--mc-tags-size-icon-padding,3px)}.mc-tag__wrapper .mc-icon_right{margin-left:var(--mc-tags-size-icon-padding,3px)}.mc-tag-overlay{position:absolute;top:-1px;left:-1px;right:-1px;bottom:-1px;pointer-events:none;border-radius:inherit}.mc-tag__text{margin-left:calc(var(--mc-tags-size-text-margin, 8px) - var(--mc-tags-size-border-width, 1px));text-overflow:ellipsis;white-space:nowrap;overflow:hidden}"]
            },] }
];
/** @nocollapse */
McTag.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] }
];
McTag.propDecorators = {
    contentChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_13__["McIcon"],] }],
    avatar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [McTagAvatar, { static: false },] }],
    trailingIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [McTagTrailingIcon, { static: false },] }],
    removeIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => McTagRemove), { static: false },] }],
    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    destroyed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    removed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    removable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};
/**
 *
 * Example:
 *
 *     `<mc-tag>
 *       <mc-icon mcTagRemove>cancel</mc-icon>
 *     </mc-tag>`
 *
 * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning
 * styles to properly center the icon within the tag.
 */
class McTagRemove {
    constructor(parentTag) {
        this.parentTag = parentTag;
    }
    focus($event) {
        $event.stopPropagation();
    }
    /** Calls the parent tag's public `remove()` method if applicable. */
    handleClick(event) {
        if (this.parentTag.removable) {
            this.parentTag.remove();
        }
        // We need to stop event propagation because otherwise the event will bubble up to the
        // form field and cause the `onContainerClick` method to be invoked. This method would then
        // reset the focused tag that has been focused after tag removal. Usually the parent
        // the parent click listener of the `McTag` would prevent propagation, but it can happen
        // that the tag is being removed before the event bubbles up.
        event.stopPropagation();
    }
}
McTagRemove.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[mcTagRemove]',
                host: {
                    class: 'mc-tag-remove mc-tag-trailing-icon',
                    '[attr.tabindex]': '-1',
                    '(click)': 'handleClick($event)',
                    '(focus)': 'focus($event)'
                }
            },] }
];
/** @nocollapse */
McTagRemove.ctorParameters = () => [
    { type: McTag }
];

class McTagListBase {
    constructor(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
    }
}
// tslint:disable-next-line:naming-convention
const McTagListMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["mixinErrorState"])(McTagListBase);
// Increasing integer for generating unique ids for tag-list components.
let nextUniqueId$1 = 0;
/** Change event object that is emitted when the tag list value has changed. */
class McTagListChange {
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
class McTagList extends McTagListMixinBase {
    constructor(elementRef, changeDetectorRef, defaultErrorStateMatcher, rawValidators, mcValidation, dir, parentForm, parentFormGroup, ngControl, ngModel, formControlName) {
        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.rawValidators = rawValidators;
        this.mcValidation = mcValidation;
        this.dir = dir;
        this.ngModel = ngModel;
        this.formControlName = formControlName;
        this.controlType = 'tag-list';
        this._tabIndex = 0;
        /**
         * Event that emits whenever the raw value of the tag-list changes. This is here primarily
         * to facilitate the two-way binding for the `value` input.
         * @docs-private
         */
        this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.uid = `mc-tag-list-${nextUniqueId$1++}`;
        /**
         * User defined tab index.
         * When it is not null, use user defined tab index. Otherwise use tabIndex
         */
        this.userTabIndex = null;
        this.tagChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Orientation of the tag list. */
        this.orientation = 'horizontal';
        /** Event emitted when the selected tag list value has been changed by the user. */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this._required = false;
        this._disabled = false;
        this._selectable = true;
        this._multiple = false;
        /**
         * When a tag is destroyed, we store the index of the destroyed tag until the tags
         * query list notifies about the update. This is necessary because we cannot determine an
         * appropriate tag that should receive focus until the array of tags updated completely.
         */
        this.lastDestroyedTagIndex = null;
        /** Subject that emits when the component has been destroyed. */
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        // tslint:disable-next-line:no-empty
        this.onTouched = () => { };
        // tslint:disable-next-line:no-empty
        this.onChange = () => { };
        this._compareWith = (o1, o2) => o1 === o2;
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    /** Combined stream of all of the child tags' selection change events. */
    get tagSelectionChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(...this.tags.map((tag) => tag.selectionChange));
    }
    /** Combined stream of all of the child tags' focus change events. */
    get tagFocusChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(...this.tags.map((tag) => tag.onFocus));
    }
    /** Combined stream of all of the child tags' blur change events. */
    get tagBlurChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(...this.tags.map((tag) => tag.onBlur));
    }
    /** Combined stream of all of the child tags' remove change events. */
    get tagRemoveChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(...this.tags.map((tag) => tag.destroyed));
    }
    /** The array of selected tags inside tag list. */
    get selected() {
        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];
    }
    get canShowCleaner() {
        return this.cleaner && this.tags.length > 0;
    }
    /** Whether the user should be allowed to select multiple tags. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    /**
     * A function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    get compareWith() {
        return this._compareWith;
    }
    set compareWith(fn) {
        this._compareWith = fn;
        if (this.selectionModel) {
            // A different comparator means the selection could change.
            this.initializeSelection();
        }
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get value() {
        return this._value;
    }
    set value(value) {
        this.writeValue(value);
        this._value = value;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get id() {
        return this.tagInput ? this.tagInput.id : this.uid;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        this.stateChanges.next();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get placeholder() {
        return this.tagInput ? this.tagInput.placeholder : this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */
    get focused() {
        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get empty() {
        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        this.syncTagsDisabledState();
    }
    /**
     * Whether or not this tag list is selectable. When a tag list is not selectable,
     * the selected states for all the tags inside the tag list are always ignored.
     */
    get selectable() {
        return this._selectable;
    }
    set selectable(value) {
        this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        if (this.tags) {
            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);
        }
    }
    get tabIndex() {
        return this._tabIndex;
    }
    set tabIndex(value) {
        this.userTabIndex = value;
        this._tabIndex = value;
    }
    ngAfterContentInit() {
        if (this.mcValidation.useValidation) {
            Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["setMosaicValidation"])(this);
        }
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__["FocusKeyManager"](this.tags)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');
        if (this.dir) {
            this.dir.change
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["takeUntil"])(this.destroyed))
                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));
        }
        // Prevents the tag list from capturing focus and redirecting
        // it back to the first tag when the user tabs out.
        this.keyManager.tabOut
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["takeUntil"])(this.destroyed))
            .subscribe(() => {
            this._tabIndex = -1;
            setTimeout(() => {
                this._tabIndex = this.userTabIndex || 0;
                this.changeDetectorRef.markForCheck();
            });
        });
        // When the list changes, re-subscribe
        this.tags.changes
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["takeUntil"])(this.destroyed))
            .subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => { this.syncTagsDisabledState(); });
            }
            this.resetTags();
            // Reset tags selected/deselected status
            this.initializeSelection();
            // Check to see if we need to update our tab index
            this.updateTabIndex();
            // Check to see if we have a destroyed tag and need to refocus
            this.updateFocusForDestroyedTags();
            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(() => {
                this.tagChanges.emit(this.tags.toArray());
                this.stateChanges.next();
                this.propagateTagsChanges();
            });
        });
    }
    ngOnInit() {
        this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_7__["SelectionModel"](this.multiple, undefined, false);
        this.stateChanges.next();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
        this.stateChanges.complete();
        this.dropSubscriptions();
    }
    /** Associates an HTML input element with this tag list. */
    registerInput(inputElement) {
        var _a;
        this.tagInput = inputElement;
        // todo need rethink about it
        if (this.ngControl && ((_a = inputElement.ngControl) === null || _a === void 0 ? void 0 : _a.statusChanges)) {
            inputElement.ngControl.statusChanges
                .subscribe(() => this.ngControl.control.setErrors(inputElement.ngControl.errors));
        }
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        if (this.tags) {
            this.setSelectionByValue(value, false);
        }
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this.onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    onContainerClick(event) {
        if (!this.originatesFromTag(event)) {
            this.focus();
        }
    }
    /**
     * Focuses the first non-disabled tag in this tag list, or the associated input when there
     * are no eligible tags.
     */
    focus() {
        if (this.disabled) {
            return;
        }
        // TODO: ARIA says this should focus the first `selected` tag if any are selected.
        // Focus on first element if there's no tagInput inside tag-list
        if (this.tagInput && this.tagInput.focused) {
            // do nothing
        }
        else if (this.tags.length > 0) {
            this.keyManager.setFirstItemActive();
            this.stateChanges.next();
        }
        else {
            this.focusInput();
            this.stateChanges.next();
        }
    }
    /** Attempt to focus an input if we have one. */
    focusInput() {
        if (this.tagInput) {
            this.tagInput.focus();
        }
    }
    /**
     * Pass events to the keyboard manager. Available here for tests.
     */
    keydown(event) {
        const target = event.target;
        // If they are on an empty input and hit backspace, focus the last tag
        // tslint:disable-next-line: deprecation
        if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["BACKSPACE"] && this.isInputEmpty(target)) {
            this.keyManager.setLastItemActive();
            event.preventDefault();
        }
        else if (target && target.classList.contains('mc-tag')) {
            // tslint:disable-next-line: deprecation
            if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]) {
                this.keyManager.setFirstItemActive();
                event.preventDefault();
                // tslint:disable-next-line: deprecation
            }
            else if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]) {
                this.keyManager.setLastItemActive();
                event.preventDefault();
            }
            else {
                this.keyManager.onKeydown(event);
            }
            this.stateChanges.next();
        }
    }
    setSelectionByValue(value, isUserInput = true) {
        this.clearSelection();
        this.tags.forEach((tag) => tag.deselect());
        if (Array.isArray(value)) {
            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));
            this.sortValues();
        }
        else {
            const correspondingTag = this.selectValue(value, isUserInput);
            // Shift focus to the active item. Note that we shouldn't do this in multiple
            // mode, because we don't know what tag the user interacted with last.
            if (correspondingTag && isUserInput) {
                this.keyManager.setActiveItem(correspondingTag);
            }
        }
    }
    /** When blurred, mark the field as touched when focus moved outside the tag list. */
    blur() {
        if (!this.hasFocusedTag()) {
            this.keyManager.setActiveItem(-1);
        }
        if (!this.disabled) {
            if (this.tagInput) {
                // If there's a tag input, we should check whether the focus moved to tag input.
                // If the focus is not moved to tag input, mark the field as touched. If the focus moved
                // to tag input, do nothing.
                // Timeout is needed to wait for the focus() event trigger on tag input.
                setTimeout(() => {
                    if (!this.focused) {
                        this.markAsTouched();
                    }
                });
            }
            else {
                // If there's no tag input, then mark the field as touched.
                this.markAsTouched();
            }
        }
    }
    /** Mark the field as touched */
    markAsTouched() {
        this.onTouched();
        this.changeDetectorRef.markForCheck();
        this.stateChanges.next();
    }
    /**
     * Check the tab index as you should not be allowed to focus an empty list.
     */
    updateTabIndex() {
        // If we have 0 tags, we should not allow keyboard focus
        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);
    }
    /**
     * If the amount of tags changed, we need to update the
     * key manager state and focus the next closest tag.
     */
    updateFocusForDestroyedTags() {
        if (this.lastDestroyedTagIndex != null) {
            if (this.tags.length) {
                const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);
                this.keyManager.setActiveItem(newTagIndex);
            }
            else {
                this.focusInput();
            }
        }
        this.lastDestroyedTagIndex = null;
    }
    /**
     * Utility to ensure all indexes are valid.
     *
     * @param index The index to be checked.
     * @returns True if the index is valid for our list of tags.
     */
    isValidIndex(index) {
        return index >= 0 && index < this.tags.length;
    }
    isInputEmpty(element) {
        if (element && element.nodeName.toLowerCase() === 'input') {
            const input = element;
            return !input.value;
        }
        return false;
    }
    /**
     * Finds and selects the tag based on its value.
     * @returns Tag that has the corresponding value.
     */
    selectValue(value, isUserInput = true) {
        const correspondingTag = this.tags.find((tag) => {
            return tag.value != null && this._compareWith(tag.value, value);
        });
        if (correspondingTag) {
            if (isUserInput) {
                correspondingTag.selectViaInteraction();
            }
            else {
                correspondingTag.select();
            }
            this.selectionModel.select(correspondingTag);
        }
        return correspondingTag;
    }
    initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            if (this.ngControl || this._value) {
                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);
                this.stateChanges.next();
            }
        });
    }
    /**
     * Deselects every tag in the list.
     * @param skip Tag that should not be deselected.
     */
    clearSelection(skip) {
        this.selectionModel.clear();
        this.tags.forEach((tag) => {
            if (tag !== skip) {
                tag.deselect();
            }
        });
        this.stateChanges.next();
    }
    /**
     * Sorts the model values, ensuring that they keep the same
     * order that they have in the panel.
     */
    sortValues() {
        if (this._multiple) {
            this.selectionModel.clear();
            this.tags.forEach((tag) => {
                if (tag.selected) {
                    this.selectionModel.select(tag);
                }
            });
            this.stateChanges.next();
        }
    }
    /** Emits change event to set the model value. */
    // todo need rethink this method and selection logic
    propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (Array.isArray(this.selected)) {
            valueToEmit = this.selected.map((tag) => tag.value);
        }
        else {
            valueToEmit = this.selected ? this.selected.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.change.emit(new McTagListChange(this, valueToEmit));
        this.valueChange.emit(valueToEmit);
        this.onChange(valueToEmit);
        this.changeDetectorRef.markForCheck();
    }
    propagateTagsChanges() {
        const valueToEmit = this.tags.map((tag) => tag.value);
        this._value = valueToEmit;
        this.change.emit(new McTagListChange(this, valueToEmit));
        this.valueChange.emit(valueToEmit);
        this.onChange(valueToEmit);
        this.changeDetectorRef.markForCheck();
    }
    resetTags() {
        this.dropSubscriptions();
        this.listenToTagsFocus();
        this.listenToTagsSelection();
        this.listenToTagsRemoved();
    }
    dropSubscriptions() {
        if (this.tagFocusSubscription) {
            this.tagFocusSubscription.unsubscribe();
            this.tagFocusSubscription = null;
        }
        if (this.tagBlurSubscription) {
            this.tagBlurSubscription.unsubscribe();
            this.tagBlurSubscription = null;
        }
        if (this.tagSelectionSubscription) {
            this.tagSelectionSubscription.unsubscribe();
            this.tagSelectionSubscription = null;
        }
        if (this.tagRemoveSubscription) {
            this.tagRemoveSubscription.unsubscribe();
            this.tagRemoveSubscription = null;
        }
    }
    /** Listens to user-generated selection events on each tag. */
    listenToTagsSelection() {
        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {
            if (event.source.selected) {
                this.selectionModel.select(event.source);
            }
            else {
                this.selectionModel.deselect(event.source);
            }
            // For single selection tag list, make sure the deselected value is unselected.
            if (!this.multiple) {
                this.tags.forEach((tag) => {
                    if (!this.selectionModel.isSelected(tag) && tag.selected) {
                        tag.deselect();
                    }
                });
            }
            if (event.isUserInput) {
                this.propagateChanges();
            }
        });
    }
    /** Listens to user-generated selection events on each tag. */
    listenToTagsFocus() {
        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {
            const tagIndex = this.tags.toArray().indexOf(event.tag);
            if (this.isValidIndex(tagIndex)) {
                this.keyManager.updateActiveItem(tagIndex);
            }
            this.stateChanges.next();
        });
        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {
            this.blur();
            this.stateChanges.next();
        });
    }
    listenToTagsRemoved() {
        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {
            const tag = event.tag;
            const tagIndex = this.tags.toArray().indexOf(event.tag);
            // In case the tag that will be removed is currently focused, we temporarily store
            // the index in order to be able to determine an appropriate sibling tag that will
            // receive focus.
            if (this.isValidIndex(tagIndex) && tag.hasFocus) {
                this.lastDestroyedTagIndex = tagIndex;
            }
            else if (this.isValidIndex(tagIndex) && !tag.hasFocus) {
                this.focusInput();
            }
        });
    }
    /** Checks whether an event comes from inside a tag element. */
    originatesFromTag(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this.elementRef.nativeElement) {
            if (currentElement.classList.contains('mc-tag')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    /** Checks whether any of the tags is focused. */
    hasFocusedTag() {
        return this.tags.some((tag) => tag.hasFocus);
    }
    /** Syncs the list's disabled state with the individual tags. */
    syncTagsDisabledState() {
        if (this.tags) {
            this.tags.forEach((tag) => {
                tag.disabled = this._disabled;
            });
        }
    }
}
McTagList.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-tag-list',
                exportAs: 'mcTagList',
                template: "<div class=\"mc-tags-list__list-container\">\n    <ng-content></ng-content>\n</div>\n\n<div class=\"mc-tags-list__cleaner\"\n     *ngIf=\"canShowCleaner\">\n    <ng-content select=\"mc-cleaner\"></ng-content>\n</div>\n",
                host: {
                    class: 'mc-tag-list',
                    '[class.mc-disabled]': 'disabled',
                    '[class.mc-invalid]': 'errorState',
                    '[attr.tabindex]': 'disabled ? null : tabIndex',
                    '[id]': 'uid',
                    '(focus)': 'focus()',
                    '(blur)': 'blur()',
                    '(keydown)': 'keydown($event)'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                providers: [{ provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_10__["McFormFieldControl"], useExisting: McTagList }],
                styles: [".mc-tag-list{display:flex;flex-direction:row}.mc-tag-input{border:none;outline:none;background:transparent}.mc-tags-list__list-container{display:flex;flex-wrap:wrap;flex:1 1 100%;min-width:0;min-height:var(--mc-tag-list-size-min-height,28px);padding:var(--mc-tag-list-size-padding,1px 6px)}.mc-tags-list__list-container .mc-tag-input{max-width:100%;flex:1 1 auto;height:var(--mc-tag-input-size-height,22px);margin:var(--mc-tag-input-size-margin,2px 4px)}.mc-tags-list__cleaner .mc-cleaner{height:30px}"]
            },] }
];
/** @nocollapse */
McTagList.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["ErrorStateMatcher"] },
    { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALIDATORS"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__["MC_VALIDATION"],] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgModel"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControlName"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] }
];
McTagList.propDecorators = {
    multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    orientation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['orientation',] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    cleaner: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: ['mcTagListCleaner', { static: true },] }],
    tags: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [McTag, {
                    // Need to use `descendants: true`,
                    // Ivy will no longer match indirect descendants if it's left as false.
                    descendants: true
                },] }]
};

// Increasing integer for generating unique ids.
let nextUniqueId = 0;
/**
 * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.
 * May be placed inside or outside of an `<mc-tag-list>`.
 */
class McTagInput {
    constructor(elementRef, renderer, defaultOptions, ngControl) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.defaultOptions = defaultOptions;
        this.ngControl = ngControl;
        /** Whether the control is focused. */
        this.focused = false;
        /**
         * The list of key codes that will trigger a tagEnd event.
         *
         * Defaults to `[ENTER]`.
         */
        this.separatorKeyCodes = this.defaultOptions.separatorKeyCodes;
        /** Emitted when a tag is to be added. */
        this.tagEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** The input's placeholder text. */
        this.placeholder = '';
        /** Unique id for the input. */
        this.id = `mc-tag-list-input-${nextUniqueId++}`;
        this._addOnBlur = true;
        this._disabled = false;
        this.countOfSymbolsForUpdateWidth = 3;
        // tslint:disable-next-line: no-unnecessary-type-assertion
        this.inputElement = this.elementRef.nativeElement;
        this.setDefaultInputWidth();
    }
    /** Register input for tag list */
    set tagList(value) {
        if (value) {
            this._tagList = value;
            this._tagList.registerInput(this);
        }
    }
    /**
     * Whether or not the tagEnd event will be emitted when the input is blurred.
     */
    get addOnBlur() {
        return this._addOnBlur;
    }
    set addOnBlur(value) {
        this._addOnBlur = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    /** Whether the input is disabled. */
    get disabled() {
        return this._disabled || (this._tagList && this._tagList.disabled);
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    /** Whether the input is empty. */
    get empty() {
        return !this.inputElement.value;
    }
    ngOnChanges() {
        this._tagList.stateChanges.next();
    }
    onKeydown(event) {
        if (!this.inputElement.value) {
            this._tagList.keydown(event);
        }
        if (this.isSeparatorKey(event)) {
            this.emitTagEnd();
            event.preventDefault();
        }
    }
    /** Checks to see if the blur should emit the (tagEnd) event. */
    blur() {
        this.focused = false;
        // Blur the tag list if it is not focused
        if (!this._tagList.focused) {
            this.triggerValidation();
            this._tagList.blur();
        }
        // tslint:disable-next-line: no-unnecessary-type-assertion
        if (this.addOnBlur) {
            this.emitTagEnd();
        }
        this._tagList.stateChanges.next();
    }
    triggerValidation() {
        if (!this.hasControl()) {
            return;
        }
        this.ngControl.statusChanges.emit(this.ngControl.status);
    }
    /** Checks to see if the (tagEnd) event needs to be emitted. */
    emitTagEnd() {
        if (!this.hasControl() || (this.hasControl() && !this.ngControl.invalid)) {
            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });
            this.updateInputWidth();
        }
    }
    onInput() {
        this.updateInputWidth();
        // Let tag list know whenever the value changes.
        this._tagList.stateChanges.next();
    }
    onPaste($event) {
        if (!$event.clipboardData) {
            return;
        }
        const data = $event.clipboardData.getData('text');
        if (data && data.length === 0) {
            return;
        }
        const items = [];
        for (const key of this.separatorKeyCodes) {
            const separator = this.separatorKeyToSymbol(key);
            if (data.search(separator) > -1) {
                items.push(...data.split(separator));
                break;
            }
        }
        if (items.length === 0) {
            items.push(data);
        }
        items.forEach((item) => this.tagEnd.emit({ input: this.inputElement, value: item }));
        this.updateInputWidth();
        $event.preventDefault();
        $event.stopPropagation();
    }
    updateInputWidth() {
        const length = this.inputElement.value.length;
        this.renderer.setStyle(this.inputElement, 'max-width', 0);
        this.oneSymbolWidth = this.inputElement.scrollWidth / length;
        this.renderer.setStyle(this.inputElement, 'max-width', '');
        if (length > this.countOfSymbolsForUpdateWidth) {
            this.renderer.setStyle(this.inputElement, 'width', `${length * this.oneSymbolWidth}px`);
        }
        else {
            this.setDefaultInputWidth();
        }
    }
    onFocus() {
        this.focused = true;
        this._tagList.stateChanges.next();
    }
    /** Focuses the input. */
    focus() {
        this.inputElement.focus();
    }
    separatorKeyToSymbol(k) {
        const sep = {
            [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]]: /\r?\n/,
            [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["TAB"]]: /\t/,
            [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]]: / /,
            [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["COMMA"]]: /,/
        }[k];
        if (sep) {
            return sep;
        }
        return k;
    }
    hasControl() {
        return !!this.ngControl;
    }
    setDefaultInputWidth() {
        this.renderer.setStyle(this.inputElement, 'width', '30px');
    }
    /** Checks whether a keycode is one of the configured separators. */
    isSeparatorKey(event) {
        if (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event)) {
            return false;
        }
        // tslint:disable-next-line: deprecation
        return this.separatorKeyCodes.indexOf(event.keyCode) > -1;
    }
}
McTagInput.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: 'input[mcTagInputFor]',
                exportAs: 'mcTagInput, mcTagInputFor',
                host: {
                    class: 'mc-tag-input',
                    '[id]': 'id',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.placeholder]': 'placeholder || null',
                    '(keydown)': 'onKeydown($event)',
                    '(blur)': 'blur()',
                    '(focus)': 'onFocus()',
                    '(input)': 'onInput()',
                    '(paste)': 'onPaste($event)'
                }
            },] }
];
/** @nocollapse */
McTagInput.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MC_TAGS_DEFAULT_OPTIONS,] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] }
];
McTagInput.propDecorators = {
    separatorKeyCodes: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcTagInputSeparatorKeyCodes',] }],
    tagEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"], args: ['mcTagInputTokenEnd',] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    tagList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcTagInputFor',] }],
    addOnBlur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcTagInputAddOnBlur',] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

const ɵ0 = { separatorKeyCodes: [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]] };
class McTagsModule {
}
McTagsModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]],
                exports: [
                    McTagList,
                    McTag,
                    McTagInput,
                    McTagTrailingIcon,
                    McTagAvatar,
                    McTagRemove
                ],
                declarations: [
                    McTagList,
                    McTag,
                    McTagInput,
                    McTagTrailingIcon,
                    McTagAvatar,
                    McTagRemove
                ],
                providers: [{
                        provide: MC_TAGS_DEFAULT_OPTIONS,
                        // tslint:disable-next-line: no-object-literal-type-assertion
                        useValue: ɵ0
                    }]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "A+YV":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/component-viewer/component-viewer.template.html ***!
  \********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"docs-component-viewer\">\n    <div class=\"docs-component-viewer-content\">\n        <router-outlet></router-outlet>\n    </div>\n</div>\n\n\n");

/***/ }),

/***/ "Ae4T":
/*!************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/navbar/navbar.template.html ***!
  \************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<header role=\"header\" class=\"docs-navbar-header docs-navbar-header_fixed\">\n    <div class=\"docs-navbar-logo\">\n        <svg height=\"32\" viewBox=\"0 0 32 32\" width=\"32\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(.96)\"><path d=\"m15.056 0-14.896 5.312 2.272 19.696 12.624 6.992 12.624-6.992 2.272-19.696z\" fill=\"#ca0813\"/><path d=\"m15.04 0v32l12.624-6.992 2.272-19.696z\" fill=\"#a00810\"/><path d=\"m15.04 0 14.88 5.312-2.2695596 19.696-12.6104404 6.992-12.61044039-6.992-2.26955961-19.696zm0 1.5927156-13.2534557 4.73134117 2.04487091 17.74607603 11.20858479 6.2147254 11.2085848-6.2147254 2.0448709-17.74607603z\" fill=\"#ca0813\" fill-rule=\"nonzero\"/><g fill=\"#fff\"><path d=\"m15.04 1.5927156 13.2534557 4.73134117-2.0448709 17.74607603-11.2085848 6.2147254-11.20858479-6.2147254-2.04487091-17.74607603zm0 1.5927156-11.6269114 4.15068235 1.8201822 15.79615205 9.8067292 5.4374509 9.8067292-5.4374509 1.8201822-15.79615205z\" fill-rule=\"nonzero\"/><path d=\"m23.541 19.341.939 2.899h-2.88l-.302-1.017zm-8.584-2.554 1.352 3.035-1.111068 2.418h-.33792l-1.199012-2.541zm-8.498 2.324 2.39 1.38-.529 1.749h-2.88zm16.622-1.191.301.929-2.232 1.872-.829-2.801zm-13.209-.8-.879 2.899-2.382-1.375.496-1.524zm5.589-.383 1.942.706-.827 1.798zm-.964-.097-1.107 2.485-1.172-2.485zm7.407-2.357 1.022 3.157h-2.747l-.405-1.369zm-5.742-.198 2.201 1.271-.759 1.65-2.3397814-.8497417c.0404824-.0979144.0815829-.1969339.1233014-.2970583zm-8.103.115 2.296 1.327-.337 1.113h-2.754zm5.705-.172.79984 1.8312.12316.2928-.0093071.0054281.0003071.0015719h-2.687l-.411-.871zm7.473-1.805.508 1.568-2.12 1.778-.11908-.40676-.07292-.23424.0037867-.0009743-.2972154-1.0355299c-.019996-.0770346-.0386797-.1511599-.0560513-.2223758l-.00452.01088-.294-1.024zm-9.846-.286-.4988449 1.741526c-.0010771-.0031573-.0021421-.0062926-.0031951-.009406l-.39196 1.38488-2.286-1.32.427-1.311zm6.3-1.356 1.0944579 3.811965c-.0667348.1566826-.1417777.330814-.2251286.5223944l-2.2053293-1.2733594zm-5.42.028 1.299 2.976-2.1915156 1.2645235c-.0725851-.1611133-.1380954-.3093488-.1965308-.4447066zm5.777-.523 2.648.467.391 1.209-2.435.43zm-8.55-.304 2.39.422-.35 1.22-2.732.482zm10.11352-2.582.91748 2.837-2.414-.426 1.053-2.411zm-8.82816 0 1.09764 2.515-.766-.135-1.467-.258.69184-2.122z\"/></g></g></svg>\n        <span class=\"docs-navbar-logo__title\">Mosaic</span>\n    </div>\n\n    <div class=\"docs-navbar-version\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"versionDropdown\">\n            Версия {{mosaicVersion}}\n            <i mc-icon=\"mc-angle-down-L_16\" class=\"docs-navbar-version__icon\"></i>\n        </button>\n\n        <mc-dropdown #versionDropdown=\"mcDropdown\" class=\"docs-navbar-version__dropdown\">\n            <button mc-dropdown-item *ngFor=\"let version of versionData; let i = index\"\n                    (click)=\"goToVersion(i)\" [class.mc-selected]=\"version.selected\"\n                    [class.docs-navbar-version_bold]=\"version.number.length < 4\">\n                <span class=\"docs-navbar-version__item\">\n                    <span class=\"docs-navbar-version__num flex-50\">{{version.number}}</span>\n                    <span class=\"docs-navbar-version__date flex-50\">{{version.date}}</span>\n                </span>\n            </button>\n        </mc-dropdown>\n    </div>\n\n    <div class=\"flex-spacer\"></div>\n\n    <div class=\"docs-navbar-dropdown docs-navbar-dropdown_hidden\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"languageDropdown\">\n           {{languageSwitch.currentValue}}\n            <i mc-icon=\"mc-angle-down-M_16\" class=\"docs-navbar-dropdown__icon\"></i>\n        </button>\n\n        <mc-dropdown #languageDropdown=\"mcDropdown\">\n            <button mc-dropdown-item *ngFor=\"let language of languageSwitch.data; let i = index\"\n                    (click)=\"languageSwitch.setValue(i)\">\n                {{language}}\n            </button>\n        </mc-dropdown>\n    </div>\n\n    <div class=\"docs-navbar-dropdown\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"themeDropdown\">\n            {{themeSwitch.currentValue.name}}\n            <i mc-icon=\"mc-angle-down-M_16\" class=\"docs-navbar-dropdown__icon\"></i>\n        </button>\n\n        <mc-dropdown #themeDropdown=\"mcDropdown\">\n            <button mc-dropdown-item *ngFor=\"let theme of themeSwitch.data; let i = index\"\n                    [class.mc-selected]=\"theme.selected\" (click)=\"themeSwitch.setValue(i)\">\n                {{theme.name}}\n            </button>\n        </mc-dropdown>\n    </div>\n\n    <div class=\"color-picker\">\n        <button mc-button class=\"mc-button mc-button_transparent\" [mcDropdownTriggerFor]=\"colorDropdown\">\n            <i mc-icon=\"mc-circle-8_16\" [style.color]='colorSwitch.currentValue.code' class=\"color-picker__icon\"></i>\n            <i mc-icon=\"mc-angle-down-M_16\" class=\"docs-navbar-dropdown__icon\"></i>\n        </button>\n\n        <mc-dropdown #colorDropdown=\"mcDropdown\" class=\"color-picker__dropdown\" [style.margin-top]=\"0\">\n            <div class=\"color-picker__dropdown-content\">\n                <span *ngFor=\"let color of colorSwitch.data; let i = index\"\n                      [class.color-picker__dropdown-item]=\"true\" [class.mc-selected]=\"color.selected\"\n                      (click)=\"colorSwitch.setValue(i)\">\n                    <i mc-icon=\"mc-circle-8_16\" [style.color]='color.code' class=\"color-picker__icon\"></i>\n                </span>\n            </div>\n        </mc-dropdown>\n    </div>\n</header>\n");

/***/ }),

/***/ "Ar9S":
/*!******************************************************************!*\
  !*** ./packages/docs/src/app/components/footer/footer.module.ts ***!
  \******************************************************************/
/*! exports provided: FooterModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FooterModule", function() { return FooterModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _footer_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./footer.component */ "Snh7");




let FooterModule = class FooterModule {
};
FooterModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
        exports: [_footer_component__WEBPACK_IMPORTED_MODULE_3__["FooterComponent"]],
        declarations: [_footer_component__WEBPACK_IMPORTED_MODULE_3__["FooterComponent"]]
    })
], FooterModule);



/***/ }),

/***/ "BJwh":
/*!************************************************!*\
  !*** ./packages/mosaic/link/link.component.ts ***!
  \************************************************/
/*! exports provided: McLinkBase, McLinkMixinBase, baseURLRegex, McLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLinkBase", function() { return McLinkBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLinkMixinBase", function() { return McLinkMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseURLRegex", function() { return baseURLRegex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLink", function() { return McLink; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");





class McLinkBase {
}
// tslint:disable-next-line: naming-convention
const McLinkMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McLinkBase));
const baseURLRegex = /^http(s)?:\/\//;
let McLink = class McLink extends McLinkMixinBase {
    constructor(elementRef, focusMonitor, changeDetector) {
        super();
        this.elementRef = elementRef;
        this.focusMonitor = focusMonitor;
        this.changeDetector = changeDetector;
        this._disabled = false;
        this._pseudo = false;
        this._noUnderline = false;
        this._useVisited = false;
        this.focusMonitor.monitor(elementRef.nativeElement, true);
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        const newValue = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this.changeDetector.markForCheck();
        }
    }
    get pseudo() {
        return this._pseudo;
    }
    set pseudo(value) {
        this._pseudo = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    get noUnderline() {
        return this._noUnderline;
    }
    set noUnderline(value) {
        this._noUnderline = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    get useVisited() {
        return this._useVisited;
    }
    set useVisited(value) {
        this._useVisited = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    get hasIcon() {
        return !!this.icon;
    }
    get print() {
        var _a;
        return this._print || ((_a = this.getHostElement().href) === null || _a === void 0 ? void 0 : _a.replace(baseURLRegex, ''));
    }
    set print(value) {
        this.printMode = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        this._print = value;
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    focus() {
        this.getHostElement().focus();
    }
    getHostElement() {
        return this.elementRef.nativeElement;
    }
};
McLink.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
];
McLink.propDecorators = {
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    pseudo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    noUnderline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    useVisited: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    print: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_4__["McIcon"],] }]
};
McLink = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"])({
        selector: '[mc-link]',
        exportAs: 'mcLink',
        inputs: ['tabIndex'],
        host: {
            class: 'mc-link',
            '[class.mc-link_no-underline]': 'noUnderline',
            '[class.mc-link_use-visited]': 'useVisited',
            '[class.mc-link_pseudo]': 'pseudo',
            '[class.mc-link_print]': 'printMode',
            '[class.mc-text-only]': '!hasIcon',
            '[class.mc-text-with-icon]': 'hasIcon',
            '[attr.disabled]': 'disabled || null',
            '[attr.tabindex]': 'tabIndex',
            '[attr.print]': 'print'
        }
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"],
        _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"],
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]])
], McLink);



/***/ }),

/***/ "BTJx":
/*!****************************************!*\
  !*** ./packages/docs/src/polyfills.ts ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_es_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/es/array */ "l0aJ");
/* harmony import */ var core_js_es_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_es_array__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_es_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/es/date */ "ftKg");
/* harmony import */ var core_js_es_date__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_es_date__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_es_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/es/function */ "cGxN");
/* harmony import */ var core_js_es_function__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_es_function__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_es_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/es/map */ "Xv9K");
/* harmony import */ var core_js_es_map__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_es_map__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_es_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/es/math */ "6hpn");
/* harmony import */ var core_js_es_math__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_es_math__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_es_number__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/es/number */ "7sbD");
/* harmony import */ var core_js_es_number__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_es_number__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_es_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/es/object */ "5P7u");
/* harmony import */ var core_js_es_object__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_es_object__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_es_parse_float__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/es/parse-float */ "tgv2");
/* harmony import */ var core_js_es_parse_float__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_es_parse_float__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_es_parse_int__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/es/parse-int */ "CQOm");
/* harmony import */ var core_js_es_parse_int__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_es_parse_int__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_es_reflect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/es/reflect */ "SkA5");
/* harmony import */ var core_js_es_reflect__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_es_reflect__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_es_regexp__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/es/regexp */ "Kv9l");
/* harmony import */ var core_js_es_regexp__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_es_regexp__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_es_set__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/es/set */ "mjWP");
/* harmony import */ var core_js_es_set__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_es_set__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_es_string__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/es/string */ "mCUB");
/* harmony import */ var core_js_es_string__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_es_string__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/es/symbol */ "H0pb");
/* harmony import */ var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_es_symbol__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! zone.js/dist/zone */ "pDpN");
/* harmony import */ var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_14__);
/* tslint:disable:ordered-imports */
// tslint:disable:no-import-side-effect
// This file includes polyfills needed by Angular and is loaded before
// the app. You can add your own extra polyfills to this file.

















/***/ }),

/***/ "BtfD":
/*!****************************************!*\
  !*** ./packages/docs/src/app/index.ts ***!
  \****************************************/
/*! exports provided: DocsComponent, AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _docs_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./docs.component */ "tVw0");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DocsComponent", function() { return _docs_component__WEBPACK_IMPORTED_MODULE_0__["DocsComponent"]; });

/* harmony import */ var _docs_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./docs.module */ "gWp9");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return _docs_module__WEBPACK_IMPORTED_MODULE_1__["AppModule"]; });





/***/ }),

/***/ "CYWk":
/*!**********************************************************************!*\
  !*** ./packages/docs/src/app/containers/homepage/homepage.module.ts ***!
  \**********************************************************************/
/*! exports provided: HomepageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepageModule", function() { return HomepageModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _components_navbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/navbar */ "pNyw");
/* harmony import */ var _homepage_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./homepage.component */ "I1VR");






let HomepageModule = class HomepageModule {
};
HomepageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"], _components_navbar__WEBPACK_IMPORTED_MODULE_4__["NavbarModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__["McButtonModule"]],
        exports: [_homepage_component__WEBPACK_IMPORTED_MODULE_5__["HomepageComponent"]],
        declarations: [_homepage_component__WEBPACK_IMPORTED_MODULE_5__["HomepageComponent"]]
    })
], HomepageModule);



/***/ }),

/***/ "Cb09":
/*!***********************************************************************!*\
  !*** ./packages/docs/src/app/components/anchors/anchors.component.ts ***!
  \***********************************************************************/
/*! exports provided: AnchorsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorsComponent", function() { return AnchorsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_anchors_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./anchors.component.html */ "Ew7P");
/* harmony import */ var _anchors_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./anchors.scss */ "P19e");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "kU1M");








let AnchorsComponent = class AnchorsComponent {
    constructor(router, route, element, ref, document) {
        this.router = router;
        this.route = route;
        this.element = element;
        this.ref = ref;
        this.document = document;
        this.anchors = [];
        this.headerSelectors = '.mc-display-3.title, .docs-header-link_3';
        this.click = false;
        this.headerHeight = 64;
        // coef for calculating the distance between anchor and header when scrolling (== headerHeight * anchorHeaderCoef)
        this.anchorHeaderCoef = 2;
        this.noSmoothScrollDebounce = 10;
        this.debounceTime = 15;
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        this.fragment = '';
        this.activeClass = 'anchors-menu__list-element_active';
        this.isSmoothScrollSupported = 'scrollBehavior' in this.document.documentElement.style;
        if (!this.isSmoothScrollSupported) {
            this.debounceTime = this.noSmoothScrollDebounce;
        }
        this.currentUrl = router.url.split('#')[0];
        localStorage.setItem('PT_nextRoute', this.currentUrl);
        this.container = '.anchors-menu';
        this.pathName = this.router.url;
        this.router.events.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed)).subscribe((event) => {
            if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_5__["NavigationEnd"]) {
                const rootUrl = router.url.split('#')[0];
                if (rootUrl !== this.currentUrl) {
                    localStorage.setItem('PT_nextRoute', rootUrl);
                    this.currentUrl = rootUrl;
                    this.pathName = this.router.url;
                }
            }
        });
    }
    ngOnInit() {
        // attached to anchor's change in the address bar manually or by clicking on the anchor
        this.route.fragment.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed)).subscribe((fragment) => {
            this.fragment = fragment;
            const index = this.getAnchorIndex(fragment);
            if (index) {
                this.setFragment(index);
            }
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    getAnchorIndex(urlFragment) {
        let index = 0;
        this.anchors.forEach((anchor, i) => {
            if (anchor.href === `${urlFragment}`) {
                index = i;
            }
        });
        return index;
    }
    setScrollPosition() {
        this.anchors = this.createAnchors();
        this.scrollContainer = this.document || window;
        const target = this.document.getElementById(this.fragment);
        if (target) {
            const index = this.getAnchorIndex(this.fragment);
            if (index) {
                this.setFragment(index);
            }
            target.scrollTop += this.headerHeight;
            target.scrollIntoView();
        }
        if (this.scrollContainer) {
            Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["fromEvent"])(this.scrollContainer, 'scroll').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this.destroyed), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["debounceTime"])(this.debounceTime))
                .subscribe(() => this.onScroll());
        }
        this.ref.detectChanges();
    }
    /* TODO Техдолг: при изменении ширины экрана должен переопределяться параметр top
    *   делать это по window:resize нельзя, т.к. изменение ширины контента страницы проиходит после window:resize */
    onResize() {
        const headers = Array.from(this.document.querySelectorAll(this.headerSelectors));
        for (let i = 0; i < this.anchors.length; i++) {
            const { top } = headers[i].getBoundingClientRect();
            this.anchors[i].top = top;
        }
        this.ref.detectChanges();
    }
    getScrollOffset() {
        return window.pageYOffset + this.headerHeight * this.anchorHeaderCoef;
    }
    isScrolledToEnd() {
        const documentHeight = this.document.documentElement.scrollHeight;
        const scrollTop = window.pageYOffset || this.document.documentElement.scrollTop || this.document.body.scrollTop;
        const clientHeight = this.document.documentElement.clientHeight;
        const scrollHeight = scrollTop + clientHeight;
        // scrollHeight should be strictly equal to documentHeight, but in Edge it is slightly larger
        return scrollHeight >= documentHeight;
    }
    createAnchors() {
        const anchors = [];
        const headers = Array.from(this.document.querySelectorAll(this.headerSelectors));
        if (headers.length) {
            const bodyTop = this.document.body.getBoundingClientRect().top;
            for (let i = 0; i < headers.length; i++) {
                const name = headers[i].innerText.trim();
                const anchorHeader = headers[i].querySelector('span');
                const href = anchorHeader ? `${anchorHeader.id}` : '';
                const top = headers[i].getBoundingClientRect().top - bodyTop + this.headerHeight;
                anchors.push({
                    href,
                    name,
                    active: i === 0,
                    top
                });
            }
        }
        if (anchors.length) {
            anchors[0].top = this.headerHeight;
        }
        return anchors;
    }
    onScroll() {
        if (this.isScrolledToEnd()) {
            this.setActiveAnchor(this.anchors.length - 1);
            this.ref.detectChanges();
            return;
        }
        for (let i = 0; i < this.anchors.length; i++) {
            if (this.isLinkActive(this.anchors[i], this.anchors[i + 1])) {
                this.setActiveAnchor(i);
            }
        }
        this.ref.detectChanges();
    }
    isLinkActive(currentLink, nextLink) {
        // A link is active if the scroll position is lower than the anchor position + headerHeight*anchorHeaderCoef
        // and above the next anchor
        const scrollOffset = this.getScrollOffset();
        return scrollOffset >= currentLink.top && !(nextLink && nextLink.top < scrollOffset);
    }
    setFragment(index) {
        if (this.isScrolledToEnd()) {
            this.setActiveAnchor(this.anchors.length - 1);
            return;
        }
        this.click = true;
        this.setActiveAnchor(index);
    }
    setActiveAnchor(index) {
        for (const anchor of this.anchors) {
            anchor.active = false;
        }
        this.anchors[index].active = true;
    }
};
AnchorsComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"] },
    { type: Document, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"],] }] }
];
AnchorsComponent.propDecorators = {
    anchors: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    headerSelectors: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
};
AnchorsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'anchors',
        template: _raw_loader_anchors_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_anchors_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"],
        _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"],
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"],
        Document])
], AnchorsComponent);



/***/ }),

/***/ "DQSY":
/*!************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-splitter.js ***!
  \************************************************************/
/*! exports provided: Direction, McGutterDirective, McSplitterAreaDirective, McSplitterComponent, McSplitterModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Direction", function() { return Direction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McGutterDirective", function() { return McGutterDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSplitterAreaDirective", function() { return McSplitterAreaDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSplitterComponent", function() { return McSplitterComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSplitterModule", function() { return McSplitterModule; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");





var Direction;
(function (Direction) {
    Direction["Horizontal"] = "horizontal";
    Direction["Vertical"] = "vertical";
})(Direction || (Direction = {}));
class McGutterDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._direction = Direction.Vertical;
        this._order = 0;
        this._size = 6;
        this.dragged = false;
    }
    get direction() {
        return this._direction;
    }
    set direction(direction) {
        this._direction = direction;
    }
    get order() {
        return this._order;
    }
    set order(order) {
        this._order = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(order);
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(size);
    }
    ngOnInit() {
        this.setStyle("flex-basis" /* FlexBasis */, Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceCssPixelValue"])(this.size));
        this.setStyle(this.isVertical() ? "height" /* Height */ : "width" /* Width */, Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceCssPixelValue"])(this.size));
        this.setStyle("order" /* Order */, this.order);
        if (!this.isVertical()) {
            this.setStyle("height" /* Height */, '100%');
        }
        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options
        this.setStyle("flex-direction" /* FlexDirection */, this.isVertical() ? 'row' : 'column');
    }
    isVertical() {
        return this.direction === Direction.Vertical;
    }
    setStyle(property, value) {
        this.renderer.setStyle(this.elementRef.nativeElement, property, value);
    }
}
McGutterDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: 'mc-gutter',
                host: {
                    class: 'mc-gutter',
                    '[class.mc-gutter_vertical]': 'isVertical()',
                    '[class.mc-gutter_dragged]': 'dragged',
                    '(mousedown)': 'dragged = true'
                }
            },] }
];
/** @nocollapse */
McGutterDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] }
];
McGutterDirective.propDecorators = {
    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    order: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};
class McSplitterComponent {
    constructor(elementRef, changeDetectorRef, ngZone, renderer) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.areas = [];
        this.isDragging = false;
        this.areaPositionDivider = 2;
        this.listeners = [];
        this._hideGutters = false;
        this._disabled = false;
        this._gutterSize = 6;
    }
    get hideGutters() {
        return this._hideGutters;
    }
    set hideGutters(value) {
        this._hideGutters = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
    }
    get direction() {
        return this._direction;
    }
    set direction(direction) {
        this._direction = direction;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(disabled);
    }
    get gutterSize() {
        return this._gutterSize;
    }
    set gutterSize(gutterSize) {
        const size = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(gutterSize);
        this._gutterSize = size > 0 ? size : this.gutterSize;
    }
    addArea(area) {
        const index = this.areas.length;
        const order = index * this.areaPositionDivider;
        const size = area.getSize();
        area.setOrder(order);
        this.areas.push({
            area,
            index,
            order,
            initialSize: size
        });
    }
    ngOnInit() {
        if (!this.direction) {
            this.direction = Direction.Horizontal;
        }
        this.setStyle("flex-direction" /* FlexDirection */, this.isVertical() ? 'column' : 'row');
    }
    onMouseDown(event, leftAreaIndex, rightAreaIndex) {
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        const leftArea = this.areas[leftAreaIndex];
        const rightArea = this.areas[rightAreaIndex];
        const startPoint = {
            x: event.screenX,
            y: event.screenY
        };
        leftArea.initialSize = leftArea.area.getSize();
        rightArea.initialSize = rightArea.area.getSize();
        this.areas.forEach((item) => {
            const size = item.area.getSize();
            item.area.disableFlex();
            item.area.setSize(size);
        });
        this.ngZone.runOutsideAngular(() => {
            this.listeners.push(this.renderer.listen('document', 'mouseup', () => this.onMouseUp()));
        });
        this.ngZone.runOutsideAngular(() => {
            this.listeners.push(this.renderer.listen('document', 'mousemove', (e) => this.onMouseMove(e, startPoint, leftArea, rightArea)));
        });
        this.isDragging = true;
    }
    removeArea(area) {
        let indexToRemove = -1;
        this.areas.some((item, index) => {
            if (item.area === area) {
                indexToRemove = index;
                return true;
            }
            return false;
        });
        if (indexToRemove === -1) {
            return;
        }
        this.areas.splice(indexToRemove, 1);
    }
    isVertical() {
        return this.direction === Direction.Vertical;
    }
    updateGutter() {
        this.gutters.forEach((gutter) => {
            if (gutter.dragged) {
                gutter.dragged = false;
                this.changeDetectorRef.detectChanges();
            }
        });
    }
    onMouseMove(event, startPoint, leftArea, rightArea) {
        if (!this.isDragging || this.disabled) {
            return;
        }
        const endPoint = {
            x: event.screenX,
            y: event.screenY
        };
        const offset = this.isVertical()
            ? startPoint.y - endPoint.y
            : startPoint.x - endPoint.x;
        const newLeftAreaSize = leftArea.initialSize - offset;
        const newRightAreaSize = rightArea.initialSize + offset;
        const minLeftAreaSize = leftArea.area.getMinSize();
        const minRightAreaSize = rightArea.area.getMinSize();
        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {
            return;
        }
        else if (newLeftAreaSize <= 0) {
            leftArea.area.setSize(0);
            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);
        }
        else if (newRightAreaSize <= 0) {
            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);
            rightArea.area.setSize(0);
        }
        else {
            leftArea.area.setSize(newLeftAreaSize);
            rightArea.area.setSize(newRightAreaSize);
        }
    }
    onMouseUp() {
        while (this.listeners.length > 0) {
            const unsubscribe = this.listeners.pop();
            if (unsubscribe) {
                unsubscribe();
            }
        }
        this.isDragging = false;
        this.updateGutter();
    }
    setStyle(property, value) {
        this.renderer.setStyle(this.elementRef.nativeElement, property, value);
    }
}
McSplitterComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-splitter',
                exportAs: 'mcSplitter',
                host: {
                    class: 'mc-splitter'
                },
                preserveWhitespaces: false,
                template: "<ng-content></ng-content>\n\n<ng-template ngFor let-area [ngForOf]=\"areas\" let-index=\"index\" let-last=\"last\">\n    <mc-gutter *ngIf=\"last === false\"\n               [direction]=\"direction\"\n               [attr.disabled]=\"disabled || null\"\n               [style.display]=\"hideGutters ? 'none' : 'flex'\"\n               [size]=\"gutterSize\"\n               [order]=\"index * 2 + 1\"\n               (mousedown)=\"onMouseDown($event, index, index + 1)\">\n    </mc-gutter>\n</ng-template>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-splitter{display:flex;flex-wrap:nowrap;align-items:stretch}.mc-gutter,.mc-splitter,.mc-splitter .mc-splitter-area{overflow:hidden}.mc-gutter{display:flex;flex-grow:0;flex-shrink:0;justify-content:center;align-items:center}.mc-gutter.mc-gutter_vertical>.mc-icon{transform:rotate(90deg)}"]
            },] }
];
/** @nocollapse */
McSplitterComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] }
];
McSplitterComponent.propDecorators = {
    gutters: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"], args: [McGutterDirective,] }],
    hideGutters: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    gutterSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};
class McSplitterAreaDirective {
    constructor(elementRef, renderer, splitter) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.splitter = splitter;
    }
    disableFlex() {
        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');
    }
    ngOnInit() {
        this.splitter.addArea(this);
        this.removeStyle("max-width" /* MaxWidth */);
        if (this.splitter.direction === Direction.Vertical) {
            this.setStyle("width" /* Width */, '100%');
            this.removeStyle("height" /* Height */);
        }
        else {
            this.setStyle("height" /* Height */, '100%');
            this.removeStyle("width" /* Width */);
        }
    }
    ngOnDestroy() {
        this.splitter.removeArea(this);
    }
    setOrder(order) {
        this.setStyle("order" /* Order */, order);
    }
    setSize(size) {
        if (size) {
            const sz = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(size);
            this.setStyle(this.getSizeProperty(), Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceCssPixelValue"])(sz));
        }
    }
    getSize() {
        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];
    }
    getMinSize() {
        const styles = getComputedStyle(this.elementRef.nativeElement);
        return parseFloat(styles[this.getMinSizeProperty()]);
    }
    isVertical() {
        return this.splitter.direction === Direction.Vertical;
    }
    getMinSizeProperty() {
        return this.isVertical()
            ? "min-height" /* MinHeight */
            : "minWidth" /* MinWidth */;
    }
    getOffsetSizeProperty() {
        return this.isVertical()
            ? "offsetHeight" /* OffsetHeight */
            : "offsetWidth" /* OffsetWidth */;
    }
    getSizeProperty() {
        return this.isVertical()
            ? "height" /* Height */
            : "width" /* Width */;
    }
    setStyle(style, value) {
        this.renderer.setStyle(this.elementRef.nativeElement, style, value);
    }
    removeStyle(style) {
        this.renderer.removeStyle(this.elementRef.nativeElement, style);
    }
}
McSplitterAreaDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mc-splitter-area]',
                host: {
                    class: 'mc-splitter-area'
                }
            },] }
];
/** @nocollapse */
McSplitterAreaDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] },
    { type: McSplitterComponent }
];

class McSplitterModule {
}
McSplitterModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__["McIconModule"]
                ],
                exports: [
                    McGutterDirective,
                    McSplitterAreaDirective,
                    McSplitterComponent
                ],
                declarations: [
                    McGutterDirective,
                    McSplitterAreaDirective,
                    McSplitterComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "E6iK":
/*!********************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-progress-spinner.js ***!
  \********************************************************************/
/*! exports provided: McProgressSpinner, McProgressSpinnerBase, McProgressSpinnerMixinBase, McProgressSpinnerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressSpinner", function() { return McProgressSpinner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressSpinnerBase", function() { return McProgressSpinnerBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressSpinnerMixinBase", function() { return McProgressSpinnerMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressSpinnerModule", function() { return McProgressSpinnerModule; });
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");





let idIterator = 0;
const MIN_PERCENT = 0;
const MAX_PERCENT = 100;
class McProgressSpinnerBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McProgressSpinnerMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(McProgressSpinnerBase, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ThemePalette"].Primary);
const MAX_DASH_ARRAY = 273;
class McProgressSpinner extends McProgressSpinnerMixinBase {
    constructor(elementRef) {
        super(elementRef);
        this.id = `mc-progress-spinner-${idIterator++}`;
        this.value = 0;
        this.mode = 'determinate';
    }
    get percentage() {
        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;
    }
    get dashOffsetPercent() {
        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;
    }
}
McProgressSpinner.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-progress-spinner',
                template: "<div class=\"mc-progress-spinner__inner\"\n     [ngClass]=\"{'mc-progress-spinner__inner--indeterminate': mode === 'indeterminate'}\">\n    <svg focusable=\"false\"\n         preserveAspectRatio=\"xMidYMid meet\"\n         viewBox=\"0 0 100 100\"\n         class=\"mc-progress-spinner__svg\">\n        <circle cx=\"50%\"\n                cy=\"50%\"\n                r=\"42.5%\"\n                class=\"mc-progress-spinner__circle\"\n                [ngStyle]=\"{'stroke-dashoffset': mode === 'determinate' ? dashOffsetPercent : null}\">\n        </circle>\n    </svg>\n</div>\n\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                inputs: ['color'],
                host: {
                    class: 'mc-progress-spinner',
                    '[attr.id]': 'id'
                },
                styles: ["@-webkit-keyframes mc-progress-spinner-indeterminate{to{transform:rotate(270deg)}}@keyframes mc-progress-spinner-indeterminate{to{transform:rotate(270deg)}}.mc-progress-spinner{display:inline-block;width:var(--mc-progress-spinner-size-size,16px);height:var(--mc-progress-spinner-size-size,16px);overflow:hidden}.mc-progress-spinner__circle{fill:none;stroke:#000;stroke-dasharray:273%;stroke-width:13%;transition:stroke-dashoffset .3s;transform-origin:center center}.mc-progress-spinner__inner{width:100%;height:100%;transform:rotate(-90deg)}.mc-progress-spinner__inner--indeterminate{-webkit-animation:mc-progress-spinner-indeterminate 1.5s cubic-bezier(.455,.03,.515,.955) infinite;animation:mc-progress-spinner-indeterminate 1.5s cubic-bezier(.455,.03,.515,.955) infinite}.mc-progress-spinner__inner--indeterminate .mc-progress-spinner__circle{stroke-dashoffset:80%}.mc-progress-spinner__svg{width:100%;height:100%}"]
            },] }
];
/** @nocollapse */
McProgressSpinner.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] }
];
McProgressSpinner.propDecorators = {
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McProgressSpinnerModule {
}
McProgressSpinnerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]
                ],
                exports: [
                    McProgressSpinner
                ],
                declarations: [
                    McProgressSpinner
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "EQR/":
/*!********************************************************************!*\
  !*** ./packages/docs/src/app/components/sidenav/sidenav.module.ts ***!
  \********************************************************************/
/*! exports provided: SidenavModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidenavModule", function() { return SidenavModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/accordion */ "GF+f");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/documentation-items/documentation-items */ "rMhK");
/* harmony import */ var _sidenav_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sidenav.component */ "m73n");








let SidenavModule = class SidenavModule {
};
SidenavModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"],
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"],
            _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__["CdkAccordionModule"]
        ],
        exports: [_sidenav_component__WEBPACK_IMPORTED_MODULE_7__["ComponentSidenav"]],
        declarations: [_sidenav_component__WEBPACK_IMPORTED_MODULE_7__["ComponentSidenav"]],
        providers: [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__["DocumentationItems"]]
    })
], SidenavModule);



/***/ }),

/***/ "Ew7P":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/anchors/anchors.component.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div  class=\"anchors-menu\">\n    <div class=\"anchors-menu__container\">\n        <div class=\"anchors-menu__list\">\n            <div *ngFor=\"let anchor of anchors; let i = index\" class=\"anchors-menu__list-element {{anchors[i].active? activeClass: null}}\">\n                <a [routerLink]=\"[this.pathName]\" fragment=\"{{anchor.href}}\" (click)=\"setFragment(i)\" class=\"anchors-menu__link\">{{anchor.name}}</a>\n            </div>\n        </div>\n    </div>\n</div>\n");

/***/ }),

/***/ "F8q5":
/*!********************************************************************!*\
  !*** ./packages/docs/$$_lazy_route_resource lazy namespace object ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "F8q5";

/***/ }),

/***/ "G+fD":
/*!**********************************************************************!*\
  !*** ./packages/docs/src/app/shared/doc-viewer/doc-viewer-module.ts ***!
  \**********************************************************************/
/*! exports provided: DocViewerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocViewerModule", function() { return DocViewerModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/tabs */ "6AiE");
/* harmony import */ var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/tooltip */ "YK9X");
/* harmony import */ var _copier_copier_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../copier/copier.service */ "bLap");
/* harmony import */ var _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../example-viewer/example-viewer */ "iw/G");
/* harmony import */ var _stackblitz_stackblitz_button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../stackblitz/stackblitz-button */ "waD+");
/* harmony import */ var _doc_viewer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./doc-viewer */ "RuMu");











// ExampleViewer is included in the DocViewerModule because they have a circular dependency.
let DocViewerModule = class DocViewerModule {
};
DocViewerModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [
            _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__["McButtonModule"],
            _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_5__["McTabsModule"],
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _stackblitz_stackblitz_button__WEBPACK_IMPORTED_MODULE_9__["StackblitzButtonModule"],
            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalModule"],
            _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__["McToolTipModule"]
        ],
        providers: [_copier_copier_service__WEBPACK_IMPORTED_MODULE_7__["CopierService"]],
        declarations: [_doc_viewer__WEBPACK_IMPORTED_MODULE_10__["DocViewer"], _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__["ExampleViewer"]],
        entryComponents: [_example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__["ExampleViewer"]],
        exports: [_doc_viewer__WEBPACK_IMPORTED_MODULE_10__["DocViewer"], _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_8__["ExampleViewer"]]
    })
], DocViewerModule);



/***/ }),

/***/ "GEIk":
/*!**********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-toggle.js ***!
  \**********************************************************/
/*! exports provided: McToggleBase, McToggleChange, McToggleComponent, McToggleMixinBase, McToggleModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McToggleBase", function() { return McToggleBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McToggleChange", function() { return McToggleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McToggleComponent", function() { return McToggleComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McToggleMixinBase", function() { return McToggleMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McToggleModule", function() { return McToggleModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "s7LF");







let nextUniqueId = 0;
class McToggleBase {
    // tslint:disable-next-line: naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line: naming-convention
const McToggleMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McToggleBase), _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ThemePalette"].Primary));
class McToggleChange {
}
class McToggleComponent extends McToggleMixinBase {
    constructor(
    // tslint:disable-next-line:naming-convention
    _elementRef, _focusMonitor, _changeDetectorRef) {
        super(_elementRef);
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this.labelPosition = 'right';
        this.ariaLabel = '';
        this.ariaLabelledby = null;
        this.name = null;
        this._disabled = false;
        this._checked = false;
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.uniqueId = `mc-toggle-${++nextUniqueId}`;
        // tslint:disable-next-line:no-empty
        this.onTouchedCallback = () => { };
        // tslint:disable-next-line:no-empty
        this.onChangeCallback = (_) => { };
        this.id = this.uniqueId;
        this._focusMonitor.monitor(this._elementRef.nativeElement, true);
    }
    get inputId() {
        return `${this.id || this.uniqueId}-input`;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== this._disabled) {
            this._disabled = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        if (value !== this._checked) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
    }
    focus() {
        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');
    }
    getAriaChecked() {
        return this.checked;
    }
    onChangeEvent(event) {
        event.stopPropagation();
        this.updateModelValue();
        this.emitChangeEvent();
    }
    onLabelTextChange() {
        this._changeDetectorRef.markForCheck();
    }
    onInputClick(event) {
        event.stopPropagation();
    }
    writeValue(value) {
        this.checked = !!value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    updateModelValue() {
        this._checked = !this.checked;
        this.onTouchedCallback();
    }
    emitChangeEvent() {
        const event = new McToggleChange();
        event.source = this;
        event.checked = this.checked;
        this.onChangeCallback(this.checked);
        this.change.emit(event);
    }
}
McToggleComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-toggle',
                exportAs: 'mcToggle',
                template: "<label [attr.for]=\"inputId\" class=\"mc-toggle-layout\">\n    <div class=\"mc-toggle__container\" [class.left]=\"labelPosition === 'left'\">\n        <input #input\n               type=\"checkbox\"\n               role=\"switch\"\n               class=\"mc-toggle-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (click)=\"onInputClick($event)\"\n               (change)=\"onChangeEvent($event)\"/>\n        <div class=\"mc-toggle-bar-container\">\n            <div class=\"mc-toggle__overlay\"></div>\n            <div class=\"mc-toggle-bar\">\n                <div class=\"mc-toggle__circle\" [@switch]=\"checked\"></div>\n            </div>\n        </div>\n        <div class=\"mc-toggle__content\"\n             [class.left]=\"labelPosition === 'left'\"\n             [class.right]=\"labelPosition === 'right'\">\n            <span class=\"mc-toggle-label\" (cdkObserveContent)=\"onLabelTextChange()\">\n                <ng-content></ng-content>\n            </span>\n        </div>\n    </div>\n</label>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                inputs: ['color', 'tabIndex'],
                host: {
                    class: 'mc-toggle',
                    '[id]': 'id',
                    '[attr.id]': 'id',
                    '[class.mc-disabled]': 'disabled',
                    '[class.mc-active]': 'checked'
                },
                animations: [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('switch', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ left: '50%' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({ left: '1px' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('true <=> false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])('150ms'))
                    ])
                ],
                providers: [{
                        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"], useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => McToggleComponent), multi: true
                    }],
                styles: [".mc-toggle{display:inline-block}.mc-toggle .mc-toggle-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mc-toggle .mc-toggle-bar{position:relative;border-width:1px;border-style:solid}.mc-toggle .mc-toggle-bar.mc-toggle-label-position-left{order:1}.mc-toggle .mc-toggle-bar-container{position:relative}.mc-toggle__container{display:flex;align-items:center;position:relative}.mc-toggle__container.left{flex-direction:row-reverse}.mc-toggle__content.left{margin-right:var(--mc-toggle-size-label-margin,8px)}.mc-toggle__content.right{margin-left:var(--mc-toggle-size-label-margin,8px)}.mc-toggle__circle{position:absolute;border-width:1px;border-style:solid;border-radius:100%;margin-top:-1px;margin-left:-1px;transform:translateX(-1px)}.mc-toggle__overlay{position:absolute;top:0;left:0;z-index:1}.mc-toggle:not(.mc-toggle_small) .mc-toggle-bar,.mc-toggle:not(.mc-toggle_small) .mc-toggle__overlay{height:var(--mc-toggle-size-height,16px);width:var(--mc-toggle-size-width,28px);border-radius:var(--mc-toggle-size-border-radius,9px)}.mc-toggle:not(.mc-toggle_small) .mc-toggle__circle{height:var(--mc-toggle-size-height,16px);width:var(--mc-toggle-size-height,16px)}.mc-toggle.mc-toggle_small .mc-toggle-bar,.mc-toggle.mc-toggle_small .mc-toggle__overlay{height:var(--mc-toggle-small-size-height,14px);width:var(--mc-toggle-small-size-width,24px);border-radius:var(--mc-toggle-small-size-border-radius,8px)}.mc-toggle.mc-toggle_small .mc-toggle__circle{height:var(--mc-toggle-small-size-height,14px);width:var(--mc-toggle-small-size-height,14px)}.mc-toggle:not(.mc-disabled){cursor:pointer}"]
            },] }
];
/** @nocollapse */
McToggleComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
];
McToggleComponent.propDecorators = {
    inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['input', { static: false },] }],
    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['aria-label',] }],
    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['aria-labelledby',] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }]
};

class McToggleModule {
}
McToggleModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"]],
                exports: [McToggleComponent],
                declarations: [McToggleComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "Gncw":
/*!************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-textarea.js ***!
  \************************************************************/
/*! exports provided: MC_TEXTAREA_VALUE_ACCESSOR, McTextarea, McTextareaBase, McTextareaMixinBase, McTextareaModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TEXTAREA_VALUE_ACCESSOR", function() { return MC_TEXTAREA_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTextarea", function() { return McTextarea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTextareaBase", function() { return McTextareaBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTextareaMixinBase", function() { return McTextareaMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTextareaModule", function() { return McTextareaModule; });
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "SVse");









const MC_TEXTAREA_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MC_TEXTAREA_VALUE_ACCESSOR');
let nextUniqueId = 0;
class McTextareaBase {
    constructor(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
    }
}
// tslint:disable-next-line:naming-convention
const McTextareaMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinErrorState"])(McTextareaBase);
class McTextarea extends McTextareaMixinBase {
    constructor(elementRef, ngControl, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor, ngZone) {
        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this.elementRef = elementRef;
        this.ngControl = ngControl;
        this.ngZone = ngZone;
        this.canGrow = true;
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.focused = false;
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.controlType = 'textarea';
        this.uid = `mc-textsrea-${nextUniqueId++}`;
        this._disabled = false;
        this._required = false;
        this.lineHeight = 0;
        this.freeRowsHeight = 0;
        this.minHeight = 0;
        // If no input value accessor was explicitly specified, use the element as the textarea value
        // accessor.
        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;
        this.previousNativeValue = this.value;
        // Force setter to be called in case id was not specified.
        this.id = this.id;
        const growObserver = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(elementRef.nativeElement, 'input');
        this.growSubscription = growObserver.subscribe(this.grow.bind(this));
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this.uid;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get value() {
        return this.valueAccessor.value;
    }
    set value(value) {
        if (value !== this.value) {
            this.valueAccessor.value = value;
            this.stateChanges.next();
        }
    }
    ngOnInit() {
        setTimeout(() => this.grow(), 0);
        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight, 10);
        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop, 10);
        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom, 10);
        // tslint:disable-next-line:no-magic-numbers
        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;
        this.freeRowsHeight = this.lineHeight;
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
        this.growSubscription.unsubscribe();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
        // We need to dirty-check the native element's value, because there are some cases where
        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
        // updating the value using `emitEvent: false`).
        this.dirtyCheckNativeValue();
    }
    /** Grow textarea height to avoid vertical scroll  */
    grow() {
        if (!this.canGrow) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            const textarea = this.elementRef.nativeElement;
            const outerHeight = parseInt(window.getComputedStyle(textarea).height, 10);
            const diff = outerHeight - textarea.clientHeight;
            textarea.style.minHeight = 0; // this line is important to height recalculation
            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);
            textarea.style.minHeight = `${height}px`;
        });
    }
    /** Focuses the textarea. */
    focus() {
        this.elementRef.nativeElement.focus();
    }
    /** Callback for the cases where the focused state of the textarea changes. */
    focusChanged(isFocused) {
        if (isFocused !== this.focused) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get empty() {
        return !this.elementRef.nativeElement.value && !this.isBadInput();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    onContainerClick() {
        this.focus();
    }
    /** Does some manual dirty checking on the native textarea `value` property. */
    dirtyCheckNativeValue() {
        const newValue = this.value;
        if (this.previousNativeValue !== newValue) {
            this.previousNativeValue = newValue;
            this.stateChanges.next();
        }
    }
    /** Checks whether the textarea is invalid based on the native validation. */
    isBadInput() {
        // The `validity` property won't be present on platform-server.
        const validity = this.elementRef.nativeElement.validity;
        return validity && validity.badInput;
    }
}
McTextarea.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: 'textarea[mcTextarea]',
                exportAs: 'mcTextarea',
                host: {
                    class: 'mc-textarea',
                    '[class.mc-textarea-resizable]': '!canGrow',
                    '[attr.id]': 'id',
                    '[attr.placeholder]': 'placeholder',
                    '[attr.aria-invalid]': 'errorState',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.required]': 'required',
                    '(blur)': 'focusChanged(false)',
                    '(focus)': 'focusChanged(true)'
                },
                providers: [{ provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_4__["McFormFieldControl"], useExisting: McTextarea }]
            },] }
];
/** @nocollapse */
McTextarea.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ErrorStateMatcher"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_TEXTAREA_VALUE_ACCESSOR,] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
];
McTextarea.propDecorators = {
    canGrow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

class McTextareaModule {
}
McTextareaModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]],
                exports: [McTextarea],
                declarations: [McTextarea]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "HEAX":
/*!*************************************************************************!*\
  !*** ./packages/docs/src/app/shared/example-viewer/example-viewer.scss ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (":host {\n  display: block;\n  padding: 20px 0 0;\n}\n\n.docs-example-source__show {\n  text-align: center;\n  padding: 8px;\n}\n\n.docs-example-source__hide {\n  display: none;\n}\n\n.docs-example-source-copy {\n  display: flex;\n  position: absolute;\n  top: 40px;\n  right: 0;\n  z-index: 10;\n  padding: 6px 6px;\n}\n\n.docs-example-source-copy .code-copy__copied {\n  display: none;\n  font-size: 14px;\n}\n\n.docs-example-source-copy_success .code-copy__copied {\n  display: block;\n}\n\n.docs-example-source-copy_success .code-copy__icon {\n  display: none;\n}\n\n.docs-example-viewer-title {\n  align-content: center;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  padding: 8px 20px;\n}\n\n.docs-example-viewer-title-spacer {\n  flex: 1 1 auto;\n}\n\n.docs-example-source-wrapper {\n  min-height: 201px;\n  display: flex;\n}\n\n.docs-example-source-wrapper:hover .docs-example-source-copy {\n  display: inline-block;\n}\n\n.docs-example-viewer__source_hidden .docs-example-source-wrapper {\n  height: 201px;\n  overflow-y: hidden;\n}\n\n.docs-example-numbers {\n  text-align: right;\n  width: 44px;\n  padding: 12px 8px;\n  margin: 0;\n}\n\n.docs-example-source {\n  position: relative;\n  overflow-y: hidden;\n  display: flex;\n  margin: 0;\n  flex-grow: 1;\n  padding: 12px;\n  min-height: 150px;\n}\n\n.docs-example-source-viewer {\n  position: absolute;\n  left: 12px;\n  top: 12px;\n}\n\n.docs-example-viewer-body {\n  padding: 16px;\n  overflow: auto;\n}\n\n.docs-example-source__switcher_hide {\n  visibility: hidden;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2V4YW1wbGUtdmlld2VyLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFjO0VBQ2QsaUJBQWlCO0FBQ3JCOztBQUVBO0VBQ0ksa0JBQWtCO0VBQ2xCLFlBQVk7QUFDaEI7O0FBRUE7RUFDSSxhQUFhO0FBQ2pCOztBQUVBO0VBQ0ksYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsUUFBUTtFQUNSLFdBQVc7RUFDWCxnQkFBZ0I7QUFDcEI7O0FBUEE7RUFTUSxhQUFhO0VBQ2IsZUFBZTtBQUV2Qjs7QUFDSztFQUVPLGNBQWM7QUFDMUI7O0FBSEs7RUFNTyxhQUFhO0FBQ3pCOztBQUlBO0VBQ0kscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGlCQUFpQjtBQURyQjs7QUFJQTtFQUNJLGNBQWM7QUFEbEI7O0FBSUE7RUFDSSxpQkFBaUI7RUFDakIsYUFBYTtBQURqQjs7QUFJQTtFQUVRLHFCQUFxQjtBQUY3Qjs7QUFNQTtFQUVRLGFBQWE7RUFDYixrQkFBa0I7QUFKMUI7O0FBUUE7RUFDSSxpQkFBaUI7RUFDakIsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixTQUFTO0FBTGI7O0FBUUE7RUFDSSxrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixTQUFTO0VBQ1QsWUFBWTtFQUNaLGFBQWE7RUFDYixpQkFBaUI7QUFMckI7O0FBUUE7RUFDSSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLFNBQVM7QUFMYjs7QUFRQTtFQUNJLGFBQWE7RUFFYixjQUFjO0FBTmxCOztBQVNBO0VBQ0ksa0JBQWtCO0FBTnRCIiwiZmlsZSI6ImV4YW1wbGUtdmlld2VyLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcGFkZGluZzogMjBweCAwIDA7XG59XG5cbi5kb2NzLWV4YW1wbGUtc291cmNlX19zaG93IHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZzogOHB4O1xufVxuXG4uZG9jcy1leGFtcGxlLXNvdXJjZV9faGlkZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLmRvY3MtZXhhbXBsZS1zb3VyY2UtY29weSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA0MHB4O1xuICAgIHJpZ2h0OiAwO1xuICAgIHotaW5kZXg6IDEwO1xuICAgIHBhZGRpbmc6IDZweCA2cHg7XG5cbiAgICAuY29kZS1jb3B5X19jb3BpZWQge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgJl9zdWNjZXNzIHtcbiAgICAgICAgLmNvZGUtY29weV9fY29waWVkIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNvZGUtY29weV9faWNvbiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uZG9jcy1leGFtcGxlLXZpZXdlci10aXRsZSB7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiA4cHggMjBweDtcbn1cblxuLmRvY3MtZXhhbXBsZS12aWV3ZXItdGl0bGUtc3BhY2VyIHtcbiAgICBmbGV4OiAxIDEgYXV0bztcbn1cblxuLmRvY3MtZXhhbXBsZS1zb3VyY2Utd3JhcHBlciB7XG4gICAgbWluLWhlaWdodDogMjAxcHg7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLmRvY3MtZXhhbXBsZS1zb3VyY2Utd3JhcHBlcjpob3ZlciB7XG4gICAgLmRvY3MtZXhhbXBsZS1zb3VyY2UtY29weSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG59XG5cbi5kb2NzLWV4YW1wbGUtdmlld2VyX19zb3VyY2VfaGlkZGVuIHtcbiAgICAuZG9jcy1leGFtcGxlLXNvdXJjZS13cmFwcGVyIHtcbiAgICAgICAgaGVpZ2h0OiAyMDFweDtcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIH1cbn1cblxuLmRvY3MtZXhhbXBsZS1udW1iZXJzIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB3aWR0aDogNDRweDtcbiAgICBwYWRkaW5nOiAxMnB4IDhweDtcbiAgICBtYXJnaW46IDA7XG59XG5cbi5kb2NzLWV4YW1wbGUtc291cmNlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luOiAwO1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBwYWRkaW5nOiAxMnB4O1xuICAgIG1pbi1oZWlnaHQ6IDE1MHB4O1xufVxuXG4uZG9jcy1leGFtcGxlLXNvdXJjZS12aWV3ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAxMnB4O1xuICAgIHRvcDogMTJweDtcbn1cblxuLmRvY3MtZXhhbXBsZS12aWV3ZXItYm9keSB7XG4gICAgcGFkZGluZzogMTZweDtcblxuICAgIG92ZXJmbG93OiBhdXRvO1xufVxuXG4uZG9jcy1leGFtcGxlLXNvdXJjZV9fc3dpdGNoZXJfaGlkZSB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuIl19 */");

/***/ }),

/***/ "I1VR":
/*!*************************************************************************!*\
  !*** ./packages/docs/src/app/containers/homepage/homepage.component.ts ***!
  \*************************************************************************/
/*! exports provided: HomepageComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepageComponent", function() { return HomepageComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_homepage_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./homepage.template.html */ "d+MJ");
/* harmony import */ var _homepage_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./homepage.scss */ "JiF1");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");




let HomepageComponent = class HomepageComponent {
};
HomepageComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-homepage',
        template: _raw_loader_homepage_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_homepage_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], HomepageComponent);



/***/ }),

/***/ "JEqS":
/*!****************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-progress-bar.js ***!
  \****************************************************************/
/*! exports provided: McProgressBar, McProgressBarBase, McProgressBarMixinBase, McProgressBarModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressBar", function() { return McProgressBar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressBarBase", function() { return McProgressBarBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressBarMixinBase", function() { return McProgressBarMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McProgressBarModule", function() { return McProgressBarModule; });
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");





let idIterator = 0;
const MIN_PERCENT = 0;
const MAX_PERCENT = 100;
class McProgressBarBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McProgressBarMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(McProgressBarBase, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["ThemePalette"].Primary);
class McProgressBar extends McProgressBarMixinBase {
    constructor(elementRef) {
        super(elementRef);
        this.id = `mc-progress-bar-${idIterator++}`;
        this.value = 0;
        this.mode = 'determinate';
    }
    get percentage() {
        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;
    }
}
McProgressBar.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-progress-bar',
                template: "\n<div class=\"mc-progress-bar__inner\" [ngSwitch]=\"mode\" [id]=\"id\">\n    <div\n        *ngSwitchCase=\"'indeterminate'\"\n        class=\"mc-progress-bar__line mc-progress-bar__line--indeterminate\">\n    </div>\n    <div\n        *ngSwitchDefault\n        class=\"mc-progress-bar__line mc-progress-bar__line--determinate\"\n        [ngStyle]=\"{transform: 'scaleX(' + percentage + ')'}\">\n    </div>\n</div>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                inputs: ['color'],
                host: {
                    class: 'mc-progress-bar',
                    '[attr.id]': 'id'
                },
                styles: ["@-webkit-keyframes mc-progress-bar-indeterminate{0%{transform:scaleX(.25) translateX(-150%)}to{transform:scaleX(.4) translateX(250%)}}@keyframes mc-progress-bar-indeterminate{0%{transform:scaleX(.25) translateX(-150%)}to{transform:scaleX(.4) translateX(250%)}}.mc-progress-bar{display:block;height:var(--mc-progress-bar-size-height,4px);overflow:hidden}.mc-progress-bar__inner{height:100%}.mc-progress-bar__line{height:100%;transform-origin:top left}.mc-progress-bar__line--determinate{transition:transform .3s}.mc-progress-bar__line--indeterminate{-webkit-animation:mc-progress-bar-indeterminate 2.1s cubic-bezier(.455,.03,.515,.955) infinite;animation:mc-progress-bar-indeterminate 2.1s cubic-bezier(.455,.03,.515,.955) infinite}"]
            },] }
];
/** @nocollapse */
McProgressBar.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] }
];
McProgressBar.propDecorators = {
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McProgressBarModule {
}
McProgressBarModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__["PlatformModule"]
                ],
                exports: [
                    McProgressBar
                ],
                declarations: [
                    McProgressBar
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "JiF1":
/*!*****************************************************************!*\
  !*** ./packages/docs/src/app/containers/homepage/homepage.scss ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".section {\n  width: 100%;\n}\n\n.section .container {\n  max-width: 1140px;\n  margin: 0 auto;\n}\n\n.section-banner {\n  text-align: center;\n}\n\n.section-banner .logo {\n  margin: 200px auto 0;\n  width: 160px;\n}\n\n.section-banner .btn-container {\n  margin-top: 72px;\n}\n\n.section-banner .btn-container .btn {\n  display: inline-block;\n  margin: 0 18px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2hvbWVwYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxXQUFXO0FBQWY7O0FBREE7RUFJUSxpQkFBaUI7RUFDakIsY0FBYztBQUN0Qjs7QUFHQTtFQUNJLGtCQUFrQjtBQUF0Qjs7QUFEQTtFQUlRLG9CQUFvQjtFQUNwQixZQUFZO0FBQ3BCOztBQU5BO0VBU1EsZ0JBQWdCO0FBQ3hCOztBQVZBO0VBWVkscUJBQXFCO0VBQ3JCLGNBQWM7QUFFMUIiLCJmaWxlIjoiaG9tZXBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLnNlY3Rpb24ge1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgLmNvbnRhaW5lciB7XG4gICAgICAgIG1heC13aWR0aDogMTE0MHB4O1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICB9XG59XG5cbi5zZWN0aW9uLWJhbm5lciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgLmxvZ28ge1xuICAgICAgICBtYXJnaW46IDIwMHB4IGF1dG8gMDtcbiAgICAgICAgd2lkdGg6IDE2MHB4O1xuICAgIH1cblxuICAgIC5idG4tY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLXRvcDogNzJweDtcblxuICAgICAgICAuYnRuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIG1hcmdpbjogMCAxOHB4O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19 */");

/***/ }),

/***/ "K0rj":
/*!*****************************************!*\
  !*** ./packages/docs/src/app/docs.scss ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkb2NzLnNjc3MifQ== */");

/***/ }),

/***/ "LyUW":
/*!************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-checkbox.js ***!
  \************************************************************/
/*! exports provided: MC_CHECKBOX_CLICK_ACTION, MC_CHECKBOX_CONTROL_VALUE_ACCESSOR, MC_CHECKBOX_REQUIRED_VALIDATOR, McCheckbox, McCheckboxBase, McCheckboxChange, McCheckboxMixinBase, McCheckboxModule, McCheckboxRequiredValidator, TransitionCheckState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_CHECKBOX_CLICK_ACTION", function() { return MC_CHECKBOX_CLICK_ACTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_CHECKBOX_CONTROL_VALUE_ACCESSOR", function() { return MC_CHECKBOX_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_CHECKBOX_REQUIRED_VALIDATOR", function() { return MC_CHECKBOX_REQUIRED_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCheckbox", function() { return McCheckbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCheckboxBase", function() { return McCheckboxBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCheckboxChange", function() { return McCheckboxChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCheckboxMixinBase", function() { return McCheckboxMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCheckboxModule", function() { return McCheckboxModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McCheckboxRequiredValidator", function() { return McCheckboxRequiredValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionCheckState", function() { return TransitionCheckState; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "SVse");






/**
 * Injection token that can be used to specify the checkbox click behavior.
 */
const MC_CHECKBOX_CLICK_ACTION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-checkbox-click-action');

// Increasing integer for generating unique ids for checkbox components.
let nextUniqueId = 0;
/**
 * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(() => McCheckbox),
    multi: true
};
/**
 * Represents the different states that require custom transitions between them.
 * @docs-private
 */
var TransitionCheckState;
(function (TransitionCheckState) {
    /** The initial state of the component before any user interaction. */
    TransitionCheckState[TransitionCheckState["Init"] = 0] = "Init";
    /** The state representing the component when it's becoming checked. */
    TransitionCheckState[TransitionCheckState["Checked"] = 1] = "Checked";
    /** The state representing the component when it's becoming unchecked. */
    TransitionCheckState[TransitionCheckState["Unchecked"] = 2] = "Unchecked";
    /** The state representing the component when it's becoming indeterminate. */
    TransitionCheckState[TransitionCheckState["Indeterminate"] = 3] = "Indeterminate";
})(TransitionCheckState || (TransitionCheckState = {}));
/** Change event object emitted by McCheckbox. */
class McCheckboxChange {
}
// Boilerplate for applying mixins to McCheckbox.
/** @docs-private */
class McCheckboxBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McCheckboxMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McCheckboxBase)));
/**
 * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,
 * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or
 * disabled. Note that all additional accessibility attributes are taken care of by the component,
 * so there is no need to provide them yourself. However, if you want to omit a label and still
 * have the checkbox be accessible, you may supply an [aria-label] input.
 */
class McCheckbox extends McCheckboxMixinBase {
    constructor(elementRef, _changeDetectorRef, _focusMonitor, _clickAction) {
        super(elementRef);
        this._changeDetectorRef = _changeDetectorRef;
        this._focusMonitor = _focusMonitor;
        this._clickAction = _clickAction;
        /**
         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
         * take precedence so this may be omitted.
         */
        this.ariaLabel = '';
        /**
         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
         */
        this.ariaLabelledby = null;
        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */
        this.labelPosition = 'after';
        /** Name value will be applied to the input element if present */
        this.name = null;
        /** Event emitted when the checkbox's `checked` value changes. */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** Event emitted when the checkbox's `indeterminate` value changes. */
        this.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._checked = false;
        this._disabled = false;
        this._indeterminate = false;
        this.uniqueId = `mc-checkbox-${++nextUniqueId}`;
        this.currentAnimationClass = '';
        this.currentCheckState = TransitionCheckState.Init;
        /**
         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
         * @docs-private
         */
        // tslint:disable-next-line:no-empty
        this.onTouched = () => { };
        // tslint:disable-next-line:no-empty
        this.controlValueAccessorChangeFn = () => { };
        this.id = this.uniqueId;
    }
    /** Returns the unique id for the visual hidden input. */
    get inputId() {
        return `${this.id || this.uniqueId}-input`;
    }
    /** Whether the checkbox is required. */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
    }
    /**
     * Whether the checkbox is checked.
     */
    get checked() {
        return this._checked;
    }
    set checked(value) {
        if (value !== this.checked) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Whether the checkbox is disabled. This fully overrides the implementation provided by
     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== this.disabled) {
            this._disabled = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately
     * set to false.
     */
    get indeterminate() {
        return this._indeterminate;
    }
    set indeterminate(value) {
        const changed = value !== this._indeterminate;
        this._indeterminate = value;
        if (changed) {
            if (this._indeterminate) {
                this.transitionCheckState(TransitionCheckState.Indeterminate);
            }
            else {
                this.transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
            }
            this.indeterminateChange.emit(this._indeterminate);
        }
    }
    ngAfterViewInit() {
        this._focusMonitor
            .monitor(this.inputElement.nativeElement)
            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);
    }
    /** Method being called whenever the label text changes. */
    onLabelTextChange() {
        // This method is getting called whenever the label of the checkbox changes.
        // Since the checkbox uses the OnPush strategy we need to notify it about the change
        // that has been recognized by the cdkObserveContent directive.
        this._changeDetectorRef.markForCheck();
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this.checked = !!value;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this.controlValueAccessorChangeFn = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    getAriaChecked() {
        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');
    }
    /** Toggles the `checked` state of the checkbox. */
    toggle() {
        this.checked = !this.checked;
    }
    /**
     * Event handler for checkbox input element.
     * Toggles checked state if element is not disabled.
     * Do not toggle on (change) event since IE doesn't fire change event when
     *   indeterminate checkbox is clicked.
     * @param event Input click event
     */
    onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `checkbox` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click
        if (!this.disabled && this._clickAction !== 'noop') {
            // When user manually click on the checkbox, `indeterminate` is set to false.
            if (this.indeterminate && this._clickAction !== 'check') {
                Promise.resolve().then(() => {
                    this._indeterminate = false;
                    this.indeterminateChange.emit(this._indeterminate);
                });
            }
            this.toggle();
            this.transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
            // Emit our custom change event if the native input emitted one.
            // It is important to only emit it, if the native input triggered one, because
            // we don't want to trigger a change event, when the `checked` variable changes for example.
            this.emitChangeEvent();
        }
        else if (!this.disabled && this._clickAction === 'noop') {
            // Reset native input when clicked with noop. The native checkbox becomes checked after
            // click, reset it to be align with `checked` value of `mc-checkbox`.
            this.inputElement.nativeElement.checked = this.checked;
            this.inputElement.nativeElement.indeterminate = this.indeterminate;
        }
    }
    /** Focuses the checkbox. */
    focus() {
        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');
    }
    onInteractionEvent(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
    }
    transitionCheckState(newState) {
        const oldState = this.currentCheckState;
        const element = this._elementRef.nativeElement;
        if (oldState === newState) {
            return;
        }
        if (this.currentAnimationClass.length > 0) {
            element.classList.remove(this.currentAnimationClass);
        }
        this.currentCheckState = newState;
        if (this.currentAnimationClass.length > 0) {
            element.classList.add(this.currentAnimationClass);
        }
    }
    emitChangeEvent() {
        const event = new McCheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this.controlValueAccessorChangeFn(this.checked);
        this.change.emit(event);
    }
    /** Function is called whenever the focus changes for the input element. */
    onInputFocusChange(focusOrigin) {
        if (focusOrigin) {
            this.onTouched();
        }
    }
}
McCheckbox.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-checkbox',
                exportAs: 'mcCheckbox',
                template: "<label [attr.for]=\"inputId\" class=\"mc-checkbox-layout\" #label>\n    <div class=\"mc-checkbox-inner-container\"\n         [class.mc-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n        <input #input\n               type=\"checkbox\"\n               class=\"mc-checkbox-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (change)=\"onInteractionEvent($event)\"\n               (click)=\"onInputClick($event)\">\n        <div class=\"mc-checkbox-frame\">\n            <i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n            <i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n        </div>\n    </div>\n\n    <span class=\"mc-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"onLabelTextChange()\">\n    <ng-content></ng-content>\n  </span>\n</label>\n",
                host: {
                    class: 'mc-checkbox',
                    '[id]': 'id',
                    '[attr.id]': 'id',
                    '[class.mc-indeterminate]': 'indeterminate',
                    '[class.mc-checked]': 'checked',
                    '[class.mc-disabled]': 'disabled',
                    '[class.mc-checkbox-label-before]': 'labelPosition == "before"'
                },
                providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],
                inputs: ['color', 'tabIndex'],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                styles: [".mc-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:3px;box-sizing:border-box;pointer-events:none}.mc-checkbox-checkmark,.mc-checkbox-mixedmark{display:none;position:absolute;top:-1px;left:-1px;right:0;bottom:0}.mc-checkbox-frame{background-color:transparent;border-width:var(--mc-checkbox-size-border-width,1px);border-style:solid;box-shadow:var(--mc-checkbox-size-toggle-box-shadow,inset 0 0 1px 0 rgba(0,0,0,.2))}.mc-checkbox{display:inline-block;cursor:pointer;-webkit-tap-highlight-color:transparent}.mc-checkbox.mc-checked .mc-checkbox-checkmark{display:block}.mc-checkbox.mc-checked .mc-checkbox-mixedmark,.mc-checkbox.mc-indeterminate .mc-checkbox-checkmark{display:none}.mc-checkbox.mc-indeterminate .mc-checkbox-mixedmark{display:block}.mc-checkbox.mc-disabled{cursor:default}.mc-checkbox.mc-disabled .mc-checkbox-frame{box-shadow:none}.mc-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap;width:100%}.mc-checkbox-inner-container{display:inline-block;height:var(--mc-checkbox-size-width,16px);line-height:0;margin-right:8px;order:0;position:relative;align-self:center;white-space:nowrap;width:var(--mc-checkbox-size-width,16px);flex-shrink:0}[dir=rtl] .mc-checkbox-inner-container{margin-left:8px;margin-right:auto}.mc-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mc-checkbox-label-before .mc-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mc-checkbox-label-before .mc-checkbox-inner-container{margin-left:auto;margin-right:8px}"]
            },] }
];
/** @nocollapse */
McCheckbox.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_CHECKBOX_CLICK_ACTION,] }] }
];
McCheckbox.propDecorators = {
    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['aria-label',] }],
    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['aria-labelledby',] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    indeterminateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['input', { static: false },] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    indeterminate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

const MC_CHECKBOX_REQUIRED_VALIDATOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALIDATORS"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(() => McCheckboxRequiredValidator),
    multi: true
};
/**
 * Validator for Mosaic checkbox's required attribute in template-driven checkbox.
 * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not
 * work with `mc-checkbox`.
 */
class McCheckboxRequiredValidator extends _angular_forms__WEBPACK_IMPORTED_MODULE_2__["CheckboxRequiredValidator"] {
}
McCheckboxRequiredValidator.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: `mc-checkbox[required][formControlName],
             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,
                providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],
                host: { '[attr.required]': 'required ? "" : null' }
            },] }
];

class McCheckboxModule {
}
McCheckboxModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"]],
                exports: [McCheckbox, McCheckboxRequiredValidator],
                declarations: [McCheckbox, McCheckboxRequiredValidator]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "NlUg":
/*!*****************************************************************************************!*\
  !*** ./dist/mosaic-moment-adapter/fesm2015/ptsecurity-mosaic-moment-adapter-adapter.js ***!
  \*****************************************************************************************/
/*! exports provided: DeprecatedMethod, MC_MOMENT_DATE_ADAPTER_OPTIONS, MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MC_MOMENT_DATE_FORMATS, McMomentDateModule, MomentDateAdapter, MomentDateModule, ɵ0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedMethod", function() { return DeprecatedMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_MOMENT_DATE_ADAPTER_OPTIONS", function() { return MC_MOMENT_DATE_ADAPTER_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY", function() { return MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_MOMENT_DATE_FORMATS", function() { return MC_MOMENT_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McMomentDateModule", function() { return McMomentDateModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MomentDateAdapter", function() { return MomentDateAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MomentDateModule", function() { return MomentDateModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵ0", function() { return ɵ0; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ptsecurity/cdk/datetime */ "5vLs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "wd/R");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);







const enUS = {
    variables: {
        SECONDS: 's',
        MILLISECONDS: '.SSS',
        MICROSECONDS: '.SSSSSS',
        MINUTES: 'm',
        TIME: 'HH:mm',
        DAY: 'D',
        MONTH: 'MMM',
        YEAR: 'YYYY',
        DATE: 'MMMM\u00A0D',
        SHORT_DATE: 'MMM\u00A0D',
        DASH: '\u2013',
        LONG_DASH: '\u202F\u2013\u2009',
        NBSP: '\u00A0'
    },
    monthNames: {
        long: [
            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
            'October', 'November', 'December'
        ],
        short: {
            standalone: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            formatted: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        },
        narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
    },
    dayOfWeekNames: {
        long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
    },
    firstDayOfWeek: 0
};

const ruRU = {
    variables: {
        SECONDS: 's',
        MILLISECONDS: ',SSS',
        MICROSECONDS: ',SSSSSS',
        MINUTES: 'm',
        TIME: 'HH:mm',
        DAY: 'D',
        MONTH: 'MMM',
        YEAR: 'YYYY',
        DATE: 'D\u00A0MMMM',
        SHORT_DATE: 'D\u00A0MMM',
        DASH: '\u2013',
        LONG_DASH: '\u202F\u2014\u2009',
        NBSP: '\u00A0'
    },
    monthNames: {
        long: [
            'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь',
            'Октябрь', 'Ноябрь', 'Декабрь'
        ],
        short: {
            standalone: ['янв', 'фев', 'март', 'апр', 'май', 'июнь', 'июль', 'авг', 'сен', 'окт', 'ноя', 'дек'],
            formatted: ['янв', 'фев', 'мар', 'апр', 'мая', 'июня', 'июля', 'авг', 'сен', 'окт', 'ноя', 'дек']
        },
        narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д']
    },
    dayOfWeekNames: {
        long: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
        short: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
        narrow: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С']
    },
    firstDayOfWeek: 1
};

const moment = moment__WEBPACK_IMPORTED_MODULE_4___default.a || moment__WEBPACK_IMPORTED_MODULE_4__;
/** InjectionToken for moment date adapter to configure options. */
const MC_MOMENT_DATE_ADAPTER_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MC_MOMENT_DATE_ADAPTER_OPTIONS', {
    providedIn: 'root',
    factory: MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY
});
/** @docs-private */
// tslint:disable:naming-convention
function MC_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {
    return {
        useUtc: false,
        findDateFormat: false
    };
}
/** Creates an array and fills it with values. */
function range(length, valueFunction) {
    const valuesArray = Array(length);
    for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
// @ts-ignore
function DeprecatedMethod(target, key, descriptor) {
    const origin = descriptor.value;
    // tslint:disable-next-line:no-function-expression only-arrow-functions
    descriptor.value = function (...args) {
        console.warn(`Found use of deprecated method ${key}, it was moved in DateFormatter. ` +
            `The deprecated method will be removed in 13.0.0.`);
        return origin.apply(this, args);
    };
    return descriptor;
}
class MomentDateAdapter extends _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["DateAdapter"] {
    constructor(dateLocale, options) {
        super();
        this.options = options;
        this.firstMonth = 0;
        this.setLocale(dateLocale || moment.locale());
    }
    get lastMonth() {
        // tslint:disable-next-line:binary-expression-operand-order no-magic-numbers
        return 11 + this.firstMonth;
    }
    setLocale(locale) {
        super.setLocale(locale);
        this.dateFormatter = new _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["DateFormatter"](this, locale);
        this.config = locale === 'en' ? enUS : ruRU;
        let momentLocaleData = moment.localeData(locale);
        // This is our customs translations
        const i18nLocals = ['en', 'ru'];
        if (i18nLocals.indexOf(locale) !== -1) {
            momentLocaleData = moment.updateLocale(locale, {
                monthsShort: {
                    format: this.config.monthNames.short.formatted,
                    standalone: this.config.monthNames.short.standalone
                },
                weekdaysShort: this.config.dayOfWeekNames.short,
                weekdays: this.config.dayOfWeekNames.long
            });
        }
        this.localeData = {
            firstDayOfWeek: this.config.firstDayOfWeek,
            longMonths: momentLocaleData.months(),
            shortMonths: momentLocaleData.monthsShort(),
            dates: range(31, (i) => this.createDate(2017, this.firstMonth, i + 1).format('D')),
            longDaysOfWeek: momentLocaleData.weekdays(),
            shortDaysOfWeek: momentLocaleData.weekdaysShort(),
            narrowDaysOfWeek: momentLocaleData.weekdaysMin()
        };
    }
    getLocaleData() {
        return this.localeData;
    }
    setLocaleData(localeData) {
        this.localeData = localeData;
    }
    updateLocaleData(localeData) {
        this.localeData = Object.assign(Object.assign({}, this.localeData), localeData);
    }
    getYear(date) { return this.clone(date).year(); }
    getMonth(date) { return this.clone(date).month(); }
    getDate(date) { return this.clone(date).date(); }
    getHours(date) { return this.clone(date).hours(); }
    getMinutes(date) { return this.clone(date).minutes(); }
    getSeconds(date) { return this.clone(date).seconds(); }
    getMilliseconds(date) { return this.clone(date).milliseconds(); }
    getTime(date) { return date.valueOf(); }
    getDayOfWeek(date) { return this.clone(date).day(); }
    getMonthNames(style) {
        // Moment.js doesn't support narrow month names
        return style === 'long' ? this.localeData.longMonths : this.localeData.shortMonths;
    }
    getDateNames() {
        return this.localeData.dates;
    }
    getDayOfWeekNames(style) {
        if (style === 'long') {
            return this.localeData.longDaysOfWeek;
        }
        if (style === 'short') {
            return this.localeData.shortDaysOfWeek;
        }
        return this.localeData.narrowDaysOfWeek;
    }
    getYearName(date) {
        return this.clone(date).format('YYYY');
    }
    getFirstDayOfWeek() {
        return this.localeData.firstDayOfWeek;
    }
    getNumDaysInMonth(date) {
        return this.clone(date).daysInMonth();
    }
    clone(date) {
        return date.clone().locale(this.locale);
    }
    createDate(year, month = 0, date = 1) {
        // Moment.js will create an invalid date if any of the components are out of bounds, but we
        // explicitly check each case so we can throw more descriptive errors.
        if (month < this.firstMonth || month > this.lastMonth) {
            throw Error(`Invalid month index "${month}".
                Month index has to be between ${this.firstMonth} and ${this.lastMonth}.`);
        }
        if (date < 1) {
            throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
        const result = this.createMoment({ year, month, date }).locale(this.locale);
        // If the result isn't valid, the date must have been out of bounds for this month.
        if (!result.isValid()) {
            throw Error(`Invalid date "${date}" for month with index "${month}".`);
        }
        return result;
    }
    createDateTime(year, month, date, hours, minutes, seconds, milliseconds) {
        const newDate = this.createDate(year, month, date);
        newDate.hours(hours);
        newDate.minutes(minutes);
        newDate.seconds(seconds);
        newDate.milliseconds(milliseconds);
        return newDate;
    }
    today() {
        return this.createMoment().locale(this.locale);
    }
    parse(value, parseFormat) {
        if (value) {
            if (typeof value === 'string') {
                if (this.options && this.options.findDateFormat) {
                    return this.findFormat(value);
                }
                return parseFormat
                    ? this.createMoment(value, parseFormat, this.locale)
                    : this.createMoment(value).locale(this.locale);
            }
            return this.createMoment(value).locale(this.locale);
        }
        return null;
    }
    format(date, displayFormat) {
        // tslint:disable:no-parameter-reassignment
        date = this.clone(date);
        if (!this.isValid(date)) {
            throw Error('MomentDateAdapter: Cannot format invalid date.');
        }
        return date.format(displayFormat);
    }
    addCalendarYears(date, years) {
        return this.clone(date).add({ years });
    }
    addCalendarMonths(date, months) {
        return this.clone(date).add({ months });
    }
    addCalendarDays(date, days) {
        return this.clone(date).add({ days });
    }
    toIso8601(date) {
        return this.clone(date).format();
    }
    /** https://www.ietf.org/rfc/rfc3339.txt */
    deserialize(value) {
        let date;
        if (value instanceof Date) {
            date = this.createMoment(value).locale(this.locale);
        }
        else if (this.isDateInstance(value)) {
            // Note: assumes that cloning also sets the correct locale.
            return this.clone(value);
        }
        if (typeof value === 'string') {
            if (!value) {
                return null;
            }
            date = this.createMoment(value, moment.ISO_8601).locale(this.locale);
        }
        if (date && this.isValid(date)) {
            return this.createMoment(date).locale(this.locale);
        }
        return super.deserialize(value);
    }
    isDateInstance(obj) {
        return moment.isMoment(obj);
    }
    isValid(date) {
        return this.clone(date).isValid();
    }
    invalid() {
        return moment.invalid();
    }
    hasSame(startDate, endDate, unit) {
        return startDate.isSame(endDate, unit);
    }
    diffNow(date, unit) {
        return date.diff(this.today(), unit);
    }
    absoluteDate(date, params, datetime, milliseconds) {
        return this.dateFormatter.absoluteDate(date, params, datetime, milliseconds);
    }
    absoluteLongDate(date) {
        return this.dateFormatter.absoluteLongDate(date);
    }
    absoluteLongDateTime(date, options) {
        return this.dateFormatter.absoluteLongDateTime(date, options);
    }
    absoluteShortDate(date) {
        return this.dateFormatter.absoluteShortDate(date);
    }
    absoluteShortDateTime(date, options) {
        return this.dateFormatter.absoluteShortDateTime(date, options);
    }
    openedRangeDate(startDate, endDate, template) {
        return this.dateFormatter.openedRangeDate(startDate, endDate, template);
    }
    openedRangeDateTime(startDate, endDate, template) {
        return this.dateFormatter.openedRangeDateTime(startDate, endDate, template);
    }
    rangeDate(startDate, endDate, template) {
        return this.dateFormatter.rangeDate(startDate, endDate, template);
    }
    rangeDateTime(startDate, endDate, template) {
        return this.dateFormatter.rangeDateTime(startDate, endDate, template);
    }
    rangeLongDate(startDate, endDate) {
        return this.dateFormatter.rangeLongDate(startDate, endDate);
    }
    rangeLongDateTime(startDate, endDate) {
        return this.dateFormatter.rangeLongDateTime(startDate, endDate);
    }
    rangeMiddleDateTime(startDate, endDate) {
        return this.dateFormatter.rangeMiddleDateTime(startDate, endDate);
    }
    rangeShortDate(startDate, endDate) {
        return this.dateFormatter.rangeShortDate(startDate, endDate);
    }
    rangeShortDateTime(startDate, endDate) {
        return this.dateFormatter.rangeShortDateTime(startDate, endDate);
    }
    relativeDate(date, template) {
        return this.dateFormatter.relativeDate(date, template);
    }
    relativeLongDate(date) {
        return this.dateFormatter.relativeLongDate(date);
    }
    relativeShortDate(date) {
        return this.dateFormatter.relativeShortDate(date);
    }
    /** Creates a Moment instance while respecting the current UTC settings. */
    createMoment(...args) {
        var _a;
        return ((_a = this.options) === null || _a === void 0 ? void 0 : _a.useUtc) ? moment.utc(...args) : moment(...args);
    }
    isNumeric(value) {
        return !isNaN(parseFloat(value)) && isFinite(value);
    }
    findFormat(value) {
        if (!value) {
            return null;
        }
        // default test - iso
        const isoDate = this.createMoment(value, moment.ISO_8601, this.locale);
        if (isoDate.isValid()) {
            return isoDate;
        }
        if (this.isNumeric(value)) {
            // unix time sec
            return this.createMoment(value, 'X', this.locale);
        }
        // long months naming: D MMM YYYY, MMM Do YYYY with short case support
        if (/^\d{1,2}\s\S+\s(\d{2}|\d{4})$/.test(value.trim()) ||
            /^\S+\s\d{1,2}[a-z]{2}\s(\d{2}|\d{4})$/.test(value.trim())) {
            return this.parseWithSpace(value);
        }
        // slash notation: DD/MM/YYYY, MM/DD/YYYY with short case support
        if (/^\d{1,2}\/\d{1,2}\/(\d{2}|\d{4})$/.test(value)) {
            return this.parseWithSlash(value);
        }
        // dash notation: DD-MM-YYYY, YYYY-DD-MM with short case support
        if (/(^(\d{1,2}|\d{4})-\d{1,2}-\d{1,2}$)|(^\d{1,2}-\d{1,2}-(\d{2}|\d{4})$)/.test(value)) {
            return this.parseWithDash(value);
        }
        // dot notation: DD.MM.YYYY with short case support
        if (/^\d{1,2}\.\d{1,2}\.(\d{2}|\d{4})$/.test(value)) {
            return this.parseWithDot(value);
        }
        return null;
    }
    parseWithSpace(value) {
        switch (this.locale) {
            case 'ru':
                return this.createMoment(value, 'DD MMMM YYYY', this.locale);
            case 'en':
                // 16 Feb 2019 vs Feb 16th 2019, covers Feb and February cases
                if (this.isNumeric(value[0])) {
                    return this.createMoment(value, 'D MMMM YYYY', this.locale);
                }
                return this.createMoment(value, 'MMMM Do YYYY', this.locale);
            default:
                throw new Error(`Locale ${this.locale} is not supported`);
        }
    }
    parseWithSlash(value) {
        switch (this.locale) {
            case 'ru':
                return this.createMoment(value, 'DD/MM/YYYY', this.locale);
            // todo do we use generalized locales? en vs en-US; until not we try to guess
            case 'en':
                // US vs UK
                const parts = value.split('/');
                const datePartsCount = 3;
                if (parts.length !== datePartsCount) {
                    return null;
                }
                const firstPart = parts[0].trim();
                const secondPart = parts[1].trim();
                if (!this.isNumeric(firstPart) || !this.isNumeric(secondPart)) {
                    return null;
                }
                const monthsInYears = 12;
                const canFirstBeMonth = +firstPart <= monthsInYears;
                const canSecondByMonth = +secondPart <= monthsInYears;
                // first two parts cannot be month
                if (!canFirstBeMonth && !canSecondByMonth) {
                    return null;
                }
                const canDetermineWhereMonth = canFirstBeMonth && canSecondByMonth;
                // use US format by default
                if (canDetermineWhereMonth) {
                    return this.createMoment(value, 'MM/DD/YYYY', this.locale);
                }
                return canFirstBeMonth && !canSecondByMonth
                    ? this.createMoment(value, 'MM/DD/YYYY', this.locale)
                    : this.createMoment(value, 'DD/MM/YYYY', this.locale);
            default:
                throw new Error(`Locale ${this.locale} is not supported`);
        }
    }
    parseWithDash(value) {
        // leading year vs finishing year
        const parts = value.split('-');
        if (parts[0].length === 0) {
            return null;
        }
        const maxDayOrMonthCharsCount = 2;
        return parts[0].length <= maxDayOrMonthCharsCount
            ? this.createMoment(value, 'DD-MM-YYYY', this.locale)
            : this.createMoment(value, 'YYYY-MM-DD', this.locale);
    }
    parseWithDot(value) {
        // covers two cases YYYY and YY (for current year)
        return this.createMoment(value, 'DD.MM.YYYY', this.locale);
    }
}
MomentDateAdapter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
MomentDateAdapter.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_LOCALE"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MC_MOMENT_DATE_ADAPTER_OPTIONS,] }] }
];
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object, Boolean, Boolean]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "absoluteDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "absoluteLongDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "absoluteLongDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "absoluteShortDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "absoluteShortDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "openedRangeDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "openedRangeDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeLongDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeLongDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeMiddleDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeShortDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "rangeShortDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "relativeDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "relativeLongDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], MomentDateAdapter.prototype, "relativeShortDate", null);

const MC_MOMENT_DATE_FORMATS = {
    dateInput: 'DD.MM.YYYY',
    monthYearLabel: 'MMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY'
};

class MomentDateModule {
}
MomentDateModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                providers: [{
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["DateAdapter"],
                        useClass: MomentDateAdapter,
                        deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_LOCALE"], MC_MOMENT_DATE_ADAPTER_OPTIONS]
                    }]
            },] }
];
const ɵ0 = MC_MOMENT_DATE_FORMATS;
class McMomentDateModule {
}
McMomentDateModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [MomentDateModule],
                providers: [{
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_FORMATS"],
                        useValue: ɵ0
                    }]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "Nr+a":
/*!*********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-modal.js ***!
  \*********************************************************/
/*! exports provided: McModalComponent, McModalModule, McModalRef, McModalService, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McModalComponent", function() { return McModalComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McModalModule", function() { return McModalModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McModalRef", function() { return McModalRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McModalService", function() { return McModalService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return McModalControlService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return McModalTitle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return McModalBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return McModalFooter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return McModalMainAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return CssUnitPipe; });
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "kU1M");











class McModalControlService {
    constructor(parentService) {
        this.parentService = parentService;
        // @ts-ignore
        this.rootOpenModals = this.parentService ? null : [];
        // @ts-ignore
        this.rootAfterAllClose = this.parentService ? null : new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        // @ts-ignore
        this.rootRegisteredMetaMap = this.parentService ? null : new Map();
    }
    // Track singleton afterAllClose through over the injection tree
    get afterAllClose() {
        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;
    }
    // Track singleton openModals array through over the injection tree
    get openModals() {
        return this.parentService ? this.parentService.openModals : this.rootOpenModals;
    }
    // Registered modal for later usage
    get registeredMetaMap() {
        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;
    }
    // Register a modal to listen its open/close
    registerModal(modalRef) {
        if (!this.hasRegistered(modalRef)) {
            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));
            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));
            this.registeredMetaMap.set(modalRef, { modalRef, afterOpenSubscription, afterCloseSubscription });
        }
    }
    hasRegistered(modalRef) {
        return this.registeredMetaMap.has(modalRef);
    }
    // Close all registered opened modals
    closeAll() {
        let i = this.openModals.length;
        while (i--) {
            this.openModals[i].close();
        }
    }
    removeOpenModal(modalRef) {
        const index = this.openModals.indexOf(modalRef);
        if (index > -1) {
            this.openModals.splice(index, 1);
            if (!this.openModals.length) {
                this.afterAllClose.next();
            }
        }
    }
}
McModalControlService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"] }
];
/** @nocollapse */
McModalControlService.ctorParameters = () => [
    { type: McModalControlService, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["SkipSelf"] }] }
];

/**
 * API class that public to users to handle the modal instance.
 * McModalRef is aim to avoid accessing to the modal instance directly by users.
 */
// tslint:disable-next-line:naming-convention
class McModalRef {
}

class ModalUtil {
    constructor(document) {
        this.document = document;
        this.lastPosition = { x: -1, y: -1 };
        this.listenDocumentClick();
    }
    getLastClickPosition() {
        return this.lastPosition;
    }
    listenDocumentClick() {
        this.document.addEventListener('click', (event) => {
            this.lastPosition = { x: event.clientX, y: event.clientY };
        });
    }
}
const modalUtilObject = new ModalUtil(document);

// Duration when perform animations (ms)
const MODAL_ANIMATE_DURATION = 200;
class McModalComponent extends McModalRef {
    constructor(overlay, renderer, cfr, elementRef, viewContainer, modalControl, changeDetector, document) {
        super();
        this.overlay = overlay;
        this.renderer = renderer;
        this.cfr = cfr;
        this.elementRef = elementRef;
        this.viewContainer = viewContainer;
        this.modalControl = modalControl;
        this.changeDetector = changeDetector;
        this.document = document;
        this.mcModalType = 'default';
        this._mcVisible = false;
        this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.mcZIndex = 1000;
        this.mcWidth = 480;
        this.mcCloseByESC = true;
        this._mcClosable = true;
        this._mcMask = true;
        this._mcMaskClosable = false;
        // Trigger when modal open(visible) after animations
        this.mcAfterOpen = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        // Trigger when modal leave-animation over
        this.mcAfterClose = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.mcOkType = 'primary';
        this._mcOkLoading = false;
        this.mcOnOk = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this._mcCancelLoading = false;
        this.mcOnCancel = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        // The origin point that animation based on
        this.transformOrigin = '0px 0px 0px';
        this.mcGetContainer = () => this.overlay.create();
    }
    get mcVisible() { return this._mcVisible; }
    set mcVisible(value) { this._mcVisible = value; }
    get mcClosable() { return this._mcClosable; }
    set mcClosable(value) { this._mcClosable = value; }
    get mcMask() { return this._mcMask; }
    set mcMask(value) { this._mcMask = value; }
    get mcMaskClosable() { return this._mcMaskClosable; }
    set mcMaskClosable(value) { this._mcMaskClosable = value; }
    get mcOkLoading() { return this._mcOkLoading; }
    set mcOkLoading(value) { this._mcOkLoading = value; }
    get mcCancelLoading() { return this._mcCancelLoading; }
    set mcCancelLoading(value) { this._mcCancelLoading = value; }
    // Observable alias for mcAfterOpen
    get afterOpen() {
        return this.mcAfterOpen.asObservable();
    }
    // Observable alias for mcAfterClose
    get afterClose() {
        return this.mcAfterClose.asObservable();
    }
    get okText() {
        return this.mcOkText;
    }
    get cancelText() {
        return this.mcCancelText;
    }
    // Indicate whether this dialog should hidden
    get hidden() {
        return !this.mcVisible && !this.animationState;
    }
    ngOnInit() {
        // Create component along without View
        if (this.isComponent(this.mcContent)) {
            this.createDynamicComponent(this.mcContent);
        }
        // Setup default button options
        if (this.isModalButtons(this.mcFooter)) {
            this.mcFooter = this.formatModalButtons(this.mcFooter);
        }
        if (this.isComponent(this.mcComponent)) {
            this.createDynamicComponent(this.mcComponent);
        }
        // Place the modal dom to elsewhere
        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;
        if (this.container instanceof HTMLElement) {
            this.container.appendChild(this.elementRef.nativeElement);
        }
        else if (this.container instanceof _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayRef"]) {
            // NOTE: only attach the dom to overlay, the view container is not changed actually
            this.container.overlayElement.appendChild(this.elementRef.nativeElement);
        }
        // Register modal when afterOpen/afterClose is stable
        this.modalControl.registerModal(this);
    }
    // [NOTE] NOT available when using by service!
    // Because ngOnChanges never be called when using by service,
    // here we can't support "mcContent"(Component) etc. as inputs that initialized dynamically.
    // BUT: User also can change "mcContent" dynamically to trigger UI changes
    // (provided you don't use Component that needs initializations)
    ngOnChanges(changes) {
        if (changes.mcVisible) {
            // Do not trigger animation while initializing
            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);
        }
    }
    ngAfterViewInit() {
        var _a;
        // If using Component, it is the time to attach View while bodyContainer is ready
        if (this.contentComponentRef) {
            this.bodyContainer.insert(this.contentComponentRef.hostView);
        }
        (_a = this.getElement().getElementsByTagName('button')[0]) === null || _a === void 0 ? void 0 : _a.focus();
        for (const autoFocusedButton of this.autoFocusedButtons.toArray()) {
            if (autoFocusedButton.nativeElement.autofocus) {
                autoFocusedButton.nativeElement.focus();
                break;
            }
        }
    }
    ngOnDestroy() {
        if (this.container instanceof _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayRef"]) {
            this.container.dispose();
        }
    }
    open() {
        this.changeVisibleFromInside(true);
    }
    close(result) {
        this.changeVisibleFromInside(false, result);
    }
    // Destroy equals Close
    destroy(result) {
        this.close(result);
    }
    markForCheck() {
        this.changeDetector.markForCheck();
    }
    triggerOk() {
        this.onClickOkCancel('ok');
    }
    triggerCancel() {
        this.onClickOkCancel('cancel');
    }
    getInstance() {
        return this;
    }
    getContentComponentRef() {
        return this.contentComponentRef;
    }
    getContentComponent() {
        return this.contentComponentRef && this.contentComponentRef.instance;
    }
    getElement() {
        return this.elementRef && this.elementRef.nativeElement;
    }
    getMcFooter() {
        return this.getElement().getElementsByClassName('mc-modal-footer').item(0);
    }
    onClickMask($event) {
        if (this.mcMask &&
            this.mcMaskClosable &&
            $event.target.classList.contains('mc-modal-wrap') &&
            this.mcVisible) {
            this.onClickOkCancel('cancel');
        }
    }
    // tslint:disable-next-line: no-reserved-keywords
    isModalType(type) {
        return this.mcModalType === type;
    }
    onKeyDown(event) {
        var _a;
        // tslint:disable-next-line:deprecation .key isn't supported in Edge
        if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] && this.container && (this.container instanceof _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayRef"])) {
            this.close();
            event.preventDefault();
        }
        // tslint:disable-next-line:deprecation .key isn't supported in Edge
        if (event.ctrlKey && event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]) {
            if (this.mcModalType === 'confirm') {
                this.triggerOk();
            }
            (_a = this.getElement().querySelector('[mc-modal-main-action]')) === null || _a === void 0 ? void 0 : _a.click();
            event.preventDefault();
        }
    }
    // AoT
    onClickCloseBtn() {
        if (this.mcVisible) {
            this.onClickOkCancel('cancel');
        }
    }
    // AoT
    // tslint:disable-next-line: no-reserved-keywords
    onClickOkCancel(type) {
        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];
        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];
        if (trigger instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]) {
            trigger.emit(this.getContentComponent());
        }
        else if (typeof trigger === 'function') {
            const result = trigger(this.getContentComponent());
            // Users can return "false" to prevent closing by default
            const caseClose = (doClose) => (doClose !== false) && this.close(doClose);
            if (isPromise(result)) {
                this[loadingKey] = true;
                const handleThen = (doClose) => {
                    this[loadingKey] = false;
                    caseClose(doClose);
                };
                result.then(handleThen).catch(handleThen);
            }
            else {
                caseClose(result);
            }
        }
    }
    // AoT
    isNonEmptyString(value) {
        return typeof value === 'string' && value !== '';
    }
    // AoT
    isTemplateRef(value) {
        return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"];
    }
    // AoT
    isComponent(value) {
        return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["Type"];
    }
    // AoT
    isModalButtons(value) {
        return Array.isArray(value) && value.length > 0;
    }
    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.
    // AoT
    getButtonCallableProp(options, prop) {
        const value = options[prop];
        const args = [];
        if (this.contentComponentRef) {
            args.push(this.contentComponentRef.instance);
        }
        return typeof value === 'function' ? value.apply(options, args) : value;
    }
    // On mcFooter's modal button click
    // AoT
    onButtonClick(button) {
        // Call onClick directly
        // tslint:disable-next-line:no-inferred-empty-object-type  rule seems to be broken
        const result = this.getButtonCallableProp(button, 'onClick');
        if (isPromise(result)) {
            button.loading = true;
            result.then(() => button.loading = false).catch(() => button.loading = false);
        }
    }
    // Do rest things when visible state changed
    handleVisibleStateChange(visible, animation = true, closeResult) {
        // Hide scrollbar at the first time when shown up
        if (visible) {
            this.changeBodyOverflow(1);
        }
        return Promise
            .resolve(animation && this.animateTo(visible))
            // Emit open/close event after animations over
            .then(() => {
            if (visible) {
                this.mcAfterOpen.emit();
            }
            else {
                this.mcAfterClose.emit(closeResult);
                // Show/hide scrollbar when animation is over
                this.changeBodyOverflow();
            }
        });
    }
    // Change mcVisible from inside
    changeVisibleFromInside(visible, closeResult) {
        if (this.mcVisible !== visible) {
            // Change mcVisible value immediately
            this.mcVisible = visible;
            this.mcVisibleChange.emit(visible);
            return this.handleVisibleStateChange(visible, true, closeResult);
        }
        return Promise.resolve();
    }
    changeAnimationState(state) {
        this.animationState = state;
        if (state) {
            this.maskAnimationClassMap = {
                [`fade-${state}`]: true,
                [`fade-${state}-active`]: true
            };
            this.modalAnimationClassMap = {
                [`zoom-${state}`]: true,
                [`zoom-${state}-active`]: true
            };
        }
        else {
            // @ts-ignore
            this.maskAnimationClassMap = this.modalAnimationClassMap = null;
        }
        if (this.contentComponentRef) {
            this.contentComponentRef.changeDetectorRef.markForCheck();
        }
        else {
            this.changeDetector.markForCheck();
        }
    }
    animateTo(isVisible) {
        // Figure out the lastest click position when shows up
        if (isVisible) {
            // [NOTE] Using timeout due to the document.click event is fired later than visible change,
            // so if not postponed to next event-loop, we can't get the lastest click position
            window.setTimeout(() => this.updateTransformOrigin());
        }
        this.changeAnimationState(isVisible ? 'enter' : 'leave');
        // Return when animation is over
        return new Promise((resolve) => {
            return window.setTimeout(() => {
                this.changeAnimationState(null);
                resolve();
            }, MODAL_ANIMATE_DURATION);
        });
    }
    formatModalButtons(buttons) {
        return buttons.map((button) => {
            return Object.assign({
                type: 'default',
                size: 'default',
                autoLoading: true,
                show: true,
                loading: false,
                disabled: false
            }, button);
        });
    }
    /**
     * Create a component dynamically but not attach to any View
     * (this action will be executed when bodyContainer is ready)
     * @param component Component class
     */
    createDynamicComponent(component) {
        const factory = this.cfr.resolveComponentFactory(component);
        const childInjector = _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injector"].create({
            providers: [{ provide: McModalRef, useValue: this }],
            parent: this.viewContainer.injector
        });
        this.contentComponentRef = factory.create(childInjector);
        if (this.mcComponentParams) {
            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);
        }
        // Do the first change detection immediately
        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)
        this.contentComponentRef.changeDetectorRef.detectChanges();
    }
    // Update transform-origin to the last click position on document
    updateTransformOrigin() {
        const modalElement = this.modalContainer.nativeElement;
        const lastPosition = modalUtilObject.getLastClickPosition();
        if (lastPosition) {
            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;
        }
    }
    /**
     * Take care of the body's overflow to decide the existense of scrollbar
     * @param plusNum The number that the openModals.length will increase soon
     */
    changeBodyOverflow(plusNum = 0) {
        const openModals = this.modalControl.openModals;
        if (openModals.length + plusNum > 0) {
            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');
        }
        else {
            this.renderer.removeStyle(this.document.body, 'overflow');
        }
    }
}
McModalComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-modal',
                template: "<!-- Compatible: the <ng-content> can appear only once -->\n<ng-template #tplOriginContent>\n    <ng-content></ng-content>\n</ng-template>\n\n<div>\n    <div *ngIf=\"mcMask\"\n         class=\"mc-modal-mask\"\n         [ngClass]=\"maskAnimationClassMap\"\n         [class.mc-modal-mask-hidden]=\"hidden\"\n         [ngStyle]=\"mcMaskStyle\"\n         [style.zIndex]=\"mcZIndex\"\n    ></div>\n    <div\n        (mousedown)=\"onClickMask($event)\"\n        class=\"mc-modal-wrap {{ mcWrapClassName }}\"\n        [style.zIndex]=\"mcZIndex\"\n        [style.display]=\"hidden ? 'none' : ''\"\n        tabindex=\"-1\"\n        role=\"dialog\"\n    >\n        <div #modalContainer\n             class=\"mc-modal {{ mcClassName }}\"\n             [ngClass]=\"modalAnimationClassMap\"\n             [ngStyle]=\"mcStyle\"\n             [style.width]=\"mcWidth | toCssUnit\"\n             [style.transform-origin]=\"transformOrigin\"\n             role=\"document\"\n        >\n            <div class=\"mc-modal-content\" cdkTrapFocus>\n                <button *ngIf=\"mcClosable\"\n                        mc-button\n                        (click)=\"onClickCloseBtn()\"\n                        class=\"mc-modal-close mc-button_transparent\"\n                        aria-label=\"Close\">\n                    <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" [color]=\"'second'\"></i>\n                </button>\n                <ng-container [ngSwitch]=\"true\">\n                    <ng-container *ngSwitchCase=\"isModalType('default')\"\n                                  [ngTemplateOutlet]=\"tplContentDefault\"></ng-container>\n                    <ng-container *ngSwitchCase=\"isModalType('confirm')\"\n                                  [ngTemplateOutlet]=\"tplContentConfirm\"></ng-container>\n                    <ng-container *ngSwitchCase=\"isModalType('custom')\"\n                                  [ngTemplateOutlet]=\"tplContentCustom\"></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #tplContentCustom>\n    <ng-container #bodyContainer></ng-container>\n</ng-template>\n\n\n<!-- [Predefined] Default Modal Content -->\n<ng-template #tplContentDefault>\n    <div *ngIf=\"mcTitle\" class=\"mc-modal-header\">\n        <div class=\"mc-modal-title\">\n            <ng-container [ngSwitch]=\"true\">\n                <ng-container *ngSwitchCase=\"isTemplateRef(mcTitle)\" [ngTemplateOutlet]=\"mcTitle\"></ng-container>\n                <ng-container *ngSwitchCase=\"isNonEmptyString(mcTitle)\">\n                    <div [innerHTML]=\"mcTitle\"></div>\n                </ng-container>\n            </ng-container>\n        </div>\n    </div>\n    <div class=\"mc-modal-body\" [ngStyle]=\"mcBodyStyle\">\n        <ng-container #bodyContainer>\n            <ng-container *ngIf=\"!isComponent(mcContent)\" [ngSwitch]=\"true\">\n                <ng-container *ngSwitchCase=\"isTemplateRef(mcContent)\" [ngTemplateOutlet]=\"mcContent\"></ng-container>\n                <ng-container *ngSwitchCase=\"isNonEmptyString(mcContent)\">\n                    <div [innerHTML]=\"mcContent\"></div>\n                </ng-container>\n                <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"tplOriginContent\"></ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n    <div *ngIf=\"mcFooter !== null\" class=\"mc-modal-footer\">\n        <ng-container [ngSwitch]=\"true\">\n            <ng-container *ngSwitchCase=\"isTemplateRef(mcFooter)\" [ngTemplateOutlet]=\"mcFooter\"></ng-container>\n            <ng-container *ngSwitchCase=\"isNonEmptyString(mcFooter)\">\n                <div [innerHTML]=\"mcFooter\"></div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"isModalButtons(mcFooter)\">\n                <ng-container *ngFor=\"let button of mcFooter\">\n                    <button\n                        mc-button\n                        #autoFocusedButton\n                        [attr.autofocus]=\"button.autoFocus\"\n                        [attr.mc-modal-main-action]=\"button.mcModalMainAction\"\n                        *ngIf=\"getButtonCallableProp(button, 'show')\"\n                        [disabled]=\"getButtonCallableProp(button, 'disabled')\"\n                        [class.mc-progress]=\"getButtonCallableProp(button, 'loading')\"\n                        (click)=\"onButtonClick(button)\"\n                        [color]=\"button.type\">\n                        {{ button.label }}\n                    </button>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <button\n                    #autoFocusedButton\n                    [attr.autofocus]=\"true\"\n                    *ngIf=\"mcOkText !== null\"\n                    mc-button\n                    [color]=\"'primary'\"\n                    (click)=\"onClickOkCancel('ok')\">\n\n                    {{ okText }}\n                </button>\n                <button *ngIf=\"mcCancelText!==null\" mc-button (click)=\"onClickOkCancel('cancel')\">\n                    {{ cancelText }}\n                </button>\n            </ng-container>\n        </ng-container>\n    </div>\n</ng-template>\n<!-- /[Predefined] Default Modal Content -->\n\n<!-- [Predefined] Confirm Modal Content -->\n<ng-template #tplContentConfirm>\n    <div class=\"mc-modal-body\" [ngStyle]=\"mcBodyStyle\">\n        <div class=\"mc-confirm-body-wrapper\">\n            <div class=\"mc-confirm-body\">\n                <div class=\"mc-confirm-content\">\n                    <ng-container #bodyContainer>\n                        <ng-container *ngIf=\"!isComponent(mcContent)\" [ngSwitch]=\"true\">\n                            <ng-container *ngSwitchCase=\"isTemplateRef(mcContent)\"\n                                          [ngTemplateOutlet]=\"mcContent\"></ng-container>\n                            <ng-container *ngSwitchCase=\"isNonEmptyString(mcContent)\">\n                                <div [innerHTML]=\"mcContent\"></div>\n                            </ng-container>\n                            <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"tplOriginContent\"></ng-container>\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </div>\n        </div> <!-- /.mc-confirm-body-wrapper -->\n    </div>\n    <div class=\"mc-confirm-btns\">\n        <button\n            mc-button\n            #autoFocusedButton\n            [color]=\"mcOkType\"\n            [attr.autofocus]=\"true\"\n            *ngIf=\"mcOkText !== ''\"\n            (click)=\"onClickOkCancel('ok')\">\n\n            {{ okText }}\n        </button>\n        <button mc-button [color]=\"'second'\" *ngIf=\"mcCancelText!==''\" (click)=\"onClickOkCancel('cancel')\">\n            {{ cancelText }}\n        </button>\n    </div>\n</ng-template>\n<!-- /[Predefined] Confirm Modal Content -->\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                host: {
                    '(keydown)': 'onKeyDown($event)'
                },
                styles: [".mc-confirm .mc-modal-close,.mc-confirm .mc-modal-header{display:none}.mc-confirm .mc-modal-body{padding:var(--mc-modal-confirm-size-padding,24px)}.mc-confirm-body-wrapper{zoom:1}.mc-confirm-body-wrapper:after,.mc-confirm-body-wrapper:before{content:\"\";display:table}.mc-confirm-body-wrapper:after{clear:both}.mc-confirm-body .mc-confirm-title{display:block;overflow:auto}.mc-confirm .mc-confirm-btns{border-radius:var(--mc-modal-footer-size-border-radius,0 0 4px 4px);text-align:right}.mc-confirm .mc-confirm-btns button+button{margin:16px}.mc-modal{box-sizing:border-box;position:relative;top:var(--mc-modal-size-top,48px);width:auto;margin:0 auto;padding:var(--mc-modal-size-padding,0 0 24px);list-style:none}.mc-modal.zoom-appear,.mc-modal.zoom-enter{-webkit-animation-duration:.3s;animation-duration:.3s;transform:none;opacity:0}.mc-modal .mc-modal-close{position:absolute;z-index:10;top:0;right:0;width:var(--mc-modal-size-close-width,56px);height:var(--mc-modal-size-close-width,56px)}.mc-modal-wrap{position:fixed;z-index:1000;top:0;right:0;bottom:0;left:0;overflow:auto;-webkit-overflow-scrolling:touch;outline:0}.mc-modal-title{margin:0}.mc-modal-content{position:relative;border-radius:var(--mc-modal-size-border-radius,4px);background-clip:padding-box;background-color:#fff}.mc-modal-header{display:block;border-radius:var(--mc-modal-header-size-border-radius,4px 4px 0 0);padding:var(--mc-modal-header-size-padding,14px 16px)}.mc-modal-body{display:block;overflow-y:auto;max-height:var(--mc-modal-body-size-max-height,calc(100vh - 260px));padding:var(--mc-modal-body-size-padding,16px 24px 24px);word-wrap:break-word}.mc-modal-footer{display:block;border-radius:var(--mc-modal-footer-size-border-radius,0 0 4px 4px);padding:var(--mc-modal-footer-size-padding,16px 16px);text-align:right}.mc-modal-footer button+button{margin-left:16px;margin-bottom:0}.mc-modal-mask{position:fixed;z-index:1000;top:0;right:0;left:0;bottom:0;height:100%}.mc-modal-mask.mc-modal-mask-hidden{display:none}.mc-modal-open{overflow:hidden}"]
            },] }
];
/** @nocollapse */
McModalComponent.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ComponentFactoryResolver"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"] },
    { type: McModalControlService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] }
];
McModalComponent.propDecorators = {
    mcModalType: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcComponentParams: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcFooter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcVisibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    mcZIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcWrapClassName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcClassName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcStyle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcCloseByESC: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcClosable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcMask: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcMaskClosable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcMaskStyle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcBodyStyle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcAfterOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    mcAfterClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    mcOkText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcOkType: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcOkLoading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcOnOk: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    mcCancelText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcCancelLoading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcOnCancel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    modalContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['modalContainer', { static: true },] }],
    bodyContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['bodyContainer', { read: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"], static: false },] }],
    autoFocusedButtons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"], args: ['autoFocusedButton', { read: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },] }],
    mcGetContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};
////////////
function isPromise(obj) {
    // tslint:disable-next-line: no-unbound-method
    return !!obj &&
        (typeof obj === 'object' || typeof obj === 'function') &&
        typeof obj.then === 'function' &&
        typeof obj.catch === 'function';
}

class CssUnitPipe {
    transform(value, defaultUnit = 'px') {
        const formatted = +value;
        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;
    }
}
CssUnitPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Pipe"], args: [{
                name: 'toCssUnit'
            },] }
];

class McModalTitle {
}
McModalTitle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `[mc-modal-title], mc-modal-title, [mcModalTitle]`,
                host: {
                    class: 'mc-modal-header mc-modal-title'
                }
            },] }
];
class McModalBody {
}
McModalBody.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `[mc-modal-body], mc-modal-body, [mcModalBody]`,
                host: {
                    class: 'mc-modal-body'
                }
            },] }
];
class McModalFooter {
}
McModalFooter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `[mc-modal-footer], mc-modal-footer, [mcModalFooter]`,
                host: {
                    class: 'mc-modal-footer'
                }
            },] }
];
class McModalMainAction {
}
McModalMainAction.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `[mc-modal-main-action]`
            },] }
];

// A builder used for managing service creating modals
class ModalBuilderForService {
    constructor(overlay, options = {}) {
        this.overlay = overlay;
        this.createModal();
        if (!('mcGetContainer' in options)) {
            options.mcGetContainer = undefined;
        }
        this.changeProps(options);
        this.modalRef.instance.open();
        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());
        this.overlayRef.keydownEvents()
            // @ts-ignore
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])((event) => {
            // tslint:disable-next-line:deprecation replacement .key isn't supported in Edge
            return event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] && options.mcCloseByESC;
        }))
            .subscribe(() => this.modalRef.instance.close());
    }
    getInstance() {
        return this.modalRef && this.modalRef.instance;
    }
    destroyModal() {
        if (this.modalRef) {
            this.overlayRef.dispose();
            this.modalRef = null;
        }
    }
    changeProps(options) {
        if (this.modalRef) {
            // here not limit user's inputs at runtime
            Object.assign(this.modalRef.instance, options);
        }
    }
    // Create component to ApplicationRef
    createModal() {
        this.overlayRef = this.overlay.create();
        this.modalRef = this.overlayRef.attach(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["ComponentPortal"](McModalComponent));
    }
}
class McModalService {
    constructor(overlay, modalControl) {
        this.overlay = overlay;
        this.modalControl = modalControl;
    }
    // Track of the current close modals (we assume invisible is close this time)
    get openModals() {
        return this.modalControl.openModals;
    }
    get afterAllClose() {
        return this.modalControl.afterAllClose.asObservable();
    }
    // Closes all of the currently-open dialogs
    closeAll() {
        this.modalControl.closeAll();
    }
    create(options = {}) {
        if (typeof options.mcOnCancel !== 'function') {
            // Leave a empty function to close this modal by default
            // tslint:disable-next-line
            options.mcOnCancel = () => { };
        }
        if (!('mcCloseByESC' in options)) {
            options.mcCloseByESC = true;
        }
        if (!('mcWidth' in options)) {
            // tslint:disable-next-line
            options.mcWidth = 480;
        }
        return new ModalBuilderForService(this.overlay, options).getInstance();
    }
    confirm(options = {}, confirmType = 'confirm') {
        if ('mcFooter' in options) {
            console.warn(`The Confirm-Modal doesn't support "mcFooter", this property will be ignored.`);
        }
        // NOTE: only support function currently by calling confirm()
        if (typeof options.mcOnOk !== 'function') {
            // Leave a empty function to close this modal by default
            // tslint:disable-next-line
            options.mcOnOk = () => { };
        }
        options.mcModalType = 'confirm';
        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;
        return this.create(options);
    }
    open(options = {}) {
        options.mcModalType = 'custom';
        return this.create(options);
    }
    success(options = {}) {
        return this.simpleConfirm(options, 'success');
    }
    // tslint:disable-next-line: no-reserved-keywords
    delete(options = {}) {
        return this.simpleConfirm(options, 'warn');
    }
    simpleConfirm(options = {}, confirmType) {
        // Remove the Cancel button if the user not specify a Cancel button
        if (!('mcCancelText' in options)) {
            // @ts-ignore
            options.mcCancelText = null;
        }
        return this.confirm(options, confirmType);
    }
}
McModalService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"] }
];
/** @nocollapse */
McModalService.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"] },
    { type: McModalControlService }
];

class McModalModule {
}
McModalModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["A11yModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_6__["McButtonModule"], _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_7__["McIconModule"]],
                exports: [
                    McModalComponent,
                    McModalTitle,
                    McModalBody,
                    McModalFooter
                ],
                declarations: [
                    McModalComponent,
                    McModalTitle,
                    McModalBody,
                    McModalFooter,
                    CssUnitPipe,
                    McModalMainAction
                ],
                entryComponents: [McModalComponent],
                providers: [McModalControlService, McModalService]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "OBKZ":
/*!***************************************************************************************!*\
  !*** ./dist/mosaic-luxon-adapter/fesm2015/ptsecurity-mosaic-luxon-adapter-adapter.js ***!
  \***************************************************************************************/
/*! exports provided: DeprecatedMethod, LuxonDateAdapter, LuxonDateModule, MC_LUXON_DATE_ADAPTER_OPTIONS, MC_LUXON_DATE_ADAPTER_OPTIONS_FACTORY, MC_LUXON_DATE_FORMATS, McLuxonDateModule, ɵ0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeprecatedMethod", function() { return DeprecatedMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuxonDateAdapter", function() { return LuxonDateAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuxonDateModule", function() { return LuxonDateModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_LUXON_DATE_ADAPTER_OPTIONS", function() { return MC_LUXON_DATE_ADAPTER_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_LUXON_DATE_ADAPTER_OPTIONS_FACTORY", function() { return MC_LUXON_DATE_ADAPTER_OPTIONS_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_LUXON_DATE_FORMATS", function() { return MC_LUXON_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLuxonDateModule", function() { return McLuxonDateModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵ0", function() { return ɵ0; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ptsecurity/cdk/datetime */ "5vLs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! luxon */ "ExVU");
/* harmony import */ var luxon__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(luxon__WEBPACK_IMPORTED_MODULE_5__);







const enUS = {
    variables: {
        SECONDS: 's',
        MILLISECONDS: '.SSS',
        MINUTES: 'm',
        TIME: 'HH:mm',
        DAY: 'd',
        MONTH: 'MMM',
        YEAR: 'yyyy',
        DATE: 'MMMM\u00A0d',
        SHORT_DATE: 'MMM\u00A0d',
        DASH: '\u2013',
        LONG_DASH: '\u202F\u2013\u2009',
        NBSP: '\u00A0'
    },
    monthNames: {
        long: [
            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
            'October', 'November', 'December'
        ],
        short: {
            standalone: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            formatted: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        },
        narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
    },
    dayOfWeekNames: {
        long: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        short: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        narrow: ['M', 'T', 'W', 'T', 'F', 'S', 'S']
    },
    firstDayOfWeek: 6
};

const ruRU = {
    variables: {
        SECONDS: 's',
        MILLISECONDS: ',SSS',
        MINUTES: 'm',
        TIME: 'HH:mm',
        DAY: 'd',
        MONTH: 'MMM',
        YEAR: 'yyyy',
        DATE: 'd\u00A0MMMM',
        SHORT_DATE: 'd\u00A0MMM',
        DASH: '\u2013',
        LONG_DASH: '\u202F\u2014\u2009',
        NBSP: '\u00A0'
    },
    monthNames: {
        long: [
            'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь',
            'Октябрь', 'Ноябрь', 'Декабрь'
        ],
        short: {
            standalone: ['янв', 'фев', 'март', 'апр', 'май', 'июнь', 'июль', 'авг', 'сен', 'окт', 'ноя', 'дек'],
            formatted: ['янв', 'фев', 'мар', 'апр', 'мая', 'июня', 'июля', 'авг', 'сен', 'окт', 'ноя', 'дек']
        },
        narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д']
    },
    dayOfWeekNames: {
        long: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'],
        short: ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'],
        narrow: ['П', 'В', 'С', 'Ч', 'П', 'С', 'В']
    },
    firstDayOfWeek: 0
};

/** InjectionToken for moment date adapter to configure options. */
const MC_LUXON_DATE_ADAPTER_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MC_MOMENT_DATE_ADAPTER_OPTIONS', {
    providedIn: 'root',
    factory: MC_LUXON_DATE_ADAPTER_OPTIONS_FACTORY
});
/** @docs-private */
// tslint:disable:naming-convention
function MC_LUXON_DATE_ADAPTER_OPTIONS_FACTORY() {
    return { useUtc: false };
}
// This is our customs translations
const i18nLocals = ['en', 'ru'];
// @ts-ignore
function DeprecatedMethod(target, key, descriptor) {
    const origin = descriptor.value;
    // tslint:disable-next-line:no-function-expression only-arrow-functions
    descriptor.value = function (...args) {
        console.warn(`Found use of deprecated method ${key}, it was moved in DateFormatter. ` +
            `The deprecated method will be removed in 13.0.0.`);
        return origin.apply(this, args);
    };
    return descriptor;
}
class LuxonDateAdapter extends _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["DateAdapter"] {
    constructor(dateLocale, options) {
        super();
        this.options = options;
        this.firstMonth = 1;
        this.setLocale(dateLocale);
    }
    get lastMonth() {
        // tslint:disable-next-line:binary-expression-operand-order no-magic-numbers
        return 11 + this.firstMonth;
    }
    setLocale(locale) {
        var _a;
        super.setLocale(locale);
        this.config = locale === 'en' ? enUS : ruRU;
        this.dateFormatter = new _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["DateFormatter"](this, locale);
        this.localeOptions = { locale };
        this.dateTimeOptions = {
            zone: ((_a = this.options) === null || _a === void 0 ? void 0 : _a.useUtc) ? 'UTC' : undefined
        };
        let localeData = {
            dates: Array(31)
                .fill(null)
                .map((_, i) => this.createDate(2000, 1, i + 1).toFormat('d'))
        };
        if (i18nLocals.includes(locale)) {
            localeData = Object.assign(Object.assign({}, localeData), { firstDayOfWeek: this.config.firstDayOfWeek, longMonths: this.config.monthNames.long, shortMonths: this.config.monthNames.short.standalone, narrowDaysOfWeek: this.config.dayOfWeekNames.narrow, shortDaysOfWeek: this.config.dayOfWeekNames.short, longDaysOfWeek: this.config.dayOfWeekNames.long });
        }
        else {
            const options = { locale };
            localeData = Object.assign(Object.assign({}, localeData), { firstDayOfWeek: Object(_angular_common__WEBPACK_IMPORTED_MODULE_3__["getLocaleFirstDayOfWeek"])(locale), longMonths: luxon__WEBPACK_IMPORTED_MODULE_5__["Info"].monthsFormat('long', options), shortMonths: luxon__WEBPACK_IMPORTED_MODULE_5__["Info"].monthsFormat('short', options), narrowDaysOfWeek: luxon__WEBPACK_IMPORTED_MODULE_5__["Info"].weekdaysFormat('narrow', options), shortDaysOfWeek: luxon__WEBPACK_IMPORTED_MODULE_5__["Info"].weekdaysFormat('short', options), longDaysOfWeek: luxon__WEBPACK_IMPORTED_MODULE_5__["Info"].weekdaysFormat('long', options) });
        }
        this.updateLocaleData(localeData);
    }
    getLocaleData() {
        return this.localeData;
    }
    setLocaleData(localeData) {
        this.localeData = localeData;
    }
    updateLocaleData(localeData) {
        this.localeData = Object.assign(Object.assign({}, this.localeData), localeData);
    }
    getYear(date) { return date.year; }
    getMonth(date) { return date.month; }
    getDate(date) { return date.day; }
    getHours(date) { return date.hour; }
    getMinutes(date) { return date.minute; }
    getSeconds(date) { return date.second; }
    getMilliseconds(date) { return date.millisecond; }
    getTime(date) { return date.valueOf(); }
    getDayOfWeek(date) { return date.weekday; }
    getMonthNames(style) {
        return style === 'long' ? this.localeData.longMonths : this.localeData.shortMonths;
    }
    getDateNames() {
        return this.localeData.dates;
    }
    getDayOfWeekNames(style) {
        if (style === 'long') {
            return this.localeData.longDaysOfWeek;
        }
        if (style === 'short') {
            return this.localeData.shortDaysOfWeek;
        }
        return this.localeData.narrowDaysOfWeek;
    }
    getYearName(date) {
        return date.toFormat('yyyy');
    }
    getFirstDayOfWeek() {
        return this.localeData.firstDayOfWeek;
    }
    getNumDaysInMonth(date) {
        return date.daysInMonth;
    }
    clone(date) {
        return date.setLocale(date.locale);
    }
    createDate(year, month = 1, day = 1) {
        if (month < this.firstMonth || month > this.lastMonth) {
            throw Error(`Invalid month index "${month}".
                Month index has to be between ${this.firstMonth} and ${this.lastMonth}.`);
        }
        if (day < 1) {
            throw Error(`Invalid day "${day}". Date has to be greater than 0.`);
        }
        const result = this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromObject({ year, month, day }));
        // If the result isn't valid, the day must have been out of bounds for this month.
        if (!result.isValid) {
            throw Error(`Invalid day "${day}" for month with index "${month}".`);
        }
        return result;
    }
    createDateTime(year, month, date, hour, minute, second, millisecond) {
        return this.createDate(year, month, date).set({ hour, minute, second, millisecond });
    }
    today() {
        return this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].now());
    }
    parse(value, parseFormat) {
        if (value) {
            if (typeof value === 'string') {
                if (parseFormat) {
                    return this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromFormat(value, parseFormat));
                }
                else if (luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromISO(value).isValid) {
                    return this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromISO(value));
                }
                else if (luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromRFC2822(value).isValid) {
                    return this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromRFC2822(value));
                }
            }
            else if (typeof value === 'number') {
                return this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromMillis(value));
            }
            else if (value instanceof Date) {
                return this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromJSDate(value));
            }
        }
        return null;
    }
    format(date, displayFormat) {
        if (!this.isValid(date)) {
            throw Error('DateTime: Cannot format invalid date.');
        }
        if (this.locale === 'ru' && (displayFormat === null || displayFormat === void 0 ? void 0 : displayFormat.search(/([^M]|^)MMM([^M]|$)/)) !== -1) {
            return this.formatShortMonthForRULocale(date, displayFormat, this.dateTimeOptions);
        }
        return date.toFormat(displayFormat, this.dateTimeOptions);
    }
    addCalendarYears(date, years) {
        return date.plus({ years });
    }
    addCalendarMonths(date, months) {
        return date.plus({ months });
    }
    addCalendarDays(date, days) {
        return date.plus({ days });
    }
    toIso8601(date) {
        return date.toISO();
    }
    /** https://www.ietf.org/rfc/rfc3339.txt */
    deserialize(value) {
        if (this.isDateInstance(value)) {
            return value.setLocale(this.locale);
        }
        let date;
        if (value instanceof Date) {
            date = this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromJSDate(value));
        }
        else if (typeof value === 'string') {
            if (!value) {
                return null;
            }
            date = this.reconfigure(luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromISO(value));
        }
        if (date && this.isValid(date)) {
            return date;
        }
        return super.deserialize(value);
    }
    isDateInstance(obj) {
        return luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].isDateTime(obj);
    }
    isValid(date) {
        return date.isValid;
    }
    invalid() {
        return luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"].fromObject({ month: 0 });
    }
    hasSame(startDate, endDate, unit) {
        return startDate.hasSame(endDate, unit);
    }
    diffNow(date, unit) {
        return date.diffNow(unit)[unit];
    }
    absoluteDate(date, params, datetime, milliseconds) {
        return this.dateFormatter.absoluteDate(date, params, datetime, milliseconds);
    }
    absoluteLongDate(date) {
        return this.dateFormatter.absoluteLongDate(date);
    }
    absoluteLongDateTime(date, options) {
        return this.dateFormatter.absoluteLongDateTime(date, options);
    }
    absoluteShortDate(date) {
        return this.dateFormatter.absoluteShortDate(date);
    }
    absoluteShortDateTime(date, options) {
        return this.dateFormatter.absoluteShortDateTime(date, options);
    }
    openedRangeDate(startDate, endDate, template) {
        return this.dateFormatter.openedRangeDate(startDate, endDate, template);
    }
    openedRangeDateTime(startDate, endDate, template) {
        return this.dateFormatter.openedRangeDateTime(startDate, endDate, template);
    }
    rangeDate(startDate, endDate, template) {
        return this.dateFormatter.rangeDate(startDate, endDate, template);
    }
    rangeDateTime(startDate, endDate, template) {
        return this.dateFormatter.rangeDateTime(startDate, endDate, template);
    }
    rangeLongDate(startDate, endDate) {
        return this.dateFormatter.rangeLongDate(startDate, endDate);
    }
    rangeLongDateTime(startDate, endDate) {
        return this.dateFormatter.rangeLongDateTime(startDate, endDate);
    }
    rangeMiddleDateTime(startDate, endDate) {
        return this.dateFormatter.rangeMiddleDateTime(startDate, endDate);
    }
    rangeShortDate(startDate, endDate) {
        return this.dateFormatter.rangeShortDate(startDate, endDate);
    }
    rangeShortDateTime(startDate, endDate) {
        return this.dateFormatter.rangeShortDateTime(startDate, endDate);
    }
    relativeDate(date, template) {
        return this.dateFormatter.relativeDate(date, template);
    }
    relativeLongDate(date) {
        return this.dateFormatter.relativeLongDate(date);
    }
    relativeShortDate(date) {
        return this.dateFormatter.relativeShortDate(date);
    }
    reconfigure(date) {
        return date
            .reconfigure(this.localeOptions)
            .setZone(this.dateTimeOptions.zone);
    }
    // we need to do this strange things because Intl has ugly reduction for russian months
    formatShortMonthForRULocale(date, displayFormat, options) {
        return date
            .toFormat(displayFormat, options)
            .replace('февр', this.config.monthNames.short.formatted[1])
            .replace('июн', this.config.monthNames.short.formatted[5])
            .replace('июл', this.config.monthNames.short.formatted[6])
            .replace('сент', this.config.monthNames.short.formatted[8])
            .replace('нояб', this.config.monthNames.short.formatted[10])
            .replace(/(\W)\./, '$1');
    }
}
LuxonDateAdapter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
LuxonDateAdapter.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_LOCALE"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MC_LUXON_DATE_ADAPTER_OPTIONS,] }] }
];
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object, Boolean, Boolean]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "absoluteDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "absoluteLongDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "absoluteLongDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "absoluteShortDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "absoluteShortDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "openedRangeDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "openedRangeDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeLongDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeLongDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeMiddleDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeShortDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [Object, luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "rangeShortDateTime", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"], Object]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "relativeDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "relativeLongDate", null);
Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__decorate"])([
    DeprecatedMethod,
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:type", Function),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:paramtypes", [luxon__WEBPACK_IMPORTED_MODULE_5__["DateTime"]]),
    Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__metadata"])("design:returntype", String)
], LuxonDateAdapter.prototype, "relativeShortDate", null);

const MC_LUXON_DATE_FORMATS = {
    dateInput: 'dd.MM.yyyy',
    monthYearLabel: 'MMM yyyy',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM yyyy'
};

class LuxonDateModule {
}
LuxonDateModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                providers: [{
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["DateAdapter"],
                        useClass: LuxonDateAdapter,
                        deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_LOCALE"], MC_LUXON_DATE_ADAPTER_OPTIONS]
                    }]
            },] }
];
const ɵ0 = MC_LUXON_DATE_FORMATS;
class McLuxonDateModule {
}
McLuxonDateModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [LuxonDateModule],
                providers: [{
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_1__["MC_DATE_FORMATS"],
                        useValue: ɵ0
                    }]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "P19e":
/*!***************************************************************!*\
  !*** ./packages/docs/src/app/components/anchors/anchors.scss ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".anchors-menu {\n  position: fixed;\n  top: 64px;\n  width: 300px;\n  right: 0;\n  bottom: 0;\n}\n\n.anchors-menu__list {\n  display: flex;\n  flex-direction: column;\n  margin-top: 25px;\n}\n\n.anchors-menu__list-element {\n  list-style-type: none;\n  padding: 6px 16px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FuY2hvcnMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGVBQWU7RUFDZixTQUFTO0VBQ1QsWUFBWTtFQUNaLFFBQVE7RUFDUixTQUFTO0FBQ2I7O0FBQ0k7RUFDSSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGdCQUFnQjtBQUV4Qjs7QUFDSTtFQUNJLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFFekIiLCJmaWxlIjoiYW5jaG9ycy5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmFuY2hvcnMtbWVudSB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogNjRweDtcbiAgICB3aWR0aDogMzAwcHg7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuXG4gICAgJl9fbGlzdCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIG1hcmdpbi10b3A6IDI1cHg7XG4gICAgfVxuXG4gICAgJl9fbGlzdC1lbGVtZW50IHtcbiAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgICAgICBwYWRkaW5nOiA2cHggMTZweDtcbiAgICB9XG59XG5cbiJdfQ== */");

/***/ }),

/***/ "RfXV":
/*!****************************************************************************!*\
  !*** ./packages/docs/src/app/components/main-layout/main-layout.module.ts ***!
  \****************************************************************************/
/*! exports provided: MainLayoutModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainLayoutModule", function() { return MainLayoutModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/dropdown */ "kGUy");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/tree */ "wd6P");
/* harmony import */ var _anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../anchors/anchors.module */ "3Xtq");
/* harmony import */ var _footer_footer_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../footer/footer.module */ "Ar9S");
/* harmony import */ var _navbar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../navbar */ "pNyw");
/* harmony import */ var _sidenav_sidenav_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../sidenav/sidenav.module */ "EQR/");
/* harmony import */ var _main_layout_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./main-layout.component */ "0PwA");













let MainLayoutModule = class MainLayoutModule {
};
MainLayoutModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [
            _anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__["AnchorsModule"],
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"],
            _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__["McTreeModule"],
            _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_4__["McButtonModule"],
            _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_6__["McIconModule"],
            _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_5__["McDropdownModule"],
            _navbar__WEBPACK_IMPORTED_MODULE_10__["NavbarModule"],
            _sidenav_sidenav_module__WEBPACK_IMPORTED_MODULE_11__["SidenavModule"],
            _footer_footer_module__WEBPACK_IMPORTED_MODULE_9__["FooterModule"]
        ],
        exports: [_main_layout_component__WEBPACK_IMPORTED_MODULE_12__["MainLayoutComponent"]],
        declarations: [_main_layout_component__WEBPACK_IMPORTED_MODULE_12__["MainLayoutComponent"]]
    })
], MainLayoutModule);



/***/ }),

/***/ "RnhZ":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "K/tc",
	"./af.js": "K/tc",
	"./ar": "jnO4",
	"./ar-dz": "o1bE",
	"./ar-dz.js": "o1bE",
	"./ar-kw": "Qj4J",
	"./ar-kw.js": "Qj4J",
	"./ar-ly": "HP3h",
	"./ar-ly.js": "HP3h",
	"./ar-ma": "CoRJ",
	"./ar-ma.js": "CoRJ",
	"./ar-sa": "gjCT",
	"./ar-sa.js": "gjCT",
	"./ar-tn": "bYM6",
	"./ar-tn.js": "bYM6",
	"./ar.js": "jnO4",
	"./az": "SFxW",
	"./az.js": "SFxW",
	"./be": "H8ED",
	"./be.js": "H8ED",
	"./bg": "hKrs",
	"./bg.js": "hKrs",
	"./bm": "p/rL",
	"./bm.js": "p/rL",
	"./bn": "kEOa",
	"./bn.js": "kEOa",
	"./bo": "0mo+",
	"./bo.js": "0mo+",
	"./br": "aIdf",
	"./br.js": "aIdf",
	"./bs": "JVSJ",
	"./bs.js": "JVSJ",
	"./ca": "1xZ4",
	"./ca.js": "1xZ4",
	"./cs": "PA2r",
	"./cs.js": "PA2r",
	"./cv": "A+xa",
	"./cv.js": "A+xa",
	"./cy": "l5ep",
	"./cy.js": "l5ep",
	"./da": "DxQv",
	"./da.js": "DxQv",
	"./de": "tGlX",
	"./de-at": "s+uk",
	"./de-at.js": "s+uk",
	"./de-ch": "u3GI",
	"./de-ch.js": "u3GI",
	"./de.js": "tGlX",
	"./dv": "WYrj",
	"./dv.js": "WYrj",
	"./el": "jUeY",
	"./el.js": "jUeY",
	"./en-au": "Dmvi",
	"./en-au.js": "Dmvi",
	"./en-ca": "OIYi",
	"./en-ca.js": "OIYi",
	"./en-gb": "Oaa7",
	"./en-gb.js": "Oaa7",
	"./en-ie": "4dOw",
	"./en-ie.js": "4dOw",
	"./en-il": "czMo",
	"./en-il.js": "czMo",
	"./en-nz": "b1Dy",
	"./en-nz.js": "b1Dy",
	"./eo": "Zduo",
	"./eo.js": "Zduo",
	"./es": "iYuL",
	"./es-do": "CjzT",
	"./es-do.js": "CjzT",
	"./es-us": "Vclq",
	"./es-us.js": "Vclq",
	"./es.js": "iYuL",
	"./et": "7BjC",
	"./et.js": "7BjC",
	"./eu": "D/JM",
	"./eu.js": "D/JM",
	"./fa": "jfSC",
	"./fa.js": "jfSC",
	"./fi": "gekB",
	"./fi.js": "gekB",
	"./fo": "ByF4",
	"./fo.js": "ByF4",
	"./fr": "nyYc",
	"./fr-ca": "2fjn",
	"./fr-ca.js": "2fjn",
	"./fr-ch": "Dkky",
	"./fr-ch.js": "Dkky",
	"./fr.js": "nyYc",
	"./fy": "cRix",
	"./fy.js": "cRix",
	"./gd": "9rRi",
	"./gd.js": "9rRi",
	"./gl": "iEDd",
	"./gl.js": "iEDd",
	"./gom-latn": "DKr+",
	"./gom-latn.js": "DKr+",
	"./gu": "4MV3",
	"./gu.js": "4MV3",
	"./he": "x6pH",
	"./he.js": "x6pH",
	"./hi": "3E1r",
	"./hi.js": "3E1r",
	"./hr": "S6ln",
	"./hr.js": "S6ln",
	"./hu": "WxRl",
	"./hu.js": "WxRl",
	"./hy-am": "1rYy",
	"./hy-am.js": "1rYy",
	"./id": "UDhR",
	"./id.js": "UDhR",
	"./is": "BVg3",
	"./is.js": "BVg3",
	"./it": "bpih",
	"./it.js": "bpih",
	"./ja": "B55N",
	"./ja.js": "B55N",
	"./jv": "tUCv",
	"./jv.js": "tUCv",
	"./ka": "IBtZ",
	"./ka.js": "IBtZ",
	"./kk": "bXm7",
	"./kk.js": "bXm7",
	"./km": "6B0Y",
	"./km.js": "6B0Y",
	"./kn": "PpIw",
	"./kn.js": "PpIw",
	"./ko": "Ivi+",
	"./ko.js": "Ivi+",
	"./ku": "JCF/",
	"./ku.js": "JCF/",
	"./ky": "lgnt",
	"./ky.js": "lgnt",
	"./lb": "RAwQ",
	"./lb.js": "RAwQ",
	"./lo": "sp3z",
	"./lo.js": "sp3z",
	"./lt": "JvlW",
	"./lt.js": "JvlW",
	"./lv": "uXwI",
	"./lv.js": "uXwI",
	"./me": "KTz0",
	"./me.js": "KTz0",
	"./mi": "aIsn",
	"./mi.js": "aIsn",
	"./mk": "aQkU",
	"./mk.js": "aQkU",
	"./ml": "AvvY",
	"./ml.js": "AvvY",
	"./mn": "lYtQ",
	"./mn.js": "lYtQ",
	"./mr": "Ob0Z",
	"./mr.js": "Ob0Z",
	"./ms": "6+QB",
	"./ms-my": "ZAMP",
	"./ms-my.js": "ZAMP",
	"./ms.js": "6+QB",
	"./mt": "G0Uy",
	"./mt.js": "G0Uy",
	"./my": "honF",
	"./my.js": "honF",
	"./nb": "bOMt",
	"./nb.js": "bOMt",
	"./ne": "OjkT",
	"./ne.js": "OjkT",
	"./nl": "+s0g",
	"./nl-be": "2ykv",
	"./nl-be.js": "2ykv",
	"./nl.js": "+s0g",
	"./nn": "uEye",
	"./nn.js": "uEye",
	"./pa-in": "8/+R",
	"./pa-in.js": "8/+R",
	"./pl": "jVdC",
	"./pl.js": "jVdC",
	"./pt": "8mBD",
	"./pt-br": "0tRk",
	"./pt-br.js": "0tRk",
	"./pt.js": "8mBD",
	"./ro": "lyxo",
	"./ro.js": "lyxo",
	"./ru": "lXzo",
	"./ru.js": "lXzo",
	"./sd": "Z4QM",
	"./sd.js": "Z4QM",
	"./se": "//9w",
	"./se.js": "//9w",
	"./si": "7aV9",
	"./si.js": "7aV9",
	"./sk": "e+ae",
	"./sk.js": "e+ae",
	"./sl": "gVVK",
	"./sl.js": "gVVK",
	"./sq": "yPMs",
	"./sq.js": "yPMs",
	"./sr": "zx6S",
	"./sr-cyrl": "E+lV",
	"./sr-cyrl.js": "E+lV",
	"./sr.js": "zx6S",
	"./ss": "Ur1D",
	"./ss.js": "Ur1D",
	"./sv": "X709",
	"./sv.js": "X709",
	"./sw": "dNwA",
	"./sw.js": "dNwA",
	"./ta": "PeUW",
	"./ta.js": "PeUW",
	"./te": "XLvN",
	"./te.js": "XLvN",
	"./tet": "V2x9",
	"./tet.js": "V2x9",
	"./tg": "Oxv6",
	"./tg.js": "Oxv6",
	"./th": "EOgW",
	"./th.js": "EOgW",
	"./tl-ph": "Dzi0",
	"./tl-ph.js": "Dzi0",
	"./tlh": "z3Vd",
	"./tlh.js": "z3Vd",
	"./tr": "DoHr",
	"./tr.js": "DoHr",
	"./tzl": "z1FC",
	"./tzl.js": "z1FC",
	"./tzm": "wQk9",
	"./tzm-latn": "tT3J",
	"./tzm-latn.js": "tT3J",
	"./tzm.js": "wQk9",
	"./ug-cn": "YRex",
	"./ug-cn.js": "YRex",
	"./uk": "raLr",
	"./uk.js": "raLr",
	"./ur": "UpQW",
	"./ur.js": "UpQW",
	"./uz": "Loxo",
	"./uz-latn": "AQ68",
	"./uz-latn.js": "AQ68",
	"./uz.js": "Loxo",
	"./vi": "KSF8",
	"./vi.js": "KSF8",
	"./x-pseudo": "/X5v",
	"./x-pseudo.js": "/X5v",
	"./yo": "fzPg",
	"./yo.js": "fzPg",
	"./zh-cn": "XDpg",
	"./zh-cn.js": "XDpg",
	"./zh-hk": "SatO",
	"./zh-hk.js": "SatO",
	"./zh-tw": "kOpN",
	"./zh-tw.js": "kOpN"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "RnhZ";

/***/ }),

/***/ "RtxV":
/*!****************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-autocomplete.js ***!
  \****************************************************************/
/*! exports provided: AUTOCOMPLETE_BORDER_WIDTH, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MC_AUTOCOMPLETE_DEFAULT_OPTIONS, MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MC_AUTOCOMPLETE_SCROLL_STRATEGY, MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, McAutocomplete, McAutocompleteModule, McAutocompleteOrigin, McAutocompleteSelectedEvent, McAutocompleteTrigger, getMcAutocompleteMissingPanelError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_BORDER_WIDTH", function() { return AUTOCOMPLETE_BORDER_WIDTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_OPTION_HEIGHT", function() { return AUTOCOMPLETE_OPTION_HEIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_PANEL_HEIGHT", function() { return AUTOCOMPLETE_PANEL_HEIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_VALUE_ACCESSOR", function() { return MAT_AUTOCOMPLETE_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_DEFAULT_OPTIONS", function() { return MC_AUTOCOMPLETE_DEFAULT_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY", function() { return MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_SCROLL_STRATEGY", function() { return MC_AUTOCOMPLETE_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY", function() { return MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER", function() { return MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAutocomplete", function() { return McAutocomplete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAutocompleteModule", function() { return McAutocompleteModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAutocompleteOrigin", function() { return McAutocompleteOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAutocompleteSelectedEvent", function() { return McAutocompleteSelectedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAutocompleteTrigger", function() { return McAutocompleteTrigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcAutocompleteMissingPanelError", function() { return getMcAutocompleteMissingPanelError; });
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/scrolling */ "7KAL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ "kU1M");















/**
 * Autocomplete IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let uniqueAutocompleteIdCounter = 0;
class McAutocompleteSelectedEvent {
    constructor(source, option) {
        this.source = source;
        this.option = option;
    }
}
/** Injection token to be used to override the default options for `mc-autocomplete`. */
const MC_AUTOCOMPLETE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-autocomplete-default-options', {
    providedIn: 'root',
    factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY
});
// tslint:disable-next-line naming-convention
function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {
    return { autoActiveFirstOption: true };
}
class McAutocomplete {
    constructor(changeDetectorRef, elementRef, defaults) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
        this.id = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;
        /** Whether the autocomplete panel should be visible, depending on option length. */
        this.showPanel = false;
        /** Function that maps an option's control value to its display value in the trigger. */
        this.displayWith = null;
        /** Event that is emitted whenever an option from the list is selected. */
        this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** Event that is emitted when the autocomplete panel is opened. */
        this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** Event that is emitted when the autocomplete panel is closed. */
        this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._classList = {};
        this._isOpen = false;
        this._openOnFocus = true;
        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;
    }
    /**
     * Takes classes set on the host mc-autocomplete element and applies them to the panel
     * inside the overlay container to allow for easy styling.
     */
    get classList() {
        return this._classList;
    }
    set classList(value) {
        if (value && value.length) {
            value.split(' ')
                .forEach((className) => this._classList[className.trim()] = true);
            this.elementRef.nativeElement.className = '';
        }
    }
    /**
     * Whether the first option should be highlighted when the autocomplete panel is opened.
     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.
     */
    get autoActiveFirstOption() {
        return this._autoActiveFirstOption;
    }
    set autoActiveFirstOption(value) {
        this._autoActiveFirstOption = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
    }
    get isOpen() {
        return this._isOpen && this.showPanel;
    }
    set isOpen(value) {
        this._isOpen = value;
    }
    get openOnFocus() {
        return this._openOnFocus;
    }
    set openOnFocus(value) {
        this._openOnFocus = value;
    }
    ngAfterContentInit() {
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__["ActiveDescendantKeyManager"](this.options);
        this.setVisibility();
    }
    setScrollTop(scrollTop) {
        if (this.panel) {
            this.panel.nativeElement.scrollTop = scrollTop;
        }
    }
    getScrollTop() {
        return this.panel ? this.panel.nativeElement.scrollTop : 0;
    }
    setVisibility() {
        this.showPanel = !!this.options.length;
        this._classList['mc-autocomplete_visible'] = this.showPanel;
        this._classList['mc-autocomplete_hidden'] = !this.showPanel;
        this.changeDetectorRef.markForCheck();
    }
    emitSelectEvent(option) {
        const event = new McAutocompleteSelectedEvent(this, option);
        this.optionSelected.emit(event);
    }
    onKeydown(event) {
        this.keyManager.onKeydown(event);
    }
}
McAutocomplete.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-autocomplete',
                exportAs: 'mcAutocomplete',
                template: "<ng-template>\n    <div class=\"mc-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"classList\" #panel>\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n",
                host: {
                    class: 'mc-autocomplete'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                providers: [{
                        provide: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MC_OPTION_PARENT_COMPONENT"], useExisting: McAutocomplete
                    }],
                styles: [".mc-autocomplete-trigger{text-overflow:ellipsis}.mc-autocomplete-panel{visibility:hidden;position:relative;overflow:auto;-webkit-overflow-scrolling:touch;margin-top:-1px;min-width:100%;width:100%;max-width:none;max-height:var(--mc-autocomplete-size-panel-max-height,256px);border-width:1px;border-style:solid;border-bottom-left-radius:var(--mc-autocomplete-size-panel-border-radius,3px);border-bottom-right-radius:var(--mc-autocomplete-size-panel-border-radius,3px);padding:var(--mc-autocomplete-size-panel-padding,4px 0)}.mc-autocomplete-panel.mc-autocomplete_visible{visibility:visible}.mc-autocomplete-panel.mc-autocomplete_hidden{visibility:hidden}.mc-autocomplete-panel-above .mc-autocomplete-panel{border-radius:var(--mc-autocomplete-size-panel-border-radius,3px) var(--mc-autocomplete-size-panel-border-radius,3px) 0 0}.mc-autocomplete-panel .mc-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mc-autocomplete-panel,.cdk-high-contrast-active :host .mc-autocomplete-panel{outline:1px solid}"]
            },] }
];
/** @nocollapse */
McAutocomplete.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }
];
McAutocomplete.propDecorators = {
    template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], { static: true },] }],
    panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['panel', { static: false },] }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOption"], { descendants: true },] }],
    optionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptgroup"],] }],
    displayWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    panelWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    optionSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['class',] }],
    autoActiveFirstOption: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    openOnFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

/**
 * Directive applied to an element to make it usable
 * as a connection point for an autocomplete panel.
 */
class McAutocompleteOrigin {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
McAutocompleteOrigin.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mcAutocompleteOrigin]',
                exportAs: 'mcAutocompleteOrigin'
            },] }
];
/** @nocollapse */
McAutocompleteOrigin.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];

/**
 * The following style constants are necessary to save here in order
 * to properly calculate the scrollTop of the panel. Because we are not
 * actually focusing the active item, scroll must be handled manually.
 */
/** The height of each autocomplete option. */
const AUTOCOMPLETE_OPTION_HEIGHT = 32;
/** The total height of the autocomplete panel. */
const AUTOCOMPLETE_PANEL_HEIGHT = 256;
const AUTOCOMPLETE_BORDER_WIDTH = 2;
/** Injection token that determines the scroll handling while the autocomplete panel is open. */
const MC_AUTOCOMPLETE_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mc-autocomplete-scroll-strategy');
// tslint:disable-next-line naming-convention
function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"]],
    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY
};
/**
 * Provider that allows the autocomplete to register as a ControlValueAccessor.
 * @docs-private
 */
const MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(() => McAutocompleteTrigger),
    multi: true
};
/**
 * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
 * @docs-private
 */
function getMcAutocompleteMissingPanelError() {
    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +
        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +
        'you\'re attempting to open it after the ngAfterContentInit hook.');
}
class McAutocompleteTrigger {
    constructor(elementRef, viewContainerRef, changeDetectorRef, overlay, zone, scrollStrategy, dir, formField, document, 
    // @breaking-change 8.0.0 Make `_viewportRuler` required.
    viewportRuler) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.changeDetectorRef = changeDetectorRef;
        this.overlay = overlay;
        this.zone = zone;
        this.dir = dir;
        this.formField = formField;
        this.document = document;
        this.viewportRuler = viewportRuler;
        // @ts-ignore
        this.optionSelections = Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["defer"])(() => {
            if (this.autocomplete && this.autocomplete.options) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(...this.autocomplete.options.map((option) => option.onSelectionChange));
            }
            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
            // Return a stream that we'll replace with the real one once everything is in place.
            return this.zone.onStable
                .asObservable()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(() => this.optionSelections));
        });
        /**
         * `autocomplete` attribute to be set on the input element.
         * @docs-private
         */
        this.autocompleteAttribute = 'off';
        this._autocompleteDisabled = false;
        this.overlayAttached = false;
        this.componentDestroyed = false;
        /** Subscription to viewport size changes. */
        this.viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_12__["Subscription"].EMPTY;
        /**
         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,
         * closed autocomplete from being reopened if the user switches to another browser tab and then
         * comes back.
         */
        this.canOpenOnNextFocus = true;
        /** Stream of keyboard events that can close the panel. */
        this.closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
        /** `View -> model callback called when value changes` */
        // tslint:disable-next-line no-empty
        this.onChange = () => { };
        /** `View -> model callback called when autocomplete has been touched` */
        // tslint:disable-next-line no-empty
        this.onTouched = () => { };
        /**
         * Event handler for when the window is blurred. Needs to be an
         * arrow function in order to preserve the context.
         */
        this.windowBlurHandler = () => {
            // If the user blurred the window while the autocomplete is focused, it means that it'll be
            // refocused when they come back. In this case we want to skip the first focus event, if the
            // pane was closed, in order to avoid reopening it unintentionally.
            this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;
        };
        // tslint:disable-next-line no-typeof-undefined
        if (typeof window !== 'undefined') {
            zone.runOutsideAngular(() => {
                window.addEventListener('blur', this.windowBlurHandler);
            });
        }
        this.scrollStrategy = scrollStrategy;
    }
    /** The currently active option, coerced to MatOption type. */
    get activeOption() {
        if (this.autocomplete && this.autocomplete.keyManager) {
            return this.autocomplete.keyManager.activeItem;
        }
        return null;
    }
    get panelOpen() {
        return this.overlayAttached && this.autocomplete.showPanel;
    }
    /**
     * Whether the autocomplete is disabled. When disabled, the element will
     * act as a regular input and the user won't be able to open the panel.
     */
    get autocompleteDisabled() {
        return this._autocompleteDisabled;
    }
    set autocompleteDisabled(value) {
        this._autocompleteDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
    }
    ngOnDestroy() {
        // tslint:disable-next-line no-typeof-undefined
        if (typeof window !== 'undefined') {
            window.removeEventListener('blur', this.windowBlurHandler);
        }
        this.viewportSubscription.unsubscribe();
        this.componentDestroyed = true;
        this.destroyPanel();
        this.closeKeyEventStream.complete();
    }
    /** Opens the autocomplete suggestion panel. */
    openPanel() {
        this.attachOverlay();
    }
    closePanel() {
        if (!this.overlayAttached) {
            return;
        }
        if (this.panelOpen) {
            this.autocomplete.closed.emit();
        }
        this.autocomplete.isOpen = this.overlayAttached = false;
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            this.overlayRef.detach();
            this.closingActionsSubscription.unsubscribe();
        }
        // Note that in some cases this can end up being called after the component is destroyed.
        // Add a check to ensure that we don't try to run change detection on a destroyed view.
        if (!this.componentDestroyed) {
            // We need to trigger change detection manually, because
            // `fromEvent` doesn't seem to do it at the proper time.
            // This ensures that the label is reset when the
            // user clicks outside.
            this.changeDetectorRef.detectChanges();
        }
    }
    /**
     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options
     * within the viewport.
     */
    updatePosition() {
        if (this.overlayAttached) {
            this.overlayRef.updatePosition();
        }
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     */
    get panelClosingActions() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(this.optionSelections, this.autocomplete.keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(() => this.overlayAttached)), this.closeKeyEventStream, this.getOutsideClickStream(), this.overlayRef ?
            this.overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])(() => this.overlayAttached)) :
            Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["of"])()).pipe(
        // Normalize the output so we return a consistent type.
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["map"])((event) => event instanceof _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionSelectionChange"] ? event : null));
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        Promise.resolve(null).then(() => this.setTriggerValue(value));
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this.onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.elementRef.nativeElement.disabled = isDisabled;
    }
    handleKeydown(event) {
        // tslint:disable-next-line deprecation
        const keyCode = event.keyCode;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"]) {
            event.preventDefault();
        }
        if (this.activeOption && keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] && this.panelOpen) {
            this.activeOption.selectViaInteraction();
            this.resetActiveItem();
            event.preventDefault();
        }
        else if (this.autocomplete) {
            const prevActiveItem = this.autocomplete.keyManager.activeItem;
            if (this.panelOpen || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["TAB"]) {
                this.autocomplete.onKeydown(event);
            }
            else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"] && this.canOpen()) {
                this.openPanel();
            }
            const isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"];
            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {
                this.scrollToOption();
            }
        }
    }
    handleInput(event) {
        const target = event.target;
        let value = target.value;
        // Based on `NumberValueAccessor` from forms.
        if (target.type === 'number') {
            value = value === '' ? null : parseFloat(value);
        }
        // If the input has a placeholder, IE will fire the `input` event on page load,
        // focus and blur, in addition to when the user actually changed the value. To
        // filter out all of the extra events, we save the value on focus and between
        // `input` events, and we check whether it changed.
        // See: https://connect.microsoft.com/IE/feedback/details/885747/
        if (this.previousValue !== value) {
            this.previousValue = value;
            this.onChange(value);
            if (this.canOpen() && this.document.activeElement === event.target) {
                this.openPanel();
            }
        }
    }
    handleFocus() {
        if (!this.canOpenOnNextFocus) {
            this.canOpenOnNextFocus = true;
        }
        else if (this.canOpen() && this.autocomplete.openOnFocus) {
            this.previousValue = this.elementRef.nativeElement.value;
            this.attachOverlay();
        }
    }
    handleClick($event) {
        if (this.canOpen() && this.document.activeElement === $event.target) {
            this.openPanel();
        }
    }
    /** Stream of clicks outside of the autocomplete panel. */
    getOutsideClickStream() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(
        // tslint:disable-next-line: no-unnecessary-type-assertion
        Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["fromEvent"])(this.document, 'click'), 
        // tslint:disable-next-line: no-unnecessary-type-assertion
        Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["fromEvent"])(this.document, 'touchend'))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["filter"])((event) => {
            const clickTarget = event.target;
            const formField = this.formField ? this.formField._elementRef.nativeElement : null;
            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;
            return this.overlayAttached &&
                clickTarget !== this.elementRef.nativeElement &&
                (!formField || !formField.contains(clickTarget)) &&
                (!customOrigin || !customOrigin.contains(clickTarget)) &&
                (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));
        }));
    }
    /**
     * Given that we are not actually focusing active options, we must manually adjust scroll
     * to reveal options below the fold. First, we find the offset of the option from the top
     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
     * the panel height + the option height, so the active option will be just visible at the
     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
     * will become the offset. If that offset is visible within the panel already, the scrollTop is
     * not adjusted.
     */
    scrollToOption() {
        const index = this.autocomplete.keyManager.activeItemIndex || 0;
        const labelCount = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["countGroupLabelsBeforeOption"])(index, this.autocomplete.options, this.autocomplete.optionGroups);
        const newScrollPosition = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getOptionScrollPosition"])(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete.getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);
        this.autocomplete.setScrollTop(newScrollPosition);
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    subscribeToClosingActions() {
        const firstStable = this.zone.onStable.asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1));
        const optionChanges = this.autocomplete.options.changes
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["tap"])(() => this.positionStrategy.reapplyLastPosition()), 
        // Defer emitting to the stream until the next tick, because changing
        // bindings in here will cause "changed after checked" errors.
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["delay"])(0));
        // When the zone is stable initially, and when the option list changes...
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_12__["merge"])(firstStable, optionChanges)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["switchMap"])(() => {
            const wasOpen = this.panelOpen;
            this.resetActiveItem();
            this.autocomplete.setVisibility();
            if (this.panelOpen) {
                this.overlayRef.updatePosition();
                // If the `panelOpen` state changed, we need to make sure to emit the `opened`
                // event, because we may not have emitted it when the panel was attached. This
                // can happen if the users opens the panel and there are no options, but the
                // options come in slightly later or as a result of the value changing.
                if (wasOpen !== this.panelOpen) {
                    this.autocomplete.opened.emit();
                }
            }
            return this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1))
            // set the value, close the panel, and complete.
            .subscribe((event) => this.setValueAndClose(event));
    }
    /** Destroys the autocomplete suggestion panel. */
    destroyPanel() {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = null;
        }
    }
    setTriggerValue(value) {
        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?
            this.autocomplete.displayWith(value) :
            value;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const inputValue = toDisplay != null ? toDisplay : '';
        // If it's used within a `MatFormField`, we should set it through the property so it can go
        // through change detection.
        if (this.formField) {
            this.formField.control.value = inputValue;
        }
        else {
            this.elementRef.nativeElement.value = inputValue;
        }
        this.previousValue = inputValue;
    }
    /** This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.source) {
            this.clearPreviousSelectedOption(event.source);
            this.setTriggerValue(event.source.value);
            this.onChange(event.source.value);
            this.elementRef.nativeElement.focus();
            this.autocomplete.emitSelectEvent(event.source);
        }
        this.closePanel();
    }
    /** Clear any previous selected option and emit a selection change event for this option */
    clearPreviousSelectedOption(skip) {
        this.autocomplete.options.forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    attachOverlay() {
        if (!this.autocomplete) {
            throw getMcAutocompleteMissingPanelError();
        }
        let overlayRef = this.overlayRef;
        if (!overlayRef) {
            this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["TemplatePortal"](this.autocomplete.template, this.viewContainerRef);
            overlayRef = this.overlay.create(this.getOverlayConfig());
            this.overlayRef = overlayRef;
            // Use the `keydownEvents` in order to take advantage of
            // the overlay event targeting provided by the CDK overlay.
            overlayRef.keydownEvents().subscribe((event) => {
                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
                // tslint:disable-next-line deprecation
                if (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"] || (event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] && event.altKey)) {
                    this.resetActiveItem();
                    this.closeKeyEventStream.next();
                }
            });
            if (this.viewportRuler) {
                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {
                    if (this.panelOpen && overlayRef) {
                        overlayRef.updateSize({ width: this.getPanelWidth() });
                    }
                });
            }
        }
        else {
            const position = overlayRef.getConfig().positionStrategy;
            // Update the trigger, panel width and direction, in case anything has changed.
            position.setOrigin(this.getConnectedElement());
            overlayRef.updateSize({ width: this.getPanelWidth() });
        }
        if (overlayRef && !overlayRef.hasAttached()) {
            overlayRef.attach(this.portal);
            this.closingActionsSubscription = this.subscribeToClosingActions();
        }
        const wasOpen = this.panelOpen;
        this.autocomplete.setVisibility();
        this.autocomplete.isOpen = this.overlayAttached = true;
        // We need to do an extra `panelOpen` check in here, because the
        // autocomplete won't be shown if there are no options.
        if (this.panelOpen && wasOpen !== this.panelOpen) {
            this.autocomplete.opened.emit();
        }
    }
    getOverlayConfig() {
        return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayConfig"]({
            positionStrategy: this.getOverlayPosition(),
            scrollStrategy: this.scrollStrategy(),
            width: this.getPanelWidth(),
            direction: this.dir
        });
    }
    getOverlayPosition() {
        this.positionStrategy = this.overlay.position()
            .flexibleConnectedTo(this.getConnectedElement())
            .withFlexibleDimensions(false)
            .withPush(false)
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
                // The overlay edge connected to the trigger should have squared corners, while
                // the opposite end has rounded corners. We apply a CSS class to swap the
                // border-radius based on the overlay position.
                panelClass: 'mc-autocomplete-panel-above'
            }
        ]);
        return this.positionStrategy;
    }
    getConnectedElement() {
        if (this.connectedTo) {
            return this.connectedTo.elementRef;
        }
        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;
    }
    getPanelWidth() {
        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;
    }
    getHostWidth() {
        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
    /**
     * Resets the active item to -1 so arrow events will activate the
     * correct options, or to 0 if the consumer opted into it.
     */
    resetActiveItem() {
        if (this.autocomplete.autoActiveFirstOption) {
            this.autocomplete.keyManager.setFirstItemActive();
        }
        else {
            this.autocomplete.keyManager.setActiveItem(-1);
        }
    }
    canOpen() {
        const element = this.elementRef.nativeElement;
        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;
    }
}
McAutocompleteTrigger.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,
                host: {
                    class: 'mc-autocomplete-trigger',
                    '[attr.autocomplete]': 'autocompleteAttribute',
                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                    // a little earlier. This avoids issues where IE delays the focusing of the input.
                    '(focusin)': 'handleFocus()',
                    '(blur)': 'onTouched()',
                    '(input)': 'handleInput($event)',
                    '(keydown)': 'handleKeydown($event)',
                    '(click)': 'handleClick($event)'
                },
                exportAs: 'mcAutocompleteTrigger',
                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]
            },] }
];
/** @nocollapse */
McAutocompleteTrigger.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_11__["McFormField"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] },
    { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ViewportRuler"] }
];
McAutocompleteTrigger.propDecorators = {
    autocomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mcAutocomplete',] }],
    connectedTo: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mcAutocompleteConnectedTo',] }],
    autocompleteAttribute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['autocomplete',] }],
    autocompleteDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mcAutocompleteDisabled',] }]
};

class McAutocompleteModule {
}
McAutocompleteModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
                exports: [
                    McAutocomplete,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"],
                    McAutocompleteTrigger,
                    McAutocompleteOrigin,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McCommonModule"]
                ],
                declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],
                providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "RuMu":
/*!***************************************************************!*\
  !*** ./packages/docs/src/app/shared/doc-viewer/doc-viewer.ts ***!
  \***************************************************************/
/*! exports provided: DocViewer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocViewer", function() { return DocViewer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "IheW");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser */ "cUpR");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../example-viewer/example-viewer */ "iw/G");







let DocViewer = class DocViewer {
    constructor(_appRef, _componentFactoryResolver, _elementRef, _http, _injector, _viewContainerRef, _ngZone, _domSanitizer) {
        this._appRef = _appRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._elementRef = _elementRef;
        this._http = _http;
        this._injector = _injector;
        this._viewContainerRef = _viewContainerRef;
        this._ngZone = _ngZone;
        this._domSanitizer = _domSanitizer;
        this.contentRendered = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this.contentRenderFailed = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /** The document text. It should not be HTML encoded. */
        this.textContent = '';
        this.portalHosts = [];
    }
    /** The URL of the document to display. */
    set documentUrl(url) {
        this.fetchDocument(url);
    }
    ngOnDestroy() {
        this.clearLiveExamples();
        if (this.documentFetchSubscription) {
            this.documentFetchSubscription.unsubscribe();
        }
    }
    /** Fetch a document by URL. */
    fetchDocument(url) {
        // Cancel previous pending request
        if (this.documentFetchSubscription) {
            this.documentFetchSubscription.unsubscribe();
        }
        this.documentFetchSubscription = this._http.get(url, { responseType: 'text' }).subscribe((document) => this.updateDocument(document), (error) => this.showError(url, error));
    }
    /**
     * Updates the displayed document.
     * @param rawDocument The raw document content to show.
     */
    updateDocument(rawDocument) {
        // Replace all relative fragment URLs with absolute fragment URLs. e.g. "#my-section" becomes
        // "/components/button/api#my-section". This is necessary because otherwise these fragment
        // links would redirect to "/#my-section".
        // tslint:disable-next-line:no-parameter-reassignment
        rawDocument = rawDocument.replace(/href="#([^"]*)"/g, (_m, fragmentUrl) => {
            const absoluteUrl = `${location.pathname}#${fragmentUrl}`;
            return `href="${this._domSanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_3__["SecurityContext"].URL, absoluteUrl)}"`;
        });
        // tslint:disable-next-line:no-inner-html
        this._elementRef.nativeElement.innerHTML = rawDocument;
        this.textContent = this._elementRef.nativeElement.textContent;
        this.loadComponents('mosaic-docs-example', _example_viewer_example_viewer__WEBPACK_IMPORTED_MODULE_6__["ExampleViewer"]);
        // Resolving and creating components dynamically in Angular happens synchronously, but since
        // we want to emit the output if the components are actually rendered completely, we wait
        // until the Angular zone becomes stable.
        this._ngZone.onStable
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1))
            .subscribe(() => this.contentRendered.next());
    }
    /** Show an error that occurred when fetching a document. */
    showError(url, error) {
        // tslint:disable-next-line:no-console
        console.error(error);
        this._elementRef.nativeElement.innerText =
            `Failed to load document: ${url}. Error: ${error.statusText}`;
        this._ngZone.onStable
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1))
            .subscribe(() => this.contentRenderFailed.next());
    }
    /** Instantiate a ExampleViewer for each example. */
    loadComponents(componentName, componentClass) {
        const exampleElements = this._elementRef.nativeElement.querySelectorAll(`[${componentName}]`);
        Array.prototype.slice.call(exampleElements).forEach((element) => {
            const example = element.getAttribute(componentName);
            const portalHost = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["DomPortalOutlet"](element, this._componentFactoryResolver, this._appRef, this._injector);
            const examplePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["ComponentPortal"](componentClass, this._viewContainerRef);
            const exampleViewer = portalHost.attach(examplePortal);
            exampleViewer.instance.example = example;
            this.portalHosts.push(portalHost);
        });
    }
    clearLiveExamples() {
        this.portalHosts.forEach((h) => h.dispose());
        this.portalHosts = [];
    }
};
DocViewer.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["DomSanitizer"] }
];
DocViewer.propDecorators = {
    documentUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    contentRendered: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
    contentRenderFailed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
};
DocViewer = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'doc-viewer',
        template: 'Loading document...'
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"],
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"],
        _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"],
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"],
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"],
        _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["DomSanitizer"]])
], DocViewer);



/***/ }),

/***/ "S/AA":
/*!*********************************************************!*\
  !*** ./packages/docs/src/app/shared/version/version.ts ***!
  \*********************************************************/
/*! exports provided: mosaicVersion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mosaicVersion", function() { return mosaicVersion; });
/* tslint:disable:no-var-requires */
const packageJSON = __webpack_require__(/*! ../../../../../../package.json */ "kiQV");
/** This version will be used in footer and stackblitz. */
const mosaicVersion = packageJSON.version;


/***/ }),

/***/ "Snh7":
/*!*********************************************************************!*\
  !*** ./packages/docs/src/app/components/footer/footer.component.ts ***!
  \*********************************************************************/
/*! exports provided: FooterComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FooterComponent", function() { return FooterComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_footer_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./footer.component.html */ "gAVc");
/* harmony import */ var _footer_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./footer.component.scss */ "ZGWQ");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");




let FooterComponent = class FooterComponent {
};
FooterComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'footer',
        template: _raw_loader_footer_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_footer_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], FooterComponent);



/***/ }),

/***/ "Swjs":
/*!*******************************************************!*\
  !*** ./packages/docs/src/environments/environment.ts ***!
  \*******************************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `angular-cli.json`.
const environment = {
    production: false
};


/***/ }),

/***/ "TIT3":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/component-viewer/component-overview.template.html ***!
  \**********************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div [@fadeInOut]=\"isLoad ? 'fadeIn' : 'fadeOut'\" >\n    <span class=\"mc-display-3 title\">\n        {{documentName}}\n    </span>\n    <div *ngIf=\"documentLost\" class=\"mc-alert mc-alert_error mc-alert_dismissible\">\n                <span>Oops, {{documentName}} component seems to be lost... But you can help us find it!\n                    Just send a Pull Request to this repository:\n                    <a class=\"docs-markdown__a\" href=\"//github.com/positive-js/mosaic/pulls\"> Mosaic</a>\n                </span>\n    </div>\n    <doc-viewer\n        documentUrl=\"docs-content/overviews/{{componentViewer.componentDocItem.packageName}}/{{componentViewer.componentDocItem.id}}.html\"\n        class=\"docs-component-view-text-content docs-component-overview\"\n        [class.docs-component-overview_hidden]=\"documentLost\"\n        (contentRendered)=\"scrollToSelectedContentSection()\"\n        (contentRenderFailed)=\"showDocumentLostAlert()\">\n    </doc-viewer>\n    <anchors #toc ></anchors>\n</div>\n");

/***/ }),

/***/ "TuQC":
/*!*****************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-button-toggle.js ***!
  \*****************************************************************/
/*! exports provided: MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, McButtonToggle, McButtonToggleChange, McButtonToggleGroup, McButtonToggleModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR", function() { return MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonToggle", function() { return McButtonToggle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonToggleChange", function() { return McButtonToggleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonToggleGroup", function() { return McButtonToggleGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonToggleModule", function() { return McButtonToggleModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "s7LF");








/**
 * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(() => McButtonToggleGroup),
    multi: true
};
/** Change event object emitted by MсButtonToggle. */
class McButtonToggleChange {
    constructor(
    /** The MсButtonToggle that emits the event. */
    source, 
    /** The value assigned to the MсButtonToggle. */
    value) {
        this.source = source;
        this.value = value;
    }
}
/** Exclusive selection button toggle group that behaves like a radio-button group. */
class McButtonToggleGroup {
    constructor(_changeDetector) {
        this._changeDetector = _changeDetector;
        /**
         * Event that emits whenever the value of the group changes.
         * Used to facilitate two-way data binding.
         * @docs-private
         */
        this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /** Event emitted when the group's value changes. */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._vertical = false;
        this._multiple = false;
        this._disabled = false;
        /**
         * The method to be called in order to update ngModel.
         * Now `ngModel` binding is not supported in multiple selection mode.
         */
        // tslint:disable-next-line:no-empty
        this.controlValueAccessorChangeFn = () => { };
        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
        // tslint:disable-next-line:no-empty
        this.onTouched = () => { };
    }
    /** Whether the toggle group is vertical. */
    get vertical() {
        return this._vertical;
    }
    set vertical(value) {
        this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    /** Value of the toggle group. */
    get value() {
        const selected = this.selectionModel ? this.selectionModel.selected : [];
        if (this.multiple) {
            return selected.map((toggle) => toggle.value);
        }
        return selected[0] ? selected[0].value : undefined;
    }
    set value(newValue) {
        this.setSelectionByValue(newValue);
        this.valueChange.emit(this.value);
    }
    /** Selected button toggles in the group. */
    get selected() {
        const selected = this.selectionModel.selected;
        return this.multiple ? selected : (selected[0] || null);
    }
    /** Whether multiple button toggles can be selected. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    /** Whether multiple button toggle group is disabled. */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        if (!this.buttonToggles) {
            return;
        }
        this.buttonToggles.forEach((toggle) => toggle.markForCheck());
    }
    ngOnInit() {
        this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["SelectionModel"](this.multiple, undefined, false);
    }
    ngAfterContentInit() {
        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));
        this.disabled = this._disabled;
    }
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     * @param value Value to be set to the model.
     */
    writeValue(value) {
        this.value = value;
        this._changeDetector.markForCheck();
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this.controlValueAccessorChangeFn = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** Dispatch change event with current selection and group value. */
    emitChangeEvent() {
        const selected = this.selected;
        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;
        const event = new McButtonToggleChange(source, this.value);
        this.controlValueAccessorChangeFn(event.value);
        this.change.emit(event);
    }
    /**
     * Syncs a button toggle's selected state with the model value.
     * @param toggle Toggle to be synced.
     * @param select Whether the toggle should be selected.
     * @param isUserInput Whether the change was a result of a user interaction.
     */
    syncButtonToggle(toggle, select, isUserInput = false) {
        // Deselect the currently-selected toggle, if we're in single-selection
        // mode and the button being toggled isn't selected at the moment.
        if (!this.multiple && this.selected && !toggle.checked) {
            this.selected.checked = false;
        }
        if (select) {
            this.selectionModel.select(toggle);
        }
        else {
            this.selectionModel.deselect(toggle);
        }
        // Only emit the change event for user input.
        if (isUserInput) {
            this.emitChangeEvent();
        }
        // Note: we emit this one no matter whether it was a user interaction, because
        // it is used by Angular to sync up the two-way data binding.
        this.valueChange.emit(this.value);
    }
    /** Checks whether a button toggle is selected. */
    isSelected(toggle) {
        return this.selectionModel.isSelected(toggle);
    }
    /** Determines whether a button toggle should be checked on init. */
    isPrechecked(toggle) {
        if (this.rawValue === undefined) {
            return false;
        }
        if (this.multiple && Array.isArray(this.rawValue)) {
            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);
        }
        return toggle.value === this.rawValue;
    }
    /** Updates the selection state of the toggles in the group based on a value. */
    setSelectionByValue(value) {
        this.rawValue = value;
        if (!this.buttonToggles) {
            return;
        }
        if (this.multiple && value) {
            if (!Array.isArray(value)) {
                throw Error('Value must be an array in multiple-selection mode.');
            }
            this.clearSelection();
            value.forEach((currentValue) => this.selectValue(currentValue));
        }
        else {
            this.clearSelection();
            this.selectValue(value);
        }
    }
    /** Clears the selected toggles. */
    clearSelection() {
        this.selectionModel.clear();
        this.buttonToggles.forEach((toggle) => toggle.checked = false);
    }
    /** Selects a value if there's a toggle that corresponds to it. */
    selectValue(value) {
        const correspondingOption = this.buttonToggles.find((toggle) => {
            return toggle.value != null && toggle.value === value;
        });
        if (correspondingOption) {
            correspondingOption.checked = true;
            this.selectionModel.select(correspondingOption);
        }
    }
}
McButtonToggleGroup.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'mc-button-toggle-group',
                providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],
                host: {
                    role: 'group',
                    class: 'mc-button-toggle-group',
                    '[class.mc-button-toggle_vertical]': 'vertical'
                },
                exportAs: 'mcButtonToggleGroup'
            },] }
];
/** @nocollapse */
McButtonToggleGroup.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
McButtonToggleGroup.propDecorators = {
    vertical: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    buttonToggles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(() => McButtonToggle),] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
/** Single button inside of a toggle group. */
class McButtonToggle {
    constructor(buttonToggleGroup, changeDetectorRef, focusMonitor, element) {
        this.buttonToggleGroup = buttonToggleGroup;
        this.changeDetectorRef = changeDetectorRef;
        this.focusMonitor = focusMonitor;
        this.element = element;
        /** Event emitted when the group value changes. */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.isSingleSelector = false;
        this._checked = false;
        this._disabled = false;
    }
    /** Whether the button is checked. */
    get checked() {
        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;
    }
    set checked(value) {
        const newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        if (newValue !== this._checked) {
            this._checked = newValue;
            if (this.buttonToggleGroup) {
                this.buttonToggleGroup.syncButtonToggle(this, this._checked);
            }
            this.changeDetectorRef.markForCheck();
        }
    }
    get disabled() {
        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    ngOnInit() {
        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;
        this.type = this.isSingleSelector ? 'radio' : 'checkbox';
        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {
            this.checked = true;
        }
        this.focusMonitor.monitor(this.element.nativeElement, true);
    }
    ngOnDestroy() {
        const group = this.buttonToggleGroup;
        this.focusMonitor.stopMonitoring(this.element.nativeElement);
        // Remove the toggle from the selection once it's destroyed. Needs to happen
        // on the next tick in order to avoid "changed after checked" errors.
        if (group && group.isSelected(this)) {
            Promise.resolve().then(() => group.syncButtonToggle(this, false));
        }
    }
    /** Focuses the button. */
    focus() {
        this.element.nativeElement.focus();
    }
    /** Checks the button toggle due to an interaction with the underlying native button. */
    onToggleClick() {
        if (this.disabled) {
            return;
        }
        const newChecked = this.isSingleSelector ? true : !this._checked;
        if (newChecked !== this._checked) {
            this._checked = newChecked;
            if (this.buttonToggleGroup) {
                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);
                this.buttonToggleGroup.onTouched();
            }
        }
        // Emit a change event when it's the single selector
        this.change.emit(new McButtonToggleChange(this, this.value));
    }
    /**
     * Marks the button toggle as needing checking for change detection.
     * This method is exposed because the parent button toggle group will directly
     * update bound properties of the radio button.
     */
    markForCheck() {
        // When the group value changes, the button will not be notified.
        // Use `markForCheck` to explicit update button toggle's status.
        this.changeDetectorRef.markForCheck();
    }
}
McButtonToggle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'mc-button-toggle',
                exportAs: 'mcButtonToggle',
                template: `
        <button
            mc-button
            type="button"
            [class.mc-active]="checked"
            [disabled]="disabled"
            [tabIndex]="tabIndex"
            (click)="onToggleClick()">
            <ng-content></ng-content>
        </button>
    `,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                host: {
                    class: 'mc-button-toggle',
                    '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'
                },
                styles: [".mc-group{display:flex;flex-direction:row}.mc-group .mc-group_justified>.mc-group-item{width:100%}.mc-group .mc-group-item+.mc-group-item{margin-left:calc(-1 * var(--mc-button-size-border-width, 1px))}.mc-group>.mc-group-item:first-child:not(:last-child),.mc-group>.mc-group-item:first-child:not(:last-child)>.mc-form-field__container{border-bottom-right-radius:0;border-top-right-radius:0}.mc-group>.mc-group-item:last-child:not(:first-child),.mc-group>.mc-group-item:last-child:not(:first-child)>.mc-form-field__container{border-bottom-left-radius:0;border-top-left-radius:0}.mc-group>.mc-group-item:not(:first-child):not(:last-child),.mc-group>.mc-group-item:not(:first-child):not(:last-child)>.mc-form-field__container{border-radius:0}.mc-vertical-group{display:flex;flex-direction:column}.mc-vertical-group>.mc-group-item:first-child:not(:last-child){border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-right-radius:var(--mc-button-size-border-radius,3px)}.mc-vertical-group>.mc-group-item:first-child:not(:last-child)>.mc-form-field__container{border-bottom-right-radius:0;border-bottom-left-radius:0}.mc-vertical-group>.mc-group-item:last-child:not(:first-child){border-top-right-radius:0;border-top-left-radius:0;border-bottom-left-radius:var(--mc-button-size-border-radius,3px)}.mc-vertical-group>.mc-group-item:last-child:not(:first-child)>.mc-form-field__container{border-top-right-radius:0;border-top-left-radius:0}.mc-vertical-group>.mc-group-item:not(:first-child):not(:last-child),.mc-vertical-group>.mc-group-item:not(:first-child):not(:last-child)>.mc-form-field__container{border-radius:0}.mc-vertical-group .mc-group-item+.mc-group-item{margin-top:calc(-1 * var(--mc-button-size-border-width, 1px))}.mc-button-toggle-group{display:flex;flex-direction:row}.mc-button-toggle-group .mc-button-toggle:first-of-type:not(:last-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:first-of-type:not(:last-of-type)>.mc-icon-button{border-bottom-right-radius:0;border-top-right-radius:0;border-bottom-left-radius:var(--mc-button-toggle-size-border-radius,3px);border-top-left-radius:var(--mc-button-toggle-size-border-radius,3px)}.mc-button-toggle-group .mc-button-toggle:last-of-type:not(:first-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:last-of-type:not(:first-of-type)>.mc-icon-button{border-bottom-left-radius:0;border-top-left-radius:0;border-bottom-right-radius:var(--mc-button-toggle-size-border-radius,3px);border-top-right-radius:var(--mc-button-toggle-size-border-radius,3px)}.mc-button-toggle-group .mc-button-toggle:not(:first-of-type):not(:last-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:not(:first-of-type):not(:last-of-type)>.mc-icon-button{border-radius:0}.mc-button-toggle-group .mc-button-toggle[disabled]{outline:0}.mc-button-toggle-group:not(.mc-button-toggle_vertical) .mc-button-toggle:not([disabled])+.mc-button-toggle:not([disabled]){margin-left:calc(-1 * var(--mc-button-toggle-size-border-size, 1px))}.mc-button-toggle_vertical{flex-direction:column}.mc-button-toggle_vertical .mc-button-toggle+.mc-button-toggle{border-left:none;border-right:none}.mc-button-toggle_vertical .mc-button-toggle:not([disabled])+.mc-button-toggle:not([disabled]){margin-top:calc(-1 * var(--mc-button-toggle-size-border-size, 1px))}.mc-button-toggle_vertical .mc-button-toggle .mc-button,.mc-button-toggle_vertical .mc-button-toggle .mc-icon-button{width:100%}.mc-button-toggle_vertical .mc-button-toggle:first-child:not(:last-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:first-child:not(:last-child)>.mc-icon-button{border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-right-radius:var(--mc-button-toggle-size-border-radius,3px);border-top-left-radius:var(--mc-button-toggle-size-border-radius,3px)}.mc-button-toggle_vertical .mc-button-toggle:last-child:not(:first-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:last-child:not(:first-child)>.mc-icon-button{border-top-right-radius:0;border-top-left-radius:0;border-bottom-right-radius:var(--mc-button-toggle-size-border-radius,3px);border-bottom-left-radius:var(--mc-button-toggle-size-border-radius,3px)}.mc-button-toggle_vertical .mc-button-toggle:not(:first-child):not(:last-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:not(:first-child):not(:last-child)>.mc-icon-button{border-radius:0}.mc-button-toggle-standalone{box-shadow:none}"]
            },] }
];
/** @nocollapse */
McButtonToggle.ctorParameters = () => [
    { type: McButtonToggleGroup, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
McButtonToggle.propDecorators = {
    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    mcButton: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_1__["McButton"], { static: false },] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};

class McButtonToggleModule {
}
McButtonToggleModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_2__["McCommonModule"], _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_1__["McButtonModule"]],
                exports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_2__["McCommonModule"], McButtonToggleGroup, McButtonToggle],
                declarations: [McButtonToggleGroup, McButtonToggle]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "W56h":
/*!****************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/docs.template.html ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<router-outlet></router-outlet>\n");

/***/ }),

/***/ "WPpj":
/*!**************************************************!*\
  !*** ./dist/cdk/fesm2015/ptsecurity-cdk-a11y.js ***!
  \**************************************************/
/*! exports provided: ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActiveDescendantKeyManager", function() { return ActiveDescendantKeyManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusKeyManager", function() { return FocusKeyManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListKeyManager", function() { return ListKeyManager; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "kU1M");





/* tslint:disable:member-ordering */
/**
 * This class manages keyboard events for selectable lists. If you pass it a query list
 * of items, it will set the active item correctly when arrow events occur.
 */
class ListKeyManager {
    constructor(_items) {
        this._items = _items;
        /**
         * Stream that emits any time the TAB key is pressed, so components can react
         * when focus is shifted off of the list.
         */
        this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /** Stream that emits whenever the active item of the list manager changes. */
        this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.previousActiveItemIndex = -1;
        this._activeItemIndex = -1;
        this.wrap = false;
        this.letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        this.vertical = true;
        this.scrollSize = 0;
        // Buffer for the letters that the user has pressed when the typeahead option is turned on.
        this.pressedLetters = [];
        /**
         * Predicate function that can be used to check whether an item should be skipped
         * by the key manager. By default, disabled items are skipped.
         */
        this.skipPredicateFn = (item) => item.disabled;
        if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["QueryList"]) {
            _items.changes.subscribe((newItems) => {
                if (this._activeItem) {
                    const itemArray = newItems.toArray();
                    const newIndex = itemArray.indexOf(this._activeItem);
                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {
                        this._activeItemIndex = newIndex;
                    }
                }
            });
        }
    }
    // Index of the currently active item.
    get activeItemIndex() {
        return this._activeItemIndex;
    }
    // The active item.
    get activeItem() {
        return this._activeItem;
    }
    withScrollSize(scrollSize) {
        this.scrollSize = scrollSize;
        return this;
    }
    /**
     * Turns on wrapping mode, which ensures that the active item will wrap to
     * the other end of list when there are no more items in the given direction.
     */
    withWrap() {
        this.wrap = true;
        return this;
    }
    /**
     * Configures whether the key manager should be able to move the selection vertically.
     * @param enabled Whether vertical selection should be enabled.
     */
    withVerticalOrientation(enabled = true) {
        this.vertical = enabled;
        return this;
    }
    /**
     * Configures the key manager to move the selection horizontally.
     * Passing in `null` will disable horizontal movement.
     * @param direction Direction in which the selection can be moved.
     */
    withHorizontalOrientation(direction) {
        this.horizontal = direction;
        return this;
    }
    /**
     * Turns on typeahead mode which allows users to set the active item by typing.
     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled
     * @param debounceInterval Time to wait after the last keystroke before setting the active item.
     */
    withTypeAhead(debounceInterval = 200, searchLetterIndex = 0) {
        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {
            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
        }
        this.typeaheadSubscription.unsubscribe();
        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those
        // letters back into a string. Afterwards find the first item that starts with that string and select it.
        this.typeaheadSubscription = this.letterKeyStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((keyCode) => this.pressedLetters.push(keyCode)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(debounceInterval), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(() => this.pressedLetters.length > 0), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(() => this.pressedLetters.join(''))).subscribe((inputString) => {
            if (searchLetterIndex === -1) {
                this.pressedLetters = [];
                return;
            }
            const items = this._items.toArray();
            // Start at 1 because we want to start searching at the item immediately
            // following the current active item.
            for (let i = 1; i < items.length + 1; i++) {
                const index = (this._activeItemIndex + i) % items.length;
                const item = items[index];
                if (!item.disabled &&
                    item.getLabel().toUpperCase().trim().indexOf(inputString) === searchLetterIndex) {
                    this.setActiveItem(index);
                    break;
                }
            }
            this.pressedLetters = [];
        });
        return this;
    }
    /**
     * Sets the active item to the item at the index specified.
     * @param item The index of the item to be set as active.
     */
    setActiveItem(item) {
        this.previousActiveItemIndex = this._activeItemIndex;
        this.updateActiveItem(item);
        if (this._activeItemIndex !== this.previousActiveItemIndex) {
            this.change.next(this._activeItemIndex);
        }
    }
    /**
     * Sets the active item depending on the key event passed in.
     * @param event Keyboard event to be used for determining which element should be active.
     */
    onKeydown(event) {
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        switch (keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["TAB"]:
                this.tabOut.next();
                return;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["DOWN_ARROW"]:
                if (this.vertical) {
                    this.setNextItemActive();
                    break;
                }
                else {
                    return;
                }
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["UP_ARROW"]:
                if (this.vertical) {
                    this.setPreviousItemActive();
                    break;
                }
                else {
                    return;
                }
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["RIGHT_ARROW"]:
                if (this.horizontal === 'ltr') {
                    this.setNextItemActive();
                    break;
                }
                else if (this.horizontal === 'rtl') {
                    this.setPreviousItemActive();
                    break;
                }
                else {
                    return;
                }
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["LEFT_ARROW"]:
                if (this.horizontal === 'ltr') {
                    this.setPreviousItemActive();
                    break;
                }
                else if (this.horizontal === 'rtl') {
                    this.setNextItemActive();
                    break;
                }
                else {
                    return;
                }
            default:
                // Attempt to use the `event.key` which also maps it to the user's keyboard language,
                // otherwise fall back to resolving alphanumeric characters via the keyCode.
                if (event.key && event.key.length === 1) {
                    this.letterKeyStream.next(event.key.toLocaleUpperCase());
                }
                else if ((keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["A"] && keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["Z"]) || (keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["ZERO"] && keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["NINE"])) {
                    this.letterKeyStream.next(String.fromCharCode(keyCode));
                }
                // Note that we return here, in order to avoid preventing
                // the default action of non-navigational keys.
                return;
        }
        this.pressedLetters = [];
        event.preventDefault();
    }
    // Sets the active item to the first enabled item in the list.
    setFirstItemActive() {
        this.setActiveItemByIndex(0, 1);
    }
    // Sets the active item to the last enabled item in the list.
    setLastItemActive() {
        this.setActiveItemByIndex(this._items.length - 1, -1);
    }
    // Sets the active item to the next enabled item in the list.
    setNextItemActive() {
        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);
    }
    // Sets the active item to a previous enabled item in the list.
    setPreviousItemActive() {
        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()
            : this.setActiveItemByDelta(-1);
    }
    setNextPageItemActive(delta = this.scrollSize) {
        const nextItemIndex = this._activeItemIndex + delta;
        if (nextItemIndex >= this._items.length) {
            this.setLastItemActive();
        }
        else {
            this.setActiveItemByDelta(delta);
        }
    }
    setPreviousPageItemActive(delta = this.scrollSize) {
        const nextItemIndex = this._activeItemIndex - delta;
        if (nextItemIndex <= 0) {
            this.setFirstItemActive();
        }
        else {
            this.setActiveItemByDelta(-delta);
        }
    }
    updateActiveItem(item) {
        const itemArray = this._items.toArray();
        const index = typeof item === 'number' ? item : itemArray.indexOf(item);
        this._activeItemIndex = index;
        this._activeItem = itemArray[index];
    }
    /**
     * This method sets the active item, given a list of items and the delta between the
     * currently active item and the new active item. It will calculate differently
     * depending on whether wrap mode is turned on.
     */
    setActiveItemByDelta(delta) {
        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);
    }
    /**
     * Sets the active item properly given "wrap" mode. In other words, it will continue to move
     * down the list until it finds an item that is not disabled, and it will wrap if it
     * encounters either end of the list.
     */
    setActiveInWrapMode(delta) {
        const items = this.getItemsArray();
        for (let i = 1; i <= items.length; i++) {
            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;
            const item = items[index];
            if (!this.skipPredicateFn(item)) {
                this.setActiveItem(index);
                return;
            }
        }
    }
    /**
     * Sets the active item properly given the default mode. In other words, it will
     * continue to move down the list until it finds an item that is not disabled. If
     * it encounters either end of the list, it will stop and not wrap.
     */
    setActiveInDefaultMode(delta) {
        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);
    }
    /**
     * Sets the active item to the first enabled item starting at the index specified. If the
     * item is disabled, it will move in the fallbackDelta direction until it either
     * finds an enabled item or encounters the end of the list.
     */
    setActiveItemByIndex(index, fallbackDelta) {
        const items = this.getItemsArray();
        if (!items[index]) {
            return;
        }
        let curIndex = index;
        while (this.skipPredicateFn(items[curIndex])) {
            curIndex += fallbackDelta;
            if (!items[curIndex]) {
                return;
            }
        }
        this.setActiveItem(curIndex);
    }
    /** Returns the items as an array. */
    getItemsArray() {
        return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["QueryList"] ? this._items.toArray() : this._items;
    }
}
/* tslint:enable:member-ordering */

class ActiveDescendantKeyManager extends ListKeyManager {
    /**
     * This method sets the active item to the item at the specified index.
     * It also adds active styles to the newly active item and removes active
     * styles from the previously active item.
     */
    setActiveItem(index) {
        if (this.activeItem) {
            this.activeItem.setInactiveStyles();
        }
        super.setActiveItem(index);
        if (this.activeItem) {
            this.activeItem.setActiveStyles();
        }
    }
}

class FocusKeyManager extends ListKeyManager {
    constructor() {
        super(...arguments);
        this.origin = 'program';
    }
    /**
     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
     * @param origin Focus origin to be used when focusing items.
     */
    setFocusOrigin(origin) {
        this.origin = origin;
        return this;
    }
    setActiveItem(item) {
        super.setActiveItem(item);
        if (this.activeItem) {
            this.activeItem.focus(this.origin);
        }
    }
}

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "WlSM":
/*!**************************************************************************************!*\
  !*** ./packages/docs/src/app/components/component-viewer/component-viewer.module.ts ***!
  \**************************************************************************************/
/*! exports provided: ComponentViewerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentViewerModule", function() { return ComponentViewerModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/tabs */ "6AiE");
/* harmony import */ var _shared_doc_viewer_doc_viewer_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/doc-viewer/doc-viewer-module */ "G+fD");
/* harmony import */ var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/documentation-items/documentation-items */ "rMhK");
/* harmony import */ var _shared_table_of_contents_table_of_contents_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../shared/table-of-contents/table-of-contents.module */ "aRpB");
/* harmony import */ var _anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../anchors/anchors.module */ "3Xtq");
/* harmony import */ var _component_viewer_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./component-viewer.component */ "6uKg");










let ComponentViewerModule = class ComponentViewerModule {
};
ComponentViewerModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [
            _anchors_anchors_module__WEBPACK_IMPORTED_MODULE_8__["AnchorsModule"],
            _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_4__["McTabsModule"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"],
            _shared_doc_viewer_doc_viewer_module__WEBPACK_IMPORTED_MODULE_5__["DocViewerModule"],
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _shared_table_of_contents_table_of_contents_module__WEBPACK_IMPORTED_MODULE_7__["TableOfContentsModule"]
        ],
        exports: [
            _component_viewer_component__WEBPACK_IMPORTED_MODULE_9__["ComponentViewerComponent"]
        ],
        declarations: [
            _component_viewer_component__WEBPACK_IMPORTED_MODULE_9__["ComponentViewerComponent"],
            _component_viewer_component__WEBPACK_IMPORTED_MODULE_9__["ComponentOverviewComponent"]
        ],
        providers: [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_6__["DocumentationItems"]]
    })
], ComponentViewerModule);



/***/ }),

/***/ "YK9X":
/*!***********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tooltip.js ***!
  \***********************************************************/
/*! exports provided: ArrowPlacements, MC_TOOLTIP_SCROLL_STRATEGY, MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, McToolTipModule, McTooltip, McTooltipComponent, getMcTooltipInvalidPositionError, mcTooltipScrollStrategyFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrowPlacements", function() { return ArrowPlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TOOLTIP_SCROLL_STRATEGY", function() { return MC_TOOLTIP_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function() { return MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McToolTipModule", function() { return McToolTipModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTooltip", function() { return McTooltip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTooltipComponent", function() { return McTooltipComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcTooltipInvalidPositionError", function() { return getMcTooltipInvalidPositionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcTooltipScrollStrategyFactory", function() { return mcTooltipScrollStrategyFactory; });
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "kU1M");











// tslint:disable-next-line:naming-convention
const ArrowPlacements = {
    Top: 'top',
    Center: 'center',
    Bottom: 'bottom',
    Right: 'right',
    Left: 'left'
};
class McTooltipComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.prefix = 'mc-tooltip_placement';
        this.positions = [..._ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["DEFAULT_4_POSITIONS"]];
        this.classMap = {};
        this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.mcMouseEnterDelay = 400;
        this.mcMouseLeaveDelay = 0;
        this._mcTrigger = 'hover';
        this._mcPlacement = 'top';
        this._mcVisible = new rxjs__WEBPACK_IMPORTED_MODULE_8__["BehaviorSubject"](false);
        /** Subject for notifying that the tooltip has been hidden from the view */
        this.onHideSubject = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        this.closeOnInteraction = false;
        this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["POSITION_MAP"];
        this.$visible = this._mcVisible.asObservable();
    }
    get mcTitle() {
        return this._mcTitle;
    }
    set mcTitle(value) {
        this._mcTitle = value;
    }
    get mcTrigger() {
        return this._mcTrigger;
    }
    set mcTrigger(value) {
        this._mcTrigger = value;
    }
    get mcPlacement() {
        return this._mcPlacement;
    }
    set mcPlacement(value) {
        if (value !== this._mcPlacement) {
            this._mcPlacement = value;
            this.positions.unshift(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["POSITION_MAP"][this.mcPlacement]);
        }
        else if (!value) {
            this._mcPlacement = 'top';
        }
    }
    get mcTooltipClass() {
        return this._mcTooltipClass;
    }
    set mcTooltipClass(value) {
        this._mcTooltipClass = value;
    }
    get mcVisible() {
        return this._mcVisible.value;
    }
    set mcVisible(value) {
        const visible = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        if (visible && this._mcVisible.value !== visible) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    get mcArrowPlacement() {
        return this._mcArrowPlacement;
    }
    set mcArrowPlacement(value) {
        this._mcArrowPlacement = value;
    }
    show() {
        if (this.hideTid) {
            clearTimeout(this.hideTid);
        }
        if (!this.isContentEmpty()) {
            if (this.mcTrigger !== 'manual') {
                this.closeOnInteraction = true;
            }
            this.showTid = setTimeout(() => {
                this._mcVisible.next(true);
                this.mcVisibleChange.emit(true);
                // Mark for check so if any parent component has set the
                // ChangeDetectionStrategy to OnPush it will be checked anyways
                this.markForCheck();
            }, this.mcMouseEnterDelay);
        }
    }
    hide() {
        if (this.showTid) {
            clearTimeout(this.showTid);
        }
        this.hideTid = setTimeout(() => {
            this._mcVisible.next(false);
            this.mcVisibleChange.emit(false);
            this.onHideSubject.next();
            // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyways
            this.markForCheck();
        }, this.mcMouseLeaveDelay);
    }
    setClassMap() {
        this.classMap = {
            [`${this.prefix}-${this.mcPlacement}`]: true,
            [this.mcTooltipClass]: true
        };
    }
    isContentEmpty() {
        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;
    }
    /** Returns an observable that notifies when the tooltip has been hidden from view. */
    afterHidden() {
        return this.onHideSubject.asObservable();
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    handleBodyInteraction() {
        if (this.closeOnInteraction) {
            this.hide();
        }
    }
    get isTemplateRef() {
        return this.mcTitle instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"];
    }
    get isNonEmptyString() {
        return (typeof this.mcTitle === 'string' || typeof this.mcTitle === 'number') && this._mcTitle !== '';
    }
}
McTooltipComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-tooltip-component',
                animations: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["fadeAnimation"]],
                template: "<div class=\"mc-tooltip\"\n     [ngClass]=\"classMap\"\n     [@fadeAnimation]=\"''+($visible | async)\">\n    <div class=\"mc-tooltip-content\">\n        <div class=\"mc-tooltip-arrow\"></div>\n        <div class=\"mc-tooltip-inner\">\n            <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"mcTitle\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString\">\n                <div [innerHTML]=\"mcTitle\"></div>\n            </ng-container>\n        </div>\n    </div>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                preserveWhitespaces: false,
                host: {
                    '(body:click)': 'this.handleBodyInteraction()'
                },
                styles: [".mc-tooltip{display:block;box-sizing:border-box;visibility:visible;position:relative;z-index:1060;max-width:var(--mc-tooltip-size-max-width,240px);list-style:none;white-space:pre-line}.mc-tooltip_placement-top{padding-bottom:var(--mc-tooltip-size-distance,9px)}.mc-tooltip_placement-right{padding-left:var(--mc-tooltip-size-distance,9px)}.mc-tooltip_placement-bottom{padding-top:var(--mc-tooltip-size-distance,9px)}.mc-tooltip_placement-left{padding-right:var(--mc-tooltip-size-distance,9px)}.mc-tooltip-inner{padding:var(--mc-tooltip-size-padding,8px 16px);text-align:left;text-decoration:none;border-radius:var(--mc-tooltip-size-border-radius,3px);height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;vertical-align:center}.mc-tooltip-arrow{position:absolute;width:var(--mc-tooltip-size-arrow-size,12px);height:var(--mc-tooltip-size-arrow-size,12px);transform:rotate(45deg)}.mc-tooltip_placement-top .mc-tooltip-arrow{bottom:calc(var(--mc-tooltip-size-distance, 9px) - var(--mc-tooltip-size-arrow-width, 5px));left:50%;margin-left:calc(-1 * var(--mc-tooltip-size-arrow-width, 5px))}.mc-tooltip_placement-right .mc-tooltip-arrow{left:calc(var(--mc-tooltip-size-distance, 9px) - var(--mc-tooltip-size-arrow-width, 5px));top:16px;margin-top:calc(-1 * var(--mc-tooltip-size-arrow-width, 5px))}.mc-tooltip_placement-left .mc-tooltip-arrow{right:calc(var(--mc-tooltip-size-distance, 9px) - var(--mc-tooltip-size-arrow-width, 5px));top:16px;margin-top:calc(-1 * var(--mc-tooltip-size-arrow-width, 5px))}.mc-tooltip_placement-bottom .mc-tooltip-arrow{top:calc(var(--mc-tooltip-size-distance, 9px) - var(--mc-tooltip-size-arrow-width, 5px));left:50%;margin-left:calc(-1 * var(--mc-tooltip-size-arrow-width, 5px))}"]
            },] }
];
/** @nocollapse */
McTooltipComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
];
McTooltipComponent.propDecorators = {
    mcVisibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    mcMouseEnterDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcMouseLeaveDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcPlacement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcTooltipClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcArrowPlacement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};
const MC_TOOLTIP_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-tooltip-scroll-strategy');
/** @docs-private */
function mcTooltipScrollStrategyFactory(overlay) {
    return () => overlay.scrollStrategies.reposition({ scrollThrottle: 20 });
}
/** @docs-private */
const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MC_TOOLTIP_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]],
    useFactory: mcTooltipScrollStrategyFactory
};
/** Creates an error to be thrown if the user supplied an invalid tooltip position. */
function getMcTooltipInvalidPositionError(position) {
    return Error(`McTooltip position "${position}" is invalid.`);
}
const VIEWPORT_MARGIN = 8;
class McTooltip {
    constructor(overlay, elementRef, ngZone, scrollDispatcher, hostView, scrollStrategy, direction) {
        this.overlay = overlay;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.scrollDispatcher = scrollDispatcher;
        this.hostView = hostView;
        this.scrollStrategy = scrollStrategy;
        this.direction = direction;
        this.isTooltipOpen = false;
        this.isDynamicTooltip = false;
        this.parentDisabled = false;
        this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.$unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        this._disabled = false;
        this._mcTrigger = 'hover';
        this._mcPlacement = 'top';
        this.manualListeners = new Map();
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["POSITION_MAP"];
    }
    get mcTitle() {
        return this._mcTitle;
    }
    set mcTitle(title) {
        this._mcTitle = title;
        this.updateCompValue('mcTitle', title);
    }
    set setTitle(title) {
        this.mcTitle = title;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        this.updateCompValue('mcTooltipDisabled', value);
    }
    get mcMouseEnterDelay() {
        return this._mcMouseEnterDelay;
    }
    set mcMouseEnterDelay(value) {
        this._mcMouseEnterDelay = value;
        this.updateCompValue('mcMouseEnterDelay', value);
    }
    get mcMouseLeaveDelay() {
        return this._mcMouseLeaveDelay;
    }
    set mcMouseLeaveDelay(value) {
        this._mcMouseLeaveDelay = value;
        this.updateCompValue('mcMouseLeaveDelay', value);
    }
    get mcTrigger() {
        return this._mcTrigger;
    }
    set mcTrigger(value) {
        if (value) {
            this._mcTrigger = value;
            this.updateCompValue('mcTrigger', value);
        }
        else {
            this._mcTrigger = 'hover';
        }
    }
    get mcPlacement() {
        return this._mcPlacement;
    }
    set mcPlacement(value) {
        if (value) {
            this._mcPlacement = value;
            this.updateCompValue('mcPlacement', value);
        }
        else {
            this._mcPlacement = 'top';
        }
        if (this.mcVisible) {
            this.updatePosition();
        }
    }
    get mcTooltipClass() {
        return this._mcTooltipClass;
    }
    set mcTooltipClass(value) {
        if (value) {
            this._mcTooltipClass = value;
            this.updateCompValue('mcTooltipClass', value);
        }
        else {
            this._mcTooltipClass = '';
        }
    }
    get mcVisible() {
        return this._mcVisible;
    }
    set mcVisible(externalValue) {
        const value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(externalValue);
        if (this._mcVisible !== value) {
            this._mcVisible = value;
            this.updateCompValue('mcVisible', value);
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    get mcArrowPlacement() {
        return this._mcArrowPlacement;
    }
    set mcArrowPlacement(value) {
        this._mcArrowPlacement = value;
    }
    ngOnInit() {
        this.initElementRefListeners();
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        this.manualListeners.forEach((listener, event) => {
            this.elementRef.nativeElement.removeEventListener(event, listener);
        });
        this.manualListeners.clear();
        this.$unsubscribe.next();
        this.$unsubscribe.complete();
    }
    /** Create the overlay config and position strategy */
    createOverlay() {
        if (this.overlayRef) {
            return this.overlayRef;
        }
        // Create connected position strategy that listens for scroll events to reposition.
        const strategy = this.overlay.position()
            .flexibleConnectedTo(this.elementRef)
            .withTransformOriginOn('.mc-tooltip')
            .withFlexibleDimensions(false)
            .withViewportMargin(VIEWPORT_MARGIN)
            .withPositions([..._ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["DEFAULT_4_POSITIONS"]]);
        const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
        strategy.withScrollableContainers(scrollableAncestors);
        strategy.positionChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.destroyed))
            .subscribe((change) => {
            if (this.tooltip) {
                this.onPositionChange(change);
                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {
                    // After position changes occur and the overlay is clipped by
                    // a parent scrollable then close the tooltip.
                    this.ngZone.run(() => this.hide());
                }
            }
        });
        this.overlayRef = this.overlay.create({
            direction: this.direction,
            positionStrategy: strategy,
            panelClass: 'mc-tooltip-panel',
            scrollStrategy: this.scrollStrategy()
        });
        this.updatePosition();
        this.overlayRef.detachments()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.destroyed))
            .subscribe(() => this.detach());
        return this.overlayRef;
    }
    detach() {
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            this.overlayRef.detach();
        }
        this.tooltip = null;
    }
    onPositionChange($event) {
        let updatedPlacement = this.mcPlacement;
        Object.keys(this.availablePositions).some((key) => {
            if ($event.connectionPair.originX === this.availablePositions[key].originX &&
                $event.connectionPair.originY === this.availablePositions[key].originY &&
                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&
                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {
                updatedPlacement = key;
                return true;
            }
            return false;
        });
        this.updateCompValue('mcPlacement', updatedPlacement);
        if (this.tooltip) {
            this.tooltip.setClassMap();
            this.tooltip.markForCheck();
        }
        this.handlePositioningUpdate();
    }
    handlePositioningUpdate() {
        this.overlayRef = this.createOverlay();
        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {
            const halfDelimiter = 2;
            const overlayElemHeight = this.overlayRef.overlayElement.clientHeight;
            const currentContainerHeight = this.hostView.element.nativeElement.clientHeight;
            if (this.mcArrowPlacement === ArrowPlacements.Center) {
                const arrowElemRef = this.getTooltipArrowElem();
                const containerPositionTop = this.hostView.element.nativeElement.getBoundingClientRect().top;
                const halfOfContainerHeight = currentContainerHeight / halfDelimiter;
                const halfOfTooltipHeight = overlayElemHeight / halfDelimiter;
                this.overlayRef.overlayElement.style.top = `${(containerPositionTop + halfOfContainerHeight) - halfOfTooltipHeight + 1}px`;
                if (arrowElemRef) {
                    arrowElemRef.setAttribute('style', `top: ${halfOfTooltipHeight - 1}px`);
                }
            }
            else {
                const pos = (overlayElemHeight - currentContainerHeight) / halfDelimiter;
                const defaultTooltipPlacementTop = parseInt(this.overlayRef.overlayElement.style.top || '0px', 10);
                this.overlayRef.overlayElement.style.top = `${defaultTooltipPlacementTop + pos - 1}px`;
            }
        }
    }
    // tslint:disable-next-line:no-any
    updateCompValue(key, value) {
        if (this.isDynamicTooltip && value && this.tooltip) {
            this.tooltip[key] = value;
            this.tooltip.markForCheck();
        }
    }
    handleKeydown(e) {
        if (this.isTooltipOpen && e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ESCAPE"]) { // tslint:disable-line
            this.hide();
        }
    }
    handleTouchend() {
        this.hide();
    }
    initElementRefListeners() {
        this.clearListeners();
        if (this.mcTrigger === 'hover') {
            this.manualListeners
                .set('mouseenter', () => this.show())
                .set('mouseleave', () => this.hide())
                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));
        }
        if (this.mcTrigger === 'focus') {
            this.manualListeners
                .set('focus', () => this.show())
                .set('blur', () => this.hide())
                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));
        }
    }
    clearListeners() {
        this.manualListeners.forEach((listener, event) => {
            this.elementRef.nativeElement.removeEventListener(event, listener);
        });
        this.manualListeners.clear();
    }
    show() {
        if (this.disabled) {
            return;
        }
        if (!this.tooltip) {
            this.overlayRef = this.createOverlay();
            this.detach();
            this.portal = this.portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["ComponentPortal"](McTooltipComponent, this.hostView);
            this.tooltip = this.overlayRef.attach(this.portal).instance;
            this.tooltip.afterHidden()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.destroyed))
                .subscribe(() => this.detach());
            this.isDynamicTooltip = true;
            const properties = [
                'mcTitle',
                'mcPlacement',
                'mcTrigger',
                'mcTooltipDisabled',
                'mcMouseEnterDelay',
                'mcMouseLeaveDelay',
                'mcTooltipClass'
            ];
            properties.forEach((property) => this.updateCompValue(property, this[property]));
            this.tooltip.mcVisibleChange
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["takeUntil"])(this.$unsubscribe), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["distinctUntilChanged"])())
                .subscribe((data) => {
                this.mcVisible = data;
                this.mcVisibleChange.emit(data);
                this.isTooltipOpen = data;
            });
        }
        this.updatePosition();
        this.tooltip.show();
    }
    hide() {
        if (this.tooltip) {
            this.tooltip.hide();
        }
    }
    /** Updates the position of the current tooltip. */
    updatePosition() {
        if (!this.overlayRef) {
            this.overlayRef = this.createOverlay();
        }
        const position = this.overlayRef.getConfig().positionStrategy;
        const origin = this.getOrigin();
        const overlay = this.getOverlayPosition();
        position.withPositions([
            Object.assign(Object.assign({}, origin.main), overlay.main),
            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)
        ]);
        if (this.tooltip) {
            position.apply();
            window.dispatchEvent(new Event('resize'));
        }
    }
    /**
     * Returns the origin position and a fallback position based on the user's position preference.
     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
     */
    getOrigin() {
        const position = this.mcPlacement;
        const isLtr = !this.direction || this.direction.value === 'ltr';
        let originPosition;
        if (position === 'top' || position === 'bottom') {
            originPosition = { originX: 'center', originY: position === 'top' ? 'top' : 'bottom' };
        }
        else if (position === 'top' ||
            (position === 'left' && isLtr) ||
            (position === 'right' && !isLtr)) {
            originPosition = { originX: 'start', originY: 'center' };
        }
        else if (position === 'bottom' ||
            (position === 'right' && isLtr) ||
            (position === 'left' && !isLtr)) {
            originPosition = { originX: 'end', originY: 'center' };
        }
        else {
            throw getMcTooltipInvalidPositionError(position);
        }
        const { x, y } = this.invertPosition(originPosition.originX, originPosition.originY);
        return {
            main: originPosition,
            fallback: { originX: x, originY: y }
        };
    }
    /** Returns the overlay position and a fallback position based on the user's preference */
    getOverlayPosition() {
        const position = this.mcPlacement;
        const isLtr = !this.direction || this.direction.value === 'ltr';
        let overlayPosition;
        if (position === 'top') {
            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
        }
        else if (position === 'bottom') {
            overlayPosition = { overlayX: 'center', overlayY: 'top' };
        }
        else if (position === 'top' ||
            (position === 'left' && isLtr) ||
            (position === 'right' && !isLtr)) {
            overlayPosition = { overlayX: 'end', overlayY: 'center' };
        }
        else if (position === 'bottom' ||
            (position === 'right' && isLtr) ||
            (position === 'left' && !isLtr)) {
            overlayPosition = { overlayX: 'start', overlayY: 'center' };
        }
        else {
            throw getMcTooltipInvalidPositionError(position);
        }
        const { x, y } = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);
        return {
            main: overlayPosition,
            fallback: { overlayX: x, overlayY: y }
        };
    }
    /** Inverts an overlay position. */
    invertPosition(x, y) {
        let newX = x;
        let newY = y;
        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {
            if (y === 'top') {
                newY = 'bottom';
            }
            else if (y === 'bottom') {
                newY = 'top';
            }
        }
        else {
            if (x === 'end') {
                newX = 'start';
            }
            else if (x === 'start') {
                newX = 'end';
            }
        }
        return { x: newX, y: newY };
    }
    getTooltipArrowElem() {
        var _a;
        const arrowClassName = 'mc-tooltip-arrow';
        return (_a = this.overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.getElementsByClassName(arrowClassName)[0];
    }
}
McTooltip.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[mcTooltip], [attribute^="mcTooltip"]',
                exportAs: 'mcTooltip',
                host: {
                    '[class.mc-tooltip-open]': 'isTooltipOpen',
                    '[class.disabled]': 'parentDisabled',
                    '(keydown)': 'handleKeydown($event)',
                    '(touchend)': 'handleTouchend()'
                }
            },] }
];
/** @nocollapse */
McTooltip.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["ScrollDispatcher"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MC_TOOLTIP_SCROLL_STRATEGY,] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] }
];
McTooltip.propDecorators = {
    mcVisibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    mcTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcTooltip',] }],
    setTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcTitle',] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcTooltipDisabled',] }],
    mcMouseEnterDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcMouseLeaveDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcPlacement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcTooltipClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    mcArrowPlacement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McToolTipModule {
}
McToolTipModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                declarations: [McTooltipComponent, McTooltip],
                exports: [McTooltipComponent, McTooltip],
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"]],
                providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],
                entryComponents: [McTooltipComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "YR5S":
/*!*****************************************************************************!*\
  !*** ./packages/docs/src/app/shared/table-of-contents/table-of-contents.ts ***!
  \*****************************************************************************/
/*! exports provided: TableOfContents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableOfContents", function() { return TableOfContents; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _table_of_contents_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table-of-contents.scss */ "kOpU");
/* harmony import */ var _raw_loader_table_of_contents_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! raw-loader!./table-of-contents.html */ "gn63");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "iInd");






let TableOfContents = class TableOfContents {
    constructor(_document, _router, _route) {
        this._document = _document;
        this._router = _router;
        this._route = _route;
        this.links = [];
        this.headerSelectors = '.docs-markdown h3, .docs-markdown h4';
        // tslint:disable-next-line
        this._rootUrl = this._router.url.split('#')[0];
        this.links = this.createLinks();
    }
    createLinks() {
        const links = [];
        const headers = Array.from(this._document.querySelectorAll(this.headerSelectors));
        if (headers.length) {
            for (const header of headers) {
                const name = header.innerText.trim().replace(/^link/, '');
                const { top } = header.getBoundingClientRect();
                links.push({
                    name,
                    type: header.tagName.toLowerCase(),
                    top,
                    id: header.id,
                    active: false
                });
            }
        }
        return links;
    }
};
TableOfContents.ctorParameters = () => [
    { type: Document, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"],] }] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"] }
];
TableOfContents.propDecorators = {
    links: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }],
    headerSelectors: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
};
TableOfContents = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'table-of-contents',
        template: _raw_loader_table_of_contents_html__WEBPACK_IMPORTED_MODULE_2__["default"],
        styles: [_table_of_contents_scss__WEBPACK_IMPORTED_MODULE_1__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [Document,
        _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"],
        _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]])
], TableOfContents);



/***/ }),

/***/ "ZGWQ":
/*!***********************************************************************!*\
  !*** ./packages/docs/src/app/components/footer/footer.component.scss ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".docs-footer {\n  position: fixed;\n  bottom: 0;\n  z-index: 100;\n  width: 100%;\n  will-change: transform;\n  padding-left: 300px;\n  padding-right: 300px;\n}\n\n.docs-footer__wrapper {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-right: 68px;\n  margin-left: 68px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\n\n.docs-footer__text-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.docs-footer__link {\n  display: inline-flex;\n}\n\n.docs-footer__icon {\n  width: 23.3px;\n  height: 22.7px;\n  opacity: 0.8;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2Zvb3Rlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGVBQWU7RUFDZixTQUFTO0VBQ1QsWUFBWTtFQUNaLFdBQVc7RUFDWCxzQkFBc0I7RUFFbEIsbUJBQVc7RUFDWCxvQkFBWTtBQUFwQjs7QUFHSTtFQUNJLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUdmLGtCQUFXO0VBQ1gsaUJBQVU7RUFHVixpQkFBUztFQUNULG9CQUFZO0FBSnhCOztBQVFJO0VBQ0ksYUFBYTtFQUNiLHNCQUFzQjtBQUw5Qjs7QUFRSTtFQUFVLG9CQUFvQjtBQUpsQzs7QUFNSTtFQUNJLGFBQWE7RUFDYixjQUFjO0VBQ2QsWUFBWTtBQUhwQiIsImZpbGUiOiJmb290ZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZG9jcy1mb290ZXIge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBib3R0b206IDA7XG4gICAgei1pbmRleDogMTAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG4gICAgcGFkZGluZzoge1xuICAgICAgICBsZWZ0OiAzMDBweDtcbiAgICAgICAgcmlnaHQ6IDMwMHB4O1xuICAgIH07XG5cbiAgICAmX193cmFwcGVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgICAgIG1hcmdpbjoge1xuICAgICAgICAgICAgcmlnaHQ6IDY4cHg7XG4gICAgICAgICAgICBsZWZ0OiA2OHB4O1xuICAgICAgICB9O1xuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICB0b3A6IDEycHg7XG4gICAgICAgICAgICBib3R0b206IDEycHg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgJl9fdGV4dC13cmFwcGVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB9XG5cbiAgICAmX19saW5rIHsgZGlzcGxheTogaW5saW5lLWZsZXg7IH1cblxuICAgICZfX2ljb24ge1xuICAgICAgICB3aWR0aDogMjMuM3B4O1xuICAgICAgICBoZWlnaHQ6IDIyLjdweDtcbiAgICAgICAgb3BhY2l0eTogMC44O1xuICAgIH1cbn1cbiJdfQ== */");

/***/ }),

/***/ "Zbv+":
/*!***************************************************!*\
  !*** ./packages/docs/src/app/containers/index.ts ***!
  \***************************************************/
/*! exports provided: HomepageComponent, HomepageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _homepage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./homepage */ "sOMx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HomepageComponent", function() { return _homepage__WEBPACK_IMPORTED_MODULE_0__["HomepageComponent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HomepageModule", function() { return _homepage__WEBPACK_IMPORTED_MODULE_0__["HomepageModule"]; });




/***/ }),

/***/ "aRpB":
/*!************************************************************************************!*\
  !*** ./packages/docs/src/app/shared/table-of-contents/table-of-contents.module.ts ***!
  \************************************************************************************/
/*! exports provided: TableOfContentsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableOfContentsModule", function() { return TableOfContentsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _table_of_contents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./table-of-contents */ "YR5S");





let TableOfContentsModule = class TableOfContentsModule {
};
TableOfContentsModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]],
        declarations: [_table_of_contents__WEBPACK_IMPORTED_MODULE_4__["TableOfContents"]],
        exports: [_table_of_contents__WEBPACK_IMPORTED_MODULE_4__["TableOfContents"]],
        entryComponents: [_table_of_contents__WEBPACK_IMPORTED_MODULE_4__["TableOfContents"]]
    })
], TableOfContentsModule);



/***/ }),

/***/ "b77p":
/*!*********************************************!*\
  !*** ./packages/mosaic/link/link.module.ts ***!
  \*********************************************/
/*! exports provided: McLinkModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McLinkModule", function() { return McLinkModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _link_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./link.component */ "BJwh");





let McLinkModule = class McLinkModule {
};
McLinkModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"]
        ],
        declarations: [_link_component__WEBPACK_IMPORTED_MODULE_4__["McLink"]],
        exports: [_link_component__WEBPACK_IMPORTED_MODULE_4__["McLink"]]
    })
], McLinkModule);



/***/ }),

/***/ "bLap":
/*!***************************************************************!*\
  !*** ./packages/docs/src/app/shared/copier/copier.service.ts ***!
  \***************************************************************/
/*! exports provided: CopierService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CopierService", function() { return CopierService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");

/**
 * This class is based on the code in the following projects:
 *
 * - https://github.com/zenorocha/select
 * - https://github.com/zenorocha/clipboard.js/
 *
 * Both released under MIT license - © Zeno Rocha
 */

let CopierService = class CopierService {
    /** Copy the text value to the clipboard. */
    copyText(text) {
        this.createTextareaAndSelect(text);
        const copySuccessful = document.execCommand('copy');
        this.removeFake();
        return copySuccessful;
    }
    /**
     * Creates a hidden textarea element, sets its value from `text` property,
     * and makes a selection on it.
     */
    createTextareaAndSelect(text) {
        // Create a fake element to hold the contents to copy
        this.textarea = document.createElement('textarea');
        // Prevent zooming on iOS
        this.textarea.style.fontSize = '12pt';
        // Hide the element
        this.textarea.classList.add('cdk-visually-hidden');
        // Move element to the same position vertically
        const yPosition = window.pageYOffset || document.documentElement.scrollTop;
        this.textarea.style.top = `${yPosition}px`;
        this.textarea.setAttribute('readonly', '');
        this.textarea.value = text;
        document.body.appendChild(this.textarea);
        this.textarea.select();
        this.textarea.setSelectionRange(0, this.textarea.value.length);
    }
    /** Remove the text area from the DOM. */
    removeFake() {
        if (this.textarea) {
            document.body.removeChild(this.textarea);
            this.textarea = null;
        }
    }
};
CopierService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], CopierService);



/***/ }),

/***/ "cF3b":
/*!*********************************************************************!*\
  !*** ./dist/mosaic-examples/fesm2015/ptsecurity-mosaic-examples.js ***!
  \*********************************************************************/
/*! exports provided: AbsoluteDateFormatterExample, AlertsOverviewExample, AutocompleteOverviewExample, BadgesOverviewExample, ButtonColorsExample, ButtonIconExample, ButtonOverviewExample, ButtonProgressExample, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample, CardOverviewExample, CheckboxIndeterminateExample, CheckboxOverviewExample, DatepickerCustomExample, DatepickerDisabledExample, DatepickerLanguageExample, DatepickerOverviewExample, DatepickerYearExample, DropdownNestedExample, DropdownOverviewExample, EXAMPLE_COMPONENTS, EXAMPLE_LIST, EXAMPLE_MODULES, ExampleData, ExampleModule, InputNumberOverviewExample, InputOverviewExample, LayoutFlexAlignmentExample, LayoutFlexBehaviourModifiersExample, LayoutFlexOffsetsExample, LayoutFlexOrderExample, LayoutFlexOverviewExample, LinkApplicationExample, LinkColorExample, LinkDisabledExample, LinkExternalExample, LinkGeneralExample, LinkIconsExample, LinkMultiLineExample, LinkOverviewExample, LinkPrepositionsExample, LinkPrintExample, LinkPseudoExample, LinkTargetBlankExample, LinkVisitedExample, ListGroupsExample, ListMultipleCheckboxExample, ListMultipleKeyboardExample, ListOverviewExample, McModalCustomComponent, ModalComponentExample, ModalOverviewExample, ModalTemplateExample, NavbarOverviewExample, NumberFormatterOverviewExample, PopoverInstanceExample, PopoverOverviewExample, ProgressBarIndeterminateExample, ProgressBarOverviewExample, ProgressSpinnerIndeterminateExample, ProgressSpinnerOverviewExample, RadioOverviewExample, RangeDateFormatterExample, RelativeDateFormatterExample, SelectGroupsExample, SelectMultipleOverviewExample, SelectOverviewExample, SelectSearchOverviewExample, SelectVirtualScrollExample, SidepanelComponentExample, SidepanelExampleCustomComponent, SidepanelOverviewExample, SplitterFixedExample, SplitterNestedExample, SplitterOverviewExample, SplitterVerticalExample, TableOverviewExample, TableWithBordersExample, TabsLightExample, TabsOverviewExample, TabsStretchExample, TagsAutocompleteExample, TagsInputExample, TagsListExample, TagsOverviewExample, TextAreaOverviewExample, TimepickerOverviewExample, TimepickerRangeExample, TimepickerValidationSymbolsExample, TimepickerVariationsExample, ToggleOverviewExample, TooltipArrowPlacementExample, TooltipOverviewExample, TooltipScrollableExample, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample, TreeSelectMultipleOverviewExample, TreeSelectOverviewExample, TypographyOverviewExample, ValidationCompositeExample, ValidationGlobalExample, ValidationOnBlurExample, ValidationOnTypeExample, ValidationOverviewExample, ValidationSmallExample, WithDefaultLocaleComponent, WithENLocaleComponent, ɵa, ɵb, ɵba, ɵbb, ɵbc, ɵbd, ɵbe, ɵbf, ɵbg, ɵbh, ɵbi, ɵbj, ɵbk, ɵbl, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj, ɵk, ɵl, ɵm, ɵn, ɵo, ɵp, ɵq, ɵr, ɵs, ɵt, ɵu, ɵv, ɵw, ɵx, ɵy, ɵz */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbsoluteDateFormatterExample", function() { return AbsoluteDateFormatterExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertsOverviewExample", function() { return AlertsOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AutocompleteOverviewExample", function() { return AutocompleteOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BadgesOverviewExample", function() { return BadgesOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonColorsExample", function() { return ButtonColorsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonIconExample", function() { return ButtonIconExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonOverviewExample", function() { return ButtonOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonProgressExample", function() { return ButtonProgressExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonToggleMultipleOverviewExample", function() { return ButtonToggleMultipleOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonToggleOverviewExample", function() { return ButtonToggleOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CardOverviewExample", function() { return CardOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxIndeterminateExample", function() { return CheckboxIndeterminateExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxOverviewExample", function() { return CheckboxOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatepickerCustomExample", function() { return DatepickerCustomExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatepickerDisabledExample", function() { return DatepickerDisabledExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatepickerLanguageExample", function() { return DatepickerLanguageExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatepickerOverviewExample", function() { return DatepickerOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatepickerYearExample", function() { return DatepickerYearExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownNestedExample", function() { return DropdownNestedExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownOverviewExample", function() { return DropdownOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXAMPLE_COMPONENTS", function() { return EXAMPLE_COMPONENTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXAMPLE_LIST", function() { return EXAMPLE_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXAMPLE_MODULES", function() { return EXAMPLE_MODULES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExampleData", function() { return ExampleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExampleModule", function() { return ExampleModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputNumberOverviewExample", function() { return InputNumberOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputOverviewExample", function() { return InputOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutFlexAlignmentExample", function() { return LayoutFlexAlignmentExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutFlexBehaviourModifiersExample", function() { return LayoutFlexBehaviourModifiersExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutFlexOffsetsExample", function() { return LayoutFlexOffsetsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutFlexOrderExample", function() { return LayoutFlexOrderExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutFlexOverviewExample", function() { return LayoutFlexOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkApplicationExample", function() { return LinkApplicationExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkColorExample", function() { return LinkColorExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkDisabledExample", function() { return LinkDisabledExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkExternalExample", function() { return LinkExternalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkGeneralExample", function() { return LinkGeneralExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkIconsExample", function() { return LinkIconsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkMultiLineExample", function() { return LinkMultiLineExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkOverviewExample", function() { return LinkOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkPrepositionsExample", function() { return LinkPrepositionsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkPrintExample", function() { return LinkPrintExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkPseudoExample", function() { return LinkPseudoExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkTargetBlankExample", function() { return LinkTargetBlankExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkVisitedExample", function() { return LinkVisitedExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListGroupsExample", function() { return ListGroupsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListMultipleCheckboxExample", function() { return ListMultipleCheckboxExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListMultipleKeyboardExample", function() { return ListMultipleKeyboardExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListOverviewExample", function() { return ListOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McModalCustomComponent", function() { return McModalCustomComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalComponentExample", function() { return ModalComponentExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalOverviewExample", function() { return ModalOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalTemplateExample", function() { return ModalTemplateExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavbarOverviewExample", function() { return NavbarOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberFormatterOverviewExample", function() { return NumberFormatterOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopoverInstanceExample", function() { return PopoverInstanceExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopoverOverviewExample", function() { return PopoverOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressBarIndeterminateExample", function() { return ProgressBarIndeterminateExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressBarOverviewExample", function() { return ProgressBarOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressSpinnerIndeterminateExample", function() { return ProgressSpinnerIndeterminateExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressSpinnerOverviewExample", function() { return ProgressSpinnerOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioOverviewExample", function() { return RadioOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeDateFormatterExample", function() { return RangeDateFormatterExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelativeDateFormatterExample", function() { return RelativeDateFormatterExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectGroupsExample", function() { return SelectGroupsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectMultipleOverviewExample", function() { return SelectMultipleOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectOverviewExample", function() { return SelectOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectSearchOverviewExample", function() { return SelectSearchOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectVirtualScrollExample", function() { return SelectVirtualScrollExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidepanelComponentExample", function() { return SidepanelComponentExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidepanelExampleCustomComponent", function() { return SidepanelExampleCustomComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidepanelOverviewExample", function() { return SidepanelOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitterFixedExample", function() { return SplitterFixedExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitterNestedExample", function() { return SplitterNestedExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitterOverviewExample", function() { return SplitterOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitterVerticalExample", function() { return SplitterVerticalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableOverviewExample", function() { return TableOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableWithBordersExample", function() { return TableWithBordersExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsLightExample", function() { return TabsLightExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsOverviewExample", function() { return TabsOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsStretchExample", function() { return TabsStretchExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TagsAutocompleteExample", function() { return TagsAutocompleteExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TagsInputExample", function() { return TagsInputExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TagsListExample", function() { return TagsListExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TagsOverviewExample", function() { return TagsOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextAreaOverviewExample", function() { return TextAreaOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimepickerOverviewExample", function() { return TimepickerOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimepickerRangeExample", function() { return TimepickerRangeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimepickerValidationSymbolsExample", function() { return TimepickerValidationSymbolsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimepickerVariationsExample", function() { return TimepickerVariationsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleOverviewExample", function() { return ToggleOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipArrowPlacementExample", function() { return TooltipArrowPlacementExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipOverviewExample", function() { return TooltipOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipScrollableExample", function() { return TooltipScrollableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeFilteringExample", function() { return TreeFilteringExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMultipleCheckboxExample", function() { return TreeMultipleCheckboxExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMultipleChecklistExample", function() { return TreeMultipleChecklistExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMultipleKeyboardExample", function() { return TreeMultipleKeyboardExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeOverviewExample", function() { return TreeOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeSelectMultipleOverviewExample", function() { return TreeSelectMultipleOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeSelectOverviewExample", function() { return TreeSelectOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypographyOverviewExample", function() { return TypographyOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationCompositeExample", function() { return ValidationCompositeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationGlobalExample", function() { return ValidationGlobalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationOnBlurExample", function() { return ValidationOnBlurExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationOnTypeExample", function() { return ValidationOnTypeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationOverviewExample", function() { return ValidationOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationSmallExample", function() { return ValidationSmallExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WithDefaultLocaleComponent", function() { return WithDefaultLocaleComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WithENLocaleComponent", function() { return WithENLocaleComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return mcDateAdapterFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return mcDateFormatsFactory$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵba", function() { return SplitterExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbb", function() { return TableExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbc", function() { return TabsExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbd", function() { return TagsExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbe", function() { return TextAreaExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbf", function() { return TimepickerExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbg", function() { return ToggleExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbh", function() { return TooltipExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbi", function() { return TreeSelectExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbj", function() { return TreeExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbk", function() { return TypographyExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbl", function() { return ValidationExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return mcDateFormatsFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return AlertsExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return AutocompleteExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return BadgesExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return ButtonToggleExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return ButtonExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return CardExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return CheckboxExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return DateFormatterExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return DatepickerExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return DropdownExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function() { return InputExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function() { return FlexLayoutExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function() { return LinkExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq", function() { return ListExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr", function() { return ModalExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵs", function() { return NavbarExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt", function() { return NumberFormatterExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu", function() { return PopoverExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵv", function() { return ProgressBarExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵw", function() { return ProgressSpinnerExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵx", function() { return RadioExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵy", function() { return SelectExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵz", function() { return SidepanelExamplesModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/cdk/datetime */ "5vLs");
/* harmony import */ var _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic-luxon-adapter/adapter */ "OBKZ");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic-moment-adapter/adapter */ "NlUg");
/* harmony import */ var _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/mosaic/modal */ "Nr+a");
/* harmony import */ var _ptsecurity_mosaic_popover__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ptsecurity/mosaic/popover */ "mYO9");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/scrolling */ "7KAL");
/* harmony import */ var _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ptsecurity/mosaic/sidepanel */ "vEog");
/* harmony import */ var _ptsecurity_mosaic_autocomplete__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ptsecurity/mosaic/autocomplete */ "RtxV");
/* harmony import */ var _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ptsecurity/mosaic/tags */ "9hGJ");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ptsecurity/mosaic/tooltip */ "YK9X");
/* harmony import */ var _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @ptsecurity/cdk/tree */ "oznV");
/* harmony import */ var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ptsecurity/mosaic/tree */ "wd6P");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/platform-browser */ "cUpR");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/platform-browser/animations */ "omvX");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @ptsecurity/mosaic/link */ "8pH+");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @ptsecurity/mosaic/input */ "qvb6");
/* harmony import */ var _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @ptsecurity/mosaic/button-toggle */ "TuQC");
/* harmony import */ var _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @ptsecurity/mosaic/checkbox */ "LyUW");
/* harmony import */ var _ptsecurity_mosaic_card__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @ptsecurity/mosaic/card */ "2w20");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _ptsecurity_mosaic_datepicker__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @ptsecurity/mosaic/datepicker */ "5F9T");
/* harmony import */ var _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @ptsecurity/mosaic/radio */ "59Z+");
/* harmony import */ var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @ptsecurity/mosaic/dropdown */ "kGUy");
/* harmony import */ var _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @ptsecurity/mosaic/select */ "2nOP");
/* harmony import */ var _ptsecurity_mosaic_list__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @ptsecurity/mosaic/list */ "rC5u");
/* harmony import */ var _ptsecurity_mosaic_navbar__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @ptsecurity/mosaic/navbar */ "t/jU");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _ptsecurity_mosaic_splitter__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @ptsecurity/mosaic/splitter */ "DQSY");
/* harmony import */ var _ptsecurity_mosaic_progress_bar__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @ptsecurity/mosaic/progress-bar */ "JEqS");
/* harmony import */ var _ptsecurity_mosaic_progress_spinner__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @ptsecurity/mosaic/progress-spinner */ "E6iK");
/* harmony import */ var _ptsecurity_mosaic_table__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @ptsecurity/mosaic/table */ "gVDO");
/* harmony import */ var _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @ptsecurity/mosaic/tabs */ "6AiE");
/* harmony import */ var _ptsecurity_mosaic_textarea__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @ptsecurity/mosaic/textarea */ "Gncw");
/* harmony import */ var _ptsecurity_mosaic_timepicker__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @ptsecurity/mosaic/timepicker */ "ypJ8");
/* harmony import */ var _ptsecurity_mosaic_toggle__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @ptsecurity/mosaic/toggle */ "GEIk");
/* harmony import */ var _ptsecurity_mosaic_tree_select__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @ptsecurity/mosaic/tree-select */ "f6Xg");
















































/**
 * @title Alerts
 */
class AlertsOverviewExample {
    constructor() {
        this.alertsAmount = 16;
        this.shownAlerts = Array.from(Array(this.alertsAmount).keys());
    }
    isAlertShown(id) {
        return this.shownAlerts.indexOf(id) !== -1;
    }
    hideAlert(id) {
        const index = this.shownAlerts.findIndex((alertId) => alertId === id);
        this.shownAlerts.splice(index, 1);
    }
}
AlertsOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'alerts-overview-example',
                template: "<div class=\"alert-example-group\">\n    <div class=\"flex-33 mc-column-container\">\n        <h3>Colors</h3>\n\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(1)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(1)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_warning mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(2)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(2)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_success mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(3)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(3)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_info mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(4)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(4)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n        <div class=\"mc-alert mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(5)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(5)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n    </div>\n    <div class=\"flex-33 mc-column-container\">\n        <h3>Normal composition</h3>\n\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(6)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(6)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_warning mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(7)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(7)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_success mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(8)\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(8)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n\n\n        <div class=\"mc-alert mc-alert_info\" [@hideShowAnimator]=\"isAlertShown(9)\">\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n                <div class=\"alert-footer\">\n                    <button mc-button [color]=\"'primary'\" (click)=\"hideAlert(9)\">Close</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"flex-33 mc-column-container\">\n        <h3>Small composition</h3>\n\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(10)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            Alert text\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(10)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_warning mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(11)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(11)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_success mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(12)\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(12)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n\n        <div class=\"mc-alert mc-alert_info mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(13)\">\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit\n                <div class=\"alert-footer\">\n                    <a mc-link (click)=\"hideAlert(13)\">\n                        <span class=\"mc-link__text\">Close</span>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"mc-column-container\">\n    <h2>Long text</h2>\n</div>\n\n<div class=\"alert-example-group\">\n    <div class=\"flex-50 mc-column-container\">\n        <h3>Normal composition</h3>\n\n        <div class=\"mc-alert mc-alert_dismissible\" [@hideShowAnimator]=\"isAlertShown(14)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed iaculis risus ac varius ultricies. Aenean maximus ex at ornare tempus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Quisque sit amet ipsum id augue porta dignissim tristique at nibh. Nullam interdum libero in laoreet pretium. Maecenas et placerat sem. Donec fringilla viverra nunc in vestibulum. Pellentesque suscipit odio ut erat ullamcorper pellentesque eget ac elit. Quisque eleifend orci sit amet erat bibendum sollicitudin. Donec elementum facilisis dui, at volutpat purus. Aliquam posuere non lacus sollicitudin aliquam. Donec nec semper diam, eget imperdiet dui. Integer ornare quam magna, a pretium metus iaculis non. Ut fermentum risus vel sem accumsan, ac egestas nulla sollicitudin. Vivamus nec mi mauris.\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(14)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"flex-50 mc-column-container\">\n        <h3>Small composition</h3>\n\n        <div class=\"mc-alert mc-alert_dismissible mc-alert_small\" [@hideShowAnimator]=\"isAlertShown(15)\">\n            <i mc-icon=\"mc-info_16\" class=\"mc-alert__icon\"></i>\n            <div>\n                <header>Header</header>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed iaculis risus ac varius ultricies. Aenean maximus ex at ornare tempus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Quisque sit amet ipsum id augue porta dignissim tristique at nibh. Nullam interdum libero in laoreet pretium. Maecenas et placerat sem. Donec fringilla viverra nunc in vestibulum. Pellentesque suscipit odio ut erat ullamcorper pellentesque eget ac elit. Quisque eleifend orci sit amet erat bibendum sollicitudin. Donec elementum facilisis dui, at volutpat purus. Aliquam posuere non lacus sollicitudin aliquam. Donec nec semper diam, eget imperdiet dui. Integer ornare quam magna, a pretium metus iaculis non. Ut fermentum risus vel sem accumsan, ac egestas nulla sollicitudin. Vivamus nec mi mauris.\n            </div>\n            <button class=\"mc-alert__close\" (click)=\"hideAlert(15)\">\n                <i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" [color]=\"'second'\"></i>\n            </button>\n        </div>\n    </div>\n</div>\n",
                animations: [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["trigger"])('hideShowAnimator', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ opacity: 1, display: '' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["state"])('false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["style"])({ opacity: 0, display: 'none' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('false => true', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])('.5s')),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["transition"])('true => false', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_1__["animate"])('.2s'))
                    ])
                ],
                styles: [".alert-example-group{display:flex;flex-direction:row;flex:1 1 100%;max-width:100%;max-height:100%}.mc-column-container{margin-left:15px;margin-right:15px}.mc-alert{margin-bottom:15px}.alert-footer{margin-top:8px}"]
            },] }
];

/**
 * @title Basic Input
 */
class AutocompleteOverviewExample {
    constructor() {
        this.options = [
            'Abkhazia', 'Australia', 'Austria', 'Azerbaijan', 'Aland Islands', 'Albania', 'Algeria', 'Anguilla', 'Angola',
            'Andorra', 'Argentina', 'Armenia', 'Aruba', 'Afghanistan', 'Bahamas', 'Bangladesh', 'Barbados', 'Bahrain',
            'Belarus', 'Belize', 'Belgium', 'Benin', 'Bulgaria', 'Bolivia', 'Bosnia & Herzegovina', 'Botswana', 'Brazil',
            'Brunei Darussalam', 'Burundi', 'Bhutan', 'Vatican City', 'United Kingdom', 'Hungary', 'Venezuela', 'Timor',
            'Viet Nam', 'Gabon', 'Haiti', 'Gambia', 'Ghana', 'Guadeloupe', 'Guatemala', 'Guinea', 'Guinea-Bissau',
            'Germany', 'Gibraltar', 'Hong Kong', 'Honduras', 'Grenada', 'Greenland', 'Greece', 'Georgia', 'Guam', 'Denmark',
            'Dominica', 'Dominican Republic', 'Egypt', 'Zambia', 'Western Sahara', 'Zimbabwe', 'Israel', 'India',
            'Indonesia', 'Jordan', 'Iraq', 'Iran', 'Ireland', 'Iceland', 'Spain', 'Italy', 'Yemen', 'Kazakhstan',
            'Cambodia', 'Cameroon', 'Canada', 'Qatar', 'Kenya', 'Cyprus', 'Kyrgyzstan', 'Kiribati', 'China', 'Colombia',
            'Korea, D.P.R.', 'Korea', 'Costa Rica', 'Cote d\'Ivoire', 'Cuba', 'Kuwait', 'Lao P.D.R.', 'Latvia', 'Lesotho',
            'Liberia', 'Lebanon', 'Libyan Arab Jamahiriya', 'Lithuania', 'Liechtenstein', 'Luxembourg', 'Mauritius',
            'Mauritania', 'Madagascar', 'Macedonia', 'Malawi', 'Malaysia', 'Mali', 'Maldives', 'Malta', 'Morocco', 'Mexico',
            'Mozambique', 'Moldova', 'Monaco', 'Mongolia', 'Namibia', 'Nepal', 'Niger', 'Nigeria', 'Netherlands',
            'Nicaragua', 'New Zealand', 'Norway', 'United Arab Emirates', 'Oman', 'Pakistan', 'Panama', 'Paraguay', 'Peru',
            'Poland', 'Portugal', 'Russia', 'Romania', 'San Marino', 'Saudi Arabia', 'Senegal', 'Serbia', 'Singapore',
            'Syrian Arab Republic', 'Slovakia', 'Slovenia', 'Somalia', 'Sudan', 'USA', 'Tajikistan', 'Thailand', 'Tanzania',
            'Togo', 'Tunisia', 'Turkmenistan', 'Turkey', 'Uganda', 'Uzbekistan', 'Ukraine', 'Uruguay', 'Micronesia', 'Fiji',
            'Philippines', 'Finland', 'France', 'Croatia', 'Chad', 'Montenegro', 'Czech Republic', 'Chile', 'Switzerland',
            'Sweden', 'Sri Lanka', 'Ecuador', 'Eritrea', 'Estonia', 'Ethiopia', 'South Africa', 'Jamaica', 'Japan'
        ];
        this.control = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('');
    }
    ngOnInit() {
        this.filteredOptions = this.control.valueChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((value) => this.filter(value)));
    }
    filter(value) {
        const filterValue = value.toLowerCase();
        return this.options.filter((option) => option.toLowerCase().includes(filterValue));
    }
}
AutocompleteOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'autocomplete-overview-example',
                template: "<label>Enter countries to see autocomplete</label>\n<mc-form-field>\n    <input type=\"text\" mcInput [mcAutocomplete]=\"auto\" [formControl]=\"control\"/>\n\n    <mc-autocomplete #auto=\"mcAutocomplete\">\n        <mc-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">{{ option }}</mc-option>\n    </mc-autocomplete>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Badges
 */
class BadgesOverviewExample {
}
BadgesOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'badges-overview-example',
                template: "<div class=\"mc-body\">\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_second\">New</span>\n        <span class=\"mc-badge mc-badge_second mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_light\">New</span>\n        <span class=\"mc-badge mc-badge_light mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_transparent\">New</span>\n        <span class=\"mc-badge mc-badge_transparent mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_primary\">New</span>\n        <span class=\"mc-badge mc-badge_primary mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_warning\">New</span>\n        <span class=\"mc-badge mc-badge_warning mc-badge_caps\">in progress</span>\n    </div>\n\n    <div class=\"vertical-gap\">\n        <span class=\"mc-badge mc-badge_error\">New</span>\n        <span class=\"mc-badge mc-badge_error mc-badge_caps\">in progress</span>\n    </div>\n\n    <div>\n        <span class=\"mc-badge mc-badge_success\">New</span>\n        <span class=\"mc-badge mc-badge_success mc-badge_caps\">in progress</span>\n    </div>\n</div>\n",
                styles: [".vertical-gap{margin-bottom:16px}.mc-badge{margin-right:8px}"]
            },] }
];

/**
 * @title Basic button-toggle
 */
class ButtonToggleMultipleOverviewExample {
}
ButtonToggleMultipleOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-toggle-multiple-overview-example',
                template: "<mc-button-toggle-group multiple #multipleGroup=\"mcButtonToggleGroup\">\n    <mc-button-toggle value=\"1\">\n        button 1\n    </mc-button-toggle>\n    <mc-button-toggle value=\"2\">\n        button 2\n    </mc-button-toggle>\n    <mc-button-toggle value=\"3\">\n        button 3\n    </mc-button-toggle>\n</mc-button-toggle-group>\n\n<br><br><br>\n\n<div>Selected value: {{ multipleGroup.value }}</div>\n",
                styles: [""]
            },] }
];

/**
 * @title button-toggle
 */
class ButtonToggleOverviewExample {
}
ButtonToggleOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-toggle-overview-example',
                template: "<mc-button-toggle-group #group1=\"mcButtonToggleGroup\">\n    <mc-button-toggle value=\"1\">\n        button 1\n    </mc-button-toggle>\n    <mc-button-toggle value=\"2\">\n        button 2\n    </mc-button-toggle>\n    <mc-button-toggle value=\"3\">\n        button 3\n    </mc-button-toggle>\n    <mc-button-toggle value=\"4\">\n        button 4\n    </mc-button-toggle>\n</mc-button-toggle-group>\n\n<br><br><br>\n\n<div>Selected value: {{ group1.value }}</div>\n",
                styles: [""]
            },] }
];

/**
 * @title Button's colors
 */
class ButtonColorsExample {
}
ButtonColorsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-colors-example',
                template: "<div class=\"example-button-group\">\n    <button class=\"example-button\" mc-button [color]=\"'primary'\">Primary</button>\n    <button class=\"example-button\" mc-button [color]=\"'second'\">Second</button>\n    <button class=\"example-button\" mc-button [color]=\"'error'\">Error</button>\n    <button class=\"example-button mc-button_transparent\" mc-button [color]=\"'second'\">Transparent second and primary</button>\n    <button class=\"example-button mc-button_transparent\" mc-button [color]=\"'error'\">Transparent error</button>\n</div>\n\n",
                styles: [".example-button-group{display:inline-flex;flex-direction:column}.example-button{margin-bottom:10px}"]
            },] }
];

/**
 * @title Icon button
 */
class ButtonIconExample {
}
ButtonIconExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-icon-example',
                template: "<button mc-button>\n    <i mc-icon=\"mc-play_16\"></i>\n    Click me!\n</button>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic button
 */
class ButtonOverviewExample {
    constructor() {
        this.isDisabled = false;
    }
}
ButtonOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-overview-example',
                template: "<div class=\"example-button-group\">\n    <button class=\"example-button\" mc-button [disabled]=\"isDisabled\">Click me!</button>\n    <mc-checkbox [(ngModel)]=\"isDisabled\">Disabled</mc-checkbox>\n</div>\n",
                styles: [".example-button-group{display:inline-flex;flex-direction:column}.example-button{margin-bottom:10px;align-self:start}"]
            },] }
];

/**
 * @title Progress button
 */
class ButtonProgressExample {
}
ButtonProgressExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-progress-example',
                template: "<button mc-button class=\"mc-progress\" [color]=\"'primary'\">Click me!</button>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic Card
 */
class CardOverviewExample {
}
CardOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'card-overview-example',
                template: "<div class=\"layout-row layout-wrap block\">\n    <mc-card class=\"mc-card_info\">\n        <div class=\"mc-title\">Info</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_info</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_warning\">\n        <div class=\"mc-title\">Warning</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_warning</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_success\">\n        <div class=\"mc-title\">Success</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_success</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_error\">\n        <div class=\"mc-title\">Error</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_error</span></div>\n    </mc-card>\n    <mc-card class=\"mc-card_white\">\n        <div class=\"mc-title\">White</div>\n        <div class=\"mc-body\"><span class=\"mc-caption_mono\">mc-card_white</span></div>\n    </mc-card>\n</div>\n",
                styles: [".mc-card{margin-right:1rem;margin-bottom:.5rem;padding:.3rem;width:180px;display:block}"]
            },] }
];

/**
 * @title Indeterminate checkbox
 */
class CheckboxIndeterminateExample {
    constructor(ref) {
        this.ref = ref;
        this.parentIndeterminate = true;
        this.parentChecked = true;
        this.fruits = [
            { name: 'Apples', checked: true },
            { name: 'Bananas', checked: false },
            { name: 'Grapes', checked: false }
        ];
    }
    updateCheckboxes(index) {
        this.toggleFruitChecked(index);
        this.updateIndeterminate();
        this.ref.detectChanges();
    }
    toggleFruitChecked(index) {
        this.fruits[index].checked = !this.fruits[index].checked;
    }
    toggleChecked() {
        this.parentChecked = !this.parentChecked;
        for (const fruit of this.fruits) {
            fruit.checked = this.parentChecked;
        }
        this.parentIndeterminate = false;
        this.ref.detectChanges();
    }
    updateIndeterminate() {
        let checked = 0;
        let unchecked = 0;
        const length = this.fruits.length;
        this.fruits.forEach((fruit) => {
            fruit.checked ? checked++ : unchecked++;
        });
        this.parentIndeterminate = (checked !== length && unchecked !== length);
        this.parentChecked = this.parentIndeterminate || length === checked;
    }
}
CheckboxIndeterminateExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'checkbox-indeterminate-example',
                template: "<div class=\"mc-body\">\n    <mc-checkbox  [checked]=\"parentChecked\" [indeterminate]=\"parentIndeterminate\" (change)=\"toggleChecked()\" > All fruits</mc-checkbox>\n    <p *ngFor=\"let fruit of fruits; let i = index\"><mc-checkbox [checked]=\"fruit.checked\" (change)=\"updateCheckboxes(i)\" >{{fruit.name}}</mc-checkbox>\n</div>\n\n",
                styles: [""]
            },] }
];
/** @nocollapse */
CheckboxIndeterminateExample.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];

/**
 * @title Basic checkboxes
 */
class CheckboxOverviewExample {
}
CheckboxOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'checkbox-overview-example',
                template: "<div class=\"mc-body example-section\">\n    <mc-checkbox class=\"example-margin\">Default</mc-checkbox>\n    <mc-checkbox class=\"example-margin\" [checked]=\"true\">Checked</mc-checkbox>\n    <mc-checkbox class=\"example-margin\" [checked]=\"false\">Unchecked</mc-checkbox>\n</div>\n",
                styles: [".example-section{display:flex;flex-direction:column}.example-margin{margin-bottom:10px}"]
            },] }
];

/* tslint:disable:no-magic-numbers */
/**
 * @title Basic progress absolute-date-formatter
 */
class AbsoluteDateFormatterExample {
    constructor(adapter, formatter) {
        this.adapter = adapter;
        this.formatter = formatter;
        this.formats = {
            ru: {
                absolute: {
                    long: {
                        date: {},
                        dateTime: {}
                    },
                    short: {
                        date: {},
                        dateTime: {}
                    }
                }
            },
            en: {
                absolute: {
                    long: {
                        date: {},
                        dateTime: {}
                    },
                    short: {
                        date: {},
                        dateTime: {}
                    }
                }
            }
        };
        this.populateAbsoluteLong('ru');
        this.populateAbsoluteLong('en');
        this.populateAbsoluteShort('ru');
        this.populateAbsoluteShort('en');
    }
    populateAbsoluteShort(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const now = this.adapter.today();
        const absoluteShort = this.formats[locale].absolute.short;
        absoluteShort.date.currentYear = this.formatter.absoluteShortDate(now);
        absoluteShort.date.notCurrentYear = this.formatter.absoluteShortDate(now.minus({ years: 1 }));
        absoluteShort.dateTime.currentYear = this.formatter.absoluteShortDateTime(now);
        absoluteShort.dateTime.notCurrentYear = this.formatter.absoluteShortDateTime(now.minus({ years: 1 }));
        absoluteShort.dateTime.milliseconds = this.formatter.absoluteShortDateTime(now, { milliseconds: true });
    }
    populateAbsoluteLong(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const now = this.adapter.today();
        const absoluteLong = this.formats[locale].absolute.long;
        absoluteLong.date.currentYear = this.formatter.absoluteLongDate(now);
        absoluteLong.date.notCurrentYear = this.formatter.absoluteLongDate(now.minus({ years: 1 }));
        absoluteLong.dateTime.currentYear = this.formatter.absoluteLongDateTime(now);
        absoluteLong.dateTime.notCurrentYear = this.formatter.absoluteLongDateTime(now.minus({ years: 1 }));
        absoluteLong.dateTime.milliseconds = this.formatter.absoluteLongDateTime(now, { milliseconds: true });
    }
}
AbsoluteDateFormatterExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'absolute-date-formatter-example',
                template: "<div class=\"mc-body\">\n    <div>\n        <h3>Long format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDate (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.date.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.date.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDate (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteLongDateTime (with milliseconds)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.long.dateTime.milliseconds }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.long.dateTime.milliseconds }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Short format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDate (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.date.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.date.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDate (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">absoluteShortDateTime (with milliseconds)</div>\n                <div class=\"flex\">{{ formats.ru.absolute.short.dateTime.milliseconds }}</div>\n                <div class=\"flex\">{{ formats.en.absolute.short.dateTime.milliseconds }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n",
                providers: [
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"], useValue: 'ru' },
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], useClass: _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["LuxonDateAdapter"], deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]] }
                ],
                styles: [".light-text-secondary{color:#ccc}.row-border{padding:8px;border-bottom:1px solid #ccc}"]
            },] }
];
/** @nocollapse */
AbsoluteDateFormatterExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["DateFormatter"] }
];

/* tslint:disable:no-magic-numbers */
/**
 * @title Basic progress range-date-formatter
 */
class RangeDateFormatterExample {
    constructor(adapter, formatter) {
        this.adapter = adapter;
        this.formatter = formatter;
        this.formats = {
            ru: {
                range: {
                    long: {
                        date: {},
                        dateTime: {}
                    },
                    middle: {
                        dateTime: {}
                    },
                    short: {
                        date: {},
                        dateTime: {}
                    }
                }
            },
            en: {
                range: {
                    long: {
                        date: {},
                        dateTime: {}
                    },
                    middle: {
                        dateTime: {}
                    },
                    short: {
                        date: {},
                        dateTime: {}
                    }
                }
            }
        };
        this.populateRangeLong('ru');
        this.populateRangeLong('en');
        this.populateRangeMiddle('ru');
        this.populateRangeMiddle('en');
        this.populateRangeShort('ru');
        this.populateRangeShort('en');
    }
    populateRangeShort(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const shortRange = this.formats[locale].range.short;
        const now = this.adapter.today();
        shortRange.date.currentMonth = this.formatter.rangeShortDate(now.set({ day: 1 }), now.set({ day: 10 }));
        shortRange.date.notCurrentYear = this.formatter.rangeShortDate(now.set({ day: 1, month: 1 }), now.set({ day: 10, month: 2 }));
        shortRange.date.startsNotCurrentYear = this.formatter.rangeShortDate(now.set({ day: 1, month: 1 }).minus({ years: 1 }), now.set({ day: 10, month: 2 }));
        shortRange.date.endsNotCurrentYear = this.formatter.rangeShortDate(now.set({ day: 1, month: 1 }), now.set({ day: 10, month: 2 }).plus({ years: 1 }));
        shortRange.dateTime.sameDateCurrentYear = this.formatter.rangeShortDateTime(now.set({ day: 10, hour: 10, minute: 14 }), now.set({ day: 10, hour: 11, minute: 28 }));
        shortRange.dateTime.sameDateNotCurrentYear = this.formatter.rangeShortDateTime(now.set({ month: 1, day: 11 }).minus({ years: 1 }).set({ hour: 10, minute: 14 }), now.set({ month: 1, day: 11 }).minus({ years: 1 }).set({ hour: 11, minute: 28 }));
        shortRange.dateTime.notCurrentMonth = this.formatter.rangeShortDateTime(now.set({ month: 1, day: 1, hour: 10, minute: 14 }), now.set({ month: 2, day: 1, hour: 11, minute: 28 }));
        shortRange.dateTime.startsNotCurrentYear = this.formatter.rangeShortDateTime(now.set({ month: 1, day: 1 }).minus({ years: 1 }).set({ hour: 10, minute: 14 }), now.set({ month: 2, day: 1, hour: 11, minute: 28 }));
        shortRange.dateTime.endsNotCurrentYear = this.formatter.rangeShortDateTime(now.set({ month: 1, day: 1, hour: 10, minute: 14 }), now.set({ day: 1, month: 2 }).plus({ years: 1 }).set({ hour: 11, minute: 28 }));
    }
    populateRangeMiddle(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const middleRange = this.formats[locale].range.middle;
        const now = this.adapter.today();
        middleRange.dateTime.currentYear = this.formatter.rangeMiddleDateTime(now.set({ day: 1 }), now.set({ day: 10 }));
        middleRange.dateTime.sameDateCurrentYear = this.formatter.rangeMiddleDateTime(now.set({ day: 10, hour: 10, minute: 14 }), now.set({ day: 10, hour: 10, minute: 28 }));
        middleRange.dateTime.sameDateNotCurrentYear = this.formatter.rangeMiddleDateTime(now.set({ month: 1, day: 11 }).minus({ years: 1 }).set({ hour: 10, minute: 14 }), now.set({ month: 1, day: 11 }).minus({ years: 1 }).set({ hour: 11, minute: 28 }));
        middleRange.dateTime.notCurrentMonth = this.formatter.rangeMiddleDateTime(now.set({ month: 1, day: 1, hour: 10, minute: 14 }), now.set({ month: 2, day: 1, hour: 11, minute: 28 }));
        middleRange.dateTime.startsNotCurrentYear = this.formatter.rangeMiddleDateTime(now.set({ month: 1, day: 1 }).minus({ years: 1 }).set({ hour: 10, minute: 14 }), now.set({ month: 1, day: 1, hour: 11, minute: 28 }));
        middleRange.dateTime.endsNotCurrentYear = this.formatter.rangeMiddleDateTime(now.set({ month: 1, day: 1, hour: 10, minute: 14 }), now.set({ month: 1, day: 1 }).plus({ years: 1 }).set({ hour: 11, minute: 28 }));
    }
    populateRangeLong(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const longRange = this.formats[locale].range.long;
        const now = this.adapter.today();
        longRange.date.currentMonth = this.formatter.rangeLongDate(now.set({ day: 1 }), now.set({ day: 10 }));
        longRange.date.notCurrentYear = this.formatter.rangeLongDate(now.set({ month: 1, day: 1 }), now.set({ month: 2, day: 10 }));
        longRange.date.startsNotCurrentYear = this.formatter.rangeLongDate(now.set({ month: 1, day: 1 }).minus({ years: 1 }), now.set({ month: 2, day: 10 }));
        longRange.date.endsNotCurrentYear = this.formatter.rangeLongDate(now.set({ month: 1, day: 1 }), now.set({ month: 2, day: 10 }).plus({ years: 1 }));
        longRange.dateTime.sameDateCurrentYear = this.formatter.rangeLongDateTime(now.set({ day: 10, hour: 10, minute: 14 }), now.set({ day: 10, hour: 11, minute: 28 }));
        longRange.dateTime.sameDateNotCurrentYear = this.formatter.rangeLongDateTime(now.set({ month: 1, day: 11 }).minus({ years: 1 }).set({ hour: 10, minute: 14 }), now.set({ month: 1, day: 11 }).minus({ years: 1 }).set({ hour: 11, minute: 28 }));
        longRange.dateTime.notCurrentMonth = this.formatter.rangeLongDateTime(now.set({ month: 1, day: 1, hour: 10, minute: 14 }), now.set({ month: 2, day: 1, hour: 11, minute: 28 }));
        longRange.dateTime.startsNotCurrentYear = this.formatter.rangeLongDateTime(now.set({ month: 1, day: 1 }).minus({ years: 1 }).set({ hour: 10, minute: 14 }), now.set({ month: 2, day: 1, hour: 11, minute: 28 }));
        longRange.dateTime.endsNotCurrentYear = this.formatter.rangeLongDateTime(now.set({ month: 1, day: 1, hour: 10, minute: 14 }), now.set({ month: 2, day: 1 }).minus({ years: 1 }).set({ hour: 11, minute: 28 }));
    }
}
RangeDateFormatterExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'range-date-formatter-example',
                template: "<div class=\"mc-body\">\n    <div>\n        <h3>Long format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.currentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.currentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDate (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.date.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.date.endsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (the same day, current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.sameDateCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.sameDateCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (the same day, not current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.sameDateNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.sameDateNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.notCurrentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.notCurrentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeLongDateTime (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.long.dateTime.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.long.dateTime.endsNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Middle format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.currentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.currentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (the same day)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.sameDateCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.sameDateCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (the same day, not current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.sameDateNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.sameDateNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.notCurrentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.notCurrentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeMiddleDateTime (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.middle.dateTime.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.middle.dateTime.endsNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Short format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.currentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.currentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.notCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.notCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDate (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.date.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.date.endsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (the same day, current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.sameDateCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.sameDateCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (the same day, not current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.sameDateNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.sameDateNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (not current month)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.notCurrentMonth }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.notCurrentMonth }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (start date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.startsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.startsNotCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">rangeShortDateTime (end date is not in current year)</div>\n                <div class=\"flex\">{{ formats.ru.range.short.dateTime.endsNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.range.short.dateTime.endsNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n",
                providers: [
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"], useValue: 'ru' },
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], useClass: _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["LuxonDateAdapter"], deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]] }
                ],
                styles: [".light-text-secondary{color:#ccc}.row-border{padding:8px;border-bottom:1px solid #ccc}"]
            },] }
];
/** @nocollapse */
RangeDateFormatterExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["DateFormatter"] }
];

/* tslint:disable:no-magic-numbers */
/**
 * @title Basic progress relative-date-formatter
 */
class RelativeDateFormatterExample {
    constructor(adapter, formatter) {
        this.adapter = adapter;
        this.formatter = formatter;
        this.formats = {
            ru: {
                relative: {
                    long: {},
                    short: {}
                }
            },
            en: {
                relative: {
                    long: {},
                    short: {}
                }
            }
        };
        this.populateRelativeLong('ru');
        this.populateRelativeLong('en');
        this.populateRelativeShort('ru');
        this.populateRelativeShort('en');
    }
    populateRelativeShort(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const relativeShort = this.formats[locale].relative.short;
        const now = this.adapter.today();
        relativeShort.secondsAgo = this.formatter.relativeShortDate(now.minus({ seconds: 1 }));
        relativeShort.minutesAgo = this.formatter.relativeShortDate(now.minus({ minute: 1 }));
        relativeShort.today = this.formatter.relativeShortDate(now.minus({ hours: 1 }));
        relativeShort.yesterday = this.formatter.relativeShortDate(now.minus({ days: 1 }));
        relativeShort.beforeYesterdayCurrentYear = this.formatter.relativeShortDate(now.minus({ days: 2 }));
        relativeShort.beforeYesterdayNotCurrentYear = this.formatter.relativeShortDate(now.minus({ years: 1, days: 2 }));
    }
    populateRelativeLong(locale) {
        this.formatter.setLocale(locale);
        this.adapter.setLocale(locale);
        const relativeLong = this.formats[locale].relative.long;
        const now = this.adapter.today();
        relativeLong.secondsAgo = this.formatter.relativeLongDate(now.minus({ seconds: 1 }));
        relativeLong.minutesAgo = this.formatter.relativeLongDate(now.minus({ minute: 1 }));
        relativeLong.today = this.formatter.relativeLongDate(now.minus({ hours: 1 }));
        relativeLong.yesterday = this.formatter.relativeLongDate(now.minus({ days: 1 }));
        relativeLong.beforeYesterdayCurrentYear = this.formatter.relativeLongDate(now.minus({ days: 2 }));
        relativeLong.beforeYesterdayNotCurrentYear = this.formatter.relativeLongDate(now.minus({ years: 1, days: 2 }));
    }
}
RelativeDateFormatterExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'relative-date-formatter-example',
                template: "<div class=\"mc-body\">\n    <div>\n        <h3>Long format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">SecondsAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.secondsAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.secondsAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">MinutesAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.minutesAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.minutesAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Today</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.today }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.today }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Yesterday</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.yesterday }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.yesterday }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.beforeYesterdayCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.beforeYesterdayCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.long.beforeYesterdayNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.long.beforeYesterdayNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n    <div>\n        <h3>Short format</h3>\n        <div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex light-text-secondary\">Name</div>\n                <div class=\"flex light-text-secondary\">Russian</div>\n                <div class=\"flex light-text-secondary\">English</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">SecondsAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.secondsAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.secondsAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">MinutesAgo</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.minutesAgo }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.minutesAgo }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Today</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.today }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.today }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Yesterday</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.yesterday }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.yesterday }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.beforeYesterdayCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.beforeYesterdayCurrentYear }}</div>\n            </div>\n            <div class=\"layout-row row-border\">\n                <div class=\"flex\">Before yesterday (not current year)</div>\n                <div class=\"flex\">{{ formats.ru.relative.short.beforeYesterdayNotCurrentYear }}</div>\n                <div class=\"flex\">{{ formats.en.relative.short.beforeYesterdayNotCurrentYear }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n",
                providers: [
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"], useValue: 'ru' },
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"], useClass: _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["LuxonDateAdapter"], deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]] }
                ],
                styles: [".light-text-secondary{color:#ccc}.row-border{padding:8px;border-bottom:1px solid #ccc}"]
            },] }
];
/** @nocollapse */
RelativeDateFormatterExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["DateFormatter"] }
];

// @dynamic
function mcDateAdapterFactory(locale) {
    const dateAdapter = new _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["LuxonDateAdapter"](locale);
    dateAdapter.updateLocaleData({ firstDayOfWeek: 1 });
    return dateAdapter;
}
// @dynamic
function mcDateFormatsFactory$1() {
    const dateFormats = Object.assign({}, _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["MC_LUXON_DATE_FORMATS"]);
    dateFormats.dateInput = 'dd.MM.yyyy';
    return dateFormats;
}
/**
 * @title Custom localeData and format datepicker
 */
class DatepickerCustomExample {
    constructor(adapter) {
        this.adapter = adapter;
        this.sunday = 6;
        this.date = this.adapter.today();
        this.minDate = this.adapter.today().minus({ year: 1 });
        this.maxDate = this.adapter.today().plus({ year: 1 });
    }
}
DatepickerCustomExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'datepicker-custom-example',
                template: "<div class=\"example-datepicker-group\">\n    <mc-form-field\n        class=\"example-datepicker\"\n        (click)=\"datepicker.toggle()\"\n        mcTooltip\n        [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n        #tooltip=\"mcTooltip\">\n\n        <input\n            [mcDatepicker]=\"datepicker\"\n            [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n            [mcValidationTooltip]=\"tooltip\"/>\n        <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n        <mc-datepicker #datepicker></mc-datepicker>\n    </mc-form-field>\n</div>\n",
                providers: [
                    { provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"], useValue: 'en' },
                    {
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_FORMATS"],
                        useFactory: mcDateFormatsFactory$1
                    },
                    {
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        useFactory: mcDateAdapterFactory,
                        deps: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_LOCALE"]]
                    }
                ],
                styles: [".example-datepicker-group{display:inline-flex;flex-direction:column}.example-datepicker{margin-bottom:10px}"]
            },] }
];
/** @nocollapse */
DatepickerCustomExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] }
];

/**
 * @title Disabled datepicker
 */
class DatepickerDisabledExample {
    constructor(adapter) {
        this.adapter = adapter;
        this.sunday = 6;
        this.date = this.adapter.today();
        this.minDate = this.adapter.today().minus({ year: 1 });
        this.maxDate = this.adapter.today().plus({ year: 1 });
    }
    myFilter(date) {
        return date.day !== 0 && date.day !== this.sunday;
    }
}
DatepickerDisabledExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'datepicker-disabled-example',
                template: "<div class=\".example-datepicker-group\">\n    <div>\n        <label>Datepicker disabled</label>\n        <br>\n        <mc-form-field\n            class=\"example-datepicker\"\n            (click)=\"myDatepicker1.toggle()\"\n            mcTooltip\n            [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n            #tooltip1=\"mcTooltip\">\n\n            <input\n                [ngModel]=\"date\"\n                [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n                [mcDatepicker]=\"myDatepicker1\"\n                [mcValidationTooltip]=\"tooltip1\"/>\n            <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n            <mc-datepicker disabled #myDatepicker1 startView=\"multi-year\"></mc-datepicker>\n        </mc-form-field>\n    </div>\n\n    <div>\n        <label>Datepicker with disabled input</label>\n        <br>\n        <mc-form-field class=\"example-datepicker\" (click)=\"myDatepicker1.toggle()\">\n            <input\n                [ngModel]=\"date\"\n                [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n                [mcDatepicker]=\"myDatepicker2\"\n                disabled/>\n            <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n            <mc-datepicker #myDatepicker2></mc-datepicker>\n        </mc-form-field>\n    </div>\n\n    <div>\n        <label>Datepicker with readonly input</label>\n        <br>\n        <mc-form-field class=\"example-datepicker\" (click)=\"myDatepicker3.toggle()\">\n            <input\n                [ngModel]=\"date\"\n                [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n                [mcDatepicker]=\"myDatepicker3\"\n                readonly/>\n            <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n            <mc-datepicker #myDatepicker3></mc-datepicker>\n        </mc-form-field>\n    </div>\n\n    <div>\n        <label>Datepicker with some dates disabled</label>\n        <br>\n        <mc-form-field\n            class=\"example-datepicker\"\n            (click)=\"myDatepicker4.toggle()\"\n            mcTooltip\n            [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n            #tooltip4=\"mcTooltip\">\n\n            <input [ngModel]=\"date\"\n                   [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n                   [mcDatepicker]=\"myDatepicker4\"\n                   [mcDatepickerFilter]=\"myFilter\"\n                   [mcValidationTooltip]=\"tooltip4\"\n                   [min]=\"minDate\"\n                   [max]=\"maxDate\"/>\n            <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n            <mc-datepicker #myDatepicker4></mc-datepicker>\n        </mc-form-field>\n    </div>\n</div>\n",
                styles: [".example-datepicker-group{display:inline-flex;flex-direction:column}.example-datepicker{margin-bottom:10px}"]
            },] }
];
/** @nocollapse */
DatepickerDisabledExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] }
];

/* tslint:disable:no-magic-numbers */
function mcDateFormatsFactory() {
    const dateFormats = Object.assign({}, _ptsecurity_mosaic_moment_adapter_adapter__WEBPACK_IMPORTED_MODULE_7__["MC_MOMENT_DATE_FORMATS"]);
    dateFormats.dateInput = 'dd.MM.yyyy';
    return dateFormats;
}
/**
 * @title Multy language datepicker
 */
class DatepickerLanguageExample {
    constructor(adapter, dateFormats) {
        this.adapter = adapter;
        this.dateFormats = dateFormats;
        this.languageList = [
            { name: 'en', format: 'dd/MM/yyyy', placeholder: 'дд/мм/гггг' },
            { name: 'de', format: 'dd-MM-yyyy', placeholder: 'дд-мм-гггг' },
            { name: 'ru', format: 'dd.MM.yyyy', placeholder: 'дд.мм.гггг' }
        ];
        this.selectedLanguage = this.languageList[0];
        this.selectedDate = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](this.adapter.createDateTime(2020, 5, 6, 12, 0, 0, 0));
    }
    ngOnInit() {
        this.adapter.setLocale(this.languageList[0].name);
    }
    setFormat($event) {
        this.dateFormats.dateInput = $event.value.format;
        this.selectedLanguage = this.languageList.find(({ name }) => name === $event.value.name);
        this.selectedDate.setValue(this.selectedDate.value);
        this.adapter.setLocale($event.value.name);
    }
}
DatepickerLanguageExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'datepicker-language-example',
                template: "<mc-radio-group\n    class=\"example-radio-group\"\n    (change)=\"setFormat($event)\">\n    <mc-radio-button *ngFor=\"let language of languageList\"\n                     [value]=\"language\"\n                     [checked]=\"language.name === selectedLanguage.name\"\n                     class=\"example-radio-button\">\n        {{ language.name }}\n    </mc-radio-button>\n</mc-radio-group>\n\n<br>\n\n<mc-form-field\n    (click)=\"picker.toggle()\"\n    mcTooltip\n    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n    #tooltip=\"mcTooltip\">\n\n    <input\n        [formControl]=\"selectedDate\"\n        [placeholder]=\"selectedLanguage.placeholder\"\n        [mcDatepicker]=\"picker\"\n        [mcValidationTooltip]=\"tooltip\"/>\n    <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n    <mc-datepicker #picker></mc-datepicker>\n</mc-form-field>\n\n<div>\n    <h3>Date</h3>\n    <p>{{ selectedDate.value }}</p>\n</div>\n",
                providers: [{
                        provide: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_FORMATS"],
                        useFactory: mcDateFormatsFactory
                    }],
                styles: [".example-radio-group{display:inline-flex;flex-direction:column}.example-radio-button{margin-bottom:10px}"]
            },] }
];
/** @nocollapse */
DatepickerLanguageExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["MC_DATE_FORMATS"],] }] }
];

/**
 * @title Datepicker
 */
class DatepickerOverviewExample {
}
DatepickerOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'datepicker-overview-example',
                template: "<mc-form-field\n    (click)=\"myDatepicker.toggle()\"\n    mcTooltip\n    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n    #tooltip=\"mcTooltip\">\n\n    <input\n        [(ngModel)]=\"date\"\n        [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n        [mcDatepicker]=\"myDatepicker\"\n        [mcValidationTooltip]=\"tooltip\"/>\n    <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n    <mc-datepicker #myDatepicker></mc-datepicker>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Datepicker starts with year
 */
class DatepickerYearExample {
}
DatepickerYearExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'datepicker-year-example',
                template: "<mc-form-field\n    (click)=\"myDatepicker.toggle()\"\n    mcTooltip\n    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n    #tooltip=\"mcTooltip\">\n\n    <input\n        [(ngModel)]=\"date\"\n        [placeholder]=\"'\u0434\u0434.\u043C\u043C.\u0433\u0433\u0433\u0433'\"\n        [mcDatepicker]=\"myDatepicker\"\n        [mcValidationTooltip]=\"tooltip\"/>\n    <i mc-icon=\"mc-calendar_16\" mcSuffix></i>\n    <mc-datepicker #myDatepicker [startView]=\"'multi-year'\"></mc-datepicker>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Nested dropdown
 */
class DropdownNestedExample {
}
DropdownNestedExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'dropdown-nested-example',
                template: "<button mc-button [mcDropdownTriggerFor]=\"appDropdownNested\">\n    nested dropdown <i mc-icon=\"mc-angle-down-L_16\"></i>\n</button>\n\n<mc-dropdown #appDropdownNested=\"mcDropdown\">\n    <button mc-dropdown-item [mcDropdownTriggerFor]=\"appDropdown\">dropdown</button>\n    <button mc-dropdown-item>\n        Point 1 <div class=\"mc-dropdown__item-caption\">Some info</div>\n    </button>\n</mc-dropdown>\n\n<mc-dropdown #appDropdown=\"mcDropdown\">\n    <button mc-dropdown-item><i mc-icon=\"mc-search_16\"></i> Very Long Point</button>\n    <button mc-dropdown-item>Point 2</button>\n    <button mc-dropdown-item>Point 3</button>\n</mc-dropdown>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic dropdown
 */
class DropdownOverviewExample {
    constructor() {
        this.someValue = 'Lazy Value';
        this.disabled = false;
    }
    toggleDisabled() {
        this.disabled = !this.disabled;
    }
}
DropdownOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'dropdown-overview-example',
                template: "<div class=\"example-dropdown-group\">\n    <span class=\"mc-group example-dropdown-element\">\n        <button mc-button class=\"mc-group-item\" [disabled]=\"disabled\">dropdown</button>\n        <button mc-button class=\"mc-group-item\" [mcDropdownTriggerFor]=\"appDropdown\" [disabled]=\"disabled\">\n            <i mc-icon=\"mc-angle-down-L_16\"></i>\n        </button>\n    </span>\n\n    <span class=\"example-dropdown-element\">\n        <button mc-button class=\"example-dropdown-element\" [mcDropdownTriggerFor]=\"appDropdown\" [disabled]=\"disabled\">\n            dropdown <i mc-icon=\"mc-angle-down-L_16\"></i>\n        </button>\n\n        <mc-dropdown #appDropdown=\"mcDropdown\">\n            <button mc-dropdown-item class=\"mc-selected\">\n                Point 1 <div class=\"mc-dropdown__item-caption\">Some info</div>\n            </button>\n            <button mc-dropdown-item>\n                <i mc-icon=\"mc-search_16\"></i> Very Long Point\n            </button>\n            <h5>Additional info</h5>\n            <button mc-dropdown-item disabled>Disabled</button>\n            <button mc-dropdown-item>Point 2</button>\n            <a href=\"https://google.com\" mc-link mc-dropdown-item>\n                <i mc-icon=\"mc-search_16\"></i>\n                <span class=\"mc-link__text\">Link</span>\n            </a>\n            <button mc-dropdown-item>Point 3</button>\n        </mc-dropdown>\n    </span>\n\n    <div  class=\"example-dropdown-element\">\n        <input mcInput type=\"text\" [(ngModel)]=\"someValue\">\n    </div>\n\n    <span class=\"example-dropdown-element\">\n        <button mc-button [mcDropdownTriggerFor]=\"appDropdownLazy\" [mcDropdownTriggerData]=\"{someValue: someValue}\"\n                [disabled]=\"disabled\">\n            dropdown lazy <i mc-icon=\"mc-angle-down-L_16\"></i>\n        </button>\n\n        <mc-dropdown #appDropdownLazy=\"mcDropdown\">\n            <ng-template mcDropdownContent  let-someValue=\"someValue\">\n                <button mc-dropdown-item [disabled]=\"disabled\">dropdown</button>\n                <button mc-dropdown-item>\n                    Point 1 <div class=\"mc-dropdown__item-caption\">Some info</div>\n                </button>\n                <button mc-dropdown-item>Value: {{someValue}}</button>\n            </ng-template>\n        </mc-dropdown>\n    </span>\n\n    <mc-checkbox class=\"example-dropdown-element\" [checked]=\"disabled\" (change)=\"toggleDisabled()\">Disabled</mc-checkbox>\n</div>\n",
                styles: [".example-dropdown-group{display:inline-flex;flex-direction:column}.example-dropdown-element{margin-bottom:10px}"]
            },] }
];

/**
 * @title Basic Input
 */
class InputNumberOverviewExample {
    constructor() {
        this.value = '';
    }
}
InputNumberOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'input-number-overview-example',
                template: "<mc-form-field class=\"mc-group-item\">\n    <input mcInput [(ngModel)]=\"value\" type=\"number\" placeholder=\"Allowed number from -7 to 7\"\n           [min]=\"-7\" max=\"7\" step=\"0.5\" big-step=\"1.5\">\n    <mc-stepper></mc-stepper>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic Input
 */
class InputOverviewExample {
    constructor() {
        this.value = '';
    }
}
InputOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'input-overview-example',
                template: "<mc-form-field>\n    <i mcPrefix mc-icon=\"mc-search_16\" [color]=\"'second'\"></i>\n\n    <input mcInput [(ngModel)]=\"value\" placeholder=\"Placeholder\">\n\n    <mc-cleaner></mc-cleaner>\n</mc-form-field>\n\n<br><br><br>\n\n<mc-form-field mcFormFieldWithoutBorders>\n    <i mcPrefix mc-icon=\"mc-search_16\" [color]=\"'second'\"></i>\n\n    <input mcInput [(ngModel)]=\"value\" placeholder=\"Placeholder\">\n\n    <mc-cleaner></mc-cleaner>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Flex layout
 */
class LayoutFlexAlignmentExample {
    constructor() {
        this.layoutHorizontalAlignment = '-start';
        this.layoutVerticalAlignment = '-start';
    }
}
LayoutFlexAlignmentExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'layout-flex-alignment-example',
                template: "<br><br>\n\n<div class=\"example-controls\">\n    <mc-radio-group [(ngModel)]=\"layoutHorizontalAlignment\">\n        <header>Horizontal</header>\n        <mc-radio-button value=\"-start\">start</mc-radio-button>\n        <mc-radio-button value=\"-center\">center</mc-radio-button>\n        <mc-radio-button value=\"-end\">end</mc-radio-button>\n        <mc-radio-button value=\"-space-around\">space-around</mc-radio-button>\n        <mc-radio-button value=\"-space-between\">space-between</mc-radio-button>\n    </mc-radio-group>\n\n    <mc-radio-group [(ngModel)]=\"layoutVerticalAlignment\">\n        <header>Vertical</header>\n        <mc-radio-button value=\"\">(none)</mc-radio-button>\n        <mc-radio-button value=\"-start\">start</mc-radio-button>\n        <mc-radio-button value=\"-center\">center</mc-radio-button>\n        <mc-radio-button value=\"-end\">end</mc-radio-button>\n        <mc-radio-button value=\"-stretch\">stretch</mc-radio-button>\n    </mc-radio-group>\n</div>\n\n<br><br>\n\n<header class=\"layout-padding\">class: layout-align{{ layoutHorizontalAlignment }}{{layoutVerticalAlignment}}</header>\n<div class=\"container block layout-row layout-align{{ layoutHorizontalAlignment }}{{layoutVerticalAlignment}}\" >\n    <div class=\"block\">block 1</div>\n    <div class=\"block\">block 2</div>\n    <div class=\"block\">block 3</div>\n</div>\n",
                styles: [".example-controls{display:flex;flex-direction:row}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column;margin-left:32px}.mc-radio-button{margin-bottom:8px}.container{height:120px}"]
            },] }
];

/**
 * @title Flex layout
 */
class LayoutFlexBehaviourModifiersExample {
    constructor() {
        this.flexClass = 'flex';
    }
}
LayoutFlexBehaviourModifiersExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'layout-flex-behaviour-modifiers-example',
                template: "<br><br>\n\n<div class=\"example-controls\">\n    <mc-radio-group [(ngModel)]=\"flexClass\">\n        <mc-radio-button value=\"flex\">flex</mc-radio-button>\n        <mc-radio-button value=\"flex-none\">flex-none</mc-radio-button>\n        <mc-radio-button value=\"flex-auto\">flex-auto</mc-radio-button>\n        <mc-radio-button value=\"flex-grow\">flex-grow</mc-radio-button>\n        <mc-radio-button value=\"flex-nogrow\">flex-nogrow</mc-radio-button>\n        <mc-radio-button value=\"flex-noshrink\">flex-noshrink</mc-radio-button>\n    </mc-radio-group>\n</div>\n\n<br><br>\n\n<div class=\"layout-row block\">\n    <div class=\"block {{ flexClass }}\">flex</div>\n    <div class=\"flex block\">flex</div>\n    <div class=\"flex-none block\">flex-none</div>\n</div>\n",
                styles: [".example-controls{display:flex;flex-direction:row}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}"]
            },] }
];

/**
 * @title Flex layout
 */
class LayoutFlexOffsetsExample {
    constructor() {
        this.selectedSize = 'flex-10';
        this.selectedOffset = 'flex-offset-10';
        this.flexSizes = [
            'flex-0',
            'flex-5',
            'flex-10',
            'flex-15',
            'flex-20',
            'flex-25',
            'flex-30',
            'flex-33',
            'flex-35',
            'flex-40',
            'flex-45',
            'flex-50',
            'flex-60',
            'flex-65',
            'flex-66',
            'flex-70',
            'flex-75',
            'flex-80',
            'flex-85',
            'flex-90',
            'flex-95',
            'flex-100'
        ];
        this.flexOffsets = [
            'flex-offset-0',
            'flex-offset-5',
            'flex-offset-10',
            'flex-offset-15',
            'flex-offset-20',
            'flex-offset-25',
            'flex-offset-30',
            'flex-offset-33',
            'flex-offset-35',
            'flex-offset-40',
            'flex-offset-45',
            'flex-offset-50',
            'flex-offset-60',
            'flex-offset-65',
            'flex-offset-66',
            'flex-offset-70',
            'flex-offset-75',
            'flex-offset-80',
            'flex-offset-85',
            'flex-offset-90',
            'flex-offset-95',
            'flex-offset-100'
        ];
    }
}
LayoutFlexOffsetsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'layout-flex-offsets-example',
                template: "<br><br>\n\n<div class=\"example-controls\">\n    <mc-form-field>\n        <mc-select [(value)]=\"selectedSize\">\n            <mc-option *ngFor=\"let flexSize of flexSizes\" [value]=\"flexSize\">{{ flexSize }}</mc-option>\n        </mc-select>\n    </mc-form-field>\n\n    <mc-form-field>\n        <mc-select [(value)]=\"selectedOffset\">\n            <mc-option *ngFor=\"let flexOffset of flexOffsets\" [value]=\"flexOffset\">{{ flexOffset }}</mc-option>\n        </mc-select>\n    </mc-form-field>\n</div>\n\n<br><br>\n\n<div class=\"layout-row block\">\n    <div class=\"{{selectedSize}} {{selectedOffset}} block\">{{selectedSize}} {{selectedOffset}}</div>\n    <div class=\"{{selectedSize}} {{selectedOffset}} block\">{{selectedSize}} {{selectedOffset}}</div>\n    <div class=\"{{selectedSize}} {{selectedOffset}} block\">{{selectedSize}} {{selectedOffset}}</div>\n</div>\n",
                styles: [".example-controls{display:flex;flex-direction:row}.mc-form-field{max-width:20%;margin-left:32px}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}"]
            },] }
];

/**
 * @title Flex layout
 */
class LayoutFlexOrderExample {
    constructor() {
        this.selectedFirstBlockOrder = 'flex-order-0';
        this.selectedSecondBlockOrder = 'flex-order-1';
        this.selectedThirdBlockOrder = 'flex-order-2';
        this.flexOrders = [
            'flex-order-0',
            'flex-order-1',
            'flex-order-2',
            'flex-order-3',
            'flex-order-4',
            'flex-order-5',
            'flex-order-6',
            'flex-order-7',
            'flex-order-8',
            'flex-order-9'
        ];
    }
}
LayoutFlexOrderExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'layout-flex-order-example',
                template: "<br><br>\n\n<div class=\"example-controls\">\n    <div class=\"layout-column flex\">\n        <label class=\"layout-padding\">'Block 1'</label>\n        <mc-form-field>\n            <mc-select [(value)]=\"selectedFirstBlockOrder\">\n                <mc-option *ngFor=\"let flexOrder of flexOrders\" [value]=\"flexOrder\">{{ flexOrder }}</mc-option>\n            </mc-select>\n        </mc-form-field>\n    </div>\n\n    <div class=\"layout-column flex\">\n        <label class=\"layout-padding\">'Block 2'</label>\n        <mc-form-field>\n            <mc-select [(value)]=\"selectedSecondBlockOrder\">\n                <mc-option *ngFor=\"let flexOrder of flexOrders\" [value]=\"flexOrder\">{{ flexOrder }}</mc-option>\n            </mc-select>\n        </mc-form-field>\n    </div>\n\n    <div class=\"layout-column flex\">\n        <label class=\"layout-padding\">'Block 3'</label>\n        <mc-form-field>\n            <mc-select [(value)]=\"selectedThirdBlockOrder\">\n                <mc-option *ngFor=\"let flexOrder of flexOrders\" [value]=\"flexOrder\">{{ flexOrder }}</mc-option>\n            </mc-select>\n        </mc-form-field>\n    </div>\n</div>\n\n<br><br>\n\n<div class=\"layout-row block\">\n    <div class=\"flex block {{ selectedFirstBlockOrder }}\">Block 1</div>\n    <div class=\"flex block {{ selectedSecondBlockOrder }}\">Block 2</div>\n    <div class=\"flex block {{ selectedThirdBlockOrder }}\">Block 3</div>\n</div>\n\n",
                styles: [".example-controls{display:flex;flex-direction:row}.mc-form-field{max-width:50%}.block{border:1px solid #000;padding:8px}.mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}"]
            },] }
];

/**
 * @title Flex layout
 */
class LayoutFlexOverviewExample {
    constructor() {
        this.layoutDirection = 'layout-column';
    }
}
LayoutFlexOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'layout-flex-overview-example',
                template: "<br><br>\n\n<mc-radio-group [(ngModel)]=\"layoutDirection\">\n    <mc-radio-button value=\"layout-column\">layout-column</mc-radio-button>\n    <mc-radio-button value=\"layout-row\">layout-row</mc-radio-button>\n</mc-radio-group>\n\n<br><br>\n\n<div [class]=layoutDirection>\n    <div class=\"flex block\">first</div>\n    <div class=\"flex block\">second</div>\n    <div class=\"flex block\">third</div>\n</div>\n",
                styles: [".mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}.block{border:1px solid #000;padding:8px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkApplicationExample {
}
LinkApplicationExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-application-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0432 AI Desktop</span>\n        <i mc-icon=\"mc-external-link_16\"></i>\n    </a>\n</div>\n<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0432 AI Desktop</span>\n    </a>\n    <img class=\"icon\" src=\"favicon.ico\">\n</div>\n\n\n",
                styles: [".docs-padding{padding:16px}.icon{margin-left:5px;vertical-align:middle}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkColorExample {
}
LinkColorExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-color-example',
                template: "<table>\n    <tr>\n        <td>\n            <a href=\"/link/overview\" mc-link>\n                <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043E\u0442\u0447\u0435\u0442</span>\n            </a>\n        </td>\n        <td>\n            <a href=\"/link/overview\" mc-link class=\"warning\">\n                <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043E\u0442\u0447\u0435\u0442</span>\n            </a>\n        </td>\n        <td>\n            <a href=\"/link/overview\" mc-link class=\"ok\">\n                <span class=\"mc-link__text\">\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043E\u0442\u0447\u0435\u0442</span>\n            </a>\n        </td>\n    </tr>\n    <tr>\n        <td>\u041E\u0442\u043B\u0438\u0447\u043D\u043E</td>\n        <td>\u041E, \u043D\u0435\u0442!</td>\n        <td>\u041E\u043A</td>\n    </tr>\n</table>\n\n\n\n",
                styles: ["td{padding:16px}.warning{color:#f0d49b!important;border-bottom:1px solid #f0d49b!important}.ok{color:#b79a45!important;border-bottom:1px solid #b79a45!important}"]
            },] }
];

/**
 * @title Pseudo link
 */
class LinkDisabledExample {
    constructor() {
        this.disabled = true;
    }
}
LinkDisabledExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-disabled-example',
                template: "<div class=\"docs-padding\">\n    <span mc-link [disabled]=\"disabled\">\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u043E\u0442 15.05.2020</span>\n    </span>\n</div>\n",
                styles: [".docs-padding{padding:16px}.fixed-width{width:475px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkExternalExample {
}
LinkExternalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-external-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link>\n        <span class=\"mc-link__text\">\u0426\u0435\u043D\u0442\u0440 \u0442\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0438</span>\n        <i mc-icon=\"mc-external-link_16\"></i>\n    </a>\n</div>\n\n\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkGeneralExample {
}
LinkGeneralExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-general-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link>\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</a>\n</div>\n\n\n\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkIconsExample {
}
LinkIconsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-icons-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"#\" mc-link>\n        <i mc-icon=\"mc-clock_16\"></i>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</span>\n\n    </a>\n</div>\n\n\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkMultiLineExample {
}
LinkMultiLineExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-multi-line-example',
                template: "<div class=\"docs-padding fixed-width\">\n    \u041F\u0440\u043E\u0441\u0438\u043C \u0432\u0430\u0441 \u043E\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044C <a class=\"inline\" mc-link>\u0432 \u0426\u0435\u043D\u0442\u0440 \u0442\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0438 Positive Technologies</a>\n</div>\n\n\n",
                styles: [".docs-padding{padding:16px}.fixed-width{width:275px}.inline{display:inline!important}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkOverviewExample {
    constructor() {
        this.active = true;
        this.focus = true;
        this.disabled = true;
    }
}
LinkOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-overview-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link>\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</a>\n</div>\n\n<div class=\"docs-padding\">\n    <a href=\"/link/overview\" target=\"_blank\" mc-link>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</span>\n        <i mc-icon=\"mc-new-tab_16\"></i>\n    </a>\n</div>\n\n<div class=\"docs-padding\">\n    <a href=\"https://www.google.com/\" mc-link>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</span>\n        <i mc-icon=\"mc-external-link_16\"></i>\n    </a>\n</div>\n\n<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link [disabled]=\"disabled\">\n        <i mc-icon=\"mc-calendar_16\"></i>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</span>\n        <i mc-icon=\"mc-external-link_16\"></i>\n    </a>\n</div>\n\n<div class=\"docs-padding\">\n    <a href=\"/link/overview\" mc-link noUnderline>\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</a>\n</div>\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkPrepositionsExample {
}
LinkPrepositionsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-prepositions-example',
                template: "<div class=\"docs-padding\">\n    \u041E\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044C\n    <a href=\"#\" mc-link>\n        <span class=\"mc-link__text\">\u0432 \u0426\u0435\u043D\u0442\u0440 \u0442\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u0439 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0438</span>\n    </a>\n</div>\n\n\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkPrintExample {
}
LinkPrintExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-print-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"https://www.cvedetails.com/cve/CVE-2019-1020010/\" mc-link printMode=\"true\" print=\"cvedetails.com/cve/CVE-2019-1020010\">\n        <span class=\"mc-link__text\">CVE-2019-1020010</span>\n    </a>\n</div>\n\n\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Pseudo link
 */
class LinkPseudoExample {
}
LinkPseudoExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-pseudo-example',
                template: "<div class=\"docs-padding\">\n    <span mc-link pseudo>\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043E\u0442\u0447\u0435\u0442</span>\n</div>\n\n",
                styles: [".docs-padding{padding:16px}.fixed-width{width:475px}"]
            },] }
];

/**
 * @title Basic link
 */
class LinkTargetBlankExample {
}
LinkTargetBlankExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-target-blank-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"/link/overview\" target=\"_blank\" mc-link>\n        <span class=\"mc-link__text\">\u041E\u0442\u0447\u0435\u0442 \u0441\u043A\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F</span>\n        <i mc-icon=\"mc-new-tab_16\"></i>\n\n    </a>\n</div>\n\n\n\n",
                styles: [".docs-padding{padding:16px}"]
            },] }
];

/**
 * @title Pseudo link
 */
class LinkVisitedExample {
    constructor() {
        this.visited = false;
    }
}
LinkVisitedExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'link-visited-example',
                template: "<div class=\"docs-padding\">\n    <a href=\"/link/overview\" target=\"_blank\" mc-link [useVisited]=\"visited\" (click)=\"visited = true\">\u041E\u0442\u0447\u0435\u0442 \u043E\u0442 19.05.2020</a>\n</div>\n\n\n\n\n\n\n",
                styles: [".docs-padding{padding:16px}.fixed-width{width:475px}"]
            },] }
];

/**
 * @title Basic list
 */
class ListGroupsExample {
    constructor() {
        this.pokemonTypes = [
            {
                name: 'Grass',
                pokemon: [
                    { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },
                    { value: 'oddish-1', viewValue: 'Oddish' },
                    { value: 'bellsprout-2', viewValue: 'Bellsprout' }
                ]
            },
            {
                name: 'Water',
                disabled: true,
                pokemon: [
                    { value: 'squirtle-3', viewValue: 'Squirtle' },
                    { value: 'psyduck-4', viewValue: 'Psyduck' },
                    { value: 'horsea-5', viewValue: 'Horsea' }
                ]
            },
            {
                name: 'Fire',
                pokemon: [
                    { value: 'charmander-6', viewValue: 'Charmander' },
                    { value: 'vulpix-7', viewValue: 'Vulpix' },
                    { value: 'flareon-8', viewValue: 'Flareon' }
                ]
            },
            {
                name: 'Psychic',
                pokemon: [
                    { value: 'mew-9', viewValue: 'Mew' },
                    { value: 'mewtwo-10', viewValue: 'Mewtwo' }
                ]
            }
        ];
    }
}
ListGroupsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'list-groups-example',
                template: "<mc-list-selection>\n    <mc-optgroup *ngFor=\"let group of pokemonTypes\" [label]=\"group.name\" [disabled]=\"group.disabled\">\n        <mc-list-option *ngFor=\"let pokemon of group.pokemon\" [value]=\"pokemon.value\">\n            {{ pokemon.viewValue }}\n        </mc-list-option>\n    </mc-optgroup>\n    <mc-list-option value=\"mime-11\">Mr. Mime</mc-list-option>\n</mc-list-selection>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic list
 */
class ListMultipleCheckboxExample {
    constructor() {
        this.selected = [];
    }
}
ListMultipleCheckboxExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'list-multiple-checkbox-example',
                template: "<mc-list-selection\n    multiple=\"checkbox\"\n    [(ngModel)]=\"selected\">\n    <mc-list-option value=\"Item 1\" disabled>Item 1</mc-list-option>\n    <mc-list-option value=\"Item 2\">Item 2</mc-list-option>\n    <mc-list-option value=\"Item 3\">Item 3</mc-list-option>\n    <mc-list-option value=\"Item 4\">Item 4</mc-list-option>\n    <mc-list-option value=\"Item 5\">Item 5</mc-list-option>\n    <mc-list-option value=\"Item 6\">Item 6</mc-list-option>\n    <mc-list-option value=\"Item 7\">Item 7</mc-list-option>\n    <mc-list-option value=\"Item 8\">Item 8</mc-list-option>\n    <mc-list-option value=\"Item 9\">Item 9</mc-list-option>\n    <mc-list-option value=\"Item 10\">Item 10</mc-list-option>\n</mc-list-selection>\n<br>\n<div>Selected: {{ selected }}</div>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic list
 */
class ListMultipleKeyboardExample {
    constructor() {
        this.selected = [];
    }
}
ListMultipleKeyboardExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'list-multiple-keyboard-example',
                template: "<mc-list-selection\n    multiple=\"keyboard\"\n    [(ngModel)]=\"selected\">\n    <mc-list-option value=\"Item 1\" disabled>Item 1</mc-list-option>\n    <mc-list-option value=\"Item 2\">Item 2</mc-list-option>\n    <mc-list-option value=\"Item 3\">Item 3</mc-list-option>\n    <mc-list-option value=\"Item 4\">Item 4</mc-list-option>\n    <mc-list-option value=\"Item 5\">Item 5</mc-list-option>\n    <mc-list-option value=\"Item 6\">Item 6</mc-list-option>\n    <mc-list-option value=\"Item 7\">Item 7</mc-list-option>\n    <mc-list-option value=\"Item 8\">Item 8</mc-list-option>\n    <mc-list-option value=\"Item 9\">Item 9</mc-list-option>\n    <mc-list-option value=\"Item 10\">Item 10</mc-list-option>\n</mc-list-selection>\n<br>\n<div>Selected: {{ selected }}</div>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic list
 */
class ListOverviewExample {
    constructor() {
        this.selected = [];
    }
}
ListOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'list-overview-example',
                template: "<mc-list-selection\n    [(ngModel)]=\"selected\">\n    <mc-list-option value=\"Item 1\" disabled>Item 1</mc-list-option>\n    <mc-list-option value=\"Item 2\">Item 2</mc-list-option>\n    <mc-list-option value=\"Item 3\">Item 3</mc-list-option>\n    <mc-list-option value=\"Item 4\">Item 4</mc-list-option>\n    <mc-list-option value=\"Item 5\">Item 5</mc-list-option>\n    <mc-list-option value=\"Item 6\">Item 6</mc-list-option>\n    <mc-list-option value=\"Item 7\">Item 7</mc-list-option>\n    <mc-list-option value=\"Item 8\">Item 8</mc-list-option>\n    <mc-list-option value=\"Item 9\">Item 9</mc-list-option>\n    <mc-list-option value=\"Item 10\">Item 10</mc-list-option>\n</mc-list-selection>\n<br>\n<div>Selected: {{ selected }}</div>\n",
                styles: [""]
            },] }
];

// tslint:disable:no-console
/**
 * @title Component Modal
 */
class ModalComponentExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    openModal() {
        this.componentModal = this.modalService.open({
            mcComponent: McModalCustomComponent,
            mcComponentParams: {
                title: 'Title',
                subtitle: 'Subtitle'
            }
        });
        this.componentModal.afterOpen.subscribe(() => {
            console.log('[afterOpen] emitted!');
        });
        this.componentModal.afterClose.subscribe((action) => {
            console.log(`[afterClose] emitted, chosen action: ${action}`);
        });
    }
}
ModalComponentExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-component-example',
                template: "<button mc-button [color]=\"'primary'\" (click)=\"openModal()\">Open Modal</button>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
ModalComponentExample.ctorParameters = () => [
    { type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_8__["McModalService"] }
];
class McModalCustomComponent {
    constructor(modal) {
        this.modal = modal;
    }
    destroyModal(action) {
        this.modal.destroy(action);
    }
}
McModalCustomComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'mc-modal-full-custom-component',
                template: `
        <mc-modal-title>
            Modal Title
        </mc-modal-title>

        <mc-modal-body>
            <h2>{{ title }}</h2>
            <h4>{{ subtitle }}</h4>
            <p>
                <span>Get Modal instance in component</span>
                <button mc-button [color]="'primary'" (click)="destroyModal('close')">destroy modal in the component</button>
            </p>
        </mc-modal-body>

        <div mc-modal-footer>
            <button mc-button [color]="'primary'" (click)="destroyModal('save')">Save</button>
            <button mc-button autofocus (click)="destroyModal('close')">Close</button>
        </div>
  `
            },] }
];
/** @nocollapse */
McModalCustomComponent.ctorParameters = () => [
    { type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_8__["McModalRef"] }
];
McModalCustomComponent.propDecorators = {
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    subtitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};

// tslint:disable:no-console
/**
 * @title Basic Modal
 */
class ModalOverviewExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showConfirmModal() {
        this.modalService.confirm({
            mcContent: 'Save changes?',
            mcOkText: 'Save',
            mcCancelText: 'Cancel',
            mcOnOk: () => console.log('OK')
        });
    }
    showSuccessModal() {
        this.modalService.success({
            mcContent: 'All changes are saved!',
            mcOkText: 'ОК',
            mcCancelText: 'Cancel',
            mcOnOk: () => console.log('OK')
        });
    }
    showDeleteModal() {
        this.modalService.delete({
            mcContent: 'The tasks, policies and tags associated with the customer will be deleted too. Delete selected customer?',
            mcOkType: 'error',
            mcOkText: 'Delete',
            mcCancelText: 'Cancel',
            mcWidth: '480px',
            mcOnOk: () => console.log('Delete'),
            mcOnCancel: () => console.log('Cancel')
        });
    }
}
ModalOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-overview-example',
                template: "<button mc-button [color]=\"'second'\" class=\"modal-example-button\" (click)=\"showConfirmModal()\">Open Confirm Modal</button>\n<button mc-button [color]=\"'primary'\" class=\"modal-example-button\" (click)=\"showSuccessModal()\">Open Success Modal</button>\n<button mc-button [color]=\"'error'\" class=\"modal-example-button\" (click)=\"showDeleteModal()\">Open Delete Modal</button>\n",
                styles: [".modal-example-button{margin-right:18px}"]
            },] }
];
/** @nocollapse */
ModalOverviewExample.ctorParameters = () => [
    { type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_8__["McModalService"] }
];

// tslint:disable:no-console
/**
 * @title Template Modal
 */
class ModalTemplateExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    createTplModal(tplTitle, tplContent, tplFooter) {
        this.tplModal = this.modalService.create({
            mcTitle: tplTitle,
            mcContent: tplContent,
            mcFooter: tplFooter,
            mcClosable: true,
            mcOnOk: () => console.log('Click ok')
        });
    }
    destroyTplModal() {
        this.tplModal.triggerOk();
        this.tplModal.destroy();
    }
}
ModalTemplateExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-template-example',
                template: "<button mc-button [color]=\"'primary'\" class=\"modal-example-button\" (click)=\"createTplModal(tplTitle, tplContent, tplFooter)\">Delete</button>\n\n<ng-template #tplTitle>\n    <span>Title</span>\n</ng-template>\n\n<ng-template #tplContent>\n    <p>content...</p>\n    <p>content...</p>\n    <p>content...</p>\n    <p>content...</p>\n    <p>content...</p>\n</ng-template>\n\n<ng-template #tplFooter>\n    <button mc-button [color]=\"'primary'\" (click)=\"destroyTplModal()\">Save</button>\n</ng-template>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
ModalTemplateExample.ctorParameters = () => [
    { type: _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_8__["McModalService"] }
];

/**
 * @title Navbar
 */
class NavbarOverviewExample {
}
NavbarOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'navbar-overview-example',
                template: "<div class=\"demo-container\">\n    <mc-navbar>\n        <mc-navbar-container position=\"left\">\n            <mc-navbar-item>\n                <i mc-icon=\"mc-hamburger_16\"></i>\n            </mc-navbar-item>\n            <mc-navbar-brand>\n                <mc-navbar-logo>\n                    <svg class=\"logo\" height=\"32\" viewBox=\"0 0 32 32\" width=\"32\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"m0 32h32v-32h-32z\" fill=\"#c00\"/><path d=\"m11.7013126 2.13713398h3.4056699v5.22500971c.0083884 1.2815534 1.0494758 2.31984466 2.3304078 2.32543689v-1.89825242c-.2370486-.00528156-.4296699-.19231068-.432466-.42718447v-5.22500971h3.4050485v-1.89794175h-8.7086602zm-3.29065629-1.89806602h-5.95976699-.0167767c-1.28062136.00590291-2.3192233 1.04978641-2.32481553 2.33351456h1.89794174c.00590292-.23735922.19262136-.42407767.42687379-.43557281h5.97654369c.24295146 0 .44054369.19821359.44054369.44427184v.97646602c0 .23735923-.19759223.43867961-.44054369.43867961l-5.97654369.00248544c-1.28062136.01118447-2.3192233 1.04667961-2.32481553 2.33071845v3.35782524h1.89794174v-3.35782524c.00590292-.23207767.19262136-.42438835.42687379-.42718447h5.97654369c1.28932039 0 2.34190289-1.05227184 2.34190289-2.34469903v-.97646602c0-1.29242718-1.0525825-2.34221359-2.34190289-2.34221359\" fill=\"#fff\" transform=\"translate(5.592 10.889)\"/></g></svg>\n                </mc-navbar-logo>\n                <mc-navbar-title>Brand</mc-navbar-title>\n            </mc-navbar-brand>\n            <mc-navbar-item class=\"mc-navbar-item-active\">\n                <i mc-icon=\"mc-info_16\"></i>\n                <mc-navbar-title>Left icon</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item>\n                <i mc-icon=\"mc-calendar_16\"></i>\n                <mc-navbar-title>Left icon</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item class=\"mc-progress\">\n                <i mc-icon=\"mc-download_16\"></i>\n                <mc-navbar-title>In-progress</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item class=\"mc-progress\" disabled>\n                <i mc-icon=\"mc-clock_16\"></i>\n                <mc-navbar-title>Disabled in-progress</mc-navbar-title>\n            </mc-navbar-item>\n            <mc-navbar-item disabled>\n                <mc-navbar-title>Right Icon</mc-navbar-title>\n                <i mc-icon=\"mc-search_16\"></i>\n            </mc-navbar-item>\n\n            <mc-navbar-item>\n                <i mc-icon=\"mc-gear_16\"></i>\n            </mc-navbar-item>\n        </mc-navbar-container>\n\n        <mc-navbar-container position=\"right\">\n            <mc-navbar-item [collapsedTitle]=\"'custom title'\">\n                <mc-navbar-title>Right Icon</mc-navbar-title>\n                <i mc-icon=\"mc-search_16\"></i>\n            </mc-navbar-item>\n\n            <mc-navbar-item>\n                <i mc-icon=\"mc-gear_16\"></i>\n            </mc-navbar-item>\n        </mc-navbar-container>\n    </mc-navbar>\n</div>\n",
                styles: [".logo{margin-top:5px}.demo-container{margin-bottom:10px}"]
            },] }
];

/**
 * @title Basic progress number-formatter
 */
class NumberFormatterOverviewExample {
    constructor() {
        this.value = 1000.123;
    }
}
NumberFormatterOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'number-formatter-overview-example',
                template: "<mc-form-field class=\"number-input\">\n    <input mcInput [(ngModel)]=\"value\" type=\"number\" placeholder=\"Number\">\n</mc-form-field>\n\n<div class=\"layout-row mc-body\">\n    <div class=\"flex\">\n        <h4 class=\"mc-subheading\">with RU locale (default)</h4>\n        <default-locale [value]=\"value\"></default-locale>\n    </div>\n\n    <div class=\"flex\">\n        <h4 class=\"mc-subheading\">with EN locale</h4>\n        <en-locale [value]=\"value\"></en-locale>\n    </div>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                styles: ["default-locale,en-locale{display:block}.number-input{margin-top:32px;margin-bottom:32px;max-width:200px}.common-container{padding-left:16px;padding-right:16px}.light-text-secondary{color:#ccc}.row-border{padding:8px;border-bottom:1px solid #ccc}"]
            },] }
];
class WithDefaultLocaleComponent {
    constructor(mcLocaleId) {
        this.mcLocaleId = mcLocaleId;
        this.locale = 'en';
        this.value = 0;
    }
}
WithDefaultLocaleComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'default-locale',
                template: "<div class=\"mc-subheading\">\n    <label>MC_LOCALE_ID: </label><span>{{ mcLocaleId | json }}</span>\n</div>\n\n<div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex light-text-secondary\">Params</div>\n        <div class=\"flex light-text-secondary\">Formatted value</div>\n    </div>\n\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ value | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '5.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '5.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-2'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-2' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-1'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-1' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-0'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-0' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 1000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 100000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">locale {{ locale }}</div>\n        <div class=\"flex\">{{ 1000 | mcNumber: '' : locale }}</div>\n    </div>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
            },] }
];
/** @nocollapse */
WithDefaultLocaleComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["MC_LOCALE_ID"],] }] }
];
WithDefaultLocaleComponent.propDecorators = {
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
// tslint:disable-next-line:naming-convention
class WithENLocaleComponent {
    constructor(mcLocaleId) {
        this.mcLocaleId = mcLocaleId;
        this.locale = 'ru';
        this.value = 0;
    }
}
WithENLocaleComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'en-locale',
                template: "<div class=\"mc-subheading\">\n    <label>MC_LOCALE_ID: </label><span>{{ mcLocaleId | json }}</span>\n</div>\n\n<div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex light-text-secondary\">Params</div>\n        <div class=\"flex light-text-secondary\">Formatted value</div>\n    </div>\n\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ value | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '5.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '5.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.5-5'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.5-5' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-2'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-2' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-1'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-1' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">digitsInfo: '4.0-0'</div>\n        <div class=\"flex\">{{ value | mcNumber: '4.0-0' }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 1000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 10000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">-</div>\n        <div class=\"flex\">{{ 100000000 | mcNumber }}</div>\n    </div>\n    <div class=\"layout-row row-border\">\n        <div class=\"flex\">locale {{ locale }}</div>\n        <div class=\"flex\">{{ 1000 | mcNumber: '' : locale }}</div>\n    </div>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                providers: [{ provide: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["MC_LOCALE_ID"], useValue: 'en' }]
            },] }
];
/** @nocollapse */
WithENLocaleComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["MC_LOCALE_ID"],] }] }
];
WithENLocaleComponent.propDecorators = {
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};

/**
 * @title popover-instance
 */
class PopoverInstanceExample {
    togglePopover($event) {
        $event.stopPropagation();
        if (this.popover.isOpen) {
            this.popover.hide();
        }
        else {
            this.popover.show();
        }
    }
}
PopoverInstanceExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'popover-instance-example',
                template: "<ng-template #customContent>\n    \u0412 \u0437\u0430\u043F\u0430\u0434\u043D\u043E\u0439 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u0438 \u0440\u044B\u0431\u043E\u0439 \u0432\u044B\u0441\u0442\u0443\u043F\u0430\u0435\u0442 \u0444\u0440\u0430\u0433\u043C\u0435\u043D\u0442 \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u043E\u0433\u043E \u0442\u0435\u043A\u0441\u0442\u0430 \u0438\u0437 \u0444\u0438\u043B\u043E\u0441\u043E\u0444\u0441\u043A\u043E\u0433\u043E \u0442\u0440\u0430\u043A\u0442\u0430\u0442\u0430 \u0426\u0438\u0446\u0435\u0440\u043E\u043D\u0430 \u00AB\u041E \u043F\u0440\u0435\u0434\u0435\u043B\u0430\u0445 \u0434\u043E\u0431\u0440\u0430\n    \u0438 \u0437\u043B\u0430\u00BB, \u043D\u0430\u043F\u0438\u0441\u0430\u043D\u043D\u043E\u0433\u043E \u0432 45 \u0433\u043E\u0434\u0443 \u0434\u043E \u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B. \u0412\u043F\u0435\u0440\u0432\u044B\u0435 \u044D\u0442\u043E\u0442 \u0442\u0435\u043A\u0441\u0442 \u0431\u044B\u043B \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D \u0434\u043B\u044F \u043D\u0430\u0431\u043E\u0440\u0430 \u0448\u0440\u0438\u0444\u0442\u043E\u0432\u044B\u0445 \u043E\u0431\u0440\u0430\u0437\u0446\u043E\u0432\n    \u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u043C \u043F\u0435\u0447\u0430\u0442\u043D\u0438\u043A\u043E\u043C \u0435\u0449\u0435 \u0432 XVI \u0432\u0435\u043A\u0435.\n</ng-template>\n\n<ng-template #customFooter>\n    <div>Popover footer</div>\n</ng-template>\n\n<section class=\"container\">\n    <button\n        mc-button\n        mcPopover\n        #popover=\"mcPopover\"\n        mcPopoverHeader=\"Popover header\"\n        [mcPopoverContent]=\"customContent\"\n        [mcPopoverFooter]=\"customFooter\">\n        default\n    </button>\n</section>\n\n\n<button mc-button (click)=\"togglePopover($event)\">togglePopover</button>\n",
                styles: [".container{display:flex;flex-direction:column;align-items:center;justify-content:center;width:600px;max-width:100%;height:600px}"]
            },] }
];
PopoverInstanceExample.propDecorators = {
    popover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['popover', { static: false },] }]
};

/**
 * @title Basic popover
 */
class PopoverOverviewExample {
    constructor() {
        this.isPopoverVisibleLeft = false;
        this.activatedPosition = '';
        this.ELEMENTS = {
            BUTTON: 'button',
            INPUT: 'input',
            ICON: 'icon'
        };
        this.TRIGGERS = {
            CLICK: 'click',
            FOCUS: 'focus',
            HOVER: 'hover'
        };
        this.SIZE = {
            LARGE: 'large',
            NORMAL: 'normal',
            SMALL: 'small'
        };
        this.selectedElement = 'button';
        this.selectedPlacement = 'left';
        this.selectedTrigger = 'click';
        this.selectedSize = 'normal';
        this.layoutClass = 'flex-65 layout-row layout-align-center-center';
        this.content = 'button text';
        this.userDefinedPlacementPriority = ['bottom', 'right'];
        this.multipleSelected = [];
        this.popoverActiveStage = 1;
    }
    changeStep(direction) {
        const newStage = this.popoverActiveStage + direction;
        // tslint:disable-next-line:no-magic-numbers
        if (newStage < 1 || newStage > 3) {
            return;
        }
        this.popoverActiveStage += direction;
    }
    onPopoverVisibleChange($event) {
        if (!$event) {
            this.activatedPosition = '';
        }
    }
    onStrategyPlacementChange(event) {
        this.activatedPosition = event;
    }
    setPlacement(placement) {
        this.selectedPlacement = placement;
    }
    showElement() {
        return this.selectedElement;
    }
    activated(value) {
        return this.selectedPlacement === value;
    }
    isActual(value) {
        return this.activatedPosition === value && this.selectedPlacement !== this.activatedPosition;
    }
    getOrder(forElement) {
        if (forElement === 'config') {
            return this.selectedOrder ? { order: 2 } : { order: 1 };
        }
        if (forElement === 'result') {
            return this.selectedOrder ? { order: 1 } : { order: 2 };
        }
    }
    get isFallbackActivated() {
        return this.selectedPlacement !== this.activatedPosition && this.activatedPosition !== '';
    }
}
PopoverOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'popover-overview-example',
                template: "<div class=\"container flex flex-100 layout-column layout-align-start-start\">\n    <ng-template #customContent>\n        <ng-container [ngSwitch]=\"popoverActiveStage\">\n            <ng-container *ngSwitchCase=\"1\">\n                \u0412 \u0437\u0430\u043F\u0430\u0434\u043D\u043E\u0439 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u0438 \u0440\u044B\u0431\u043E\u0439 \u0432\u044B\u0441\u0442\u0443\u043F\u0430\u0435\u0442 \u0444\u0440\u0430\u0433\u043C\u0435\u043D\u0442 \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u043E\u0433\u043E \u0442\u0435\u043A\u0441\u0442\u0430 \u0438\u0437 \u0444\u0438\u043B\u043E\u0441\u043E\u0444\u0441\u043A\u043E\u0433\u043E \u0442\u0440\u0430\u043A\u0442\u0430\u0442\u0430 \u0426\u0438\u0446\u0435\u0440\u043E\u043D\u0430 \u00AB\u041E \u043F\u0440\u0435\u0434\u0435\u043B\u0430\u0445 \u0434\u043E\u0431\u0440\u0430 \u0438 \u0437\u043B\u0430\u00BB, \u043D\u0430\u043F\u0438\u0441\u0430\u043D\u043D\u043E\u0433\u043E \u0432 45 \u0433\u043E\u0434\u0443 \u0434\u043E \u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B. \u0412\u043F\u0435\u0440\u0432\u044B\u0435 \u044D\u0442\u043E\u0442 \u0442\u0435\u043A\u0441\u0442 \u0431\u044B\u043B \u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D \u0434\u043B\u044F \u043D\u0430\u0431\u043E\u0440\u0430 \u0448\u0440\u0438\u0444\u0442\u043E\u0432\u044B\u0445 \u043E\u0431\u0440\u0430\u0437\u0446\u043E\u0432 \u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u043C \u043F\u0435\u0447\u0430\u0442\u043D\u0438\u043A\u043E\u043C \u0435\u0449\u0435 \u0432 XVI \u0432\u0435\u043A\u0435.\n            </ng-container>\n            <ng-container *ngSwitchCase=\"2\">\n                Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\n            </ng-container>\n            <ng-container *ngSwitchCase=\"3\">\n                \u0421\u0435\u0433\u043E\u0434\u043D\u044F \u044D\u0442\u043E\u0442 \u0442\u0435\u043A\u0441\u0442 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044E\u0442 \u043F\u0440\u0430\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0432\u0441\u0435 \u0434\u0438\u0437\u0430\u0439\u043D\u0435\u0440\u044B, \u043D\u0430\u0431\u0438\u0440\u0430\u044E\u0449\u0438\u0435 \u0440\u044B\u0431\u0443 \u043B\u0430\u0442\u0438\u043D\u0438\u0446\u0435\u0439. \u0410\u0431\u0437\u0430\u0446 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044F \u043A\u0430\u043D\u043E\u043D\u0438\u0447\u0435\u0441\u043A\u0438\u043C \u0432\u043E \u0432\u0441\u0435\u0445 \u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430\u0445 \u043F\u043E \u0442\u0438\u043F\u043E\u0433\u0440\u0430\u0444\u0438\u043A\u0435 \u0438 \u043F\u0440\u0435\u0434\u043B\u0430\u0433\u0430\u0435\u0442\u0441\u044F \u043A \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044E \u0432 \u0441\u0442\u0430\u0442\u044C\u044F\u0445, \u043F\u043E\u0441\u0432\u044F\u0449\u0435\u043D\u043D\u044B\u0445 \u0438\u0437\u0433\u043E\u0442\u043E\u0432\u043B\u0435\u043D\u0438\u044E \u043C\u0430\u043A\u0435\u0442\u0430 \u0432\u0435\u0440\u0441\u0442\u043A\u0438 \u043F\u0440\u0438 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0444\u0438\u043D\u0430\u043B\u044C\u043D\u044B\u0445 \u0442\u0435\u043A\u0441\u0442\u043E\u0432. \u0412 \u0440\u0443\u043A\u043E\u0432\u043E\u0434\u0441\u0442\u0432\u0430\u0445 \u043F\u043E \u0440\u0430\u0431\u043E\u0442\u0435 \u0441 \u0444\u0438\u0440\u043C\u0435\u043D\u043D\u044B\u043C \u0441\u0442\u0438\u043B\u0435\u043C \u043A\u0440\u0443\u043F\u043D\u044B\u0445 \u043C\u0435\u0436\u0434\u0443\u043D\u0430\u0440\u043E\u0434\u043D\u044B\u0445 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0439 \u0438\u043C\u0435\u043D\u043D\u043E \u0441 \u044D\u0442\u0438\u0445 \u0441\u043B\u043E\u0432 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u043E\u0431\u0440\u0430\u0437\u0446\u044B \u0432\u0435\u0440\u0441\u0442\u043A\u0438. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044E\u0442 \u0434\u0430\u0436\u0435 \u0438\u0437\u0434\u0430\u043D\u0438\u044F \u0441 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\u043C Lorem ipsum.\n            </ng-container>\n        </ng-container>\n    </ng-template>\n\n    <ng-template #customFooter>\n        <div class=\"flex-100 layout-row layout-align-space-between-center\" cdkTrapFocus=\"true\" cdkTrapFocusAutoCapture=\"true\">\n            <button class=\"step\"\n                    mc-button\n                    [color]=\"'primary'\"\n                    (click)=\"changeStep(-1)\">\n                &larr; \u041D\u0430\u0437\u0430\u0434\n            </button>\n            <button class=\"step\"\n                    mc-button\n                    [color]=\"'primary'\"\n                    (click)=\"changeStep(1)\">\n                \u0414\u0430\u043B\u044C\u0448\u0435 &rarr;\n            </button>\n        </div>\n    </ng-template>\n\n    <div class=\"flex-35 layout-row layou-align-start-start config\" [style]=\"getOrder('config')\">\n        <div class=\"flex-35\">\n            <label for=\"order\">Inverse layout order:</label>\n            <br/>\n            <mc-checkbox id=\"order\" [(ngModel)]=\"selectedOrder\">Yes/No</mc-checkbox>\n            <br/>\n            <label for=\"element\" class=\"flex mc-form-label\">\n                Choose element for popover binding\n            </label>\n            <mc-form-field id=\"element\" class=\"padding-32\">\n                <mc-select [(value)]=\"selectedElement\" [placeholder]=\"'Select element'\">\n                    <mc-option value=\"button\">Button</mc-option>\n                    <mc-option value=\"icon\">Icon</mc-option>\n                    <mc-option value=\"input\">Input</mc-option>\n                </mc-select>\n            </mc-form-field>\n\n            <label for=\"trigger\" class=\"flex mc-form-label\">\n                Choose popover trigger\n            </label>\n            <mc-form-field id=\"trigger\" class=\"padding-32\">\n                <mc-select [(value)]=\"selectedTrigger\" [placeholder]=\"'Select trigger'\">\n                    <mc-option value=\"click\">Click</mc-option>\n                    <mc-option value=\"hover\">Hover</mc-option>\n                    <mc-option value=\"focus\">Focus</mc-option>\n                </mc-select>\n            </mc-form-field>\n\n            <label for=\"size\" class=\"flex mc-form-label\">\n                Choose popover size\n            </label>\n            <mc-form-field id=\"size\" class=\"padding-32\">\n                <mc-select [(value)]=\"selectedSize\" [placeholder]=\"'Select size'\">\n                    <mc-option value=\"small\">Small</mc-option>\n                    <mc-option value=\"normal\">Normal</mc-option>\n                    <mc-option value=\"large\">Large</mc-option>\n                </mc-select>\n            </mc-form-field>\n\n            <label for=\"layout\" class=\"flex mc-form-label\">\n                Choose layout content placement\n            </label>\n            <mc-form-field id=\"layout\" class=\"padding-32\">\n                <mc-select [(value)]=\"layoutClass\" [placeholder]=\"'Select layout'\">\n                    <mc-option value=\"flex-65 layout-row layout-align-start-start\">Start start</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-start-center\">Start center</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-start-end\">Start end</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-center-start\">Center start</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-center-center\">Center center</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-center-end\">Center end</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-end-start\">End start</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-end-center\">End center</mc-option>\n                    <mc-option value=\"flex-65 layout-row layout-align-end-end\">End end</mc-option>\n                </mc-select>\n            </mc-form-field>\n        </div>\n        <div class=\"flex flex-35 layout-align-center-center\">\n            <label for=\"trigger\" class=\"flex mc-form-label\">\n                Choose popover arrow placement - popover mcPlacement and placement priority strategy\n            </label>\n            <div class=\"visual-box\">\n                <div (click)=\"setPlacement('topLeft')\"\n                     [ngClass]=\"{\n                        active: activated('topLeft'),\n                        actual: isActual('topLeft')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-top-left\"></div>\n                <div (click)=\"setPlacement('top')\"\n                     [ngClass]=\"{\n                        active: activated('top'),\n                        actual: isActual('top')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-top\"></div>\n                <div (click)=\"setPlacement('topRight')\"\n                     [ngClass]=\"{\n                        active: activated('topRight'),\n                        actual: isActual('topRight')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-top-right\"></div>\n                <div (click)=\"setPlacement('rightTop')\"\n                     [ngClass]=\"{\n                        active: activated('rightTop'),\n                        actual: isActual('rightTop')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-right-top\"></div>\n                <div (click)=\"setPlacement('right')\"\n                     [ngClass]=\"{\n                        active: activated('right'),\n                        actual: isActual('right')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-right\"></div>\n                <div (click)=\"setPlacement('rightBottom')\"\n                     [ngClass]=\"{\n                        active: activated('rightBottom'),\n                        actual: isActual('rightBottom')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-right-bottom\"></div>\n                <div (click)=\"setPlacement('bottomRight')\"\n                     [ngClass]=\"{\n                        active: activated('bottomRight'),\n                        actual: isActual('bottomRight')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-bottom-right\"></div>\n                <div (click)=\"setPlacement('bottom')\"\n                     [ngClass]=\"{\n                        active: activated('bottom'),\n                        actual: isActual('bottom')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-bottom\"></div>\n                <div (click)=\"setPlacement('bottomLeft')\"\n                     [ngClass]=\"{\n                        active: activated('bottomLeft'),\n                        actual: isActual('bottomLeft')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-bottom-left\"></div>\n                <div (click)=\"setPlacement('leftBottom')\"\n                     [ngClass]=\"{\n                        active: activated('leftBottom'),\n                        actual: isActual('leftBottom')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-left-bottom\"></div>\n                <div (click)=\"setPlacement('left')\"\n                     [ngClass]=\"{\n                        active: activated('left'),\n                        actual: isActual('left')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-left\"></div>\n                <div (click)=\"setPlacement('leftTop')\"\n                     [ngClass]=\"{\n                        active: activated('leftTop'),\n                        actual: isActual('leftTop')\n                     }\"\n                     class=\"visual-box--clickable visual-box_placement-left-top\"></div>\n            </div>\n            <mc-form-field>\n                <mc-select multiple [(value)]=\"multipleSelected\">\n                    <mc-option value=\"top\" disabled>Top</mc-option>\n                    <mc-option value=\"topLeft\">TopLeft</mc-option>\n                    <mc-option value=\"topRight\">TopRight</mc-option>\n                    <mc-option value=\"bottom\">Bottom</mc-option>\n                    <mc-option value=\"bottomLeft\">BottomLeft</mc-option>\n                    <mc-option value=\"bottomRight\">BottomRight</mc-option>\n                    <mc-option value=\"right\">Right</mc-option>\n                    <mc-option value=\"rightTop\">RightTop</mc-option>\n                    <mc-option value=\"rightBottom\">RightBottom</mc-option>\n                    <mc-option value=\"left\">Left</mc-option>\n                    <mc-option value=\"leftTop\">LeftTop</mc-option>\n                    <mc-option value=\"leftBottom\">LeftBottom</mc-option>\n                </mc-select>\n            </mc-form-field>\n        </div>\n        <div class=\"flex-30\">\n            <h3>Configuration:</h3>\n            <ul>\n                <li>Popover size: {{selectedSize}}</li>\n                <li>Popover trigger: {{selectedTrigger}}</li>\n                <li>Popover anchor placement: {{selectedPlacement}}</li>\n                <li>Popover anchored element: {{selectedElement}}</li>\n                <li *ngIf=\"this.isFallbackActivated\" class=\"actual red\">Popover activated fallback position: {{activatedPosition}}</li>\n                <li>Layout positioning: {{layoutClass}}</li>\n                <li *ngIf=\"multipleSelected\">Placement priority order: {{multipleSelected}}</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\"{{layoutClass}} result\" [style]=\"getOrder('result')\">\n        <div [ngSwitch]=\"showElement()\">\n            <button mc-button class=\"proove\"\n                    *ngSwitchCase=\"ELEMENTS.BUTTON\"\n                    mcPopover\n                    mcPopoverClass=\"popover-485\"\n                    mcPopoverHeader=\"Header text\"\n                    [mcPopoverPlacement]=\"selectedPlacement\"\n                    [mcPopoverPlacementPriority]=\"multipleSelected\"\n                    [mcPopoverSize]=\"selectedSize\"\n                    [mcPopoverTrigger]=\"selectedTrigger\"\n                    [mcPopoverContent]=\"customContent\"\n                    [mcPopoverFooter]=\"customFooter\"\n                    (mcPopoverPositionStrategyPlacementChange)=\"onStrategyPlacementChange($event)\"\n                    (mcPopoverVisibleChange)=\"onPopoverVisibleChange($event)\">\n                Button\n            </button>\n            <mc-form-field *ngSwitchCase=\"ELEMENTS.INPUT\">\n                <input mcInput\n                       [(ngModel)]=\"content\"\n                       placeholder=\"Button content\"\n                       mcPopover\n                       mcPopoverClass=\"popover-485\"\n                       mcPopoverHeader=\"Lorem ipsum\"\n                       [mcPopoverPlacement]=\"selectedPlacement\"\n                       [mcPopoverPlacementPriority]=\"multipleSelected\"\n                       [mcPopoverSize]=\"selectedSize\"\n                       [mcPopoverTrigger]=\"selectedTrigger\"\n                       [mcPopoverContent]=\"customContent\"\n                       [mcPopoverFooter]=\"customFooter\"\n                       (mcPopoverPositionStrategyPlacementChange)=\"onStrategyPlacementChange($event)\"\n                       (mcPopoverVisibleChange)=\"onPopoverVisibleChange($event)\">\n            </mc-form-field>\n            <div *ngSwitchCase=\"ELEMENTS.ICON\">\n                <i mc-icon=\"mc-calendar_16\"\n                   mcPopover\n                   mcPopoverClass=\"popover-485\"\n                   mcPopoverHeader=\"Header text\"\n                   [mcPopoverPlacement]=\"selectedPlacement\"\n                   [mcPopoverPlacementPriority]=\"multipleSelected\"\n                   [mcPopoverSize]=\"selectedSize\"\n                   [mcPopoverTrigger]=\"selectedTrigger\"\n                   [mcPopoverContent]=\"customContent\"\n                   [mcPopoverFooter]=\"customFooter\"\n                   (mcPopoverPositionStrategyPlacementChange)=\"onStrategyPlacementChange($event)\"\n                   (mcPopoverVisibleChange)=\"onPopoverVisibleChange($event)\">\n                </i>\n            </div>\n        </div>\n    </div>\n</div>\n",
                styles: ["body,html{margin:0}app,body,html{width:100%;height:100%}.actual{animation:blink-animation 1s steps(5,start) infinite;-webkit-animation:blink-animation 1s steps(5,start) infinite}@keyframes blink-animation{to{visibility:hidden}}@-webkit-keyframes blink-animation{to{visibility:hidden}}.red{color:red}.container{width:100%;height:100%;padding:1%}.config,.result{height:50%;width:100%}.result{border-top:2px solid #56d1ff;border-bottom:2px solid #56d1ff}.padding-32{padding:8px}.visual-box--clickable{height:12px;width:12px;position:absolute;background:#4dc3ff;cursor:pointer}.active{background:red}.visual-box{height:100px;width:240px;border:1px solid #575757;position:relative;margin:50px}.visual-box_placement-top-left{top:-6px;left:10px}.visual-box_placement-top{top:-6px;left:calc(50% - 6px)}.visual-box_placement-top-right{top:-6px;right:10px}.visual-box_placement-left-top{top:10px;left:-6px}.visual-box_placement-left{top:calc(50% - 6px);left:-6px}.visual-box_placement-left-bottom{bottom:10px;left:-6px}.visual-box_placement-bottom-right{bottom:-6px;right:10px}.visual-box_placement-bottom{bottom:-6px;right:calc(50% - 6px)}.visual-box_placement-bottom-left{bottom:-6px;left:10px}.visual-box_placement-right-bottom{right:-6px;bottom:10px}.visual-box_placement-right{right:-6px;bottom:calc(50% - 6px)}.visual-box_placement-right-top{right:-6px;top:10px}.popover-485 .mc-popover{max-width:485px!important}"]
            },] }
];
/** @nocollapse */
PopoverOverviewExample.ctorParameters = () => [];

/**
 * @title Indeterminate progress bar
 */
class ProgressBarIndeterminateExample {
}
ProgressBarIndeterminateExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'progress-bar-indeterminate-example',
                template: "<div class=\"example-progress-bar-group\">\n    <mc-progress-bar class=\"example-progress-bar\" mode=\"indeterminate\" [color]=\"'primary'\"></mc-progress-bar>\n    <mc-progress-bar class=\"example-progress-bar\" mode=\"indeterminate\" [color]=\"'second'\"></mc-progress-bar>\n    <mc-progress-bar mode=\"indeterminate\" [color]=\"'error'\"></mc-progress-bar>\n</div>\n",
                styles: [".example-progress-bar-group{display:flex;flex-direction:column}.example-progress-bar{margin-bottom:12px}"]
            },] }
];

/**
 * @title Basic progress bar
 */
class ProgressBarOverviewExample {
    constructor() {
        this.percent = 30;
    }
}
ProgressBarOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'progress-bar-overview-example',
                template: "<div class=\"example-progress-bar-group\">\n    <mc-progress-bar class=\"example-progress-bar\" [value]=\"percent\" [color]=\"'primary'\"></mc-progress-bar>\n    <mc-progress-bar class=\"example-progress-bar\" [value]=\"percent\" [color]=\"'second'\"></mc-progress-bar>\n    <mc-progress-bar class=\"example-progress-bar\" [value]=\"percent\" [color]=\"'error'\"></mc-progress-bar>\n    <mc-form-field>\n        <input mcInput [(ngModel)]=\"percent\" type=\"number\" min=\"0\" max=\"100\" step=\"5\">\n        <mc-stepper></mc-stepper>\n    </mc-form-field>\n</div>\n",
                styles: [".example-progress-bar-group{display:flex;flex-direction:column}.example-progress-bar{margin-bottom:12px}"]
            },] }
];

/**
 * @title Indeterminate progress spinner
 */
class ProgressSpinnerIndeterminateExample {
}
ProgressSpinnerIndeterminateExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'progress-spinner-indeterminate-example',
                template: "<div class=\"example-progress-spinner-group\">\n    <mc-progress-spinner mode=\"indeterminate\" [color]=\"'primary'\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner mode=\"indeterminate\" [color]=\"'second'\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner mode=\"indeterminate\" [color]=\"'error'\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n</div>\n",
                styles: [".example-progress-spinner-group{display:flex}.example-progress-spinner-element{margin-right:8px}"]
            },] }
];

const INTERVAL = 300;
const STEP = 4;
const MAX_PERCENT = 100;
/**
 * @title Basic progress spinner
 */
class ProgressSpinnerOverviewExample {
    constructor() {
        this.percent = 0;
        setInterval(() => this.percent = (this.percent + STEP) % (MAX_PERCENT + STEP), INTERVAL);
    }
    ngOnDestroy() {
        clearInterval(this.intervalId);
    }
}
ProgressSpinnerOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'progress-spinner-overview-example',
                template: "<div class=\"example-progress-spinner-group\">\n    <div class=\"example-progress-spinner-element\">{{percent}}%</div>\n    <mc-progress-spinner [value]=\"percent\" [color]=\"'primary'\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner [value]=\"percent\" [color]=\"'second'\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n    <mc-progress-spinner [value]=\"percent\" [color]=\"'error'\" class=\"example-progress-spinner-element\"></mc-progress-spinner>\n</div>\n",
                styles: [".example-progress-spinner-group{display:flex}.example-progress-spinner-element{margin-right:8px}.example-progress-spinner-element:first-child{width:40px}"]
            },] }
];
/** @nocollapse */
ProgressSpinnerOverviewExample.ctorParameters = () => [];

/**
 * @title Basic radio
 */
class RadioOverviewExample {
    constructor() {
        this.isDisabled = false;
    }
}
RadioOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'radio-overview-example',
                template: "<mc-radio-group\n    class=\"example-radio-group\"\n    name=\"my_options\">\n    <mc-radio-button class=\"example-radio-button\" value=\"option_1\" [disabled]=\"isDisabled\">Option 1</mc-radio-button>\n    <mc-radio-button class=\"example-radio-button\" value=\"option_2\" [disabled]=\"isDisabled\">Option 2</mc-radio-button>\n    <mc-radio-button class=\"example-radio-button\" value=\"option_3\" [disabled]=\"isDisabled\">Option 3</mc-radio-button>\n</mc-radio-group>\n\n<mc-checkbox class=\"example-radio-control\" [(ngModel)]=\"isDisabled\">Disabled</mc-checkbox>\n",
                styles: [".example-radio-group{display:inline-flex;flex-direction:column}.example-radio-button{margin-bottom:10px}.example-radio-control{display:flex;margin-top:10px}"]
            },] }
];

/**
 * @title Basic Select
 */
class SelectGroupsExample {
    constructor() {
        this.pokemonTypes = [
            {
                name: 'Grass',
                pokemon: [
                    { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },
                    { value: 'oddish-1', viewValue: 'Oddish' },
                    { value: 'bellsprout-2', viewValue: 'Bellsprout' }
                ]
            },
            {
                name: 'Water',
                disabled: true,
                pokemon: [
                    { value: 'squirtle-3', viewValue: 'Squirtle' },
                    { value: 'psyduck-4', viewValue: 'Psyduck' },
                    { value: 'horsea-5', viewValue: 'Horsea' }
                ]
            },
            {
                name: 'Fire',
                pokemon: [
                    { value: 'charmander-6', viewValue: 'Charmander' },
                    { value: 'vulpix-7', viewValue: 'Vulpix' },
                    { value: 'flareon-8', viewValue: 'Flareon' }
                ]
            },
            {
                name: 'Psychic',
                pokemon: [
                    { value: 'mew-9', viewValue: 'Mew' },
                    { value: 'mewtwo-10', viewValue: 'Mewtwo' }
                ]
            }
        ];
    }
}
SelectGroupsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-groups-example',
                template: "<mc-form-field>\n    <mc-select>\n        <mc-optgroup *ngFor=\"let group of pokemonTypes\" [label]=\"group.name\" [disabled]=\"group.disabled\">\n            <mc-option *ngFor=\"let pokemon of group.pokemon\" [value]=\"pokemon.value\">{{ pokemon.viewValue }}</mc-option>\n        </mc-optgroup>\n        <mc-option value=\"mime-11\">Mr. Mime</mc-option>\n    </mc-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic Select
 */
class SelectMultipleOverviewExample {
    constructor() {
        this.selected = [];
    }
}
SelectMultipleOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-multiple-overview-example',
                template: "<mc-form-field>\n    <mc-select multiple [(value)]=\"selected\">\n        <mc-option value=\"Disabled\" disabled>Disabled</mc-option>\n        <mc-option value=\"SelectedItem\">SelectedItem</mc-option>\n        <mc-option value=\"SelectedItem1\">SelectedItem1</mc-option>\n        <mc-option value=\"SelectedItem2\">SelectedItem2</mc-option>\n        <mc-option value=\"SelectedItem3\">SelectedItem3</mc-option>\n        <mc-option value=\"SelectedItem4\">SelectedItem4</mc-option>\n        <mc-option value=\"SelectedItem5\">SelectedItem5</mc-option>\n        <mc-option value=\"SelectedItem6\">SelectedItem6</mc-option>\n        <mc-option value=\"SelectedItem7\">SelectedItem7</mc-option>\n        <mc-option value=\"SelectedItem8\">SelectedItem8</mc-option>\n        <mc-option value=\"SelectedItem9\">SelectedItem9</mc-option>\n        <mc-option value=\"SelectedItem10\">SelectedItem10</mc-option>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n    </mc-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic Select
 */
class SelectOverviewExample {
    constructor() {
        this.selected = '';
    }
}
SelectOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-overview-example',
                template: "<mc-form-field>\n    <mc-select [(value)]=\"selected\">\n        <mc-option value=\"Disabled\" disabled>Disabled</mc-option>\n        <mc-option value=\"SelectedItem\">SelectedItem</mc-option>\n        <mc-option value=\"SelectedItem1\">SelectedItem1</mc-option>\n        <mc-option value=\"SelectedItem2\">SelectedItem2</mc-option>\n        <mc-option value=\"SelectedItem3\">SelectedItem3</mc-option>\n        <mc-option value=\"SelectedItem4\">SelectedItem4</mc-option>\n        <mc-option value=\"SelectedItem5\">SelectedItem5</mc-option>\n        <mc-option value=\"SelectedItem6\">SelectedItem6</mc-option>\n        <mc-option value=\"SelectedItem7\">SelectedItem7</mc-option>\n        <mc-option value=\"SelectedItem8\">SelectedItem8</mc-option>\n        <mc-option value=\"SelectedItem9\">SelectedItem9</mc-option>\n        <mc-option value=\"SelectedItem10\">SelectedItem10</mc-option>\n    </mc-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

const OPTIONS$1 = [
    'Abakan', 'Almetyevsk', 'Anadyr', 'Anapa', 'Arkhangelsk', 'Astrakhan', 'Barnaul', 'Belgorod', 'Beslan', 'Biysk',
    'Birobidzhan', 'Blagoveshchensk', 'Bologoye', 'Bryansk', 'Veliky Novgorod', 'Veliky Ustyug', 'Vladivostok',
    'Vladikavkaz', 'Vladimir', 'Volgograd', 'Vologda', 'Vorkuta', 'Voronezh', 'Gatchina', 'Gdov', 'Gelendzhik',
    'Gorno-Altaysk', 'Grozny', 'Gudermes', 'Gus-Khrustalny', 'Dzerzhinsk', 'Dmitrov', 'Dubna', 'Yeysk', 'Yekaterinburg',
    'Yelabuga', 'Yelets', 'Yessentuki', 'Zlatoust', 'Ivanovo', 'Izhevsk', 'Irkutsk', 'Yoshkar-Ola', 'Kazan',
    'Kaliningrad', 'Kaluga', 'Kemerovo', 'Kislovodsk', 'Komsomolsk-on-Amur', 'Kotlas', 'Krasnodar', 'Krasnoyarsk',
    'Kurgan', 'Kursk', 'Kyzyl', 'Leninogorsk', 'Lensk', 'Lipetsk', 'Luga', 'Lyuban', 'Lyubertsy', 'Magadan', 'Maykop',
    'Makhachkala', 'Miass', 'Mineralnye Vody', 'Mirny', 'Moscow', 'Murmansk', 'Murom', 'Mytishchi',
    'Naberezhnye Chelny', 'Nadym', 'Nalchik', 'Nazran', 'Naryan-Mar', 'Nakhodka', 'Nizhnevartovsk', 'Nizhnekamsk',
    'Nizhny Novgorod', 'Nizhny Tagil', 'Novokuznetsk', 'Novosibirsk', 'Novy Urengoy', 'Norilsk', 'Obninsk',
    'Oktyabrsky', 'Omsk', 'Orenburg', 'Orekhovo-Zuyevo', 'Oryol', 'Penza', 'Perm', 'Petrozavodsk',
    'Petropavlovsk-Kamchatsky', 'Podolsk', 'Pskov', 'Pyatigorsk', 'Rostov-on-Don', 'Rybinsk', 'Ryazan', 'Salekhard',
    'Samara', 'Saint Petersburg', 'Saransk', 'Saratov', 'Severodvinsk', 'Smolensk', 'Sol-Iletsk', 'Sochi', 'Stavropol',
    'Surgut', 'Syktyvkar', 'Tambov', 'Tver', 'Tobolsk', 'Tolyatti', 'Tomsk', 'Tuapse', 'Tula', 'Tynda', 'Tyumen',
    'Ulan-Ude', 'Ulyanovsk', 'Ufa', 'Khabarovsk', 'Khanty-Mansiysk', 'Chebarkul', 'Cheboksary', 'Chelyabinsk',
    'Cherepovets', 'Cherkessk', 'Chistopol', 'Chita', 'Shadrinsk', 'Shatura', 'Shuya', 'Elista', 'Engels',
    'Yuzhno-Sakhalinsk', 'Yakutsk', 'Yaroslavl'
];
/**
 * @title Basic Select
 */
class SelectSearchOverviewExample {
    constructor() {
        this.selected = [];
        this.searchControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
        this.options = OPTIONS$1.sort();
    }
    ngOnInit() {
        this.filteredOptions = Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["of"])(OPTIONS$1), this.searchControl.valueChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((value) => this.getFilteredOptions(value))));
    }
    getFilteredOptions(value) {
        const searchFilter = (value && value.new) ? value.value : value;
        return searchFilter
            ? this.options.filter((option) => option.toLowerCase().includes((searchFilter.toLowerCase())))
            : this.options;
    }
}
SelectSearchOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-search-overview-example',
                template: "<mc-form-field>\n    <mc-select multiple [(value)]=\"selected\">\n        <mc-form-field mcFormFieldWithoutBorders mcSelectSearch>\n            <i mcPrefix mc-icon=\"mc-search_16\"></i>\n            <input mcInput [formControl]=\"searchControl\" type=\"text\"/>\n            <mc-cleaner></mc-cleaner>\n        </mc-form-field>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n\n        <div mc-select-search-empty-result>\u041D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E</div>\n\n        <mc-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">{{ option }}</mc-option>\n    </mc-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

const OPTIONS = [
    'Abakan', 'Almetyevsk', 'Anadyr', 'Anapa', 'Arkhangelsk', 'Astrakhan', 'Barnaul', 'Belgorod', 'Beslan', 'Biysk',
    'Birobidzhan', 'Blagoveshchensk', 'Bologoye', 'Bryansk', 'Veliky Novgorod', 'Veliky Ustyug', 'Vladivostok',
    'Vladikavkaz', 'Vladimir', 'Volgograd', 'Vologda', 'Vorkuta', 'Voronezh', 'Gatchina', 'Gdov', 'Gelendzhik',
    'Gorno-Altaysk', 'Grozny', 'Gudermes', 'Gus-Khrustalny', 'Dzerzhinsk', 'Dmitrov', 'Dubna', 'Yeysk', 'Yekaterinburg',
    'Yelabuga', 'Yelets', 'Yessentuki', 'Zlatoust', 'Ivanovo', 'Izhevsk', 'Irkutsk', 'Yoshkar-Ola', 'Kazan',
    'Kaliningrad', 'Kaluga', 'Kemerovo', 'Kislovodsk', 'Komsomolsk-on-Amur', 'Kotlas', 'Krasnodar', 'Krasnoyarsk',
    'Kurgan', 'Kursk', 'Kyzyl', 'Leninogorsk', 'Lensk', 'Lipetsk', 'Luga', 'Lyuban', 'Lyubertsy', 'Magadan', 'Maykop',
    'Makhachkala', 'Miass', 'Mineralnye Vody', 'Mirny', 'Moscow', 'Murmansk', 'Murom', 'Mytishchi',
    'Naberezhnye Chelny', 'Nadym', 'Nalchik', 'Nazran', 'Naryan-Mar', 'Nakhodka', 'Nizhnevartovsk', 'Nizhnekamsk',
    'Nizhny Novgorod', 'Nizhny Tagil', 'Novokuznetsk', 'Novosibirsk', 'Novy Urengoy', 'Norilsk', 'Obninsk',
    'Oktyabrsky', 'Omsk', 'Orenburg', 'Orekhovo-Zuyevo', 'Oryol', 'Penza', 'Perm', 'Petrozavodsk',
    'Petropavlovsk-Kamchatsky', 'Podolsk', 'Pskov', 'Pyatigorsk', 'Rostov-on-Don', 'Rybinsk', 'Ryazan', 'Salekhard',
    'Samara', 'Saint Petersburg', 'Saransk', 'Saratov', 'Severodvinsk', 'Smolensk', 'Sol-Iletsk', 'Sochi', 'Stavropol',
    'Surgut', 'Syktyvkar', 'Tambov', 'Tver', 'Tobolsk', 'Tolyatti', 'Tomsk', 'Tuapse', 'Tula', 'Tynda', 'Tyumen',
    'Ulan-Ude', 'Ulyanovsk', 'Ufa', 'Khabarovsk', 'Khanty-Mansiysk', 'Chebarkul', 'Cheboksary', 'Chelyabinsk',
    'Cherepovets', 'Cherkessk', 'Chistopol', 'Chita', 'Shadrinsk', 'Shatura', 'Shuya', 'Elista', 'Engels',
    'Yuzhno-Sakhalinsk', 'Yakutsk', 'Yaroslavl'
];
/**
 * @title select-virtual-scroll
 */
class SelectVirtualScrollExample {
    constructor() {
        this.options = OPTIONS.sort();
        this.initialRange = { start: 0, end: 7 };
    }
    openedChange(opened) {
        if (opened) {
            return;
        }
        this.cdkVirtualScrollViewport.setRenderedContentOffset(0);
        this.cdkVirtualScrollViewport.setRenderedRange(this.initialRange);
    }
}
SelectVirtualScrollExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-virtual-scroll-example',
                template: "<mc-form-field>\n    <mc-select (openedChange)=\"openedChange($event)\">\n        <mc-cleaner></mc-cleaner>\n\n        <cdk-virtual-scroll-viewport\n            [itemSize]=\"32\"\n            [minBufferPx]=\"100\"\n            [maxBufferPx]=\"400\">\n\n            <mc-option\n                *cdkVirtualFor=\"let option of options; templateCacheSize: 0\"\n                [value]=\"option\">\n                {{ option }}\n            </mc-option>\n        </cdk-virtual-scroll-viewport>\n    </mc-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];
SelectVirtualScrollExample.propDecorators = {
    cdkVirtualScrollViewport: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__["CdkVirtualScrollViewport"],] }]
};

/**
 * @title Template Modal
 */
class SidepanelComponentExample {
    constructor(sidepanelService) {
        this.sidepanelService = sidepanelService;
    }
    openComponentSidepanel() {
        this.sidepanelService.open(SidepanelExampleCustomComponent, {
            position: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelPosition"].Right,
            data: {
                openComponentSidepanel: () => { this.openComponentSidepanel(); }
            }
        });
    }
}
SidepanelComponentExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'sidepanel-component-example',
                template: "<button mc-button [color]=\"'primary'\" (click)=\"openComponentSidepanel()\">\n    <span>Open component sidepanel</span>\n</button>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                styles: [".sidepanel-container{display:flex;flex-direction:column}.layout-padding,.layout-padding>*{padding:8px}"]
            },] }
];
/** @nocollapse */
SidepanelComponentExample.ctorParameters = () => [
    { type: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelService"] }
];
class SidepanelExampleCustomComponent {
    constructor(data) {
        this.data = data;
        this.array = new Array(60); // tslint:disable-line
        this.openComponentSidepanel = data.openComponentSidepanel;
    }
}
SidepanelExampleCustomComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'example-sidepanel',
                template: `
    <mc-sidepanel-header [closeable]="true">
        Sidepanel Component Content
    </mc-sidepanel-header>
    <mc-sidepanel-body class="layout-padding">
        <div class="mc-subheading">Sidepanel Component Body</div>

        <div *ngFor="let item of array; index as i">
            {{ i + 1 }}
        </div>
    </mc-sidepanel-body>
    <mc-sidepanel-footer>
        <mc-sidepanel-actions align="right">
            <button mc-button [color]="'primary'" (click)="openComponentSidepanel()">
                <span>Open another sidepanel</span>
            </button>

            <button mc-button [color]="'second'" mc-sidepanel-close>
                <span>Close</span>
            </button>
        </mc-sidepanel-actions>
    </mc-sidepanel-footer>`,
                host: {
                    class: 'layout-column flex sidepanel-container'
                }
            },] }
];
/** @nocollapse */
SidepanelExampleCustomComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["MC_SIDEPANEL_DATA"],] }] }
];

/**
 * @title Template Modal
 */
class SidepanelOverviewExample {
    constructor(sidepanelService) {
        this.sidepanelService = sidepanelService;
        this.arrayLength = 40;
        this.array = new Array(this.arrayLength); // tslint:disable-line
    }
    openTemplateSidepanel() {
        this.sidepanelService.open(this.template, {
            position: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelPosition"].Bottom
        });
    }
}
SidepanelOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'sidepanel-overview-example',
                template: "<button class=\"template-button\" mc-button [color]=\"'primary'\" (click)=\"openTemplateSidepanel()\">\n    <span>Open template sidepanel</span>\n</button>\n\n<ng-template>\n    <mc-sidepanel-header [closeable]=\"true\">\n        Sidepanel Template Content\n    </mc-sidepanel-header>\n    <mc-sidepanel-body class=\"layout-padding\">\n        <div class=\"mc-subheading\">Sidepanel Template Body</div>\n\n        <div *ngFor=\"let item of array; index as i\">\n            {{ i + 1 }}\n        </div>\n    </mc-sidepanel-body>\n    <mc-sidepanel-footer>\n        <mc-sidepanel-actions align=\"left\">\n            <button mc-button [color]=\"'primary'\" (click)=\"openTemplateSidepanel()\">\n                <span>Open another sidepanel</span>\n            </button>\n        </mc-sidepanel-actions>\n        <mc-sidepanel-actions align=\"right\">\n            <button mc-button [color]=\"'primary'\" (click)=\"openTemplateSidepanel()\">\n                <span>Open another sidepanel</span>\n            </button>\n\n            <button mc-button [color]=\"'second'\" mc-sidepanel-close>\n                <span>Close</span>\n            </button>\n        </mc-sidepanel-actions>\n    </mc-sidepanel-footer>\n</ng-template>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                styles: [".layout-padding,.layout-padding>*{padding:8px}"]
            },] }
];
/** @nocollapse */
SidepanelOverviewExample.ctorParameters = () => [
    { type: _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelService"] }
];
SidepanelOverviewExample.propDecorators = {
    template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], { static: false },] }]
};

/**
 * @title Basic Splitter
 */
class SplitterFixedExample {
}
SplitterFixedExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'splitter-fixed-example',
                template: "<mc-splitter>\n    <div mc-splitter-area class=\"mc-splitter-area_fixed-width\">first (with min-width)</div>\n    <div mc-splitter-area class=\"flex\">second</div>\n    <div mc-splitter-area>third</div>\n</mc-splitter>\n",
                styles: ["mc-splitter{display:flex;border:1px solid #000;height:100px;margin:2px}.mc-splitter-area_fixed-width{min-width:200px}div[mc-splitter-area]{background:#c5c0c0}"]
            },] }
];

/**
 * @title Basic Splitter
 */
class SplitterNestedExample {
}
SplitterNestedExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'splitter-nested-example',
                template: "<mc-splitter class=\"with-border\">\n    <div mc-splitter-area>left</div>\n    <div mc-splitter-area class=\"flex\">\n        <mc-splitter class=\"without-border flex\" [direction]=\"'vertical'\">\n            <div mc-splitter-area>top</div>\n            <div mc-splitter-area class=\"layout-column flex\">\n                <mc-splitter class=\"flex nested-splitter\">\n                    <div mc-splitter-area>center-left</div>\n                    <div mc-splitter-area class=\"flex\">center</div>\n                    <div mc-splitter-area>center-right</div>\n                </mc-splitter>\n            </div>\n            <div mc-splitter-area>bottom</div>\n        </mc-splitter>\n    </div>\n    <div mc-splitter-area>right</div>\n</mc-splitter>\n",
                styles: ["mc-splitter.with-border{border:1px solid #000;height:300px;margin:2px}mc-splitter.without-border{height:300px}.with-border>div[mc-splitter-area]{background:#c5c0c0}.without-border>div[mc-splitter-area]{background:#b3b3b3}.nested-splitter>div[mc-splitter-area]{background:#9f9f9f}"]
            },] }
];

/**
 * @title Basic Splitter
 */
class SplitterOverviewExample {
}
SplitterOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'splitter-overview-example',
                template: "<mc-splitter>\n    <div mc-splitter-area>first</div>\n    <div mc-splitter-area class=\"flex\">second</div>\n    <div mc-splitter-area>third</div>\n</mc-splitter>\n",
                styles: ["mc-splitter{border:1px solid #000;height:100px;margin:2px}div[mc-splitter-area]{background:#c5c0c0}"]
            },] }
];

/**
 * @title Basic Splitter
 */
class SplitterVerticalExample {
}
SplitterVerticalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'splitter-vertical-example',
                template: "<mc-splitter [direction]=\"'vertical'\">\n    <div mc-splitter-area class=\"mc-splitter-area_fixed-height\">first (with min-height)</div>\n    <div mc-splitter-area class=\"flex\">second</div>\n    <div mc-splitter-area>third</div>\n</mc-splitter>\n",
                styles: ["mc-splitter{display:flex;border:1px solid #000;height:400px;margin:2px}.mc-splitter-area_fixed-height{min-height:100px}div[mc-splitter-area]{background:#c5c0c0}"]
            },] }
];

/**
 * @title Basic Table
 */
class TableOverviewExample {
}
TableOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'table-overview-example',
                template: "<table mc-table>\n    <thead>\n        <tr>\n            <th>Column header</th>\n            <th>Column header</th>\n            <th>Column header</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n    </tbody>\n</table>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic Table
 */
class TableWithBordersExample {
}
TableWithBordersExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'table-with-borders-example',
                template: "<table mc-table class=\"mc-table_bordered\">\n    <thead>\n        <tr>\n            <th>Column header Column header Column header Column header</th>\n            <th>Column header</th>\n            <th>Column header</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n        <tr>\n            <td>Column content</td>\n            <td>Column content</td>\n            <td>Column content</td>\n        </tr>\n    </tbody>\n</table>\n",
                styles: [""]
            },] }
];

/**
 * @title Navbar
 */
class TabsLightExample {
}
TabsLightExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-light-example',
                template: "<mc-tab-group mc-old-tabs>\n    <mc-tab label=\"Fact 4\">Chuck Norris counted to infinity. Twice.</mc-tab>\n    <mc-tab label=\"Fact 5\">Chuck Norris can speak braille.</mc-tab>\n    <mc-tab [disabled]=\"true\" label=\"Fact 6\">nothing</mc-tab>\n</mc-tab-group>\n",
                styles: [""]
            },] }
];

/**
 * @title Tabs
 */
class TabsOverviewExample {
}
TabsOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-overview-example',
                template: "<mc-tab-group>\n    <mc-tab>\n        <ng-template mc-tab-label>Fact 1</ng-template>\n        Chuck Norris can hear sign language.\n    </mc-tab>\n    <mc-tab>\n        <ng-template mc-tab-label>Fact 2</ng-template>\n        Chuck Norris makes onions cry.\n    </mc-tab>\n    <mc-tab [disabled]=\"true\">\n        <ng-template mc-tab-label>Fact 3</ng-template>\n        nothing\n    </mc-tab>\n</mc-tab-group>\n",
                styles: [""]
            },] }
];

/**
 * @title Navbar
 */
class TabsStretchExample {
}
TabsStretchExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-stretch-example',
                template: "<mc-tab-group mc-stretch-tabs>\n    <mc-tab label=\"Fact 7\">\n        Chuck Norris knows Victoria's secret.\n    </mc-tab>\n    <mc-tab label=\"Fact 7\">\n        Chuck Norris can drown a fish.\n    </mc-tab>\n    <mc-tab label=\"Fact 7\">\n        Chuck Norris narrates Morgan Freeman's life.\n    </mc-tab>\n</mc-tab-group>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic tags autocomplete
 */
class TagsAutocompleteExample {
    constructor() {
        this.control = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
        this.allTags = ['tag1', 'tag2', 'tag3', 'tag4', 'tag5', 'tag6', 'tag7', 'tag8', 'tag9', 'tag10'];
        this.filteredTagsByInput = [];
        this.selectedTags = ['tag1'];
    }
    ngAfterViewInit() {
        this.filteredTags = Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(this.tagList.tagChanges.asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((selectedTags) => {
            const values = selectedTags.map((tag) => tag.value);
            return this.allTags.filter((tag) => !values.includes(tag));
        })), this.control.valueChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((value) => {
            const typedText = (value && value.new) ? value.value : value;
            this.filteredTagsByInput = typedText ?
                this.filter(typedText) : this.allTags.slice();
            return this.filteredTagsByInput.filter(
            // @ts-ignore
            (tag) => !this.selectedTags.includes(tag));
        })));
    }
    addOnBlurFunc(event) {
        const target = event.relatedTarget;
        if (!target || target.tagName !== 'MC-OPTION') {
            const mcTagEvent = {
                input: this.tagInput.nativeElement,
                value: this.tagInput.nativeElement.value
            };
            this.onCreate(mcTagEvent);
        }
    }
    onCreate(event) {
        const input = event.input;
        const value = event.value;
        if ((value || '').trim()) {
            const isOptionSelected = this.autocomplete.options.some((option) => option.selected);
            if (!isOptionSelected) {
                this.selectedTags.push(value.trim());
            }
        }
        if (input) {
            input.value = '';
        }
        this.control.setValue(null);
    }
    onSelect(event) {
        event.option.deselect();
        if (event.option.value.new) {
            this.selectedTags.push(event.option.value.value);
        }
        else {
            this.selectedTags.push(event.option.value);
        }
        this.tagInput.nativeElement.value = '';
        this.control.setValue(null);
    }
    onRemove(fruit) {
        const index = this.selectedTags.indexOf(fruit);
        if (index >= 0) {
            this.selectedTags.splice(index, 1);
        }
    }
    filter(value) {
        const filterValue = value.toLowerCase();
        return this.allTags.filter((tag) => tag.toLowerCase().indexOf(filterValue) === 0);
    }
}
TagsAutocompleteExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tags-autocomplete-example',
                template: "<mc-form-field>\n    <mc-tag-list #tagList>\n        <mc-tag *ngFor=\"let tag of selectedTags\" [value]=\"tag\" (removed)=\"onRemove(tag)\">\n            {{ tag }}\n            <i mc-icon=\"mc-close-S_16\" mcTagRemove></i>\n        </mc-tag>\n        <input placeholder=\"New tag...\"\n               #tagInput\n               [formControl]=\"control\"\n               [mcAutocomplete]=\"autocomplete\"\n               [mcTagInputFor]=\"tagList\"\n               (mcTagInputTokenEnd)=\"onCreate($event)\"\n               [mcTagInputAddOnBlur]=\"false\"\n               (blur)=\"addOnBlurFunc($event)\">\n    </mc-tag-list>\n    <mc-autocomplete #autocomplete (optionSelected)=\"onSelect($event)\">\n        <mc-option *ngIf=\"tagInput.value\" [value]=\"{ new: true, value: tagInput.value }\">\n            \u0421\u043E\u0437\u0434\u0430\u0442\u044C: {{ tagInput.value }}\n        </mc-option>\n        <mc-option *ngFor=\"let tag of filteredTags | async\" [value]=\"tag\">{{ tag }}</mc-option>\n    </mc-autocomplete>\n</mc-form-field>\n",
                styles: [""]
            },] }
];
TagsAutocompleteExample.propDecorators = {
    tagList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tagList', { static: false },] }],
    tagInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tagInput', { static: false },] }],
    autocomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['autocomplete', { static: false },] }]
};

/**
 * @title Basic tags input
 */
class TagsInputExample {
    constructor() {
        this.control = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
        this.tags = ['tag', 'tag1', 'tag2', 'tag3', 'tag4'];
        this.separatorKeysCodes = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__["ENTER"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_15__["COMMA"]];
    }
    onCreate(event) {
        const input = event.input;
        const value = event.value;
        if ((value || '').trim()) {
            this.tags.push(value.trim());
        }
        if (input) {
            input.value = '';
        }
    }
    onRemoveTag(tag) {
        const index = this.tags.indexOf(tag);
        if (index >= 0) {
            this.tags.splice(index, 1);
        }
    }
    onClear() {
        this.tags.length = 0;
    }
}
TagsInputExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tags-input-example',
                template: "<mc-form-field>\n    <mc-tag-list #tagList>\n        <mc-tag *ngFor=\"let tag of tags\" [value]=\"tag\" (removed)=\"onRemoveTag(tag)\">\n            {{ tag }}\n            <i mc-icon=\"mc-close-S_16\" mcTagRemove></i>\n        </mc-tag>\n\n        <input placeholder=\"New tag...\"\n               [formControl]=\"control\"\n               [mcTagInputFor]=\"tagList\"\n               [mcTagInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n               (mcTagInputTokenEnd)=\"onCreate($event)\">\n\n        <mc-cleaner (click)=\"onClear()\"></mc-cleaner>\n    </mc-tag-list>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic tags list
 */
class TagsListExample {
    constructor() {
        this.simpleTags = ['tag', 'tag1', 'tag2', 'tag3', 'tag4'];
    }
    onRemoveTag(tag) {
        const index = this.simpleTags.indexOf(tag);
        if (index >= 0) {
            this.simpleTags.splice(index, 1);
        }
    }
}
TagsListExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tags-list-example',
                template: "<mc-tag-list>\n    <mc-tag *ngFor=\"let tag of simpleTags\" [value]=\"tag\" (removed)=\"onRemoveTag(tag)\">\n        {{ tag }}\n        <i mc-icon=\"mc-close-S_16\" mcTagRemove></i>\n    </mc-tag>\n</mc-tag-list>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic tags
 */
class TagsOverviewExample {
}
TagsOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tags-overview-example',
                template: "<mc-tag>Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [disabled]=\"true\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag [color]=\"'primary'\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" class=\"mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" class=\"mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" [disabled]=\"true\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag [color]=\"'error'\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" class=\"mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" class=\"mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" [disabled]=\"true\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br><br><br>\n\nmono\n<br>\n<mc-tag class=\"mc-tag_mono\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-hovered mc-tag_mono\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-focused mc-tag_mono\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [disabled]=\"true\" class=\"mc-tag_mono\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag [color]=\"'primary'\" class=\"mc-tag_mono\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" class=\"mc-tag_mono mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" class=\"mc-tag_mono mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" [disabled]=\"true\" class=\"mc-tag_mono\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag [color]=\"'error'\" class=\"mc-tag_mono\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" class=\"mc-tag_mono mc-hovered\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" class=\"mc-tag_mono mc-focused\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" [disabled]=\"true\" class=\"mc-tag_mono\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br><br><br>\n\nCAPS\n<br>\n<mc-tag class=\"mc-tag_caps\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-hovered mc-tag_caps\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag class=\"mc-focused mc-tag_caps\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [disabled]=\"true\" class=\"mc-tag_caps\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag [color]=\"'primary'\" class=\"mc-tag_caps\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" class=\"mc-hovered mc-tag_caps\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" class=\"mc-focused mc-tag_caps\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'primary'\" [disabled]=\"true\" class=\"mc-tag_caps\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n\n<br>\n\n<mc-tag [color]=\"'error'\" class=\"mc-tag_caps\">Normal <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" class=\"mc-hovered mc-tag_caps\">Hovered <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" class=\"mc-focused mc-tag_caps\">Focused <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n<mc-tag [color]=\"'error'\" [disabled]=\"true\" class=\"mc-tag_caps\">Disabled <i mc-icon=\"mc-close-S_16\"></i></mc-tag>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic textarea
 */
class TextAreaOverviewExample {
    constructor() {
        this.disabled = true;
        this.required = true;
        this.placeholder = 'placeholder';
    }
}
TextAreaOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'text-area-overview-example',
                template: "<mc-form-field>\n    <textarea mcTextarea [placeholder]=\"placeholder\"></textarea>\n</mc-form-field>\n\n<br><br>\n\n<mc-form-field>\n    <textarea mcTextarea [disabled]=\"disabled\" [placeholder]=\"placeholder\"></textarea>\n</mc-form-field>\n\n<br><br>\n\n<mc-form-field>\n    <textarea mcTextarea [placeholder]=\"placeholder\" [required]=\"required\" [(ngModel)]=\"value\"></textarea>\n</mc-form-field>\n\n<br><br>\n\n<mc-form-field mcFormFieldWithoutBorders>\n    <textarea mcTextarea [(ngModel)]=\"value\" placeholder=\"Placeholder\"></textarea>\n</mc-form-field>\n",
                styles: [""]
            },] }
];

/**
 * @title Timepicker overview
 */
class TimepickerOverviewExample {
    constructor(adapter) {
        this.adapter = adapter;
        this.isDisabled = false;
        this.isIconVisible = true;
        this.timeFormat = 'HH:mm';
        this.value = this.adapter.today();
    }
}
TimepickerOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'timepicker-overview-example',
                template: "<div class=\"example-timepicker-group\">\n    <div class=\"example-timepicker__controls\">\n        <mc-form-field class=\"\">\n            <mc-select [(value)]=\"timeFormat\">\n                <mc-option value=\"HH:mm\">HH:mm</mc-option>\n                <mc-option value=\"HH:mm:ss\">HH:mm:ss</mc-option>\n            </mc-select>\n        </mc-form-field>\n\n        <mc-checkbox class=\"\" [(ngModel)]=\"isIconVisible\">Show icon</mc-checkbox>\n        <mc-checkbox class=\"\" [(ngModel)]=\"isDisabled\">Disabled</mc-checkbox>\n    </div>\n\n    <mc-form-field\n        class=\"example-timepicker-element\"\n        mcTooltip\n        [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n        #tooltip=\"mcTooltip\">\n\n        <i *ngIf=\"isIconVisible\" mcPrefix mc-icon=\"mc-clock_16\"></i>\n        <input mcTimepicker\n               [(ngModel)]=\"value\"\n               [disabled]=\"isDisabled\"\n               [format]=\"timeFormat\"\n               [mcValidationTooltip]=\"tooltip\">\n    </mc-form-field>\n</div>\n",
                styles: [".example-timepicker-group{display:block}.example-timepicker-element{margin-top:32px;margin-bottom:10px}.example-timepicker__controls{display:flex;flex-direction:column;width:120px}.example-timepicker__controls>*{margin-bottom:16px}"]
            },] }
];
/** @nocollapse */
TimepickerOverviewExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] }
];

/**
 * @title Timepicker range
 */
class TimepickerRangeExample {
    constructor(adapter) {
        this.adapter = adapter;
        this.format = 'HH:mm:ss';
        this.startTime = this.adapter.today().startOf('day');
        this.endTime = this.adapter.today();
        this.time = this.adapter.today().startOf('hour');
    }
    getStartTime() {
        return this.startTime ? this.startTime.toFormat(this.format) : '';
    }
    getEndTime() {
        return this.endTime ? this.endTime.toFormat(this.format) : '';
    }
}
TimepickerRangeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'timepicker-range-example',
                template: "<div class=\"example-timepicker-group\">\n    <div class=\"example-timepicker-element\">\n        <label for=\"Time\"\n               class=\"flex-35 mc-form-label\">\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043C\u044F \u043C\u0435\u0436\u0434\u0443 min \u0438 max</label>\n        <mc-form-field\n            mcTooltip\n            [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n            #tooltip=\"mcTooltip\">\n\n            <i mcPrefix mc-icon=\"mc-clock_16\"></i>\n            <input mcTimepicker\n                   id=\"Time\"\n                   [min]=\"getStartTime()\"\n                   [max]=\"getEndTime()\"\n                   [(ngModel)]=\"time\"\n                   [mcValidationTooltip]=\"tooltip\">\n        </mc-form-field>\n    </div>\n\n    <div class=\"example-timepicker-element\">\n        <label for=\"startTime\"\n               class=\"flex-35 mc-form-label\">min</label>\n        <mc-form-field>\n            <input mcTimepicker\n                   id=\"startTime\"\n                   [(ngModel)]=\"startTime\">\n        </mc-form-field>\n    </div>\n\n    <div class=\"example-timepicker-element\">\n        <label for=\"endTime\"\n               class=\"flex-35 mc-form-label\">max</label>\n        <mc-form-field>\n            <input mcTimepicker\n                   id=\"endTime\"\n                   [(ngModel)]=\"endTime\">\n        </mc-form-field>\n    </div>\n</div>\n",
                styles: [".example-timepicker-group{display:inline-flex;flex-direction:column}.example-timepicker-element{display:flex;align-items:center;margin-bottom:10px}"]
            },] }
];
/** @nocollapse */
TimepickerRangeExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] }
];

/**
 * @title Timepicker overview
 */
class TimepickerValidationSymbolsExample {
    constructor(adapter) {
        this.adapter = adapter;
        this.time = this.adapter.today().startOf('hour');
    }
}
TimepickerValidationSymbolsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'timepicker-validation-letters-symbols',
                template: "<div class=\"docs-row\">\n    <mc-form-field\n        mcTooltip\n        [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n        #tooltip=\"mcTooltip\">\n\n        <i mcPrefix mc-icon=\"mc-clock_16\"></i>\n        <input mcTimepicker [(ngModel)]=\"time\" [format]=\"'HH:mm'\" [mcValidationTooltip]=\"tooltip\">\n    </mc-form-field>\n</div>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TimepickerValidationSymbolsExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] }
];

/**
 * @title Timepicker overview
 */
class TimepickerVariationsExample {
    constructor(adapter) {
        this.adapter = adapter;
        this.timeFormat = 'HH:mm';
        this.value = this.adapter.today();
    }
}
TimepickerVariationsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'timepicker-variations-example',
                template: "<div class=\"example-timepicker-group\">\n    <mc-radio-group [(ngModel)]=\"timeFormat\">\n        <mc-radio-button class=\"example-radio-button\" value=\"HH:mm\">HH:mm</mc-radio-button>\n        <mc-radio-button class=\"example-radio-button\" value=\"HH:mm:ss\">HH:mm:ss</mc-radio-button>\n    </mc-radio-group>\n\n    <mc-form-field\n        class=\"example-timepicker-element\"\n        mcTooltip\n        [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B'\"\n        #tooltip=\"mcTooltip\">\n\n        <i mcPrefix mc-icon=\"mc-clock_16\"></i>\n        <input mcTimepicker\n               [(ngModel)]=\"value\"\n               [format]=\"timeFormat\"\n               [mcValidationTooltip]=\"tooltip\">\n    </mc-form-field>\n</div>\n",
                styles: [".mc-radio-group{display:flex;flex-direction:column}.mc-radio-button{margin-bottom:8px}.block{border:1px solid #000;padding:8px}"]
            },] }
];
/** @nocollapse */
TimepickerVariationsExample.ctorParameters = () => [
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"] }
];

/**
 * @title Basic toggle
 */
class ToggleOverviewExample {
    constructor() {
        this.value = true;
    }
}
ToggleOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'toggle-overview-example',
                template: "<h3>Small Toggles</h3>\n<mc-toggle class=\"mc-toggle_small\" [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle class=\"mc-toggle_small\" [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle class=\"mc-toggle_small\" [color]=\"'error'\" [(ngModel)]=\"value\"></mc-toggle>\n\n<br><br>\n\n<mc-toggle class=\"mc-toggle_small\" [(ngModel)]=\"value\">\n    right label\n</mc-toggle>\n\n<br><br>\n\n<mc-toggle class=\"mc-toggle_small\" labelPosition=\"left\" [(ngModel)]=\"value\">\n    left label\n</mc-toggle>\n\n<br><br><br>\n\n<h3>Big Toggles</h3>\n<mc-toggle [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle [(ngModel)]=\"value\"></mc-toggle>\n<mc-toggle [color]=\"'error'\" [(ngModel)]=\"value\"></mc-toggle>\n\n<br><br>\n\n<mc-toggle [(ngModel)]=\"value\">\n    right label\n</mc-toggle>\n\n<br><br>\n\n<mc-toggle labelPosition=\"left\" [(ngModel)]=\"value\">\n    left label\n</mc-toggle>\n",
                styles: [""]
            },] }
];

/**
 * @title Basic tooltip with Arrow Placement
 */
class TooltipArrowPlacementExample {
    constructor() {
        this.arrowPosition = _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["ArrowPlacements"];
    }
}
TooltipArrowPlacementExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-arrow-placement-example',
                template: "<section class=\"container\">\n    <button mc-button\n            mcTooltip=\"Tooltip text\"\n            mcArrowPlacement=\"{{arrowPosition.Center}}\"\n            mcPlacement=\"right\">\n        right\n    </button>\n</section>\n",
                styles: [".container{display:flex;flex-direction:column;align-items:center;justify-content:center;width:300px;height:300px}button{height:58px}"]
            },] }
];

/**
 * @title Basic tooltip
 */
class TooltipOverviewExample {
}
TooltipOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-overview-example',
                template: "<section class=\"container\">\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"top\">\n        top\n    </button>\n\n    <br><br>\n\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"right\">\n        right\n    </button>\n\n    <br><br>\n\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"left\">\n        left\n    </button>\n\n    <br><br>\n\n    <button mc-button\n            mcTooltip=\"tooltip text\"\n            mcPlacement=\"bottom\">\n        bottom\n    </button>\n</section>\n",
                styles: [".container{display:flex;flex-direction:column;align-items:center;justify-content:center;width:300px;height:300px}"]
            },] }
];

/**
 * @title Basic scrollable tooltip
 */
class TooltipScrollableExample {
    toggleTooltip(flag) {
        if (!flag) {
            this.tooltip.show();
        }
        else {
            this.tooltip.hide();
        }
    }
}
TooltipScrollableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-scrollable-example',
                template: "<section class=\"docs-container\" cdkScrollable>\n    <div class=\"docs-wrapper\">\n        <button\n            mc-button\n            (click)=\"toggleTooltip(tooltip.isTooltipOpen)\"\n            mcTooltip=\"tooltip text\"\n            mcTrigger=\"manual\"\n            #tooltip=\"mcTooltip\"\n            mcPlacement=\"right\">\n            toggle tooltip\n        </button>\n    </div>\n</section>\n",
                styles: [".docs-container{width:300px;height:300px;overflow:auto}.docs-wrapper{margin-top:100px;height:800px}"]
            },] }
];
TooltipScrollableExample.propDecorators = {
    tooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McTooltip"], { static: false },] }]
};

/* tslint:disable:no-reserved-keywords */
class FileNode$6 {
}
/** Flat node with expandable and level information */
class FileFlatNode$6 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$6(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$6();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$6(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$6 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic Select
 */
class TreeSelectMultipleOverviewExample {
    constructor() {
        this.selected = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$6();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            return `${node.name} view`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$6(DATA_OBJECT$6, 0);
    }
    hasChild(_, nodeData) {
        return nodeData.expandable;
    }
}
TreeSelectMultipleOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-select-multiple-overview-example',
                template: "<mc-form-field>\n    <mc-tree-select\n        [multiple]=\"true\"\n        [(ngModel)]=\"selected\">\n        <mc-tree-selection\n            [dataSource]=\"dataSource\"\n            [treeControl]=\"treeControl\">\n            <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n\n            <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n                <i mc-icon=\"mc-angle-down-S_16\"\n                   [style.transform]=\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\"\n                   mcTreeNodeToggle>\n                </i>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n        </mc-tree-selection>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n    </mc-tree-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TreeSelectMultipleOverviewExample.ctorParameters = () => [];

/* tslint:disable:no-reserved-keywords */
class FileNode$5 {
}
/** Flat node with expandable and level information */
class FileFlatNode$5 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$5(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$5();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$5(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$5 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic Select
 */
class TreeSelectOverviewExample {
    constructor() {
        this.selected = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$5();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            return `${node.name} view`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$5(DATA_OBJECT$5, 0);
    }
    hasChild(_, nodeData) {
        return nodeData.expandable;
    }
}
TreeSelectOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-select-overview-example',
                template: "<mc-form-field>\n    <mc-tree-select\n        [(ngModel)]=\"selected\">\n        <mc-tree-selection\n            [dataSource]=\"dataSource\"\n            [treeControl]=\"treeControl\">\n            <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n\n            <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n                <i mc-icon=\"mc-angle-down-S_16\"\n                   [style.transform]=\"treeControl.isExpanded(node) ? '' : 'rotate(-90deg)'\"\n                   mcTreeNodeToggle>\n                </i>\n                {{ treeControl.getViewValue(node) }}\n            </mc-tree-option>\n        </mc-tree-selection>\n\n        <mc-cleaner #mcSelectCleaner></mc-cleaner>\n    </mc-tree-select>\n</mc-form-field>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TreeSelectOverviewExample.ctorParameters = () => [];

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
class FileNode$4 {
}
/** Flat node with expandable and level information */
class FileFlatNode$4 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$4(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$4();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$4(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$4 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeFilteringExample {
    constructor() {
        this.modelValue = '';
        this.filterValue = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$4();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);
    }
    onFilterChange(value) {
        this.treeControl.filterNodes(value);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeFilteringExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-filtering-example',
                template: "<mc-form-field>\n    <input type=\"text\" mcInput (ngModelChange)=\"onFilterChange($event)\" [(ngModel)]=\"filterValue\">\n</mc-form-field>\n\n<br><br><br>\n\n<mc-tree-selection\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node) | mcHighlight : treeControl.filterValue.value\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TreeFilteringExample.ctorParameters = () => [];

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
class FileNode$3 {
}
/** Flat node with expandable and level information */
class FileFlatNode$3 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$3(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$3();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$3(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$3 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeMultipleCheckboxExample {
    constructor() {
        this.modelValue = [];
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$3();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeMultipleCheckboxExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-multiple-checkbox-example',
                template: "<mc-tree-selection\n    multiple=\"checkbox\"\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TreeMultipleCheckboxExample.ctorParameters = () => [];

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
class FileNode$2 {
}
/** Flat node with expandable and level information */
class FileFlatNode$2 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$2(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$2();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$2(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$2 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Checklist tree
 */
class TreeMultipleChecklistExample {
    constructor() {
        this.modelValue = [];
        /** The selection for checklist */
        this.checklistSelection = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["SelectionModel"](true /* multiple */);
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$2();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
    /** Whether all the descendants of the node are selected. */
    descendantsAllSelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        return descendants.every((child) => this.checklistSelection.isSelected(child));
    }
    /** Whether part of the descendants are selected */
    descendantsPartiallySelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        const result = descendants.some((child) => this.checklistSelection.isSelected(child));
        return result && !this.descendantsAllSelected(node);
    }
    /** Toggle the to-do item selection. Select/deselect all the descendants node */
    fileSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        const descendants = this.treeControl.getDescendants(node);
        this.checklistSelection.isSelected(node)
            ? this.checklistSelection.select(...descendants)
            : this.checklistSelection.deselect(...descendants);
        // Force update for the parent
        descendants.every((child) => this.checklistSelection.isSelected(child));
        this.checkAllParentsSelection(node);
    }
    /* Checks all the parents when a leaf node is selected/unselected */
    checkAllParentsSelection(node) {
        let parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    }
    /** Check root node checked state and change it accordingly */
    checkRootNodeSelection(node) {
        const nodeSelected = this.checklistSelection.isSelected(node);
        const descendants = this.treeControl.getDescendants(node);
        const descAllSelected = descendants.every((child) => this.checklistSelection.isSelected(child));
        if (nodeSelected && !descAllSelected) {
            this.checklistSelection.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.checklistSelection.select(node);
        }
    }
    /* Get the parent node of a node */
    getParentNode(node) {
        const currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (let i = startIndex; i >= 0; i--) {
            const currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    }
}
TreeMultipleChecklistExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-multiple-checklist-example',
                template: "<mc-tree-selection\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <mc-checkbox class= \"tree-example-checkbox\" [disabled]=\"node.name === 'tests'\"\n                     [checked]=\"checklistSelection.isSelected(node)\"\n                     (change)=\"fileSelectionToggle(node)\"></mc-checkbox>\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n        <mc-checkbox class= \"tree-example-checkbox\"\n                     [checked]=\"descendantsAllSelected(node)\"\n                     [indeterminate]=\"descendantsPartiallySelected(node)\"\n                     (change)=\"fileSelectionToggle(node)\"></mc-checkbox>\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
                styles: [".tree-example-checkbox{margin-right:8px}"]
            },] }
];
/** @nocollapse */
TreeMultipleChecklistExample.ctorParameters = () => [];

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
class FileNode$1 {
}
/** Flat node with expandable and level information */
class FileFlatNode$1 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$1(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$1();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$1(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$1 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeMultipleKeyboardExample {
    constructor() {
        this.modelValue = [];
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$1();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeMultipleKeyboardExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-multiple-keyboard-example',
                template: "<mc-tree-selection\n    multiple=\"keyboard\"\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TreeMultipleKeyboardExample.ctorParameters = () => [];

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
class FileNode {
}
/** Flat node with expandable and level information */
class FileFlatNode {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria-describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus-monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeOverviewExample {
    constructor() {
        this.modelValue = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlattener"](this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["FlatTreeControl"](this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeFlatDataSource"](this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tree-overview-example',
                template: "<mc-tree-selection\n    [(ngModel)]=\"modelValue\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\">\n\n    <mc-tree-option *mcTreeNodeDef=\"let node\" mcTreeNodePadding [disabled]=\"node.name === 'tests'\">\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n\n    <mc-tree-option *mcTreeNodeDef=\"let node; when: hasChild\" mcTreeNodePadding>\n        <mc-tree-node-toggle [node]=\"node\"></mc-tree-node-toggle>\n\n        <span [innerHTML]=\"treeControl.getViewValue(node)\"></span>\n    </mc-tree-option>\n</mc-tree-selection>\n",
                styles: [""]
            },] }
];
/** @nocollapse */
TreeOverviewExample.ctorParameters = () => [];

/**
 * @title Basic typography
 */
class TypographyOverviewExample {
}
TypographyOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'typography-overview-example',
                template: "<div class=\"typography-group\">\n    <div class=\"mc-caption\">mc-display-3</div>\n    <div class=\"mc-display-3\">Display 3</div>\n\n    <div class=\"mc-caption\">mc-display-2</div>\n    <div class=\"mc-display-2\">Display 2</div>\n\n    <div class=\"mc-caption\">mc-display-1</div>\n    <div class=\"mc-display-1\">Display 1</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-caption\">mc-headline</div>\n    <div class=\"mc-headline\">Headline</div>\n\n    <div class=\"mc-caption\">mc-title</div>\n    <div class=\"mc-title\">Title</div>\n\n    <div class=\"mc-caption\">mc-subheading</div>\n    <div class=\"mc-subheading\">Subheading</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-body\">Body</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-body_strong\">Body strong</div>\n    <div class=\"mc-body_caps\">BODY CAPS</div>\n    <div class=\"mc-body_mono\">Body mono</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-caption\">Caption</div>\n    <div class=\"mc-caption_caps\">CAPTION CAPS</div>\n    <div class=\"mc-caption_mono\">Caption mono</div>\n</div>\n\n<div class=\"typography-group\">\n    <div class=\"mc-small-text\">Small text</div>\n    <div class=\"mc-extra-small-text\">Extra Small text</div>\n</div>\n",
                styles: ["small{color:rgba(0,0,0,.3)}.typography-group{margin-bottom:20px}"]
            },] }
];

function groupValidator() {
    return (g) => {
        var _a, _b;
        const start = (_a = g.get('start')) === null || _a === void 0 ? void 0 : _a.value;
        const end = (_b = g.get('end')) === null || _b === void 0 ? void 0 : _b.value;
        if (IP_PATTERN$1.test(start) && IP_PATTERN$1.test(end)) {
            const parsedStartIp = start.split('.').map((octet) => parseInt(octet, 10));
            const parsedEndIp = end.split('.').map((octet) => parseInt(octet, 10));
            for (let i = 0; i < parsedStartIp.length; i++) {
                if (parsedStartIp[i] > parsedEndIp[i]) {
                    return { range: true };
                }
            }
        }
        return null;
    };
}
function fieldValidator(regex) {
    return (control) => {
        if (!control.value) {
            return null;
        }
        return regex.test(control.value) ? null : { pattern: true };
    };
}
const IP_PATTERN$1 = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
/**
 * @title validation-composite
 */
class ValidationCompositeExample {
    constructor() {
        this.compositeFormGroup = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            start: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [fieldValidator(IP_PATTERN$1)]),
            end: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [fieldValidator(IP_PATTERN$1)])
        }, { updateOn: 'blur', validators: [groupValidator()] });
    }
    onInput(event, tooltip, controlName) {
        const regex = /^[\d\.]+$/g;
        if (!regex.test(event.target.value)) {
            const newValue = event.target.value.replace(/[^\d\.]+/g, '');
            this.compositeFormGroup.controls[controlName].setValue(newValue);
            if (!tooltip.isTooltipOpen) {
                tooltip.show();
                // tslint:disable-next-line:no-magic-numbers
                setTimeout(() => tooltip.hide(), 3000);
            }
        }
    }
}
ValidationCompositeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'validation-composite-example',
                template: "<div class=\"docs-composite-form\">\n    <div class=\"mc-subheading\">\u0414\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u044B IP-\u0430\u0434\u0440\u0435\u0441\u043E\u0432</div>\n\n    <form class=\"docs-form\"\n          [formGroup]=\"compositeFormGroup\"\n          [class.validation-error]=\"compositeFormGroup.errors?.range\"\n          novalidate>\n\n        <div class=\"layout-row\">\n            <div class=\"docs-column\">\n                <div class=\"mc-caption docs-label\">\u041D\u0430\u0447\u0430\u043B\u043E \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430</div>\n                <mc-form-field\n                    mcTooltip\n                    mcTooltipClass=\"mc-tooltip_warning\"\n                    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B \u0438 \u0442\u043E\u0447\u043A\u0438'\"\n                    [mcMouseEnterDelay]=\"10\"\n                    #startTooltip=\"mcTooltip\"\n                    mcTrigger=\"manual\"\n                    mcPlacement=\"bottom\">\n                    <input mcInput formControlName=\"start\" (input)=\"onInput($event, startTooltip, 'start')\">\n\n                    <mc-hint class=\"mc-caption docs-hint\"\n                             *ngIf=\"compositeFormGroup.controls.start.invalid\">\n                        IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0430\u043C RFC\n                    </mc-hint>\n\n                    <mc-cleaner></mc-cleaner>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-column\">\n                <div class=\"mc-caption docs-label\">\u041E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u0435</div>\n                <mc-form-field\n                    mcTooltip\n                    mcTooltipClass=\"mc-tooltip_warning\"\n                    [mcTitle]=\"'\u0422\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440\u044B \u0438 \u0442\u043E\u0447\u043A\u0438'\"\n                    [mcMouseEnterDelay]=\"10\"\n                    #endTooltip=\"mcTooltip\"\n                    mcTrigger=\"manual\"\n                    mcPlacement=\"bottom\">\n                    <input mcInput formControlName=\"end\" (input)=\"onInput($event, endTooltip, 'end')\">\n\n                    <mc-hint class=\"mc-caption docs-hint\"\n                             *ngIf=\"compositeFormGroup.controls.end.invalid\">\n                        IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0430\u043C RFC\n                    </mc-hint>\n\n                    <mc-cleaner></mc-cleaner>\n                </mc-form-field>\n            </div>\n        </div>\n\n        <mc-hint class=\"mc-caption docs-hint\"\n                 *ngIf=\"compositeFormGroup.errors?.range\">\n            IP-\u0430\u0434\u0440\u0435\u0441 \u043E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u044F \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0430\u0447\u0430\u043B\u0430\n        </mc-hint>\n    </form>\n</div>\n",
                styles: [".docs-label{margin-bottom:4px;color:#999}.docs-hint{color:#e04d36}.docs-composite-form{width:500px;margin:8px 8px 40px}.docs-column{width:200px;margin-right:16px}.layout-row{margin-bottom:4px}.validation-error{background-color:#fcefec;border-radius:4px}.mc-subheading{margin-bottom:16px}.docs-form{padding:8px}"]
            },] }
];
/** @nocollapse */
ValidationCompositeExample.ctorParameters = () => [];
ValidationCompositeExample.propDecorators = {
    startTooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['startTooltip', { static: false },] }],
    endTooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['endTooltip', { static: false },] }]
};

/**
 * @title validation-global
 */
class ValidationGlobalExample {
    constructor() {
        this.showServerErrors = false;
        this.inProgress = false;
        this.globalErrorForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
            thirdName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
        });
    }
    submitGlobalErrorForm() {
        this.showServerErrors = false;
        this.inProgress = true;
        setTimeout(() => {
            this.showServerErrors = true;
            this.inProgress = false;
        }, 
        // tslint:disable-next-line:no-magic-numbers
        1000);
    }
}
ValidationGlobalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'validation-global-example',
                template: "<div class=\"layout-margin docs-width\">\n    <div class=\"mc-alert mc-alert_error\" *ngIf=\"showServerErrors\">\n        <i mc-icon=\"mc-info_16\" [color]=\"'error'\" class=\"mc-alert__icon\"></i>\n        <div class=\"mc-body\">\n            <div class=\"mc-subheading docs-subheading\"><b>\u041D\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043E\u0442\u0432\u0435\u0442 \u043E\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430</b></div>\n            \u041F\u0440\u0438 \u043F\u043E\u043F\u044B\u0442\u043A\u0435 \u043E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0434\u0430\u043D\u043D\u044B\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043D\u0435 \u043E\u0442\u0432\u0435\u0442\u0438\u043B, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430\n        </div>\n    </div>\n\n    <form [formGroup]=\"globalErrorForm\" (ngSubmit)=\"submitGlobalErrorForm()\" novalidate>\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"firstName\">\n            </mc-form-field>\n        </div>\n\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"lastName\">\n            </mc-form-field>\n        </div>\n\n        <button\n            mc-button\n            [color]=\"'primary'\"\n            type=\"submit\"\n            [class.mc-progress]=\"inProgress\"\n            [disabled]=\"inProgress\">\n            \u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C\n        </button>\n    </form>\n</div>\n",
                styles: [".docs-row{margin-bottom:16px}.docs-label{margin-bottom:4px;color:#999}.docs-width{width:372px}.mc-alert{margin-bottom:16px}.docs-subheading{margin-bottom:4px}"]
            },] }
];
/** @nocollapse */
ValidationGlobalExample.ctorParameters = () => [];

const IP_PATTERN = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
/**
 * @title validation-on-blur
 */
class ValidationOnBlurExample {
    constructor() {
        this.ipAddress = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].pattern(IP_PATTERN)]);
        // tslint:disable-next-line:no-magic-numbers
        this.frequency = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].max(24)]);
    }
}
ValidationOnBlurExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'validation-on-blur-example',
                template: "<div class=\"docs-margin docs-width\">\n    <div class=\"docs-row\">\n        <div class=\"mc-caption docs-label\">IP-\u0430\u0434\u0440\u0435\u0441</div>\n        <mc-form-field>\n            <input mcInput [formControl]=\"ipAddress\">\n            <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"ipAddress.invalid\">IP-\u0430\u0434\u0440\u0435\u0441 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0430\u043C RFC</mc-hint>\n\n            <mc-cleaner></mc-cleaner>\n        </mc-form-field>\n    </div>\n\n    <div class=\"docs-row\">\n        <div class=\"mc-caption docs-label\">\u0427\u0430\u0441\u0442\u043E\u0442\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0439 (\u0447\u0430\u0441\u044B)</div>\n        <mc-form-field>\n            <input type=\"number\" mcInput [formControl]=\"frequency\">\n            <mc-hint class=\"mc-caption\">\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043E\u0442 1 \u0434\u043E 24</mc-hint>\n            <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"frequency.errors?.min\">\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: 1 \u0447\u0430\u0441</mc-hint>\n            <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"frequency.errors?.max\">\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: 24 \u0447\u0430\u0441\u0430</mc-hint>\n        </mc-form-field>\n    </div>\n</div>\n",
                styles: [".docs-margin{margin:8px}.docs-row{margin-bottom:16px}.docs-label{margin-bottom:4px;color:#999}.docs-width{width:400px}.docs-hint{color:#e04d36}"]
            },] }
];
/** @nocollapse */
ValidationOnBlurExample.ctorParameters = () => [];

/**
 * @title validation-on-type
 */
class ValidationOnTypeExample {
    constructor() {
        this.checkOnFlyForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            folderName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
        });
    }
    onInput(event) {
        const regex = /^[\d\w]+$/g;
        if (!regex.test(event.target.value)) {
            const newValue = event.target.value.replace(/[^\d\w]+/g, '');
            this.checkOnFlyForm.controls.folderName.setValue(newValue);
            if (!this.tooltip.isTooltipOpen) {
                this.tooltip.show();
                // tslint:disable-next-line:no-magic-numbers
                setTimeout(() => this.tooltip.hide(), 3000);
            }
        }
    }
}
ValidationOnTypeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'validation-on-type-example',
                template: "<div class=\"layout-margin docs-width\">\n    <form [formGroup]=\"checkOnFlyForm\" novalidate>\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u043F\u0430\u043F\u043A\u0438</div>\n            <mc-form-field\n                mcTooltip\n                mcTooltipClass=\"mc-tooltip_warning\"\n                [mcTitle]=\"'\u0411\u0443\u043A\u0432\u044B \u0438 \u0446\u0438\u0444\u0440\u044B'\"\n                [mcMouseEnterDelay]=\"10\"\n                #tooltip=\"mcTooltip\"\n                mcTrigger=\"manual\"\n                mcPlacement=\"bottom\">\n                <input mcInput formControlName=\"folderName\" (input)=\"onInput($event)\">\n\n                <mc-cleaner></mc-cleaner>\n            </mc-form-field>\n        </div>\n    </form>\n</div>\n",
                styles: [".docs-row{margin-bottom:16px}.docs-label{margin-bottom:4px;color:#999}.docs-width{width:400px}"]
            },] }
];
/** @nocollapse */
ValidationOnTypeExample.ctorParameters = () => [];
ValidationOnTypeExample.propDecorators = {
    tooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tooltip', { static: false },] }]
};

/**
 * @title validation-overview
 */
class ValidationOverviewExample {
    constructor() {
        this.feedbackFormWithHints = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            thirdName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email]),
            reason: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            rating: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            comment: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
        });
        this.feedbackForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            thirdName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email]),
            reason: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            rating: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]),
            comment: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('')
        });
    }
}
ValidationOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'validation-overview-example',
                template: "<div class=\"docs-margin\">\n    <div class=\"docs-width\">\n        <div class=\"mc-headline\">\u0412\u0430\u0440\u0438\u0430\u0446\u0438\u044F \u0441 \u0442\u0435\u043A\u0441\u0442\u0430\u043C\u0438 \u043E\u0448\u0438\u0431\u043E\u043A</div>\n\n        <div class=\"mc-subheading\">\u0424\u043E\u0440\u043C\u0430 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u0439 \u0441\u0432\u044F\u0437\u0438</div>\n\n        <form [formGroup]=\"feedbackFormWithHints\" novalidate>\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"firstName\">\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.firstName.invalid\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043C\u044F</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"lastName\">\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.lastName.invalid\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448\u0443 \u0444\u0430\u043C\u0438\u043B\u0438\u044E</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"thirdName\" placeholder=\"\u041D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0410\u0434\u0440\u0435\u0441 \u044D\u043B. \u043F\u043E\u0447\u0442\u044B</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"email\">\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.email.invalid\">\u041E\u0441\u0442\u0430\u0432\u044C\u0442\u0435 \u0441\u0432\u043E\u0439 \u0430\u0434\u0440\u0435\u0441 \u044D\u043B. \u043F\u043E\u0447\u0442\u044B</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041F\u0440\u0438\u0447\u0438\u043D\u0430 \u043E\u0431\u0440\u0430\u0449\u0435\u043D\u0438\u044F</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"reason\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.reason.invalid\">\u0423\u043A\u0430\u0436\u0438\u0442\u0435 \u043F\u0440\u0438\u0447\u0438\u043D\u0443 \u043E\u0431\u0440\u0430\u0449\u0435\u043D\u0438\u044F</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0412\u0430\u0448\u0430 \u043E\u0446\u0435\u043D\u043A\u0430</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"rating\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n\n                    <mc-hint class=\"mc-caption docs-hint\" *ngIf=\"feedbackFormWithHints.controls.rating.invalid\">\u0414\u0430\u0439\u0442\u0435 \u043E\u0446\u0435\u043D\u043A\u0443 \u0440\u0430\u0431\u043E\u0442\u044B \u043D\u0430\u0448\u0438\u0445 \u0441\u043F\u0435\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u043E\u0432</mc-hint>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439</div>\n                <mc-form-field>\n                    <textarea mcTextarea formControlName=\"comment\"></textarea>\n                </mc-form-field>\n            </div>\n\n            <button mc-button [color]=\"'primary'\" type=\"submit\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n        </form>\n    </div>\n</div>\n\n<div class=\"docs-margin\">\n    <div class=\"docs-width\">\n        <div class=\"mc-headline\">\u0412\u0430\u0440\u0438\u0430\u0446\u0438\u044F \u0431\u0435\u0437 \u0442\u0435\u043A\u0441\u0442\u0430 \u043E\u0448\u0438\u0431\u043E\u043A</div>\n\n        <div class=\"mc-subheading\">\u0424\u043E\u0440\u043C\u0430 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u0439 \u0441\u0432\u044F\u0437\u0438</div>\n\n        <form [formGroup]=\"feedbackForm\" novalidate>\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"firstName\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"lastName\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"thirdName\" placeholder=\"\u041D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0410\u0434\u0440\u0435\u0441 \u044D\u043B. \u043F\u043E\u0447\u0442\u044B</div>\n                <mc-form-field>\n                    <input mcInput formControlName=\"email\">\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041F\u0440\u0438\u0447\u0438\u043D\u0430 \u043E\u0431\u0440\u0430\u0449\u0435\u043D\u0438\u044F</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"reason\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u0412\u0430\u0448\u0430 \u043E\u0446\u0435\u043D\u043A\u0430</div>\n                <mc-form-field>\n                    <mc-select formControlName=\"rating\">\n                        <mc-option value=\"1\">1</mc-option>\n                        <mc-option value=\"2\">2</mc-option>\n                        <mc-option value=\"3\">3</mc-option>\n                    </mc-select>\n                </mc-form-field>\n            </div>\n\n            <div class=\"docs-row\">\n                <div class=\"mc-caption docs-label\">\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439</div>\n                <mc-form-field>\n                    <textarea mcTextarea formControlName=\"comment\"></textarea>\n                </mc-form-field>\n            </div>\n\n            <button mc-button [color]=\"'primary'\" type=\"submit\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n        </form>\n    </div>\n</div>\n",
                styles: [".docs-row{margin-bottom:16px}.docs-label{margin-bottom:4px;color:#999}.docs-width{width:332px}.docs-hint{color:#e04d36}.layout-row{margin-bottom:4px}.docs-margin{margin:8px 8px 32px}.mc-headline{margin-bottom:68px}.mc-subheading{margin-bottom:16px}"]
            },] }
];
/** @nocollapse */
ValidationOverviewExample.ctorParameters = () => [];

function emptyFormValidator() {
    return (g) => {
        var _a, _b;
        return ((_a = g.get('firstName')) === null || _a === void 0 ? void 0 : _a.value) && ((_b = g.get('lastName')) === null || _b === void 0 ? void 0 : _b.value) ? null : { empty: true };
    };
}
/**
 * @title validation-small
 */
class ValidationSmallExample {
    constructor() {
        this.smallForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            firstName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required),
            lastName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required)
        }, emptyFormValidator());
    }
}
ValidationSmallExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'validation-small-example',
                template: "<div class=\"layout-margin docs-width\">\n    <form [formGroup]=\"smallForm\" novalidate>\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0418\u043C\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"firstName\">\n            </mc-form-field>\n        </div>\n\n        <div class=\"docs-row\">\n            <div class=\"mc-caption docs-label\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F</div>\n            <mc-form-field>\n                <input mcInput formControlName=\"lastName\">\n            </mc-form-field>\n        </div>\n\n        <button mc-button [color]=\"'primary'\" type=\"submit\" [disabled]=\"smallForm.errors?.empty\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n    </form>\n</div>\n",
                styles: [".docs-row{margin-bottom:16px}.docs-label{margin-bottom:4px;color:#999}.docs-width{width:400px}"]
            },] }
];
/** @nocollapse */
ValidationSmallExample.ctorParameters = () => [];

const EXAMPLES$w = [
    AlertsOverviewExample
];
class AlertsExamplesModule {
}
AlertsExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"],
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__["McLinkModule"]
                ],
                declarations: EXAMPLES$w,
                exports: EXAMPLES$w
            },] }
];

const EXAMPLES$v = [
    AutocompleteOverviewExample
];
class AutocompleteExamplesModule {
}
AutocompleteExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_autocomplete__WEBPACK_IMPORTED_MODULE_13__["McAutocompleteModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"]
                ],
                declarations: EXAMPLES$v,
                exports: EXAMPLES$v
            },] }
];

const EXAMPLES$u = [
    BadgesOverviewExample
];
class BadgesExamplesModule {
}
BadgesExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: EXAMPLES$u,
                exports: EXAMPLES$u
            },] }
];

const EXAMPLES$t = [
    ButtonToggleOverviewExample,
    ButtonToggleMultipleOverviewExample
];
class ButtonToggleExamplesModule {
}
ButtonToggleExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_27__["McButtonToggleModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$t,
                exports: EXAMPLES$t
            },] }
];

const EXAMPLES$s = [
    ButtonIconExample,
    ButtonColorsExample,
    ButtonOverviewExample,
    ButtonProgressExample
];
class ButtonExamplesModule {
}
ButtonExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$s,
                exports: EXAMPLES$s
            },] }
];

const EXAMPLES$r = [
    CardOverviewExample
];
class CardExamplesModule {
}
CardExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_card__WEBPACK_IMPORTED_MODULE_29__["McCardModule"]
                ],
                declarations: EXAMPLES$r,
                exports: EXAMPLES$r
            },] }
];

const EXAMPLES$q = [
    CheckboxIndeterminateExample,
    CheckboxOverviewExample
];
class CheckboxExamplesModule {
}
CheckboxExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]
                ],
                declarations: EXAMPLES$q,
                exports: EXAMPLES$q
            },] }
];

const EXAMPLES$p = [
    AbsoluteDateFormatterExample,
    RelativeDateFormatterExample,
    RangeDateFormatterExample
];
class DateFormatterExamplesModule {
}
DateFormatterExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["McLuxonDateModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["McFormattersModule"]
                ],
                declarations: EXAMPLES$p,
                exports: EXAMPLES$p
            },] }
];

const EXAMPLES$o = [
    DatepickerDisabledExample,
    DatepickerLanguageExample,
    DatepickerOverviewExample,
    DatepickerYearExample,
    DatepickerCustomExample
];
class DatepickerExamplesModule {
}
DatepickerExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                    _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["McLuxonDateModule"],
                    _ptsecurity_mosaic_datepicker__WEBPACK_IMPORTED_MODULE_31__["McDatepickerModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"],
                    _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McToolTipModule"]
                ],
                declarations: EXAMPLES$o,
                exports: EXAMPLES$o
            },] }
];

const EXAMPLES$n = [
    DropdownNestedExample,
    DropdownOverviewExample
];
class DropdownExamplesModule {
}
DropdownExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"],
                    _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_33__["McDropdownModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__["McLinkModule"]
                ],
                declarations: EXAMPLES$n,
                exports: EXAMPLES$n
            },] }
];

const EXAMPLES$m = [
    InputOverviewExample,
    InputNumberOverviewExample
];
class InputExamplesModule {
}
InputExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"]
                ],
                declarations: EXAMPLES$m,
                exports: EXAMPLES$m
            },] }
];

const EXAMPLES$l = [
    LayoutFlexOverviewExample,
    LayoutFlexAlignmentExample,
    LayoutFlexBehaviourModifiersExample,
    LayoutFlexOffsetsExample,
    LayoutFlexOrderExample
];
class FlexLayoutExamplesModule {
}
FlexLayoutExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"],
                    _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$l,
                exports: EXAMPLES$l
            },] }
];

const EXAMPLES$k = [
    LinkOverviewExample,
    LinkPseudoExample,
    LinkGeneralExample,
    LinkExternalExample,
    LinkTargetBlankExample,
    LinkApplicationExample,
    LinkPrintExample,
    LinkMultiLineExample,
    LinkPrepositionsExample,
    LinkIconsExample,
    LinkColorExample,
    LinkVisitedExample,
    LinkDisabledExample
];
class LinkExamplesModule {
}
LinkExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_24__["McLinkModule"]
                ],
                declarations: EXAMPLES$k,
                exports: EXAMPLES$k
            },] }
];

const EXAMPLES$j = [
    ListOverviewExample,
    ListMultipleCheckboxExample,
    ListMultipleKeyboardExample,
    ListGroupsExample
];
class ListExamplesModule {
}
ListExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_list__WEBPACK_IMPORTED_MODULE_35__["McListModule"]
                ],
                declarations: EXAMPLES$j,
                exports: EXAMPLES$j
            },] }
];

const EXAMPLES$i = [
    ModalOverviewExample,
    ModalComponentExample,
    McModalCustomComponent,
    ModalTemplateExample
];
class ModalExamplesModule {
}
ModalExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_modal__WEBPACK_IMPORTED_MODULE_8__["McModalModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$i,
                exports: EXAMPLES$i,
                entryComponents: [
                    McModalCustomComponent
                ]
            },] }
];

const EXAMPLES$h = [
    NavbarOverviewExample
];
class NavbarExamplesModule {
}
NavbarExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"],
                    _ptsecurity_mosaic_navbar__WEBPACK_IMPORTED_MODULE_36__["McNavbarModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$h,
                exports: EXAMPLES$h
            },] }
];

class NumberFormatterExamplesModule {
}
NumberFormatterExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["McFormattersModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]
                ],
                declarations: [NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent],
                exports: [NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent]
            },] }
];

const EXAMPLES$g = [
    PopoverOverviewExample,
    PopoverInstanceExample
];
class PopoverExamplesModule {
}
PopoverExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"],
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_37__["A11yModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"],
                    _ptsecurity_mosaic_popover__WEBPACK_IMPORTED_MODULE_9__["McPopoverModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_splitter__WEBPACK_IMPORTED_MODULE_38__["McSplitterModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"]
                ],
                declarations: EXAMPLES$g,
                exports: EXAMPLES$g
            },] }
];

const EXAMPLES$f = [
    ProgressBarIndeterminateExample,
    ProgressBarOverviewExample
];
class ProgressBarExamplesModule {
}
ProgressBarExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_progress_bar__WEBPACK_IMPORTED_MODULE_39__["McProgressBarModule"]
                ],
                declarations: EXAMPLES$f,
                exports: EXAMPLES$f
            },] }
];

const EXAMPLES$e = [
    ProgressSpinnerIndeterminateExample,
    ProgressSpinnerOverviewExample
];
class ProgressSpinnerExamplesModule {
}
ProgressSpinnerExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_progress_spinner__WEBPACK_IMPORTED_MODULE_40__["McProgressSpinnerModule"]
                ],
                declarations: EXAMPLES$e,
                exports: EXAMPLES$e
            },] }
];

const EXAMPLES$d = [
    RadioOverviewExample
];
class RadioExamplesModule {
}
RadioExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"],
                    _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"]
                ],
                declarations: EXAMPLES$d,
                exports: EXAMPLES$d
            },] }
];

const EXAMPLES$c = [
    SelectOverviewExample,
    SelectMultipleOverviewExample,
    SelectSearchOverviewExample,
    SelectGroupsExample,
    SelectVirtualScrollExample
];
class SelectExamplesModule {
}
SelectExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__["ScrollingModule"]
                ],
                declarations: EXAMPLES$c,
                exports: EXAMPLES$c
            },] }
];

const EXAMPLES$b = [
    SidepanelOverviewExample,
    SidepanelComponentExample,
    SidepanelExampleCustomComponent
];
class SidepanelExamplesModule {
}
SidepanelExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"],
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_sidepanel__WEBPACK_IMPORTED_MODULE_12__["McSidepanelModule"]
                ],
                declarations: EXAMPLES$b,
                exports: EXAMPLES$b
            },] }
];

const EXAMPLES$a = [
    SplitterOverviewExample,
    SplitterFixedExample,
    SplitterVerticalExample,
    SplitterNestedExample
];
class SplitterExamplesModule {
}
SplitterExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_splitter__WEBPACK_IMPORTED_MODULE_38__["McSplitterModule"]
                ],
                declarations: EXAMPLES$a,
                exports: EXAMPLES$a
            },] }
];

const EXAMPLES$9 = [
    TableOverviewExample,
    TableWithBordersExample
];
class TableExamplesModule {
}
TableExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"], _ptsecurity_mosaic_table__WEBPACK_IMPORTED_MODULE_41__["McTableModule"]],
                declarations: EXAMPLES$9,
                exports: EXAMPLES$9
            },] }
];

const EXAMPLES$8 = [
    TabsOverviewExample,
    TabsLightExample,
    TabsStretchExample
];
class TabsExamplesModule {
}
TabsExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"],
                    _ptsecurity_mosaic_tabs__WEBPACK_IMPORTED_MODULE_42__["McTabsModule"]
                ],
                declarations: EXAMPLES$8,
                exports: EXAMPLES$8
            },] }
];

const EXAMPLES$7 = [
    TagsOverviewExample,
    TagsInputExample,
    TagsListExample,
    TagsAutocompleteExample
];
class TagsExamplesModule {
}
TagsExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_20__["BrowserModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                    _ptsecurity_mosaic_autocomplete__WEBPACK_IMPORTED_MODULE_13__["McAutocompleteModule"],
                    _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_14__["McTagsModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$7,
                exports: EXAMPLES$7
            },] }
];

const EXAMPLES$6 = [
    TextAreaOverviewExample
];
class TextAreaExamplesModule {
}
TextAreaExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_textarea__WEBPACK_IMPORTED_MODULE_43__["McTextareaModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"]
                ],
                declarations: EXAMPLES$6,
                exports: EXAMPLES$6
            },] }
];

const EXAMPLES$5 = [
    TimepickerOverviewExample,
    TimepickerRangeExample,
    TimepickerVariationsExample,
    TimepickerValidationSymbolsExample
];
class TimepickerExamplesModule {
}
TimepickerExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_luxon_adapter_adapter__WEBPACK_IMPORTED_MODULE_5__["McLuxonDateModule"],
                    _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McToolTipModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"],
                    _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"],
                    _ptsecurity_mosaic_timepicker__WEBPACK_IMPORTED_MODULE_44__["McTimepickerModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_radio__WEBPACK_IMPORTED_MODULE_32__["McRadioModule"]
                ],
                declarations: EXAMPLES$5,
                exports: EXAMPLES$5
            },] }
];

const EXAMPLES$4 = [
    ToggleOverviewExample
];
class ToggleExamplesModule {
}
ToggleExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_toggle__WEBPACK_IMPORTED_MODULE_45__["McToggleModule"]
                ],
                declarations: EXAMPLES$4,
                exports: EXAMPLES$4
            },] }
];

const EXAMPLES$3 = [
    TooltipOverviewExample,
    TooltipArrowPlacementExample,
    TooltipScrollableExample
];
class TooltipExamplesModule {
}
TooltipExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_21__["BrowserAnimationsModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_37__["A11yModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McToolTipModule"],
                    _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_11__["CdkScrollableModule"]
                ],
                declarations: EXAMPLES$3,
                exports: EXAMPLES$3
            },] }
];

const EXAMPLES$2 = [
    TreeSelectOverviewExample,
    TreeSelectMultipleOverviewExample
];
class TreeSelectExamplesModule {
}
TreeSelectExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeModule"],
                    _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_17__["CdkTreeModule"],
                    _ptsecurity_mosaic_tree_select__WEBPACK_IMPORTED_MODULE_46__["McTreeSelectModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"]
                ],
                declarations: EXAMPLES$2,
                exports: EXAMPLES$2
            },] }
];

const EXAMPLES$1 = [
    TreeOverviewExample,
    TreeMultipleCheckboxExample,
    TreeMultipleChecklistExample,
    TreeMultipleKeyboardExample,
    TreeFilteringExample
];
class TreeExamplesModule {
}
TreeExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_18__["McTreeModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__["McHighlightModule"],
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_28__["McCheckboxModule"]
                ],
                declarations: EXAMPLES$1,
                exports: EXAMPLES$1
            },] }
];

const EXAMPLES = [
    TypographyOverviewExample
];
class TypographyExamplesModule {
}
TypographyExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"]
                ],
                declarations: EXAMPLES,
                exports: EXAMPLES
            },] }
];

class ValidationExamplesModule {
}
ValidationExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_30__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_26__["McInputModule"],
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_25__["McFormFieldModule"],
                    _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_16__["McToolTipModule"],
                    _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_34__["McSelectModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_23__["McIconModule"],
                    _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_22__["McButtonModule"],
                    _ptsecurity_mosaic_textarea__WEBPACK_IMPORTED_MODULE_43__["McTextareaModule"]
                ],
                declarations: [
                    ValidationOverviewExample,
                    ValidationCompositeExample,
                    ValidationGlobalExample,
                    ValidationOnBlurExample,
                    ValidationOnTypeExample,
                    ValidationSmallExample
                ],
                exports: [
                    ValidationOverviewExample,
                    ValidationCompositeExample,
                    ValidationGlobalExample,
                    ValidationOnBlurExample,
                    ValidationOnTypeExample,
                    ValidationSmallExample
                ]
            },] }
];

/* tslint:disable */
const EXAMPLE_COMPONENTS = { "alerts-overview": { "title": "Alerts", "component": AlertsOverviewExample, "additionalFiles": [], "selectorName": "" }, "autocomplete-overview": { "title": "Basic Input", "component": AutocompleteOverviewExample, "additionalFiles": [], "selectorName": "" }, "badges-overview": { "title": "Badges", "component": BadgesOverviewExample, "additionalFiles": [], "selectorName": "" }, "button-toggle-multiple-overview": { "title": "Basic button-toggle", "component": ButtonToggleMultipleOverviewExample, "additionalFiles": [], "selectorName": "" }, "button-toggle-overview": { "title": "button-toggle", "component": ButtonToggleOverviewExample, "additionalFiles": [], "selectorName": "" }, "button-colors": { "title": "Button's colors", "component": ButtonColorsExample, "additionalFiles": [], "selectorName": "" }, "button-icon": { "title": "Icon button", "component": ButtonIconExample, "additionalFiles": [], "selectorName": "" }, "button-overview": { "title": "Basic button", "component": ButtonOverviewExample, "additionalFiles": [], "selectorName": "" }, "button-progress": { "title": "Progress button", "component": ButtonProgressExample, "additionalFiles": [], "selectorName": "" }, "card-overview": { "title": "Basic Card", "component": CardOverviewExample, "additionalFiles": [], "selectorName": "" }, "checkbox-indeterminate": { "title": "Indeterminate checkbox", "component": CheckboxIndeterminateExample, "additionalFiles": [], "selectorName": "" }, "checkbox-overview": { "title": "Basic checkboxes", "component": CheckboxOverviewExample, "additionalFiles": [], "selectorName": "" }, "absolute-date-formatter": { "title": "Basic progress absolute-date-formatter", "component": AbsoluteDateFormatterExample, "additionalFiles": [], "selectorName": "" }, "range-date-formatter": { "title": "Basic progress range-date-formatter", "component": RangeDateFormatterExample, "additionalFiles": [], "selectorName": "" }, "relative-date-formatter": { "title": "Basic progress relative-date-formatter", "component": RelativeDateFormatterExample, "additionalFiles": [], "selectorName": "" }, "datepicker-custom": { "title": "Custom localeData and format datepicker", "component": DatepickerCustomExample, "additionalFiles": [], "selectorName": "" }, "datepicker-disabled": { "title": "Disabled datepicker", "component": DatepickerDisabledExample, "additionalFiles": [], "selectorName": "" }, "datepicker-language": { "title": "Multy language datepicker", "component": DatepickerLanguageExample, "additionalFiles": [], "selectorName": "" }, "datepicker-overview": { "title": "Datepicker", "component": DatepickerOverviewExample, "additionalFiles": [], "selectorName": "" }, "datepicker-year": { "title": "Datepicker starts with year", "component": DatepickerYearExample, "additionalFiles": [], "selectorName": "" }, "dropdown-nested": { "title": "Nested dropdown", "component": DropdownNestedExample, "additionalFiles": [], "selectorName": "" }, "dropdown-overview": { "title": "Basic dropdown", "component": DropdownOverviewExample, "additionalFiles": [], "selectorName": "" }, "input-number-overview": { "title": "Basic Input", "component": InputNumberOverviewExample, "additionalFiles": [], "selectorName": "" }, "input-overview": { "title": "Basic Input", "component": InputOverviewExample, "additionalFiles": [], "selectorName": "" }, "layout-flex-alignment": { "title": "Flex layout", "component": LayoutFlexAlignmentExample, "additionalFiles": [], "selectorName": "" }, "layout-flex-behaviour-modifiers": { "title": "Flex layout", "component": LayoutFlexBehaviourModifiersExample, "additionalFiles": [], "selectorName": "" }, "layout-flex-offsets": { "title": "Flex layout", "component": LayoutFlexOffsetsExample, "additionalFiles": [], "selectorName": "" }, "layout-flex-order": { "title": "Flex layout", "component": LayoutFlexOrderExample, "additionalFiles": [], "selectorName": "" }, "layout-flex-overview": { "title": "Flex layout", "component": LayoutFlexOverviewExample, "additionalFiles": [], "selectorName": "" }, "link-application": { "title": "Basic link", "component": LinkApplicationExample, "additionalFiles": [], "selectorName": "" }, "link-color": { "title": "Basic link", "component": LinkColorExample, "additionalFiles": [], "selectorName": "" }, "link-disabled": { "title": "Pseudo link", "component": LinkDisabledExample, "additionalFiles": [], "selectorName": "" }, "link-external": { "title": "Basic link", "component": LinkExternalExample, "additionalFiles": [], "selectorName": "" }, "link-general": { "title": "Basic link", "component": LinkGeneralExample, "additionalFiles": [], "selectorName": "" }, "link-icons": { "title": "Basic link", "component": LinkIconsExample, "additionalFiles": [], "selectorName": "" }, "link-multi-line": { "title": "Basic link", "component": LinkMultiLineExample, "additionalFiles": [], "selectorName": "" }, "link-overview": { "title": "Basic link", "component": LinkOverviewExample, "additionalFiles": [], "selectorName": "" }, "link-prepositions": { "title": "Basic link", "component": LinkPrepositionsExample, "additionalFiles": [], "selectorName": "" }, "link-print": { "title": "Basic link", "component": LinkPrintExample, "additionalFiles": [], "selectorName": "" }, "link-pseudo": { "title": "Pseudo link", "component": LinkPseudoExample, "additionalFiles": [], "selectorName": "" }, "link-target-blank": { "title": "Basic link", "component": LinkTargetBlankExample, "additionalFiles": [], "selectorName": "" }, "link-visited": { "title": "Pseudo link", "component": LinkVisitedExample, "additionalFiles": [], "selectorName": "" }, "list-groups": { "title": "Basic list", "component": ListGroupsExample, "additionalFiles": [], "selectorName": "" }, "list-multiple-checkbox": { "title": "Basic list", "component": ListMultipleCheckboxExample, "additionalFiles": [], "selectorName": "" }, "list-multiple-keyboard": { "title": "Basic list", "component": ListMultipleKeyboardExample, "additionalFiles": [], "selectorName": "" }, "list-overview": { "title": "Basic list", "component": ListOverviewExample, "additionalFiles": [], "selectorName": "" }, "modal-component": { "title": "Component Modal", "component": ModalComponentExample, "additionalFiles": [], "selectorName": "ModalComponentExample, McModalCustomComponent" }, "modal-overview": { "title": "Basic Modal", "component": ModalOverviewExample, "additionalFiles": [], "selectorName": "" }, "modal-template": { "title": "Template Modal", "component": ModalTemplateExample, "additionalFiles": [], "selectorName": "" }, "navbar-overview": { "title": "Navbar", "component": NavbarOverviewExample, "additionalFiles": [], "selectorName": "" }, "number-formatter-overview": { "title": "Basic progress number-formatter", "component": NumberFormatterOverviewExample, "additionalFiles": ["formatters-template.html", "formatters-template.html"], "selectorName": "NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent" }, "popover-instance": { "title": "popover-instance", "component": PopoverInstanceExample, "additionalFiles": [], "selectorName": "" }, "popover-overview": { "title": "Basic popover", "component": PopoverOverviewExample, "additionalFiles": [], "selectorName": "" }, "progress-bar-indeterminate": { "title": "Indeterminate progress bar", "component": ProgressBarIndeterminateExample, "additionalFiles": [], "selectorName": "" }, "progress-bar-overview": { "title": "Basic progress bar", "component": ProgressBarOverviewExample, "additionalFiles": [], "selectorName": "" }, "progress-spinner-indeterminate": { "title": "Indeterminate progress spinner", "component": ProgressSpinnerIndeterminateExample, "additionalFiles": [], "selectorName": "" }, "progress-spinner-overview": { "title": "Basic progress spinner", "component": ProgressSpinnerOverviewExample, "additionalFiles": [], "selectorName": "" }, "radio-overview": { "title": "Basic radio", "component": RadioOverviewExample, "additionalFiles": [], "selectorName": "" }, "select-groups": { "title": "Basic Select", "component": SelectGroupsExample, "additionalFiles": [], "selectorName": "" }, "select-multiple-overview": { "title": "Basic Select", "component": SelectMultipleOverviewExample, "additionalFiles": [], "selectorName": "" }, "select-overview": { "title": "Basic Select", "component": SelectOverviewExample, "additionalFiles": [], "selectorName": "" }, "select-search-overview": { "title": "Basic Select", "component": SelectSearchOverviewExample, "additionalFiles": [], "selectorName": "" }, "select-virtual-scroll": { "title": "select-virtual-scroll", "component": SelectVirtualScrollExample, "additionalFiles": [], "selectorName": "" }, "sidepanel-component": { "title": "Template Modal", "component": SidepanelComponentExample, "additionalFiles": [], "selectorName": "SidepanelComponentExample, SidepanelExampleCustomComponent" }, "sidepanel-overview": { "title": "Template Modal", "component": SidepanelOverviewExample, "additionalFiles": [], "selectorName": "" }, "splitter-fixed": { "title": "Basic Splitter", "component": SplitterFixedExample, "additionalFiles": [], "selectorName": "" }, "splitter-nested": { "title": "Basic Splitter", "component": SplitterNestedExample, "additionalFiles": [], "selectorName": "" }, "splitter-overview": { "title": "Basic Splitter", "component": SplitterOverviewExample, "additionalFiles": [], "selectorName": "" }, "splitter-vertical": { "title": "Basic Splitter", "component": SplitterVerticalExample, "additionalFiles": [], "selectorName": "" }, "table-overview": { "title": "Basic Table", "component": TableOverviewExample, "additionalFiles": [], "selectorName": "" }, "table-with-borders": { "title": "Basic Table", "component": TableWithBordersExample, "additionalFiles": [], "selectorName": "" }, "tabs-light": { "title": "Navbar", "component": TabsLightExample, "additionalFiles": [], "selectorName": "" }, "tabs-overview": { "title": "Tabs", "component": TabsOverviewExample, "additionalFiles": [], "selectorName": "" }, "tabs-stretch": { "title": "Navbar", "component": TabsStretchExample, "additionalFiles": [], "selectorName": "" }, "tags-autocomplete": { "title": "Basic tags autocomplete", "component": TagsAutocompleteExample, "additionalFiles": [], "selectorName": "" }, "tags-input": { "title": "Basic tags input", "component": TagsInputExample, "additionalFiles": [], "selectorName": "" }, "tags-list": { "title": "Basic tags list", "component": TagsListExample, "additionalFiles": [], "selectorName": "" }, "tags-overview": { "title": "Basic tags", "component": TagsOverviewExample, "additionalFiles": [], "selectorName": "" }, "text-area-overview": { "title": "Basic textarea", "component": TextAreaOverviewExample, "additionalFiles": [], "selectorName": "" }, "timepicker-overview": { "title": "Timepicker overview", "component": TimepickerOverviewExample, "additionalFiles": [], "selectorName": "" }, "timepicker-range": { "title": "Timepicker range", "component": TimepickerRangeExample, "additionalFiles": [], "selectorName": "" }, "timepicker-validation-symbols": { "title": "Timepicker overview", "component": TimepickerValidationSymbolsExample, "additionalFiles": [], "selectorName": "" }, "timepicker-variations": { "title": "Timepicker overview", "component": TimepickerVariationsExample, "additionalFiles": [], "selectorName": "" }, "toggle-overview": { "title": "Basic toggle", "component": ToggleOverviewExample, "additionalFiles": [], "selectorName": "" }, "tooltip-arrow-placement": { "title": "Basic tooltip with Arrow Placement", "component": TooltipArrowPlacementExample, "additionalFiles": [], "selectorName": "" }, "tooltip-overview": { "title": "Basic tooltip", "component": TooltipOverviewExample, "additionalFiles": [], "selectorName": "" }, "tooltip-scrollable": { "title": "Basic scrollable tooltip", "component": TooltipScrollableExample, "additionalFiles": [], "selectorName": "" }, "tree-select-multiple-overview": { "title": "Basic Select", "component": TreeSelectMultipleOverviewExample, "additionalFiles": [], "selectorName": "" }, "tree-select-overview": { "title": "Basic Select", "component": TreeSelectOverviewExample, "additionalFiles": [], "selectorName": "" }, "tree-filtering": { "title": "Basic tree", "component": TreeFilteringExample, "additionalFiles": [], "selectorName": "" }, "tree-multiple-checkbox": { "title": "Basic tree", "component": TreeMultipleCheckboxExample, "additionalFiles": [], "selectorName": "" }, "tree-multiple-checklist": { "title": "Checklist tree", "component": TreeMultipleChecklistExample, "additionalFiles": [], "selectorName": "" }, "tree-multiple-keyboard": { "title": "Basic tree", "component": TreeMultipleKeyboardExample, "additionalFiles": [], "selectorName": "" }, "tree-overview": { "title": "Basic tree", "component": TreeOverviewExample, "additionalFiles": [], "selectorName": "" }, "typography-overview": { "title": "Basic typography", "component": TypographyOverviewExample, "additionalFiles": [], "selectorName": "" }, "validation-composite": { "title": "validation-composite", "component": ValidationCompositeExample, "additionalFiles": [], "selectorName": "" }, "validation-global": { "title": "validation-global", "component": ValidationGlobalExample, "additionalFiles": [], "selectorName": "" }, "validation-on-blur": { "title": "validation-on-blur", "component": ValidationOnBlurExample, "additionalFiles": [], "selectorName": "" }, "validation-on-type": { "title": "validation-on-type", "component": ValidationOnTypeExample, "additionalFiles": [], "selectorName": "" }, "validation-overview": { "title": "validation-overview", "component": ValidationOverviewExample, "additionalFiles": [], "selectorName": "" }, "validation-small": { "title": "validation-small", "component": ValidationSmallExample, "additionalFiles": [], "selectorName": "" } };
const EXAMPLE_MODULES = [AlertsExamplesModule, AutocompleteExamplesModule, BadgesExamplesModule, ButtonToggleExamplesModule, ButtonExamplesModule, CardExamplesModule, CheckboxExamplesModule, DateFormatterExamplesModule, DatepickerExamplesModule, DropdownExamplesModule, InputExamplesModule, FlexLayoutExamplesModule, LinkExamplesModule, ListExamplesModule, ModalExamplesModule, NavbarExamplesModule, NumberFormatterExamplesModule, PopoverExamplesModule, ProgressBarExamplesModule, ProgressSpinnerExamplesModule, RadioExamplesModule, SelectExamplesModule, SidepanelExamplesModule, SplitterExamplesModule, TableExamplesModule, TabsExamplesModule, TagsExamplesModule, TextAreaExamplesModule, TimepickerExamplesModule, ToggleExamplesModule, TooltipExamplesModule, TreeSelectExamplesModule, TreeExamplesModule, TypographyExamplesModule, ValidationExamplesModule];
const EXAMPLE_LIST = [AlertsOverviewExample, AutocompleteOverviewExample, BadgesOverviewExample, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample, ButtonColorsExample, ButtonIconExample, ButtonOverviewExample, ButtonProgressExample, CardOverviewExample, CheckboxIndeterminateExample, CheckboxOverviewExample, AbsoluteDateFormatterExample, RangeDateFormatterExample, RelativeDateFormatterExample, DatepickerCustomExample, DatepickerDisabledExample, DatepickerLanguageExample, DatepickerOverviewExample, DatepickerYearExample, DropdownNestedExample, DropdownOverviewExample, InputNumberOverviewExample, InputOverviewExample, LayoutFlexAlignmentExample, LayoutFlexBehaviourModifiersExample, LayoutFlexOffsetsExample, LayoutFlexOrderExample, LayoutFlexOverviewExample, LinkApplicationExample, LinkColorExample, LinkDisabledExample, LinkExternalExample, LinkGeneralExample, LinkIconsExample, LinkMultiLineExample, LinkOverviewExample, LinkPrepositionsExample, LinkPrintExample, LinkPseudoExample, LinkTargetBlankExample, LinkVisitedExample, ListGroupsExample, ListMultipleCheckboxExample, ListMultipleKeyboardExample, ListOverviewExample, ModalComponentExample, McModalCustomComponent, ModalOverviewExample, ModalTemplateExample, NavbarOverviewExample, NumberFormatterOverviewExample, WithDefaultLocaleComponent, WithENLocaleComponent, PopoverInstanceExample, PopoverOverviewExample, ProgressBarIndeterminateExample, ProgressBarOverviewExample, ProgressSpinnerIndeterminateExample, ProgressSpinnerOverviewExample, RadioOverviewExample, SelectGroupsExample, SelectMultipleOverviewExample, SelectOverviewExample, SelectSearchOverviewExample, SelectVirtualScrollExample, SidepanelComponentExample, SidepanelExampleCustomComponent, SidepanelOverviewExample, SplitterFixedExample, SplitterNestedExample, SplitterOverviewExample, SplitterVerticalExample, TableOverviewExample, TableWithBordersExample, TabsLightExample, TabsOverviewExample, TabsStretchExample, TagsAutocompleteExample, TagsInputExample, TagsListExample, TagsOverviewExample, TextAreaOverviewExample, TimepickerOverviewExample, TimepickerRangeExample, TimepickerValidationSymbolsExample, TimepickerVariationsExample, ToggleOverviewExample, TooltipArrowPlacementExample, TooltipOverviewExample, TooltipScrollableExample, TreeSelectMultipleOverviewExample, TreeSelectOverviewExample, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample, TypographyOverviewExample, ValidationCompositeExample, ValidationGlobalExample, ValidationOnBlurExample, ValidationOnTypeExample, ValidationOverviewExample, ValidationSmallExample];
class ExampleModule {
}
ExampleModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: EXAMPLE_MODULES,
                exports: EXAMPLE_MODULES,
                entryComponents: EXAMPLE_LIST,
            },] }
];

// The example-module file will be auto-generated. As soon as the
/**
 * Example data
 *   with information about Component name, selector, files used in example, and path to examples
 */
class ExampleData {
    constructor(example) {
        if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {
            return;
        }
        const exampleConfig = EXAMPLE_COMPONENTS[example];
        // TODO: Do not hard-code extensions
        this.exampleFiles = ['html', 'ts', 'css'].map((extension) => `${example}-example.${extension}`);
        this.examplePath = `assets/stackblitz/examples/${example}/`;
        this.selectorName = this.indexFilename = `${example}-example`;
        if (exampleConfig.additionalFiles) {
            this.exampleFiles.push(...exampleConfig.additionalFiles);
        }
        const exampleName = example.replace(/(?:^\w|\b\w)/g, (letter) => letter.toUpperCase());
        this.description = exampleConfig.title || `${exampleName.replace(/[\-]+/g, ' ')} Example`;
        this.componentName = exampleConfig.selectorName ||
            `${exampleName.replace(/[\-]+/g, '')}Example`;
    }
}

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "d+MJ":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/containers/homepage/homepage.template.html ***!
  \****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<navbar></navbar>\n\n<section class=\"section section-banner\">\n    <div class=\"container\">\n        <div class=\"logo\">\n            <img src=\"https://camo.githubusercontent.com/87a8f7c8b454d1c5bd916e286f682b68a178e3c4/68747470733a2f2f692e6962622e636f2f66514e506776362f6c6f676f2d706e672d3230302e706e67\" alt=\"positive_js_logo\" border=\"0\" data-canonical-src=\"https://i.ibb.co/fQNPgv6/logo-png-200.png\" style=\"max-width:100%;\">\n        </div>\n    </div>\n    <div class=\"mc-display-1\">Component Library for Angular</div>\n\n    <div class=\"btn-container\">\n        <button mc-button [color]=\"'primary'\" class=\"btn\" routerLink=\"/docs/getting-started\">\n            GET STARTED\n        </button>\n\n        <button mc-button [color]=\"'second'\" class=\"btn\" routerLink=\"/components\">\n            Components\n        </button>\n        <button mc-button [color]=\"'second'\" class=\"btn\">GitHub</button>\n    </div>\n</section>\n\n");

/***/ }),

/***/ "f6Xg":
/*!***************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tree-select.js ***!
  \***************************************************************/
/*! exports provided: McTreeSelect, McTreeSelectChange, McTreeSelectModule, McTreeSelectTrigger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeSelect", function() { return McTreeSelect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeSelectChange", function() { return McTreeSelectChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeSelectModule", function() { return McTreeSelectModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeSelectTrigger", function() { return McTreeSelectTrigger; });
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/cdk/tree */ "oznV");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/tags */ "9hGJ");
/* harmony import */ var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/tree */ "wd6P");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ "kU1M");

















/* tslint:disable:no-empty */
let nextUniqueId = 0;
/** Change event object that is emitted when the select value has changed. */
class McTreeSelectChange {
    constructor(source, value, isUserInput = false) {
        this.source = source;
        this.value = value;
        this.isUserInput = isUserInput;
    }
}
class McTreeSelectTrigger {
}
McTreeSelectTrigger.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{ selector: 'mc-tree-select-trigger' },] }
];
class McTreeSelectBase {
    constructor(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        this.elementRef = elementRef;
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
    }
}
// tslint:disable-next-line:naming-convention
const McTreeSelectMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinErrorState"])(McTreeSelectBase)));
class McTreeSelect extends McTreeSelectMixinBase {
    constructor(elementRef, changeDetectorRef, viewportRuler, ngZone, renderer, defaultErrorStateMatcher, scrollStrategyFactory, rawValidators, mcValidation, dir, parentForm, parentFormGroup, parentFormField, ngControl, ngModel, formControlName) {
        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this.changeDetectorRef = changeDetectorRef;
        this.viewportRuler = viewportRuler;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.scrollStrategyFactory = scrollStrategyFactory;
        this.rawValidators = rawValidators;
        this.mcValidation = mcValidation;
        this.dir = dir;
        this.parentFormField = parentFormField;
        this.ngModel = ngModel;
        this.formControlName = formControlName;
        /** A name for this control that can be used by `mc-form-field`. */
        this.controlType = 'select';
        this.hiddenItems = 0;
        /** The cached font-size of the trigger element. */
        this.triggerFontSize = 0;
        /** The value of the select panel's transform-origin property. */
        this.transformOrigin = 'top';
        /** Emits when the panel element is finished transforming in. */
        this.panelDoneAnimatingStream = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
        /** Strategy that will be used to handle scrolling while the select panel is open. */
        this.scrollStrategy = this.scrollStrategyFactory();
        /**
         * The y-offset of the overlay panel in relation to the trigger's top start corner.
         * This must be adjusted to align the selected option text over the trigger text.
         * when the panel opens. Will change based on the y-position of the selected option.
         */
        this.offsetY = 0;
        /**
         * This position config ensures that the top "start" corner of the overlay
         * is aligned with with the top "start" of the origin by default (overlapping
         * the trigger completely). If the panel cannot fit below the trigger, it
         * will fall back to a position above the trigger.
         */
        this.positions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            }
        ];
        this.hiddenItemsText = '...ещё';
        /** Event emitted when the select panel has been toggled. */
        this.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Event emitted when the select has been opened. */
        this.openedStream = this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])((o) => o), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(() => { }));
        /** Event emitted when the select has been closed. */
        this.closedStream = this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["filter"])((o) => !o), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["map"])(() => { }));
        /** Event emitted when the selected value has been changed by the user. */
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /**
         * Event that emits whenever the raw value of the select changes. This is here primarily
         * to facilitate the two-way binding for the `value` input.
         * @docs-private
         */
        this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this.backdropClass = 'cdk-overlay-transparent-backdrop';
        /** Combined stream of all of the child options' change events. */
        this.optionSelectionChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["defer"])(() => {
            if (this.options) {
                return this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["startWith"])(this.options), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["switchMap"])(() => Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(...this.options.map((option) => option.onSelectionChange))));
            }
            return this.ngZone.onStable
                .asObservable()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["switchMap"])(() => this.optionSelectionChanges));
        });
        this._required = false;
        this._multiple = false;
        this._autoSelect = true;
        this._value = null;
        this._hasBackdrop = false;
        this._focused = false;
        this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
        this._panelOpen = false;
        /** The scroll position of the overlay panel, calculated to center the selected option. */
        this.scrollTop = 0;
        /** Unique id for this input. */
        this.uid = `mc-select-${nextUniqueId++}`;
        /** Emits whenever the component is destroyed. */
        this.destroy = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
        /** `View -> model callback called when value changes` */
        this.onChange = () => { };
        /** `View -> model callback called when select has been touched` */
        this.onTouched = () => { };
        /** Comparison function to specify which option is displayed. Defaults to object equality. */
        this._compareWith = (o1, o2) => o1 === o2;
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        // Force setter to be called in case id was not specified.
        this.id = this.id;
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
        this.stateChanges.next();
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        if (this.selectionModel) {
            throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getMcSelectDynamicMultipleError"])();
        }
        this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
    }
    get autoSelect() {
        if (this.multiple) {
            return false;
        }
        return this._autoSelect;
    }
    set autoSelect(value) {
        this._autoSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
    }
    /**
     * Function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    get compareWith() {
        return this._compareWith;
    }
    set compareWith(fn) {
        /* tslint:disable-next-line:strict-type-predicates */
        if (typeof fn !== 'function') {
            throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getMcSelectNonFunctionValueError"])();
        }
        this._compareWith = fn;
        if (this.selectionModel) {
            // A different comparator means the selection could change.
            this.initializeSelection();
        }
    }
    get value() {
        return this.multiple ? this.tree.getSelectedValues() : this.tree.getSelectedValues()[0];
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this.uid;
        this.stateChanges.next();
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(value) {
        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
    }
    /** Whether the select is focused. */
    get focused() {
        return this._focused || this._panelOpen;
    }
    set focused(value) {
        this._focused = value;
    }
    get panelOpen() {
        return this._panelOpen;
    }
    get canShowCleaner() {
        return this.cleaner && this.selectionModel.hasValue();
    }
    ngOnInit() {
        this.stateChanges.next();
        // We need `distinctUntilChanged` here, because some browsers will
        // fire the animation end event twice for the same animation. See:
        // https://github.com/angular/angular/issues/24084
        this.panelDoneAnimatingStream
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            if (this.panelOpen) {
                this.scrollTop = 0;
                this.openedChange.emit(true);
            }
            else {
                this.openedChange.emit(false);
                this.overlayDir.offsetX = 0;
                this.changeDetectorRef.markForCheck();
            }
        });
    }
    ngAfterContentInit() {
        if (!this.tree) {
            return;
        }
        if (this.mcValidation.useValidation) {
            Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["setMosaicValidation"])(this);
        }
        this.tree.resetFocusedItemOnBlur = false;
        this.selectionModel = this.tree.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__["SelectionModel"](this.multiple);
        this.tree.ngAfterContentInit();
        this.initKeyManager();
        this.options = this.tree.renderedOptions;
        this.tree.autoSelect = this.autoSelect;
        if (this.tree.multipleMode === null) {
            this.tree.multipleMode = this.multiple ? _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MultipleMode"].CHECKBOX : null;
        }
        if (this.multiple) {
            this.tree.noUnselectLast = false;
        }
        if (this.tempValues) {
            this.setSelectionByValue(this.tempValues);
            this.tempValues = null;
        }
        this.optionSelectionChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe((event) => {
            if (!this.multiple && this.panelOpen && event.isUserInput) {
                this.close();
            }
        });
        this.tree.selectionChange
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe((event) => {
            this.onChange(this.selectedValues);
            this.selectionChange.emit(new McTreeSelectChange(this, event.option));
        });
        this.selectionModel.changed
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe((event) => {
            if (event.added.length) {
                this.tree.keyManager.setFocusOrigin('program');
                this.tree.keyManager.setActiveItem(this.options.find((option) => option.data === event.added[0]));
            }
        });
    }
    ngAfterViewInit() {
        if (!this.tree) {
            return;
        }
        this.tags.changes
            .subscribe(() => {
            setTimeout(() => this.calculateHiddenItems(), 0);
        });
        setTimeout(() => this.calculateHiddenItems(), 0);
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    ngOnChanges(changes) {
        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
        // the parent form field know to run change detection when the disabled state changes.
        if (changes.disabled) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
        this.stateChanges.complete();
        this.closeSubscription.unsubscribe();
    }
    hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) {
        return `${hiddenItemsText} ${hiddenItems}`;
    }
    clearValue($event) {
        $event.stopPropagation();
        this.selectionModel.clear();
        this.tree.keyManager.setActiveItem(-1);
        this.setSelectionByValue([]);
        this.onChange(this.selectedValues);
    }
    toggle() {
        if (this.panelOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    open() {
        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
            return;
        }
        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();
        // Note: The computed font-size will be a string pixel value (e.g. "16px").
        // `parseInt` ignores the trailing 'px' and converts this to a number.
        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);
        this._panelOpen = true;
        setTimeout(() => this.highlightCorrectOption());
        this.changeDetectorRef.markForCheck();
        // Set the font size on the panel element once it exists.
        this.ngZone.onStable.asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1))
            .subscribe(() => {
            if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {
                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;
            }
        });
    }
    /** Closes the overlay panel and focuses the host element. */
    close() {
        if (!this._panelOpen) {
            return;
        }
        this._panelOpen = false;
        this.changeDetectorRef.markForCheck();
        this.onTouched();
        setTimeout(() => this.focus(), 0);
    }
    /**
     * Sets the select's value. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param value New value to be written to the model.
     */
    writeValue(value) {
        if (this.tree) {
            this.setSelectionByValue(value);
        }
        else {
            this.tempValues = value;
        }
    }
    /**
     * Saves a callback function to be invoked when the select's value
     * changes from user input. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the value changes.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Saves a callback function to be invoked when the select is blurred
     * by the user. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the component has been touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Disables the select. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.changeDetectorRef.markForCheck();
        this.stateChanges.next();
    }
    get selected() {
        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];
    }
    get selectedValues() {
        const selectedValues = this.selectionModel.selected.map((value) => this.tree.treeControl.getValue(value));
        return this.multiple ? selectedValues : selectedValues[0];
    }
    get triggerValue() {
        if (this.empty) {
            return '';
        }
        return this.tree.treeControl.getViewValue(this.selected);
    }
    get triggerValues() {
        if (this.empty) {
            return [];
        }
        return this.selectedValues
            .map((value) => this.tree.renderedOptions.find((option) => option.value === value))
            .filter((option) => option);
    }
    get empty() {
        return !this.selectionModel || this.selectionModel.isEmpty();
    }
    isRtl() {
        return this.dir ? this.dir.value === 'rtl' : false;
    }
    handleKeydown(event) {
        if (!this.disabled) {
            if (this.panelOpen) {
                this.handleOpenKeydown(event);
            }
            else {
                this.handleClosedKeydown(event);
            }
        }
    }
    onFocus() {
        if (!this.disabled) {
            this._focused = true;
            this.stateChanges.next();
        }
    }
    /**
     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
     * "blur" to the panel when it opens, causing a false positive.
     */
    onBlur() {
        this._focused = false;
        if (!this.disabled && !this.panelOpen) {
            this.onTouched();
            this.changeDetectorRef.markForCheck();
            this.stateChanges.next();
        }
    }
    /** Callback that is invoked when the overlay panel has been attached. */
    onAttached() {
        this.overlayDir.positionChange
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["take"])(1))
            .subscribe(() => {
            this.changeDetectorRef.detectChanges();
            this.calculateOverlayOffsetX();
            this.panel.nativeElement.scrollTop = this.scrollTop;
            this.tree.updateScrollSize();
        });
        this.closeSubscription = this.closingActions()
            .subscribe(() => this.close());
    }
    /** Returns the theme to be used on the panel. */
    getPanelTheme() {
        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    onContainerClick() {
        this.focus();
    }
    /** Invoked when an option is clicked. */
    onRemoveSelectedOption(selectedOption, $event) {
        $event.stopPropagation();
        this.selectionModel
            .deselect(this.selected.find((value) => this.tree.treeControl.getValue(value) === selectedOption.value));
        this.onChange(this.selectedValues);
    }
    calculateHiddenItems() {
        if (this.customTrigger || this.empty || !this.multiple) {
            return;
        }
        let visibleItems = 0;
        const totalItemsWidth = this.getTotalItemsWidthInMatcher();
        let totalVisibleItemsWidth = 0;
        this.tags.forEach((tag) => {
            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {
                totalVisibleItemsWidth += this.getItemWidth(tag.nativeElement);
                visibleItems++;
            }
        });
        this.hiddenItems = this.selectionModel.selected.length - visibleItems;
        if (this.hiddenItems) {
            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');
            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');
            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;
            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;
            const itemsCounterWidth = 86;
            const matcherListWidth = matcherList.getBoundingClientRect().width;
            const matcherWidth = matcherListWidth + itemsCounterWidth;
            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) {
                this.hiddenItems = 0;
            }
            if (totalVisibleItemsWidth === matcherListWidth ||
                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth) {
                this.changeDetectorRef.markForCheck();
                return;
            }
            else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {
                this.hiddenItems++;
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    closingActions() {
        const backdrop = this.overlayDir.overlayRef.backdropClick();
        const outsidePointerEvents = this.overlayDir.overlayRef.outsidePointerEvents();
        const detachments = this.overlayDir.overlayRef.detachments();
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(backdrop, outsidePointerEvents, detachments);
    }
    getTotalItemsWidthInMatcher() {
        const triggerClone = this.trigger.nativeElement.cloneNode(true);
        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();
        this.renderer.setStyle(triggerClone, 'position', 'absolute');
        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');
        this.renderer.setStyle(triggerClone, 'top', '-100%');
        this.renderer.setStyle(triggerClone, 'left', '0');
        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);
        let totalItemsWidth = 0;
        triggerClone.querySelectorAll('mc-tag').forEach((item) => {
            totalItemsWidth += this.getItemWidth(item);
        });
        triggerClone.remove();
        return totalItemsWidth;
    }
    getItemWidth(element) {
        const computedStyle = window.getComputedStyle(element);
        const width = parseInt(computedStyle.width);
        const marginLeft = parseInt(computedStyle.marginLeft);
        const marginRight = parseInt(computedStyle.marginRight);
        return width + marginLeft + marginRight;
    }
    handleClosedKeydown(event) {
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"] ||
            keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["LEFT_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["RIGHT_ARROW"];
        const isOpenKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"];
        // Open the select on ALT + arrow key to match the native <select>
        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {
            // prevents the page from scrolling down when pressing space
            event.preventDefault();
            this.open();
        }
        else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {
            this.tree.keyManager.onKeydown(event);
        }
    }
    handleOpenKeydown(event) {
        /* tslint:disable-next-line */
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["DOWN_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["UP_ARROW"];
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["LEFT_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["RIGHT_ARROW"]) {
            return this.originalOnKeyDown.call(this.tree, event);
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["HOME"]) {
            event.preventDefault();
            this.tree.keyManager.setFirstItemActive();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["END"]) {
            event.preventDefault();
            this.tree.keyManager.setLastItemActive();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_UP"]) {
            event.preventDefault();
            this.tree.keyManager.setPreviousPageItemActive();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["PAGE_DOWN"]) {
            event.preventDefault();
            this.tree.keyManager.setNextPageItemActive();
        }
        else if ((keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["ENTER"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["SPACE"]) && this.tree.keyManager.activeItem) {
            event.preventDefault();
            if (!this.autoSelect) {
                this.selectionModel.toggle(this.tree.keyManager.activeItem.data);
            }
            else {
                this.close();
            }
        }
        else if (this.multiple && keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["A"] && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some((option) => !option.selected);
            this.options.forEach((option) => {
                if (hasDeselectedOptions && !option.disabled) {
                    option.select();
                }
                else {
                    option.deselect();
                }
            });
        }
        else {
            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;
            this.tree.keyManager.setFocusOrigin('keyboard');
            this.tree.keyManager.onKeydown(event);
            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&
                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {
                this.tree.keyManager.activeItem.selectViaInteraction(event);
            }
            if (this.autoSelect && this.tree.keyManager.activeItem) {
                this.tree.setSelectedOptionsByKey(this.tree.keyManager.activeItem, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["hasModifierKey"])(event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__["hasModifierKey"])(event, 'ctrlKey'));
            }
        }
    }
    initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);
        });
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    setSelectionByValue(value) {
        if (this.multiple && value) {
            if (!Array.isArray(value)) {
                throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getMcSelectNonArrayValueError"])();
            }
            this.tree.setOptionsFromValues(value);
            this.sortValues();
        }
        else {
            this.tree.setOptionsFromValues([value]);
        }
        this.changeDetectorRef.detectChanges();
    }
    initKeyManager() {
        this.originalOnKeyDown = this.tree.onKeyDown;
        this.tree.onKeyDown = () => { };
        this.tree.keyManager.tabOut
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            // Restore focus to the trigger before closing. Ensures that the focus
            // position won't be lost if the user got focus into the overlay.
            this.focus();
            this.close();
        });
        this.tree.keyManager.change
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_15__["takeUntil"])(this.destroy))
            .subscribe(() => {
            if (this._panelOpen && this.panel) {
                this.scrollActiveOptionIntoView();
            }
            else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {
                this.tree.keyManager.activeItem.selectViaInteraction();
            }
        });
    }
    /** Sorts the selected values in the selected based on their order in the panel. */
    sortValues() {
        if (this.multiple) {
            const options = this.options.toArray();
            this.selectionModel.sort((a, b) => {
                return this.sortComparator ? this.sortComparator(a, b, options) :
                    options.indexOf(a) - options.indexOf(b);
            });
            this.stateChanges.next();
        }
    }
    /**
     * Highlights the selected item. If no option is selected, it will highlight
     * the first item instead.
     */
    highlightCorrectOption() {
        if (this.empty || !this.tree.keyManager) {
            return;
        }
        const firstSelectedValue = this.multiple ? this.selectedValues[0] : this.selectedValues;
        const selectedOption = this.options.find((option) => option.value === firstSelectedValue);
        if (selectedOption) {
            this.tree.keyManager.setActiveItem(selectedOption);
        }
    }
    /** Scrolls the active option into view. */
    scrollActiveOptionIntoView() {
        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;
        this.panel.nativeElement.scrollTop = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["getOptionScrollPosition"])(activeOptionIndex, this.tree.getItemHeight(), this.panel.nativeElement.scrollTop, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_MAX_HEIGHT"]);
    }
    /**
     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.
     * This must be adjusted to align the selected option text over the trigger text when
     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset
     * can't be calculated until the panel has been attached, because we need to know the
     * content width in order to constrain the panel within the viewport.
     */
    calculateOverlayOffsetX() {
        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();
        const viewportSize = this.viewportRuler.getViewportSize();
        const isRtl = this.isRtl();
        /* tslint:disable-next-line:no-magic-numbers */
        const paddingWidth = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_PADDING_X"] * 2;
        let offsetX = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_PADDING_X"];
        // Invert the offset in LTR.
        if (!isRtl) {
            offsetX *= -1;
        }
        // Determine how much the select overflows on each side.
        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));
        const rightOverflow = overlayRect.right + offsetX - viewportSize.width
            + (isRtl ? 0 : paddingWidth);
        // If the element overflows on either side, reduce the offset to allow it to fit.
        if (leftOverflow > 0) {
            offsetX += leftOverflow + _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_VIEWPORT_PADDING"];
        }
        else if (rightOverflow > 0) {
            offsetX -= rightOverflow + _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["SELECT_PANEL_VIEWPORT_PADDING"];
        }
        // Set the offset directly in order to avoid having to go through change detection and
        // potentially triggering "changed after it was checked" errors. Round the value to avoid
        // blurry content in some browsers.
        this.overlayDir.offsetX = Math.round(offsetX);
        this.overlayDir.overlayRef.updatePosition();
    }
}
McTreeSelect.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-tree-select',
                exportAs: 'mcTreeSelect',
                template: "<div cdk-overlay-origin\n     class=\"mc-tree-select__trigger\"\n     [class.mc-tree-select__trigger_multiple]=\"multiple\"\n     #origin=\"cdkOverlayOrigin\"\n     #trigger>\n    <div class=\"mc-tree-select__matcher\" [ngSwitch]=\"empty\">\n        <span class=\"mc-tree-select__placeholder\" *ngSwitchCase=\"true\">{{ placeholder || '\\u00A0' }}</span>\n        <span *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n            <div *ngSwitchDefault [ngSwitch]=\"multiple\" class=\"mc-tree-select__match-container\">\n                <span *ngSwitchCase=\"false\" class=\"mc-tree-select__matcher-text\">{{ triggerValue }}</span>\n                <div *ngSwitchCase=\"true\" class=\"mc-tree-select__multiple-matcher\">\n                    <div class=\"mc-tree-select__match-list\">\n                        <mc-tag *ngFor=\"let option of triggerValues\"\n                            [selectable]=\"false\"\n                            [disabled]=\"option.disabled || disabled\"\n                            [class.mc-error]=\"errorState\">\n\n                            {{ option.viewValue }}\n                            <i mc-icon=\"mc-close-S_16\"\n                               *ngIf=\"!option.disabled && !disabled\"\n                               (click)=\"onRemoveSelectedOption(option, $event)\">\n                            </i>\n                        </mc-tag>\n                    </div>\n                    <div class=\"mc-tree-select__match-hidden-text\"\n                         [style.display]=\"hiddenItems > 0 ? 'block' : 'none'\"\n                         #hiddenItemsCounter>\n                        {{ hiddenItemsTextFormatter(hiddenItemsText, hiddenItems) }}\n                    </div>\n                </div>\n            </div>\n            <ng-content select=\"mc-tree-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n        </span>\n    </div>\n\n    <div class=\"mc-select__cleaner\" *ngIf=\"canShowCleaner\" (click)=\"clearValue($event)\">\n        <ng-content select=\"mc-cleaner\"></ng-content>\n    </div>\n\n    <div class=\"mc-tree-select__arrow-wrapper\">\n        <i class=\"mc-tree-select__arrow\" mc-icon=\"mc-angle-down-L_16\"></i>\n    </div>\n</div>\n\n<ng-template\n    cdk-connected-overlay\n    cdkConnectedOverlayLockPosition\n    [cdkConnectedOverlayHasBackdrop]=\"hasBackdrop\"\n    [cdkConnectedOverlayBackdropClass]=\"backdropClass\"\n    [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayOpen]=\"panelOpen\"\n    [cdkConnectedOverlayPositions]=\"positions\"\n    [cdkConnectedOverlayMinWidth]=\"triggerRect?.width\"\n    [cdkConnectedOverlayOffsetY]=\"offsetY\"\n    (backdropClick)=\"close()\"\n    (attach)=\"onAttached()\"\n    (detach)=\"close()\">\n\n    <div #panel\n         class=\"mc-tree-select__panel {{ getPanelTheme() }}\"\n         [ngClass]=\"panelClass\"\n         [style.transformOrigin]=\"transformOrigin\"\n         [style.font-size.px]=\"triggerFontSize\"\n         (keydown)=\"handleKeydown($event)\">\n\n        <div #optionsContainer\n             class=\"mc-tree-select__content\"\n             [@fadeInContent]=\"'showing'\"\n             (@fadeInContent.done)=\"panelDoneAnimatingStream.next($event.toState)\">\n            <ng-content select=\"mc-tree-selection\"></ng-content>\n        </div>\n    </div>\n</ng-template>\n",
                inputs: ['disabled', 'tabIndex'],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                host: {
                    class: 'mc-tree-select',
                    '[class.mc-disabled]': 'disabled',
                    '[class.mc-invalid]': 'errorState',
                    '[attr.id]': 'id',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null',
                    '(click)': 'toggle()',
                    '(keydown)': 'handleKeydown($event)',
                    '(focus)': 'onFocus()',
                    '(blur)': 'onBlur()',
                    '(window:resize)': 'calculateHiddenItems()'
                },
                animations: [
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mcSelectAnimations"].transformPanel,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mcSelectAnimations"].fadeInContent
                ],
                providers: [
                    { provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__["McFormFieldControl"], useExisting: McTreeSelect },
                    { provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_3__["CdkTree"], useExisting: McTreeSelect }
                ],
                styles: [".mc-option{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;position:relative;max-width:100%;height:var(--mc-option-size-height,32px);border:var(--mc-option-size-border-width,2px) solid transparent;cursor:pointer;outline:none;padding-left:var(--mc-option-size-horizontal-padding,16px);padding-right:var(--mc-option-size-horizontal-padding,16px);-webkit-tap-highlight-color:transparent}.mc-option.mc-disabled{cursor:default}.mc-option .mc-pseudo-checkbox{margin-right:8px}.mc-option .mc-option-overlay{position:absolute;top:calc(-1 * var(--mc-option-size-border-width, 2px));left:calc(-1 * var(--mc-option-size-border-width, 2px));right:calc(-1 * var(--mc-option-size-border-width, 2px));bottom:calc(-1 * var(--mc-option-size-border-width, 2px));pointer-events:none;border-radius:inherit}.mc-option-text{display:inline-block;flex-grow:1;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.mc-tree-select{box-sizing:border-box;display:inline-block;width:100%;outline:none}.mc-tree-select.mc-disabled .mc-tree-select__trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mc-tree-select__trigger{display:flex;box-sizing:border-box;position:relative;height:var(--mc-select-size-height,30px);cursor:pointer;padding-left:calc(var(--mc-select-size-left-padding, 16px) - var(--mc-form-field-size-border-width, 1px));padding-right:calc(var(--mc-select-size-right-padding, 8px) - var(--mc-form-field-size-border-width, 1px))}.mc-tree-select__trigger.mc-tree-select__trigger_multiple{padding-left:calc(var(--mc-select-size-left-padding-multiple, 8px) - var(--mc-form-field-size-border-width, 1px))}.mc-tree-select__trigger.mc-tree-select__trigger_multiple .mc-tree-select__placeholder{margin-left:8px}.mc-tree-select__trigger.mc-tree-select__trigger_multiple .mc-tag.mc-disabled .mc-tag__text{margin-right:7px}.mc-tree-select__matcher{display:flex;align-items:center;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mc-tree-select__matcher>span{width:100%}.mc-tree-select__multiple-matcher{display:flex;width:100%}.mc-tree-select__match-list{display:flex;flex-wrap:wrap;overflow:hidden;max-height:calc(var(--mc-select-size-height, 30px) - var(--mc-select-panel-size-border-width, 1px))}.mc-tree-select__match-list .mc-tag{margin-right:4px}.mc-tree-select__match-container{display:flex;flex-direction:row;justify-content:space-between;width:100%}.mc-tree-select__match-container .mc-tree-select__match-hidden-text{flex:0 0 70px;align-self:center;padding:0 8px;text-align:right}.mc-tree-select__match-item{display:flex;border:1px solid transparent;border-radius:3px;padding-left:7px;margin-right:4px;max-width:100%}.mc-tree-select__arrow-wrapper{align-self:center}.mc-form-field-appearance-fill .mc-tree-select__arrow-wrapper,.mc-form-field-appearance-standard .mc-tree-select__arrow-wrapper{transform:translateY(-50%)}.mc-form-field-appearance-outline .mc-tree-select__arrow-wrapper{transform:translateY(-25%)}.mc-tree-select__panel{max-height:var(--mc-select-panel-size-max-height,232px);min-width:100%;overflow:auto;border-width:var(--mc-select-panel-size-border-width,1px);border-style:solid;border-bottom-left-radius:var(--mc-select-panel-size-border-radius,3px);border-bottom-right-radius:var(--mc-select-panel-size-border-radius,3px);padding:4px 0}.mc-tree-select__panel .mc-optgroup-label,.mc-tree-select__panel .mc-tree-select-option{font-size:inherit;line-height:var(--mc-option-size-height,32px);height:var(--mc-option-size-height,32px)}.mc-tree-select__content,.mc-tree-select__content .mc-tree-selection{height:100%}.mc-form-field-type-select:not(.mc-disabled) .mc-form-field-flex{cursor:pointer}"]
            },] }
];
/** @nocollapse */
McTreeSelect.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["ViewportRuler"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["ErrorStateMatcher"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_SELECT_SCROLL_STRATEGY"],] }] },
    { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_forms__WEBPACK_IMPORTED_MODULE_11__["NG_VALIDATORS"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_VALIDATION"],] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_13__["McFormField"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NgModel"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormControlName"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] }
];
McTreeSelect.propDecorators = {
    trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['trigger', { static: false },] }],
    panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['panel', { static: false },] }],
    overlayDir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["CdkConnectedOverlay"], { static: false },] }],
    hiddenItemsCounter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['hiddenItemsCounter', { static: false },] }],
    tags: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"], args: [_ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTag"],] }],
    cleaner: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: ['mcSelectCleaner', { static: true },] }],
    customTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [McTreeSelectTrigger, { static: false },] }],
    tree: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__["McTreeSelection"], { static: false },] }],
    hiddenItemsText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"], args: ['opened',] }],
    closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"], args: ['closed',] }],
    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    sortComparator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    autoSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    hiddenItemsTextFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McTreeSelectModule {
}
McTreeSelectModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"],
                    _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_3__["CdkTreeModule"],
                    _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_7__["McTreeModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"],
                    _ptsecurity_mosaic_tags__WEBPACK_IMPORTED_MODULE_6__["McTagsModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McPseudoCheckboxModule"]
                ],
                exports: [McTreeSelect, McTreeSelectTrigger, _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
                declarations: [McTreeSelect, McTreeSelectTrigger],
                providers: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_SELECT_SCROLL_STRATEGY_PROVIDER"]]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "fQGt":
/*!***************************************!*\
  !*** ./packages/mosaic/link/index.ts ***!
  \***************************************/
/*! exports provided: McLinkModule, McLinkBase, McLinkMixinBase, baseURLRegex, McLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./public-api */ "6OjK");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLinkModule", function() { return _public_api__WEBPACK_IMPORTED_MODULE_0__["McLinkModule"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLinkBase", function() { return _public_api__WEBPACK_IMPORTED_MODULE_0__["McLinkBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLinkMixinBase", function() { return _public_api__WEBPACK_IMPORTED_MODULE_0__["McLinkMixinBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "baseURLRegex", function() { return _public_api__WEBPACK_IMPORTED_MODULE_0__["baseURLRegex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "McLink", function() { return _public_api__WEBPACK_IMPORTED_MODULE_0__["McLink"]; });




/***/ }),

/***/ "gAVc":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/footer/footer.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"docs-footer\">\n    <div class=\"docs-footer__wrapper\">\n        <div class=\"docs-footer__text-wrapper\">\n            <span class=\"docs-footer__text\">© 2019 Positive Technologies</span>\n            <span class=\"docs-footer__text\">Code licensed under an <a class=\"docs-footer__link\" href=\"//github.com/positive-js/mosaic/blob/master/LICENSE\" target=\"_blank\">MIT-style License</a>.</span>\n        </div>\n        <a  class=\"docs-footer__icon\" href=\"//github.com/positive-js/mosaic/\" target=\"_blank\">\n            <svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                  viewBox=\"0 0 438.549 438.549\" style=\"enable-background:new 0 0 438.549 438.549;\"\n                 xml:space=\"preserve\">\n                <g>\n                    <path d=\"M409.132,114.573c-19.608-33.596-46.205-60.194-79.798-79.8C295.736,15.166,259.057,5.365,219.271,5.365\t\tc-39.781,0-76.472,9.804-110.063,29.408c-33.596,19.605-60.192,46.204-79.8,79.8C9.803,148.168,0,184.854,0,224.63\t\tc0,47.78,13.94,90.745,41.827,128.906c27.884,38.164,63.906,64.572,108.063,79.227c5.14,0.954,8.945,0.283,11.419-1.996\t\tc2.475-2.282,3.711-5.14,3.711-8.562c0-0.571-0.049-5.708-0.144-15.417c-0.098-9.709-0.144-18.179-0.144-25.406l-6.567,1.136\n                        c-4.187,0.767-9.469,1.092-15.846,1c-6.374-0.089-12.991-0.757-19.842-1.999c-6.854-1.231-13.229-4.086-19.13-8.559\t\tc-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559\t\tc-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-0.951-2.568-2.098-3.711-3.429c-1.142-1.331-1.997-2.663-2.568-3.997\t\tc-0.572-1.335-0.098-2.43,1.427-3.289c1.525-0.859,4.281-1.276,8.28-1.276l5.708,0.853c3.807,0.763,8.516,3.042,14.133,6.851\n                        c5.614,3.806,10.229,8.754,13.846,14.842c4.38,7.806,9.657,13.754,15.846,17.847c6.184,4.093,12.419,6.136,18.699,6.136\t\tc6.28,0,11.704-0.476,16.274-1.423c4.565-0.952,8.848-2.383,12.847-4.285c1.713-12.758,6.377-22.559,13.988-29.41\t\tc-10.848-1.14-20.601-2.857-29.264-5.14c-8.658-2.286-17.605-5.996-26.835-11.14c-9.235-5.137-16.896-11.516-22.985-19.126\t\tc-6.09-7.614-11.088-17.61-14.987-29.979c-3.901-12.374-5.852-26.648-5.852-42.826c0-23.035,7.52-42.637,22.557-58.817\n                        c-7.044-17.318-6.379-36.732,1.997-58.24c5.52-1.715,13.706-0.428,24.554,3.853c10.85,4.283,18.794,7.952,23.84,10.994\t\tc5.046,3.041,9.089,5.618,12.135,7.708c17.705-4.947,35.976-7.421,54.818-7.421s37.117,2.474,54.823,7.421l10.849-6.849\t\tc7.419-4.57,16.18-8.758,26.262-12.565c10.088-3.805,17.802-4.853,23.134-3.138c8.562,21.509,9.325,40.922,2.279,58.24\t\tc15.036,16.18,22.559,35.787,22.559,58.817c0,16.178-1.958,30.497-5.853,42.966c-3.9,12.471-8.941,22.457-15.125,29.979\n                        c-6.191,7.521-13.901,13.85-23.131,18.986c-9.232,5.14-18.182,8.85-26.84,11.136c-8.662,2.286-18.415,4.004-29.263,5.146\t\tc9.894,8.562,14.842,22.077,14.842,40.539v60.237c0,3.422,1.19,6.279,3.572,8.562c2.379,2.279,6.136,2.95,11.276,1.995\t\tc44.163-14.653,80.185-41.062,108.068-79.226c27.88-38.161,41.825-81.126,41.825-128.906\t\tC438.536,184.851,428.728,148.168,409.132,114.573z\"></path>\n                </g>\n            </svg>\n        </a>\n    </div>\n</div>\n");

/***/ }),

/***/ "gVDO":
/*!*********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-table.js ***!
  \*********************************************************/
/*! exports provided: McTable, McTableModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTable", function() { return McTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTableModule", function() { return McTableModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");





class McTable {
}
McTable.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'table[mc-table]',
                host: {
                    class: 'mc-table'
                }
            },] }
];

class McTableModule {
}
McTableModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]
                ],
                exports: [McTable],
                declarations: [McTable]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "gWp9":
/*!**********************************************!*\
  !*** ./packages/docs/src/app/docs.module.ts ***!
  \**********************************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "IheW");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser */ "cUpR");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser/animations */ "omvX");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ "iInd");
/* harmony import */ var _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/mosaic-examples */ "cF3b");
/* harmony import */ var _components_component_viewer_component_viewer_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/component-viewer/component-viewer.module */ "WlSM");
/* harmony import */ var _components_main_layout_main_layout_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/main-layout/main-layout.module */ "RfXV");
/* harmony import */ var _containers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./containers */ "Zbv+");
/* harmony import */ var _docs_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./docs.component */ "tVw0");
/* harmony import */ var _docs_module_routes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./docs.module-routes */ "jCoG");
/* harmony import */ var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./shared/documentation-items/documentation-items */ "rMhK");















let AppModule = class AppModule {
};
AppModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__["BrowserModule"],
            _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["BrowserAnimationsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClientModule"],
            _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_8__["ExampleModule"],
            _angular_router__WEBPACK_IMPORTED_MODULE_7__["RouterModule"].forRoot(_docs_module_routes__WEBPACK_IMPORTED_MODULE_13__["APP_ROUTES"], {
                scrollPositionRestoration: 'enabled',
                onSameUrlNavigation: 'reload',
                anchorScrolling: 'enabled'
            }),
            _containers__WEBPACK_IMPORTED_MODULE_11__["HomepageModule"],
            _components_component_viewer_component_viewer_module__WEBPACK_IMPORTED_MODULE_9__["ComponentViewerModule"],
            _components_main_layout_main_layout_module__WEBPACK_IMPORTED_MODULE_10__["MainLayoutModule"]
        ],
        declarations: [_docs_component__WEBPACK_IMPORTED_MODULE_12__["DocsComponent"]],
        providers: [
            _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_14__["DocumentationItems"],
            {
                provide: _angular_common__WEBPACK_IMPORTED_MODULE_1__["LocationStrategy"],
                useClass: _angular_common__WEBPACK_IMPORTED_MODULE_1__["PathLocationStrategy"]
            }
        ],
        bootstrap: [_docs_component__WEBPACK_IMPORTED_MODULE_12__["DocsComponent"]]
    })
], AppModule);



/***/ }),

/***/ "gn63":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/shared/table-of-contents/table-of-contents.html ***!
  \*********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div *ngIf=\"links?.length\" class=\"docs-toc-container\">\n    <div class=\"docs-toc-heading\">Contents</div>\n    <nav>\n        <a [href]=\"_rootUrl + '#' + link.id\"\n           *ngFor=\"let link of links; let i = index\"\n           class=\"docs-level-{{link.headerType}} docs-link\"\n           [class.docs-active]=\"link.active\">\n            {{link.name}}\n        </a>\n    </nav>\n</div>\n");

/***/ }),

/***/ "hiYu":
/*!*********************************************************************!*\
  !*** ./packages/docs/src/app/components/navbar/navbar.component.ts ***!
  \*********************************************************************/
/*! exports provided: NavbarComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavbarComponent", function() { return NavbarComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_navbar_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./navbar.template.html */ "Ae4T");
/* harmony import */ var _navbar_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./navbar.scss */ "jBFz");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _shared_version_version__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/version/version */ "S/AA");
/* harmony import */ var _navbar_property__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./navbar-property */ "oBJt");
/* harmony import */ var _theme_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./theme.service */ "toEk");







let NavbarComponent = class NavbarComponent {
    constructor(themeService) {
        this.themeService = themeService;
        this.mosaicVersion = _shared_version_version__WEBPACK_IMPORTED_MODULE_4__["mosaicVersion"];
        // To add new version to dropdown add new object to the end of data array,
        // number of current version is taken from package.json, rest should be specified
        // run npm show @ptsecurity/mosaic versions --json to see all mosaic versions
        this.versionData = [
            {
                number: 'Версия 11',
                date: '30 марта',
                selected: false,
                link: '//mosaic.ptsecurity.com'
            },
            {
                number: 'Версия 10',
                date: '23 окт 2020',
                selected: false,
                link: '//v10.mosaic.ptsecurity.com'
            },
            {
                number: 'Версия 9',
                date: '18 мая 2020',
                selected: false,
                link: '//v9.mosaic.ptsecurity.com'
            },
            {
                number: 'Версия 8',
                date: '5 сент 2019',
                selected: false,
                link: '//v8.mosaic.ptsecurity.com'
            }
        ];
        // To add for checking of current color theme of OS preferences
        this.colorAutomaticTheme = window.matchMedia('(prefers-color-scheme: light)');
        this.activeColorProperty = {
            property: 'PT_color',
            data: [
                {
                    code: '#2f80ed',
                    className: 'active-blue',
                    selected: true
                },
                {
                    code: '#832112',
                    className: 'active-red',
                    selected: false
                },
                {
                    code: '#07804e',
                    className: 'active-green',
                    selected: false
                },
                {
                    code: '#eaaf00',
                    className: 'active-yellow',
                    selected: false
                }
            ],
            updateTemplate: true,
            updateSelected: true
        };
        this.languageProperty = {
            property: 'PT_language',
            data: [
                'Русский язык',
                'Английский язык'
            ],
            updateTemplate: false,
            updateSelected: false
        };
        this.themeProperty = {
            property: 'PT_theme',
            data: [
                {
                    theme: 'auto',
                    name: 'Автоматическое переключение',
                    className: this.colorAutomaticTheme.matches ? 'theme-default' : 'theme-dark',
                    selected: true
                },
                {
                    theme: 'default',
                    name: 'Светлая тема',
                    className: 'theme-default',
                    selected: false
                },
                {
                    theme: 'dark',
                    name: 'Темная тема',
                    className: 'theme-dark',
                    selected: false
                }
            ],
            updateTemplate: true,
            updateSelected: true
        };
        this.setSelectedVersion();
        this.colorSwitch = new _navbar_property__WEBPACK_IMPORTED_MODULE_5__["NavbarProperty"](this.activeColorProperty);
        this.themeSwitch = new _navbar_property__WEBPACK_IMPORTED_MODULE_5__["NavbarProperty"](this.themeProperty);
        this.languageSwitch = new _navbar_property__WEBPACK_IMPORTED_MODULE_5__["NavbarProperty"](this.languageProperty);
        try {
            // Chrome & Firefox
            this.colorAutomaticTheme.addEventListener('change', (e) => {
                if (e.matches) {
                    this.themeProperty.data[0].className = 'theme-default';
                }
                else {
                    this.themeProperty.data[0].className = 'theme-dark';
                }
            });
        }
        catch (err) {
            try {
                // Safari
                this.colorAutomaticTheme.addListener((e) => {
                    if (e.matches) {
                        this.themeProperty.data[0].className = 'theme-default';
                    }
                    else {
                        this.themeProperty.data[0].className = 'theme-dark';
                    }
                });
            }
            catch (errSafari) {
                // tslint:disable-next-line:no-console
                console.error(errSafari);
            }
        }
    }
    ngOnInit() {
        this.themingSubscription = this.themeService.currentTheme.subscribe((theme) => {
            if (this.themeSwitch.data[0].selected) {
                this.themeSwitch.data[0].className = theme;
                this.themeSwitch.setValue(0);
            }
        });
    }
    ngOnDestroy() {
        this.themingSubscription.unsubscribe();
    }
    goToVersion(i) {
        const link = this.versionData[i].link;
        if (!location.origin.match(link)) {
            location.href = `${link}${location.pathname}${location.search}${location.hash}`;
        }
        this.versionSwitch.setValue(i);
    }
    setSelectedVersion() {
        /* Если мы находимся на последней версии - обновляем ее из package.json
        Если нет - последние версии предыдущих мажоров должны быть указаны в массиве*/
        if (location.origin.match(this.versionData[0].link)) {
            this.versionData[0].number = this.mosaicVersion;
            this.versionData[0].selected = true;
        }
        else {
            // Определяем выбранную версию
            this.versionData.forEach((version) => {
                if (version.number === this.mosaicVersion) {
                    version.selected = true;
                }
            });
        }
    }
};
NavbarComponent.ctorParameters = () => [
    { type: _theme_service__WEBPACK_IMPORTED_MODULE_6__["ThemeService"] }
];
NavbarComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'navbar',
        template: _raw_loader_navbar_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_navbar_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_theme_service__WEBPACK_IMPORTED_MODULE_6__["ThemeService"]])
], NavbarComponent);



/***/ }),

/***/ "it0a":
/*!**********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-button.js ***!
  \**********************************************************/
/*! exports provided: McAnchor, McButton, McButtonBase, McButtonCssStyler, McButtonMixinBase, McButtonModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McAnchor", function() { return McAnchor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButton", function() { return McButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonBase", function() { return McButtonBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonCssStyler", function() { return McButtonCssStyler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonMixinBase", function() { return McButtonMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McButtonModule", function() { return McButtonModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");






class McButtonCssStyler {
    constructor(elementRef, renderer) {
        this.renderer = renderer;
        this.icons = [];
        this.nativeElement = elementRef.nativeElement;
    }
    get isIconButton() {
        return this.icons.length > 0;
    }
    ngAfterContentInit() {
        /**
         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations
         * https://github.com/angular/angular/issues/16299
         * https://github.com/angular/angular/issues/8563
         * https://github.com/angular/angular/issues/14769
         */
        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));
        this.addClassModificatorForIcons();
    }
    addClassModificatorForIcons() {
        const twoIcons = 2;
        const [firstIconElement, secondIconElement] = this.icons;
        if (this.icons.length === 1) {
            const COMMENT_NODE = 8;
            if (firstIconElement.nextSibling && firstIconElement.nextSibling.nodeType !== COMMENT_NODE) {
                this.renderer.addClass(firstIconElement, 'mc-icon_left');
                this.renderer.addClass(this.nativeElement, 'mc-icon-button_left');
            }
            if (firstIconElement.previousSibling && firstIconElement.previousSibling.nodeType !== COMMENT_NODE) {
                this.renderer.addClass(firstIconElement, 'mc-icon_right');
                this.renderer.addClass(this.nativeElement, 'mc-icon-button_right');
            }
        }
        else if (this.icons.length === twoIcons) {
            this.renderer.addClass(firstIconElement, 'mc-icon_left');
            this.renderer.addClass(secondIconElement, 'mc-icon_right');
        }
    }
}
McButtonCssStyler.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'button[mc-button], a[mc-button]',
                host: {
                    '[class.mc-button]': '!isIconButton',
                    '[class.mc-icon-button]': 'isIconButton'
                }
            },] }
];
/** @nocollapse */
McButtonCssStyler.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] }
];
class McButtonBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McButtonMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McButtonBase)));
class McButton extends McButtonMixinBase {
    constructor(elementRef, _focusMonitor) {
        super(elementRef);
        this._focusMonitor = _focusMonitor;
        this._focusMonitor.monitor(this._elementRef.nativeElement, true);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
    }
    focus() {
        this.getHostElement().focus();
    }
    getHostElement() {
        return this._elementRef.nativeElement;
    }
}
McButton.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'button[mc-button]',
                template: "<div class=\"mc-button-wrapper\">\n    <ng-content></ng-content>\n</div>\n<div class=\"mc-button-overlay\"></div>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                inputs: ['disabled', 'color'],
                host: {
                    '[attr.disabled]': 'disabled || null'
                },
                styles: [".mc-button,.mc-icon-button,.mc-light-button{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;position:relative;box-sizing:border-box;display:inline-block;white-space:nowrap;text-decoration:none;text-align:center;vertical-align:baseline;border:var(--mc-button-size-border-width,1px) solid transparent;border-radius:var(--mc-button-size-border-radius,3px)}.mc-button::-moz-focus-inner,.mc-icon-button::-moz-focus-inner,.mc-light-button::-moz-focus-inner{border:0}.mc-button:focus,.mc-icon-button:focus,.mc-light-button:focus{outline:none}.mc-button[disabled],.mc-icon-button[disabled],.mc-light-button[disabled]{pointer-events:none;cursor:default}.cdk-focused.mc-button,.cdk-focused.mc-icon-button,.cdk-focused.mc-light-button{z-index:1}.mc-button{padding:calc(var(--mc-button-size-vertical-padding, 6px) - var(--mc-button-size-border-width, 1px)) calc(var(--mc-button-size-horizontal-padding, 16px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button{padding:calc(var(--mc-icon-button-size-vertical-padding, 6px) - var(--mc-button-size-border-width, 1px)) calc(var(--mc-icon-button-size-horizontal-padding, 8px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button.mc-icon-button_left{padding-right:calc(var(--mc-icon-button-size-icon-horizontal-padding, 16px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button.mc-icon-button_right{padding-left:calc(var(--mc-icon-button-size-icon-horizontal-padding, 16px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button .mc-button-wrapper{display:flex}.mc-icon-button .mc-button-wrapper .mc-icon{margin:auto;line-height:20px}.mc-icon-button .mc-button-wrapper .mc-icon_left{margin-right:var(--mc-icon-button-size-icon-padding,8px)}.mc-icon-button .mc-button-wrapper .mc-icon_right{margin-left:var(--mc-icon-button-size-icon-padding,8px)}.mc-button-overlay{position:absolute;top:-1px;left:-1px;right:-1px;bottom:-1px;pointer-events:none;border-radius:inherit}"]
            },] }
];
/** @nocollapse */
McButton.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] }
];
class McAnchor extends McButton {
    constructor(focusMonitor, elementRef) {
        super(elementRef, focusMonitor);
    }
    haltDisabledEvents(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
}
McAnchor.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'a[mc-button]',
                template: "<div class=\"mc-button-wrapper\">\n    <ng-content></ng-content>\n</div>\n<div class=\"mc-button-overlay\"></div>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                inputs: ['disabled', 'color', 'tabIndex'],
                host: {
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null',
                    '(click)': 'haltDisabledEvents($event)'
                },
                styles: [".mc-button,.mc-icon-button,.mc-light-button{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;position:relative;box-sizing:border-box;display:inline-block;white-space:nowrap;text-decoration:none;text-align:center;vertical-align:baseline;border:var(--mc-button-size-border-width,1px) solid transparent;border-radius:var(--mc-button-size-border-radius,3px)}.mc-button::-moz-focus-inner,.mc-icon-button::-moz-focus-inner,.mc-light-button::-moz-focus-inner{border:0}.mc-button:focus,.mc-icon-button:focus,.mc-light-button:focus{outline:none}.mc-button[disabled],.mc-icon-button[disabled],.mc-light-button[disabled]{pointer-events:none;cursor:default}.cdk-focused.mc-button,.cdk-focused.mc-icon-button,.cdk-focused.mc-light-button{z-index:1}.mc-button{padding:calc(var(--mc-button-size-vertical-padding, 6px) - var(--mc-button-size-border-width, 1px)) calc(var(--mc-button-size-horizontal-padding, 16px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button{padding:calc(var(--mc-icon-button-size-vertical-padding, 6px) - var(--mc-button-size-border-width, 1px)) calc(var(--mc-icon-button-size-horizontal-padding, 8px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button.mc-icon-button_left{padding-right:calc(var(--mc-icon-button-size-icon-horizontal-padding, 16px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button.mc-icon-button_right{padding-left:calc(var(--mc-icon-button-size-icon-horizontal-padding, 16px) - var(--mc-button-size-border-width, 1px))}.mc-icon-button .mc-button-wrapper{display:flex}.mc-icon-button .mc-button-wrapper .mc-icon{margin:auto;line-height:20px}.mc-icon-button .mc-button-wrapper .mc-icon_left{margin-right:var(--mc-icon-button-size-icon-padding,8px)}.mc-icon-button .mc-button-wrapper .mc-icon_right{margin-left:var(--mc-icon-button-size-icon-padding,8px)}.mc-button-overlay{position:absolute;top:-1px;left:-1px;right:-1px;bottom:-1px;pointer-events:none;border-radius:inherit}"]
            },] }
];
/** @nocollapse */
McAnchor.ctorParameters = () => [
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
];

class McButtonModule {
}
McButtonModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]
                ],
                exports: [
                    McButton,
                    McAnchor,
                    McButtonCssStyler
                ],
                declarations: [
                    McButton,
                    McAnchor,
                    McButtonCssStyler
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "iw/G":
/*!***********************************************************************!*\
  !*** ./packages/docs/src/app/shared/example-viewer/example-viewer.ts ***!
  \***********************************************************************/
/*! exports provided: ExampleViewer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExampleViewer", function() { return ExampleViewer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_example_viewer_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./example-viewer.html */ "kku+");
/* harmony import */ var _example_viewer_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./example-viewer.scss */ "HEAX");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic-examples */ "cF3b");
/* harmony import */ var _copier_copier_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../copier/copier.service */ "bLap");







/** Regular expression that matches a file name and its extension */
const fileExtensionRegex = /(.*)\.(\w+)/;
let ExampleViewer = class ExampleViewer {
    constructor(copier, elementRef) {
        this.copier = copier;
        /** Whether the source for the example is being displayed. */
        this.isSourceShown = false;
        this.isSwitcherHidden = false;
        this.shadowHide = 'hljs-shadow_hidden';
        this.maxEditorLength = 15;
        this.lineNumbers = '';
        this.codeCopyDelay = 1000;
        this.codeCopySuccessClass = 'docs-example-source-copy_success';
        this.elementRef = elementRef;
    }
    /** String key of the currently displayed example. */
    get example() {
        return this._example;
    }
    set example(exampleName) {
        if (exampleName && _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_5__["EXAMPLE_COMPONENTS"][exampleName]) {
            this._example = exampleName;
            this.exampleData = _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_5__["EXAMPLE_COMPONENTS"][exampleName];
            this.selectedPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](this.exampleData.component);
            this.generateExampleTabs();
        }
        else {
            // tslint:disable-next-line:no-console
            console.error(`Could not find example: ${exampleName}`);
        }
    }
    ngAfterContentChecked() {
        if (!this.lineNumbers) {
            this.setLineNumbers();
        }
    }
    setLineNumbers() {
        const exampleSource = this.elementRef
            .nativeElement.querySelector('.mc-tab-body__active .docs-example-source-viewer');
        if (exampleSource) {
            const text = exampleSource.textContent.match(/\n/g);
            const length = text ? text.length + 1 : 0;
            this.lineNumbers = '';
            for (let i = 1; i <= length; i++) {
                this.lineNumbers += `${i}\n`;
            }
            this.isSwitcherHidden = length < this.maxEditorLength;
        }
    }
    toggleSourceView() {
        this.isSourceShown = !this.isSourceShown;
    }
    getExampleTabNames() {
        return Object.keys(this.exampleTabs);
    }
    copyCode(event) {
        const code = this.elementRef.nativeElement.querySelector('.docs-example-source-viewer');
        // event.target.parentNode.parentNode.select();
        const range = document.createRange();
        range.selectNodeContents(code);
        const sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
        document.execCommand('copy');
        sel.removeAllRanges();
        event.target.parentNode.classList.add(this.codeCopySuccessClass);
        setTimeout(() => event.target.parentNode.classList.remove(this.codeCopySuccessClass), this.codeCopyDelay);
    }
    resolveHighlightedExampleFile(fileName) {
        return `docs-content/examples-highlighted/${fileName}`;
    }
    generateExampleTabs() {
        this.exampleTabs = {
            HTML: this.resolveHighlightedExampleFile(`${this.example}-example-html.html`),
            TS: this.resolveHighlightedExampleFile(`${this.example}-example-ts.html`),
            CSS: this.resolveHighlightedExampleFile(`${this.example}-example-css.html`)
        };
        const additionalFiles = this.exampleData.additionalFiles || [];
        additionalFiles.forEach((fileName) => {
            // Since the additional files refer to the original file name, we need to transform
            // the file name to match the highlighted HTML file that displays the source.
            const fileSourceName = fileName.replace(fileExtensionRegex, '$1-$2.html');
            this.exampleTabs[fileName] = this.resolveHighlightedExampleFile(fileSourceName);
        });
    }
};
ExampleViewer.ctorParameters = () => [
    { type: _copier_copier_service__WEBPACK_IMPORTED_MODULE_6__["CopierService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"],] }] }
];
ExampleViewer.propDecorators = {
    example: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"] }]
};
ExampleViewer = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'example-viewer',
        template: _raw_loader_example_viewer_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_example_viewer_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_copier_copier_service__WEBPACK_IMPORTED_MODULE_6__["CopierService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"]])
], ExampleViewer);



/***/ }),

/***/ "jBFz":
/*!*************************************************************!*\
  !*** ./packages/docs/src/app/components/navbar/navbar.scss ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".docs-navbar-header {\n  display: flex;\n  align-items: center;\n  height: 64px;\n  padding: 16px 32px;\n}\n\n.docs-navbar-header .docs-navbar-logo {\n  display: flex;\n}\n\n.docs-navbar-header .docs-navbar-logo__img {\n  max-width: 100%;\n  width: 32px;\n  height: 32px;\n}\n\n.docs-navbar-header .docs-navbar-logo__title {\n  line-height: 32px;\n  font-size: 28px;\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n.docs-navbar-header .docs-navbar-dropdown {\n  min-width: 140px;\n}\n\n.docs-navbar-header .docs-navbar-dropdown_hidden {\n  visibility: hidden;\n}\n\n.docs-navbar-header .docs-navbar-dropdown__icon {\n  color: inherit;\n}\n\n.color-picker__icon {\n  font-size: 22px;\n}\n\n.color-picker__dropdown-content {\n  overflow: hidden;\n  display: flex;\n}\n\n.color-picker__dropdown-item {\n  padding: 5px 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.docs-navbar-version {\n  display: flex;\n  align-items: baseline;\n  margin-bottom: -5px;\n}\n\n.docs-navbar-version__number {\n  margin-left: 7px;\n}\n\n.docs-navbar-version__item {\n  display: flex;\n}\n\n.docs-navbar-version__num {\n  display: flex;\n  min-width: 50px;\n}\n\n.docs-navbar-version__date {\n  display: flex;\n  flex-grow: 1;\n  white-space: nowrap;\n}\n\n.docs-navbar-header_fixed {\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  z-index: 1000;\n}\n\n.color-picker .mc.mc-icon {\n  margin-right: 0;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25hdmJhci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BO0VBQ0ksYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixZQVBvQjtFQVFwQixrQkFBa0I7QUFMdEI7O0FBQ0E7RUFPUSxhQUFhO0FBSnJCOztBQUhBO0VBVVksZUFBZTtFQUNmLFdBQVc7RUFDWCxZQUFZO0FBSHhCOztBQVRBO0VBZ0JZLGlCQUFpQjtFQUNqQixlQUFlO0VBRVgsaUJBQVM7RUFDVCxrQkFBVTtBQUoxQjs7QUFoQkE7RUEwQlEsZ0JBQWdCO0FBTnhCOztBQXBCQTtFQTZCWSxrQkFBa0I7QUFMOUI7O0FBeEJBO0VBZ0NrQixjQUFjO0FBSmhDOztBQVNJO0VBQ0ksZUF6Q3dCO0FBbUNoQzs7QUFTSTtFQUNJLGdCQUFnQjtFQUNoQixhQUFZO0FBTnBCOztBQVNJO0VBQ0ksZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBTjNCOztBQVVBO0VBQ0ksYUFBYTtFQUNiLHFCQUFxQjtFQUNyQixtQkFBbUI7QUFQdkI7O0FBU0k7RUFBWSxnQkFBZ0I7QUFMaEM7O0FBT0k7RUFBVSxhQUFhO0FBSDNCOztBQUtJO0VBQ0ksYUFBYTtFQUNiLGVBQWU7QUFGdkI7O0FBS0k7RUFDSSxhQUFhO0VBQ2IsWUFBWTtFQUNaLG1CQUFtQjtBQUYzQjs7QUFNQTtFQUNJLGVBQWU7RUFDZixPQUFPO0VBQ1AsTUFBTTtFQUNOLFFBQVE7RUFDUixhQUFhO0FBSGpCOztBQU1BO0VBQ0ksZUFBZTtBQUhuQiIsImZpbGUiOiJuYXZiYXIuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCJuYXZiYXItdGhlbWVcIjtcblxuJGRvYy1uYXZiYXItaGVpZ2h0OiA2NHB4O1xuJGRvYy1uYXZiYXItaWNvbi1mb250LXNpemU6IDIycHg7XG4kZG9jLW5hdmJhci1wYWRkaW5nOiAxMHB4O1xuXG4uZG9jcy1uYXZiYXItaGVhZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgaGVpZ2h0OiAkZG9jLW5hdmJhci1oZWlnaHQ7XG4gICAgcGFkZGluZzogMTZweCAzMnB4O1xuXG4gICAgLmRvY3MtbmF2YmFyLWxvZ28ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuXG4gICAgICAgICZfX2ltZyB7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICB3aWR0aDogMzJweDtcbiAgICAgICAgICAgIGhlaWdodDogMzJweDtcbiAgICAgICAgfVxuXG4gICAgICAgICZfX3RpdGxlIHtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICAgICAgICAgICAgZm9udC1zaXplOiAyOHB4O1xuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgIGxlZnQ6IDhweDtcbiAgICAgICAgICAgICAgICByaWdodDogOHB4O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5kb2NzLW5hdmJhci1kcm9wZG93biB7XG4gICAgICAgIG1pbi13aWR0aDogMTQwcHg7XG5cbiAgICAgICAgJl9oaWRkZW4ge1xuICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgJl9faWNvbiB7IGNvbG9yOiBpbmhlcml0OyB9XG4gICAgfVxufVxuXG4uY29sb3ItcGlja2VyIHtcbiAgICAmX19pY29uIHtcbiAgICAgICAgZm9udC1zaXplOiAkZG9jLW5hdmJhci1pY29uLWZvbnQtc2l6ZTtcbiAgICB9XG5cbiAgICAmX19kcm9wZG93bi1jb250ZW50IHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgZGlzcGxheTpmbGV4O1xuICAgIH1cblxuICAgICZfX2Ryb3Bkb3duLWl0ZW0ge1xuICAgICAgICBwYWRkaW5nOiA1cHggNXB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG59XG5cbi5kb2NzLW5hdmJhci12ZXJzaW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICBtYXJnaW4tYm90dG9tOiAtNXB4O1xuXG4gICAgJl9fbnVtYmVyIHsgbWFyZ2luLWxlZnQ6IDdweDsgfVxuXG4gICAgJl9faXRlbSB7IGRpc3BsYXk6IGZsZXg7IH1cblxuICAgICZfX251bSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1pbi13aWR0aDogNTBweDtcbiAgICB9XG5cbiAgICAmX19kYXRlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cbn1cblxuLmRvY3MtbmF2YmFyLWhlYWRlcl9maXhlZCB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIHotaW5kZXg6IDEwMDA7XG59XG5cbi5jb2xvci1waWNrZXIgLm1jLm1jLWljb24ge1xuICAgIG1hcmdpbi1yaWdodDogMDtcbn1cbiJdfQ== */");

/***/ }),

/***/ "jCoG":
/*!*****************************************************!*\
  !*** ./packages/docs/src/app/docs.module-routes.ts ***!
  \*****************************************************/
/*! exports provided: APP_ROUTES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_ROUTES", function() { return APP_ROUTES; });
/* harmony import */ var _components_component_viewer_component_viewer_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/component-viewer/component-viewer.component */ "6uKg");
/* harmony import */ var _components_main_layout_main_layout_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/main-layout/main-layout.component */ "0PwA");


const APP_ROUTES = [
    {
        path: '',
        component: _components_main_layout_main_layout_component__WEBPACK_IMPORTED_MODULE_1__["MainLayoutComponent"],
        children: [
            { path: ':id', redirectTo: ':id', pathMatch: 'full' },
            {
                path: ':id',
                component: _components_component_viewer_component_viewer_component__WEBPACK_IMPORTED_MODULE_0__["ComponentViewerComponent"],
                children: [
                    { path: '', redirectTo: 'overview', pathMatch: 'full' },
                    { path: 'overview', component: _components_component_viewer_component_viewer_component__WEBPACK_IMPORTED_MODULE_0__["ComponentOverviewComponent"], pathMatch: 'full' },
                    { path: '**', redirectTo: 'overview' }
                ]
            }
        ]
    },
    { path: '**', redirectTo: '' }
];


/***/ }),

/***/ "kGUy":
/*!************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-dropdown.js ***!
  \************************************************************/
/*! exports provided: MC_DROPDOWN_DEFAULT_OPTIONS, MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY, MC_DROPDOWN_PANEL, MC_DROPDOWN_SCROLL_STRATEGY, MC_DROPDOWN_SCROLL_STRATEGY_FACTORY, MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdown, McDropdownContent, McDropdownItem, McDropdownItemBase, McDropdownItemMixinBase, McDropdownModule, McDropdownTrigger, NESTED_PANEL_TOP_PADDING, fadeInItems, mcDropdownAnimations, throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY, throwMcDropdownMissingError, transformDropdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_DEFAULT_OPTIONS", function() { return MC_DROPDOWN_DEFAULT_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY", function() { return MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_PANEL", function() { return MC_DROPDOWN_PANEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_SCROLL_STRATEGY", function() { return MC_DROPDOWN_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_SCROLL_STRATEGY_FACTORY", function() { return MC_DROPDOWN_SCROLL_STRATEGY_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER", function() { return MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdown", function() { return McDropdown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdownContent", function() { return McDropdownContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdownItem", function() { return McDropdownItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdownItemBase", function() { return McDropdownItemBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdownItemMixinBase", function() { return McDropdownItemMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdownModule", function() { return McDropdownModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McDropdownTrigger", function() { return McDropdownTrigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NESTED_PANEL_TOP_PADDING", function() { return NESTED_PANEL_TOP_PADDING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fadeInItems", function() { return fadeInItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcDropdownAnimations", function() { return mcDropdownAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwMcDropdownInvalidPositionX", function() { return throwMcDropdownInvalidPositionX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwMcDropdownInvalidPositionY", function() { return throwMcDropdownInvalidPositionY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwMcDropdownMissingError", function() { return throwMcDropdownMissingError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformDropdown", function() { return transformDropdown; });
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/animations */ "GS7A");
















/**
 * Dropdown content that will be rendered lazily once the dropdown is opened.
 */
class McDropdownContent {
    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {
        this._template = _template;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._appRef = _appRef;
        this._injector = _injector;
        this._viewContainerRef = _viewContainerRef;
        this._document = _document;
        /** Emits when the dropdown content has been attached. */
        this.attached = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
    }
    /**
     * Attaches the content with a particular context.
     * @docs-private
     */
    attach(context = {}) {
        if (!this.portal) {
            this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["TemplatePortal"](this._template, this._viewContainerRef);
        }
        this.detach();
        if (!this.outlet) {
            this.outlet = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["DomPortalOutlet"](this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);
        }
        const element = this._template.elementRef.nativeElement;
        // Because we support opening the same dropdown from different triggers (which in turn have their
        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we
        // risk it staying attached to a pane that's no longer in the DOM.
        element.parentNode.insertBefore(this.outlet.outletElement, element);
        this.portal.attach(this.outlet, context);
        this.attached.next();
    }
    /**
     * Detaches the content.
     * @docs-private
     */
    detach() {
        if (this.portal.isAttached) {
            this.portal.detach();
        }
    }
    ngOnDestroy() {
        if (this.outlet) {
            this.outlet.dispose();
        }
    }
}
McDropdownContent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: 'ng-template[mcDropdownContent]'
            },] }
];
/** @nocollapse */
McDropdownContent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ComponentFactoryResolver"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ApplicationRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injector"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] }
];

/**
 * Injection token used to provide the parent dropdown to dropdown-specific components.
 * @docs-private
 */
const MC_DROPDOWN_PANEL = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MC_DROPDOWN_PANEL');

// Boilerplate for applying mixins to McDropdownItem.
/** @docs-private */
class McDropdownItemBase {
}
// tslint:disable-next-line:naming-convention
const McDropdownItemMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_7__["mixinDisabled"])(McDropdownItemBase));
/**
 * This directive is intended to be used inside an mc-dropdown tag.
 * It exists mostly to set the role attribute.
 */
class McDropdownItem extends McDropdownItemMixinBase {
    constructor(_elementRef, _focusMonitor, document, _parentDropdownPanel) {
        super();
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this.document = document;
        this._parentDropdownPanel = _parentDropdownPanel;
        /** ARIA role for the dropdown item. */
        this.role = 'menuitem';
        /** Stream that emits when the dropdown item is hovered. */
        this.hovered = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        /** Whether the dropdown item is highlighted. */
        this.highlighted = false;
        /** Whether the dropdown item acts as a trigger for a nested dropdown. */
        this.triggersNestedDropdown = false;
        if (_focusMonitor) {
            // Start monitoring the element so it gets the appropriate focused classes. We want
            // to show the focus style for dropdown items only when the focus was not caused by a
            // mouse or touch interaction.
            _focusMonitor.monitor(this._elementRef.nativeElement, false);
        }
        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {
            _parentDropdownPanel.addItem(this);
        }
    }
    /** Focuses the dropdown item. */
    focus(origin = 'program') {
        if (this._focusMonitor) {
            this._focusMonitor.focusVia(this.getHostElement(), origin);
        }
        else {
            this.getHostElement().focus();
        }
    }
    ngOnDestroy() {
        if (this._focusMonitor) {
            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
        }
        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {
            this._parentDropdownPanel.removeItem(this);
        }
        this.hovered.complete();
    }
    /** Returns the host DOM element. */
    getHostElement() {
        return this._elementRef.nativeElement;
    }
    /** Prevents the default element actions if it is disabled. */
    haltDisabledEvents(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    /** Emits to the hover stream. */
    handleMouseEnter() {
        this.hovered.next(this);
    }
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel() {
        const element = this.content.nativeElement;
        // tslint:disable-next-line:no-magic-numbers
        const textNodeType = this.document ? this.document.TEXT_NODE : 3;
        let output = '';
        if (element.childNodes) {
            const length = element.childNodes.length;
            // Go through all the top-level text nodes and extract their text.
            // We skip anything that's not a text node to prevent the text from
            // being thrown off by something like an icon.
            for (let i = 0; i < length; i++) {
                if (element.childNodes[i].nodeType === textNodeType) {
                    output += element.childNodes[i].textContent;
                }
            }
        }
        return output.trim();
    }
}
McDropdownItem.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-dropdown-item, [mc-dropdown-item]',
                exportAs: 'mcDropdownItem',
                inputs: ['disabled', 'tabIndex'],
                host: {
                    class: 'mc-dropdown__item',
                    '[class.mc-dropdown__item_highlighted]': 'highlighted',
                    '[class.mc-disabled]': 'disabled',
                    '[attr.role]': 'role',
                    '[attr.tabindex]': 'tabIndex',
                    '(click)': 'haltDisabledEvents($event)',
                    '(mouseenter)': 'handleMouseEnter()'
                },
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                template: `
        <div #content>
            <ng-content></ng-content>
        </div>
        <i *ngIf="triggersNestedDropdown" mc-icon="mc-angle-right-M_16" class="mc-dropdown__trigger"></i>
    `
            },] }
];
/** @nocollapse */
McDropdownItem.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MC_DROPDOWN_PANEL,] }] }
];
McDropdownItem.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['content', { static: false },] }]
};

/**
 * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance
 * @docs-private
 */
function throwMcDropdownMissingError() {
    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.
    Example:
      <mc-dropdown #dropdown="mcDropdown"></mc-dropdown>
      <button [mcDropdownTriggerFor]="dropdown"></button>`);
}
/**
 * Throws an exception for the case when dropdown's x-position value isn't valid.
 * In other words, it doesn't match 'before' or 'after'.
 * @docs-private
 */
function throwMcDropdownInvalidPositionX() {
    throw Error(`xPosition value must be either 'before' or after'.
      Example: <mc-dropdown xPosition="before" #dropdown="mcDropdown"></mc-dropdown>`);
}
/**
 * Throws an exception for the case when dropdown's y-position value isn't valid.
 * In other words, it doesn't match 'above' or 'below'.
 * @docs-private
 */
function throwMcDropdownInvalidPositionY() {
    throw Error(`yPosition value must be either 'above' or below'.
      Example: <mc-dropdown yPosition="above" #dropdown="mcDropdown"></mc-dropdown>`);
}

/**
 * Animations used by the mc-dropdown component.
 * @docs-private
 */
const mcDropdownAnimations = {
    /**
     * This animation controls the dropdown panel's entry and exit from the page.
     *
     * When the dropdown panel is added to the DOM, it scales in and fades in its border.
     *
     * When the dropdown panel is removed from the DOM, it simply fades out after a brief
     * delay to display the ripple.
     */
    transformDropdown: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('transformDropdown', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({
            opacity: 0,
            transform: 'scale(0.8)'
        })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["group"])([
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["query"])('.mc-dropdown__content', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('50ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({ opacity: 1 }))),
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('50ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({ transform: 'scale(1)' }))
        ])),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('50ms 25ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({ opacity: 0 })))
    ]),
    /**
     * This animation fades in the background color and content of the dropdown panel
     * after its containing element is scaled in.
     */
    fadeInItems: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["trigger"])('fadeInItems', [
        // now. Remove next time we do breaking changes.
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({ opacity: 1 })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["transition"])('void => *', [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["style"])({ opacity: 0 }),
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_14__["animate"])('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')
        ])
    ])
};
const fadeInItems = mcDropdownAnimations.fadeInItems;
const transformDropdown = mcDropdownAnimations.transformDropdown;

/** Injection token to be used to override the default options for `mc-dropdown`. */
const MC_DROPDOWN_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-dropdown-default-options', {
    providedIn: 'root',
    factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY
});
/** @docs-private */
// tslint:disable-next-line:naming-convention
function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY() {
    return {
        overlapTriggerX: true,
        overlapTriggerY: false,
        xPosition: 'after',
        yPosition: 'below',
        backdropClass: 'cdk-overlay-transparent-backdrop',
        hasBackdrop: false
    };
}
class McDropdown {
    constructor(_elementRef, _ngZone, _defaultOptions) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._defaultOptions = _defaultOptions;
        this._xPosition = this._defaultOptions.xPosition;
        this._yPosition = this._defaultOptions.yPosition;
        this._overlapTriggerX = this._defaultOptions.overlapTriggerX;
        this._overlapTriggerY = this._defaultOptions.overlapTriggerY;
        this._hasBackdrop = this._defaultOptions.hasBackdrop;
        /** Config object to be passed into the dropdown's ngClass */
        this.classList = {};
        /** Current state of the panel animation. */
        this.panelAnimationState = 'void';
        /** Emits whenever an animation on the dropdown completes. */
        this.animationDone = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        /** Class to be added to the backdrop element. */
        this.backdropClass = this._defaultOptions.backdropClass;
        /** Event emitted when the dropdown is closed. */
        this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Dropdown items inside the current dropdown. */
        this.itemsArray = [];
        /** Emits whenever the amount of dropdown items changes. */
        this.itemChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        /** Subscription to tab events on the dropdown panel */
        this.tabSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
    }
    /** Position of the dropdown in the X axis. */
    get xPosition() {
        return this._xPosition;
    }
    set xPosition(value) {
        if (value !== 'before' && value !== 'after') {
            throwMcDropdownInvalidPositionX();
        }
        this._xPosition = value;
        this.setPositionClasses();
    }
    /** Position of the dropdown in the Y axis. */
    get yPosition() {
        return this._yPosition;
    }
    set yPosition(value) {
        if (value !== 'above' && value !== 'below') {
            throwMcDropdownInvalidPositionY();
        }
        this._yPosition = value;
        this.setPositionClasses();
    }
    /** Whether the dropdown should overlap its trigger vertically. */
    get overlapTriggerY() {
        return this._overlapTriggerY;
    }
    set overlapTriggerY(value) {
        this._overlapTriggerY = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /** Whether the dropdown should overlap its trigger horizontally. */
    get overlapTriggerX() {
        return this._overlapTriggerX;
    }
    set overlapTriggerX(value) {
        this._overlapTriggerX = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /** Whether the dropdown has a backdrop. */
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(value) {
        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /**
     * This method takes classes set on the host mc-dropdown element and applies them on the
     * dropdown template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing dropdown from outside the component.
     * @param classes list of class names
     */
    set panelClass(classes) {
        const previousPanelClass = this.previousPanelClass;
        if (previousPanelClass && previousPanelClass.length) {
            previousPanelClass.split(' ').forEach((className) => {
                this.classList[className] = false;
            });
        }
        this.previousPanelClass = classes;
        if (classes && classes.length) {
            classes.split(' ').forEach((className) => {
                this.classList[className] = true;
            });
            this._elementRef.nativeElement.className = '';
        }
    }
    ngOnInit() {
        this.setPositionClasses();
    }
    ngAfterContentInit() {
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__["FocusKeyManager"](this.items)
            .withWrap()
            .withTypeAhead();
        this.tabSubscription = this.keyManager.tabOut.subscribe(() => this.closed.emit('tab'));
    }
    ngOnDestroy() {
        this.tabSubscription.unsubscribe();
        this.closed.complete();
    }
    /** Stream that emits whenever the hovered dropdown item changes. */
    hovered() {
        return this.itemChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["startWith"])(this.itemsArray), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["switchMap"])((items) => Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(...items.map((item) => item.hovered))));
    }
    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */
    handleKeydown(event) {
        // tslint:disable-next-line:deprecation
        const keyCode = event.keyCode;
        switch (keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ESCAPE"]:
                this.closed.emit('keydown');
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"]:
                if (this.parent && this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"]:
                if (this.parent && this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            default:
                if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["UP_ARROW"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["DOWN_ARROW"]) {
                    this.keyManager.setFocusOrigin('keyboard');
                }
                this.keyManager.onKeydown(event);
        }
    }
    handleClick() {
        this.closed.emit('click');
    }
    /**
     * Focus the first item in the dropdown.
     * @param origin Action from which the focus originated. Used to set the correct styling.
     */
    focusFirstItem(origin = 'program') {
        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
        if (this.lazyContent) {
            this._ngZone.onStable.asObservable()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1))
                .subscribe(() => this.keyManager.setFocusOrigin(origin).setFirstItemActive());
        }
        else {
            this.keyManager.setFocusOrigin(origin).setFirstItemActive();
        }
    }
    /**
     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     */
    resetActiveItem() {
        this.keyManager.setActiveItem(-1);
    }
    /**
     * Registers a dropdown item with the dropdown.
     * @docs-private
     */
    addItem(item) {
        // We register the items through this method, rather than picking them up through
        // `ContentChildren`, because we need the items to be picked up by their closest
        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,
        // all descendant items will bleed into the top-level dropdown in the case where the consumer
        // has `mc-dropdown` instances nested inside each other.
        if (this.itemsArray.indexOf(item) === -1) {
            this.itemsArray.push(item);
            this.itemChanges.next(this.itemsArray);
        }
    }
    /**
     * Removes an item from the dropdown.
     * @docs-private
     */
    removeItem(item) {
        const index = this.itemsArray.indexOf(item);
        if (this.itemsArray.indexOf(item) > -1) {
            this.itemsArray.splice(index, 1);
            this.itemChanges.next(this.itemsArray);
        }
    }
    /**
     * Adds classes to the dropdown panel based on its position. Can be used by
     * consumers to add specific styling based on the position.
     * @param posX Position of the dropdown along the x axis.
     * @param posY Position of the dropdown along the y axis.
     * @docs-private
     */
    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {
        const classes = this.classList;
        classes['mc-dropdown-before'] = posX === 'before';
        classes['mc-dropdown-after'] = posX === 'after';
        classes['mc-dropdown-above'] = posY === 'above';
        classes['mc-dropdown-below'] = posY === 'below';
    }
    /** Starts the enter animation. */
    startAnimation() {
        this.panelAnimationState = 'enter';
    }
    /** Resets the panel animation to its initial state. */
    resetAnimation() {
        this.panelAnimationState = 'void';
    }
    /** Callback that is invoked when the panel animation completes. */
    onAnimationDone(event) {
        this.animationDone.next(event);
        this.isAnimating = false;
    }
    onAnimationStart(event) {
        this.isAnimating = true;
        // Scroll the content element to the top as soon as the animation starts. This is necessary,
        // because we move focus to the first item while it's still being animated, which can throw
        // the browser off when it determines the scroll position. Alternatively we can move focus
        // when the animation is done, however moving focus asynchronously will interrupt screen
        // readers which are in the process of reading out the dropdown already. We take the `element`
        // from the `event` since we can't use a `ViewChild` to access the pane.
        if (event.toState === 'enter' && this.keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    }
}
McDropdown.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-dropdown',
                exportAs: 'mcDropdown',
                template: "<ng-template>\n    <div\n        class=\"mc-dropdown__panel\"\n        [ngClass]=\"classList\"\n        (keydown)=\"handleKeydown($event)\"\n        (click)=\"handleClick()\"\n        [@transformDropdown]=\"panelAnimationState\"\n        (@transformDropdown.start)=\"onAnimationStart($event)\"\n        (@transformDropdown.done)=\"onAnimationDone($event)\"\n        role=\"dropdown\">\n        <div class=\"mc-dropdown__content\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</ng-template>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                animations: [
                    mcDropdownAnimations.transformDropdown,
                    mcDropdownAnimations.fadeInItems
                ],
                providers: [
                    { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }
                ],
                styles: [".mc-dropdown__item{display:flex;align-items:center;position:relative;box-sizing:border-box;width:100%;border:1px solid transparent;outline:none;padding:var(--mc-dropdown-item-size-padding,5px 15px);text-align:left;white-space:nowrap}.mc-dropdown__item:not([disabled]):not(.mc-disabled){cursor:pointer}.mc-dropdown__item .mc-dropdown__item-caption{margin-top:4px}.mc-dropdown__item .docs-navbar-version__num{margin-right:4px}.mc-dropdown__item>div{width:100%}.mc-dropdown__trigger{margin-left:auto;padding-left:var(--mc-dropdown-trigger-size-padding-left,16px)}.mc-dropdown__panel{min-width:100%;overflow:auto;margin-top:-1px;border-width:var(--mc-dropdown-panel-size-border-width,1px);border-style:solid;border-bottom-left-radius:var(--mc-dropdown-panel-size-border-radius,3px);border-bottom-right-radius:var(--mc-dropdown-panel-size-border-radius,3px);padding:var(--mc-dropdown-panel-size-padding,4px 0)}.mc-dropdown__content h1,.mc-dropdown__content h2,.mc-dropdown__content h3,.mc-dropdown__content h4,.mc-dropdown__content h5{padding:8px 16px 4px;margin:0}"]
            },] }
];
/** @nocollapse */
McDropdown.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MC_DROPDOWN_DEFAULT_OPTIONS,] }] }
];
McDropdown.propDecorators = {
    xPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    yPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    overlapTriggerY: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    overlapTriggerX: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['class',] }],
    backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    templateRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"], { static: false },] }],
    items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [McDropdownItem,] }],
    lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [McDropdownContent, { static: false },] }],
    closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }]
};

/** Injection token that determines the scroll handling while the dropdown is open. */
const MC_DROPDOWN_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mc-dropdown-scroll-strategy');
/** @docs-private */
// tslint:disable-next-line:naming-convention
function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MC_DROPDOWN_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"]],
    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY
};
/** Default top padding of the nested dropdown panel. */
const NESTED_PANEL_TOP_PADDING = 2;
/** Options for binding a passive event listener. */
const passiveEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["normalizePassiveListenerOptions"])({ passive: true });
/**
 * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is
 * responsible for toggling the display of the provided dropdown instance.
 */
class McDropdownTrigger {
    constructor(_overlay, _element, _viewContainerRef, _scrollStrategy, _parent, _dropdownItemInstance, _dir, _focusMonitor) {
        this._overlay = _overlay;
        this._element = _element;
        this._viewContainerRef = _viewContainerRef;
        this._scrollStrategy = _scrollStrategy;
        this._parent = _parent;
        this._dropdownItemInstance = _dropdownItemInstance;
        this._dir = _dir;
        this._focusMonitor = _focusMonitor;
        // Tracking input type is necessary so it's possible to only auto-focus
        // the first item of the list when the dropdown is opened via the keyboard
        this.openedBy = null;
        /** Event emitted when the associated dropdown is opened. */
        this.dropdownOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Event emitted when the associated dropdown is closed. */
        this.dropdownClosed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        this._opened = false;
        this.overlayRef = null;
        this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        this.hoverSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
        /**
         * Handles touch start events on the trigger.
         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.
         */
        this.handleTouchStart = () => this.openedBy = 'touch';
        _element.nativeElement.addEventListener('touchstart', this.handleTouchStart, passiveEventListenerOptions);
        if (_dropdownItemInstance) {
            _dropdownItemInstance.triggersNestedDropdown = this.triggersNestedDropdown();
        }
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /** References the dropdown instance that the trigger is associated with. */
    get dropdown() {
        return this._dropdown;
    }
    set dropdown(dropdown) {
        if (dropdown === this._dropdown) {
            return;
        }
        this._dropdown = dropdown;
        this.closeSubscription.unsubscribe();
        if (dropdown) {
            this.closeSubscription = dropdown.closed.asObservable().subscribe((reason) => {
                this.destroy();
                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.
                if ((reason === 'click' || reason === 'tab') && this._parent) {
                    this._parent.closed.emit(reason);
                }
            });
        }
    }
    /** Whether the dropdown is open. */
    get opened() {
        return this._opened;
    }
    ngAfterContentInit() {
        this.check();
        this.handleHover();
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
            this.overlayRef = null;
        }
        this._element.nativeElement.removeEventListener('touchstart', this.handleTouchStart, passiveEventListenerOptions);
        this.cleanUpSubscriptions();
        this.closeSubscription.unsubscribe();
    }
    /** Whether the dropdown triggers a nested dropdown or a top-level one. */
    triggersNestedDropdown() {
        return !!(this._dropdownItemInstance && this._parent);
    }
    /** Toggles the dropdown between the open and closed states. */
    toggle() {
        // tslint:disable-next-line:no-void-expression
        return this._opened ? this.close() : this.open();
    }
    /** Opens the dropdown. */
    open() {
        if (this._opened) {
            return;
        }
        this.check();
        const overlayRef = this.createOverlay();
        const overlayConfig = overlayRef.getConfig();
        this.setPosition(overlayConfig.positionStrategy);
        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop ? !this.triggersNestedDropdown() :
            this.dropdown.hasBackdrop;
        overlayRef.attach(this.getPortal());
        if (this.dropdown.lazyContent) {
            this.dropdown.lazyContent.attach(this.data);
        }
        this.closeSubscription = this.closingActions().subscribe(() => this.close());
        this.init();
        if (this.dropdown instanceof McDropdown) {
            this.dropdown.startAnimation();
        }
    }
    /** Closes the dropdown. */
    close() {
        this.dropdown.closed.emit();
    }
    /**
     * Focuses the dropdown trigger.
     * @param origin Source of the dropdown trigger's focus.
     */
    focus(origin = 'program') {
        if (this._focusMonitor) {
            this._focusMonitor.focusVia(this._element.nativeElement, origin);
        }
        else {
            this._element.nativeElement.focus();
        }
    }
    /** Handles mouse presses on the trigger. */
    handleMousedown(event) {
        // Since right or middle button clicks won't trigger the `click` event,
        // we shouldn't consider the dropdown as opened by mouse in those cases.
        this.openedBy = event.button === 0 ? 'mouse' : null;
        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,
        // we should prevent focus from moving onto it via click to avoid the
        // highlight from lingering on the dropdown item.
        if (this.triggersNestedDropdown()) {
            event.preventDefault();
        }
    }
    /** Handles key presses on the trigger. */
    handleKeydown(event) {
        // tslint:disable-next-line:deprecation
        const keyCode = event.key || event.keyCode;
        this.openedBy = 'keyboard';
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"] || keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"]) {
            this.open();
        }
        if (this.triggersNestedDropdown() && ((keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["RIGHT_ARROW"] && this.dir === 'ltr') ||
            (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["LEFT_ARROW"] && this.dir === 'rtl'))) {
            this.open();
        }
    }
    /** Handles click events on the trigger. */
    handleClick(event) {
        if (this.triggersNestedDropdown()) {
            // Stop event propagation to avoid closing the parent dropdown.
            event.stopPropagation();
            this.open();
        }
        else {
            this.toggle();
        }
    }
    /** Closes the dropdown and does the necessary cleanup. */
    destroy() {
        if (!this.overlayRef || !this.opened) {
            return;
        }
        const dropdown = this.dropdown;
        this.closeSubscription.unsubscribe();
        this.overlayRef.detach();
        if (dropdown instanceof McDropdown) {
            dropdown.resetAnimation();
            if (dropdown.lazyContent) {
                // Wait for the exit animation to finish before detaching the content.
                dropdown.animationDone
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])((event) => event.toState === 'void'), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1), 
                // Interrupt if the content got re-attached.
                Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["takeUntil"])(dropdown.lazyContent.attached))
                    .subscribe({ next: () => dropdown.lazyContent.detach(), error: undefined, complete: () => {
                        // No matter whether the content got re-attached, reset the dropdown.
                        this.reset();
                    } });
            }
            else {
                this.reset();
            }
        }
        else {
            this.reset();
            if (dropdown.lazyContent) {
                dropdown.lazyContent.detach();
            }
        }
    }
    /**
     * This method sets the dropdown state to open and focuses the first item if
     * the dropdown was opened via the keyboard.
     */
    init() {
        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;
        this.dropdown.direction = this.dir;
        this.setIsOpened(true);
        this.dropdown.focusFirstItem(this.openedBy);
    }
    /**
     * This method resets the dropdown when it's closed, most importantly restoring
     * focus to the dropdown trigger if the dropdown was opened via the keyboard.
     */
    reset() {
        this.setIsOpened(false);
        // We should reset focus if the user is navigating using a keyboard or
        // if we have a top-level trigger which might cause focus to be lost
        // when clicking on the backdrop.
        if (!this.openedBy) {
            // Note that the focus style will show up both for `program` and
            // `keyboard` so we don't have to specify which one it is.
            this.focus();
        }
        else if (!this.triggersNestedDropdown()) {
            this.focus(this.openedBy);
        }
        this.openedBy = null;
    }
    // set state rather than toggle to support triggers sharing a dropdown
    setIsOpened(isOpen) {
        this._opened = isOpen;
        // tslint:disable-next-line:no-void-expression
        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();
        if (this.triggersNestedDropdown()) {
            this._dropdownItemInstance.highlighted = isOpen;
        }
    }
    /**
     * This method checks that a valid instance of McDropdown has been passed into
     * mcDropdownTriggerFor. If not, an exception is thrown.
     */
    check() {
        if (!this.dropdown) {
            throwMcDropdownMissingError();
        }
    }
    /**
     * This method creates the overlay from the provided dropdown's template and saves its
     * OverlayRef so that it can be attached to the DOM when open is called.
     */
    createOverlay() {
        if (!this.overlayRef) {
            const config = this.getOverlayConfig();
            this.subscribeToPositions(config.positionStrategy);
            this.overlayRef = this._overlay.create(config);
            // Consume the `keydownEvents` in order to prevent them from going to another overlay.
            // Ideally we'd also have our keyboard event logic in here, however doing so will
            // break anybody that may have implemented the `McDropdownPanel` themselves.
            this.overlayRef.keydownEvents().subscribe();
        }
        return this.overlayRef;
    }
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    getOverlayConfig() {
        return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayConfig"]({
            positionStrategy: this._overlay.position()
                .flexibleConnectedTo(this._element)
                .withLockedPosition()
                .withTransformOriginOn('.mc-dropdown__panel'),
            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',
            scrollStrategy: this._scrollStrategy(),
            direction: this._dir
        });
    }
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the dropdown based on the new position. This ensures the animation origin is always
     * correct, even if a fallback position is used for the overlay.
     */
    subscribeToPositions(position) {
        if (this.dropdown.setPositionClasses) {
            position.positionChanges.subscribe((change) => {
                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                this.dropdown.setPositionClasses(posX, posY);
            });
        }
    }
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @param positionStrategy Strategy whose position to update.
     */
    setPosition(positionStrategy) {
        let [originX, originFallbackX, overlayX, overlayFallbackX] = this.dropdown.xPosition === 'before' ?
            ['end', 'start', 'end', 'start'] :
            ['start', 'end', 'start', 'end'];
        // tslint:disable-next-line:prefer-const
        let [overlayY, overlayFallbackY, originY, originFallbackY] = this.dropdown.yPosition === 'above' ?
            ['bottom', 'top', 'bottom', 'top'] :
            ['top', 'bottom', 'top', 'bottom'];
        let offsetY = 0;
        if (this.triggersNestedDropdown()) {
            // When the dropdown is nested, it should always align itself
            // to the edges of the trigger, instead of overlapping it.
            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';
            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;
        }
        else {
            if (!this.dropdown.overlapTriggerY) {
                originY = overlayY === 'top' ? 'bottom' : 'top';
                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
            }
            if (!this.dropdown.overlapTriggerX) {
                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';
                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
            }
        }
        positionStrategy.withPositions([
            { originX, originY, overlayX, overlayY, offsetY },
            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ]);
    }
    /** Cleans up the active subscriptions. */
    cleanUpSubscriptions() {
        this.closeSubscription.unsubscribe();
        this.hoverSubscription.unsubscribe();
    }
    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */
    closingActions() {
        const backdrop = this.overlayRef.backdropClick();
        const outsidePointerEvents = this.overlayRef.outsidePointerEvents();
        const detachments = this.overlayRef.detachments();
        const parentClose = this._parent ? this._parent.closed : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])();
        const hover = this._parent ? this._parent.hovered().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])((active) => active !== this._dropdownItemInstance), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(() => this._opened)) : Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["of"])();
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(backdrop, outsidePointerEvents, parentClose, hover, detachments);
    }
    /** Handles the cases where the user hovers over the trigger. */
    handleHover() {
        // Subscribe to changes in the hovered item in order to toggle the panel.
        if (!this.triggersNestedDropdown()) {
            return;
        }
        this.hoverSubscription = this._parent.hovered()
            // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown
            // with different data and triggers), we have to delay it by a tick to ensure that
            // it won't be closed immediately after it is opened.
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])((active) => active === this._dropdownItemInstance && !active.disabled), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_5__["asapScheduler"]))
            .subscribe(() => {
            this.openedBy = 'mouse';
            // If the same dropdown is used between multiple triggers, it might still be animating
            // while the new trigger tries to re-open it. Wait for the animation to finish
            // before doing so. Also interrupt if the user moves to another item.
            if (this.dropdown instanceof McDropdown && this.dropdown.isAnimating) {
                // We need the `delay(0)` here in order to avoid
                // 'changed after checked' errors in some cases. See #12194.
                this.dropdown.animationDone
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_5__["asapScheduler"]), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["takeUntil"])(this._parent.hovered()))
                    .subscribe(() => this.open());
            }
            else {
                this.open();
            }
        });
    }
    /** Gets the portal that should be attached to the overlay. */
    getPortal() {
        // Note that we can avoid this check by keeping the portal on the dropdown panel.
        // While it would be cleaner, we'd have to introduce another required method on
        // `McDropdownPanel`, making it harder to consume.
        if (!this.portal || this.portal.templateRef !== this.dropdown.templateRef) {
            this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["TemplatePortal"](this.dropdown.templateRef, this._viewContainerRef);
        }
        return this.portal;
    }
}
McDropdownTrigger.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `[mcDropdownTriggerFor]`,
                host: {
                    'aria-haspopup': 'true',
                    '[attr.aria-expanded]': 'opened || null',
                    '(mousedown)': 'handleMousedown($event)',
                    '(keydown)': 'handleKeydown($event)',
                    '(click)': 'handleClick($event)'
                },
                exportAs: 'mcDropdownTrigger'
            },] }
];
/** @nocollapse */
McDropdownTrigger.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewContainerRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MC_DROPDOWN_SCROLL_STRATEGY,] }] },
    { type: McDropdown, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: McDropdownItem, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"] }
];
McDropdownTrigger.propDecorators = {
    dropdown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcDropdownTriggerFor',] }],
    data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['mcDropdownTriggerData',] }],
    dropdownOpened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    dropdownClosed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }]
};

class McDropdownModule {
}
McDropdownModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_3__["McIconModule"]
                ],
                exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],
                declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],
                providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "kOpU":
/*!*******************************************************************************!*\
  !*** ./packages/docs/src/app/shared/table-of-contents/table-of-contents.scss ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (":host {\n  font-size: 13px;\n  width: 19%;\n  position: sticky;\n  top: 0;\n  padding-left: 25px;\n  box-sizing: border-box;\n  display: inline-flex;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RhYmxlLW9mLWNvbnRlbnRzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFlO0VBRWYsVUFBVTtFQUNWLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixvQkFBb0I7QUFBeEIiLCJmaWxlIjoidGFibGUtb2YtY29udGVudHMuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgLy8gV2lkdGggaXMgY29udGFpbmVyIHdpZHRoIG1pbnVzIGNvbnRlbnQgd2lkdGhcbiAgICB3aWR0aDogMTklO1xuICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgdG9wOiAwO1xuICAgIHBhZGRpbmctbGVmdDogMjVweDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xufVxuIl19 */");

/***/ }),

/***/ "kY4w":
/*!***************************************************************!*\
  !*** ./packages/docs/src/app/components/sidenav/sidenav.scss ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".nav {\n  position: fixed;\n  top: 64px;\n  bottom: 0;\n  z-index: 101;\n  overflow: hidden;\n  overflow-y: auto;\n  max-height: 100%;\n  width: 300px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n.nav__wrapper {\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.nav__trigger {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  font-size: 17px;\n  text-align: left;\n  border: none;\n  background: none;\n  padding: 14px 32px 6px 32px;\n}\n\n.nav__trigger .nav__trigger-icon {\n  transition: transform 225ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.nav__trigger .nav__trigger-icon_expanded_collapsed {\n  transform: rotate(0);\n}\n\n.nav__trigger .nav__trigger-icon_collapsed {\n  transform: rotate(-180deg);\n}\n\n.nav__item {\n  line-height: 20px;\n  font-size: 15px;\n}\n\n.nav__item > a {\n  position: relative;\n  text-decoration: none;\n  padding: 6px 32px;\n}\n\n.nav__item > a:hover, .nav__item > a:active, .nav__item > a:focus {\n  text-decoration: none;\n}\n\n.nav__item-selected {\n  pointer-events: none;\n  cursor: default;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NpZGVuYXYuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQTtFQUNJLGVBQWU7RUFDZixTQUFTO0VBQ1QsU0FBUztFQUNULFlBQVk7RUFFWixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixZQUFZO0VBR1IsaUJBQVM7RUFDVCxvQkFBWTtBQVRwQjs7QUFZSTtFQUNJLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsVUFBVTtFQUNWLFNBQVM7QUFUakI7O0FBWUk7RUFDSSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLFdBQVc7RUFFWCxlQUFlO0VBQ2YsZ0JBQWdCO0VBRWhCLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsMkJBQTJCO0FBWG5DOztBQUNLO0VBMUJELHdEQXVDd0U7QUFQNUU7O0FBTks7RUFla0Msb0JBQW9CO0FBTDNEOztBQVZLO0VBaUJxQiwwQkFBMEI7QUFIcEQ7O0FBUUk7RUFDSSxpQkFBaUI7RUFDakIsZUFBZTtBQUx2Qjs7QUFHSztFQUtPLGtCQUFrQjtFQUNsQixxQkFBcUI7RUFDckIsaUJBQWlCO0FBSjdCOztBQUhLO0VBU29DLHFCQUFxQjtBQUY5RDs7QUFLUTtFQUNJLG9CQUFvQjtFQUNwQixlQUFlO0FBRjNCIiwiZmlsZSI6InNpZGVuYXYuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBtaXhpbiB0cmFuc2l0aW9uICgkdHJhbnNpdGlvbikge1xuICAgIC13ZWJraXQtdHJhbnNpdGlvbjogJHRyYW5zaXRpb247XG4gICAgLW1vei10cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcbiAgICAtby10cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcbiAgICB0cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcbn1cblxuLm5hdiB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogNjRweDtcbiAgICBib3R0b206IDA7XG4gICAgei1pbmRleDogMTAxO1xuXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDMwMHB4O1xuXG4gICAgcGFkZGluZzoge1xuICAgICAgICB0b3A6IDEwcHg7XG4gICAgICAgIGJvdHRvbTogMTBweDtcbiAgICB9O1xuXG4gICAgJl9fd3JhcHBlciB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG5cbiAgICAmX190cmlnZ2VyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICBmb250LXNpemU6IDE3cHg7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG5cbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICBwYWRkaW5nOiAxNHB4IDMycHggNnB4IDMycHg7XG5cbiAgICAgICAgLm5hdl9fdHJpZ2dlci1pY29uIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zaXRpb24oIHRyYW5zZm9ybSAyMjVtcyBjdWJpYy1iZXppZXIoMC40LDAuMCwwLjIsMSkgKTtcblxuICAgICAgICAgICAgJl9leHBhbmRlZCB7ICZfY29sbGFwc2VkIHsgdHJhbnNmb3JtOiByb3RhdGUoMCk7IH0gfVxuXG4gICAgICAgICAgICAmX2NvbGxhcHNlZCB7IHRyYW5zZm9ybTogcm90YXRlKC0xODBkZWcpOyB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgICZfX2l0ZW0ge1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuXG4gICAgICAgICYgPiBhIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDZweCAzMnB4O1xuXG4gICAgICAgICAgICAmOmhvdmVyLCAmOmFjdGl2ZSwgJjpmb2N1cyB7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgJi1zZWxlY3RlZCB7XG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ== */");

/***/ }),

/***/ "kiQV":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, homepage, bugs, license, repository, engines, requiredAngularVersion, dependencies, devDependencies, resolutions, scripts, husky, collective, lint-staged, snyk, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"mosaic\",\"version\":\"11.0.3\",\"description\":\"Components for Angular\",\"homepage\":\"https://github.com/positive-js/mosaic\",\"bugs\":\"https://github.com/positive-js/mosaic/issues\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/positive-js/mosaic.git\"},\"engines\":{\"node\":\">= 12\",\"yarn\":\">= 1.0.0\"},\"requiredAngularVersion\":\">=11.0.0\",\"dependencies\":{\"@angular/animations\":\"^11.2.4\",\"@angular/cdk\":\"^11.2.2\",\"@angular/common\":\"^11.2.4\",\"@angular/compiler\":\"^11.2.4\",\"@angular/core\":\"^11.2.4\",\"@angular/forms\":\"^11.2.4\",\"@angular/platform-browser\":\"^11.2.4\",\"@ptsecurity/mosaic-icons\":\"^5.3.0\",\"core-js\":\"^3.6.5\",\"rxjs\":\"^6.5.5\",\"zone.js\":\"~0.10.3\"},\"devDependencies\":{\"@angular-devkit/architect-cli\":\"^0.1001.7\",\"@angular-devkit/build-angular\":\"^0.1102.11\",\"@angular-devkit/build-ng-packagr\":\"^0.1001.7\",\"@angular-devkit/core\":\"^11.2.3\",\"@angular-devkit/schematics\":\"^11.2.3\",\"@angular/cli\":\"^11.2.3\",\"@angular/compiler-cli\":\"^11.2.4\",\"@angular/platform-browser-dynamic\":\"^11.2.4\",\"@angular/platform-server\":\"^11.2.4\",\"@angular/router\":\"^11.2.4\",\"@commitlint/cli\":\"9.1.2\",\"@commitlint/config-conventional\":\"^7.5.0\",\"@octokit/rest\":\"^16.2.0\",\"@ptsecurity/commitlint-config\":\"^1.0.0\",\"@ptsecurity/tslint-config\":\"0.13.1\",\"@schematics/angular\":\"^11.2.5\",\"@types/chalk\":\"^2.2.0\",\"@types/fs-extra\":\"^5.0.4\",\"@types/glob\":\"^7.1.3\",\"@types/gulp\":\"^4.0.5\",\"@types/inquirer\":\"^6.5.0\",\"@types/jasmine\":\"^3.3.8\",\"@types/luxon\":\"^1.26.3\",\"@types/merge2\":\"^0.3.30\",\"@types/node\":\"^12.12.29\",\"@types/source-map\":\"^0.5.7\",\"chalk\":\"^4.0.0\",\"conventional-changelog\":\"^3.1.10\",\"dgeni\":\"^0.4.12\",\"dgeni-packages\":\"~0.28.3\",\"dotenv\":\"^8.2.0\",\"firebase-tools\":\"^9.7.0\",\"fs-extra\":\"^5.0.0\",\"glob\":\"^7.1.3\",\"gulp\":\"^4.0.0\",\"gulp-clean\":\"^0.4.0\",\"gulp-clean-css\":\"^3.10.0\",\"gulp-cli\":\"^2.0.1\",\"gulp-flatten\":\"^0.3.1\",\"gulp-highlight-files\":\"^0.0.6\",\"gulp-if\":\"^2.0.2\",\"gulp-markdown\":\"5.1.0\",\"gulp-rename\":\"^2.0.0\",\"gulp-sass\":\"^4.0.2\",\"gulp-transform\":\"^2.0.0\",\"highlight.js\":\"^10.4.1\",\"husky\":\"^4.3.8\",\"inquirer\":\"^6.5.2\",\"jasmine\":\"^3.5.0\",\"jasmine-core\":\"^3.5.0\",\"karma\":\"^5.1.1\",\"karma-chrome-launcher\":\"^3.1.0\",\"karma-coverage\":\"^2.0.1\",\"karma-coverage-istanbul-reporter\":\"^2.1.1\",\"karma-jasmine\":\"^3.1.1\",\"karma-jasmine-html-reporter\":\"1.5.2\",\"karma-junit-reporter\":\"^2.0.1\",\"karma-remap-coverage\":\"^0.1.5\",\"karma-spec-reporter\":\"^0.0.32\",\"license-checker\":\"^16.0.0\",\"lint-staged\":\"^10.2.11\",\"luxon\":\"^1.26.0\",\"madge\":\"^4.0.1\",\"magic-string\":\"^0.22.5\",\"merge2\":\"^1.2.3\",\"messageformat\":\"^2.0.5\",\"moment\":\"~2.23.0\",\"ng-packagr\":\"^11.2.4\",\"request\":\"^2.88.0\",\"resolve-bin\":\"^0.4.0\",\"sass\":\"^1.32.6\",\"scss-bundle\":\"^3.1.1\",\"snyk\":\"^1.518.0\",\"spdx-satisfies\":\"^5.0.0\",\"style-dictionary\":\"^3.0.0-rc.2\",\"stylelint\":\"^13.6.1\",\"stylelint-config-standard\":\"^19.0.0\",\"stylelint-scss\":\"^3.13.0\",\"ts-node\":\"^9.0.0\",\"tsconfig-paths\":\"^3.9.0\",\"tsickle\":\"^0.39.1\",\"tslib\":\"^2.0.1\",\"tslint\":\"^6.1.3\",\"typescript\":\"~4.0.3\",\"wallaby-webpack\":\"^3.9.13\",\"yaml-lint\":\"^1.2.4\"},\"resolutions\":{\"dgeni-packages/typescript\":\"4.0.2\"},\"scripts\":{\"ng\":\"ng\",\"valid:lic\":\"ts-node --project ./tools/validate-licenses/tsconfig.json ./tools/validate-licenses/validate-licenses.ts\",\"build:cdk\":\"ng build cdk\",\"build:mosaic-moment-adapter\":\"ng build mosaic-moment-adapter\",\"build:mosaic-luxon-adapter\":\"ng build mosaic-luxon-adapter\",\"build:mosaic\":\"ng build mosaic\",\"build:mosaic-examples-module\":\"ts-node --project ./tools/example-module/tsconfig.json ./tools/example-module/index.ts\",\"build:mosaic-examples\":\"ng build mosaic-examples\",\"build:schematics\":\"ng build schematics\",\"build:schematics-test\":\"ng build schematics-test\",\"build:tokens\":\"node ./packages/mosaic/design-tokens/build.js packages/mosaic/design-tokens/\",\"build:tokens:dist\":\"node ./packages/mosaic/design-tokens/build.js dist/design-tokens/\",\"build:docs\":\"gulp docs\",\"styles:built-all\":\"gulp styles:built-all\",\"unit:cdk\":\"ng test cdk\",\"unit:mosaic\":\"ng test mosaic\",\"unit:mosaic-moment-adapter\":\"ng test mosaic-moment-adapter\",\"unit:mosaic-luxon-adapter\":\"ng test mosaic-luxon-adapter\",\"unit:schematics\":\"gulp unit:schematics\",\"docs:start:dev\":\"ng serve --configuration=development mosaic-docs\",\"docs:start:prod\":\"ng serve --configuration=production mosaic-docs\",\"docs:prod-build\":\"ng build mosaic-docs\",\"docs:prod-build:aot\":\"ng build mosaic-docs --prod\",\"docs:publish-preview\":\"ts-node --project ./scripts/tsconfig.deploy.json ./scripts/deploy/publish-docs-preview.ts\",\"docs:cleanup-preview\":\"ts-node --project ./scripts/tsconfig.deploy.json ./scripts/deploy/cleanup-preview.ts\",\"preinstall\":\"node tools/npm/check-npm.js\",\"postinstall\":\"tsc -p tools/builders/tsconfig.json\",\"publish\":\"ts-node --project ./scripts/tsconfig.deploy.json ./scripts/deploy/publish-artifacts.ts\",\"linter:mosaic\":\"gulp tslint\",\"linter:mosaic:json\":\"gulp tslint:json\",\"linter:styles\":\"gulp stylelint\",\"linter:styles:json\":\"gulp stylelint:json\",\"linter:yaml\":\"yamllint **/*.yml --ignore=node_modules/**/*.yml\",\"release:stage\":\"ts-node --project tools/release/tsconfig.json tools/release/stage-release.ts\",\"release:stage:commit\":\"ts-node --project tools/release/tsconfig.json tools/release/stage-release-commit.ts\",\"release:publish\":\"ts-node --project tools/release/tsconfig.json tools/release/publish-release.ts\",\"release:publish:ci\":\"ts-node --project tools/release/tsconfig.json tools/release/publish-release-ci.ts\",\"server-dev:all\":\"ng serve dev-all --port 3003\",\"server-dev:alert\":\"ng serve dev-alert --port 3003\",\"server-dev:autocomplete\":\"ng serve dev-autocomplete --port 3003\",\"server-dev:badge\":\"ng serve dev-badge --port 3003\",\"server-dev:button\":\"ng serve dev-button --port 3003\",\"server-dev:button-toggle\":\"ng serve dev-button-toggle --port 3003\",\"server-dev:card\":\"ng serve dev-card --port 3003\",\"server-dev:checkbox\":\"ng serve dev-checkbox --port 3003\",\"server-dev:datepicker\":\"ng serve dev-datepicker --port 3003\",\"server-dev:date-formatter\":\"ng serve dev-date-formatter --port 3003\",\"server-dev:date-formatter-luxon\":\"ng serve dev-date-formatter-luxon --port 3003\",\"server-dev:date-formatter-moment\":\"ng serve dev-date-formatter-moment --port 3003\",\"server-dev:dropdown\":\"ng serve dev-dropdown --port 3003\",\"server-dev:icon\":\"ng serve dev-icon --port 3003\",\"server-dev:input\":\"ng serve dev-input --port 3003\",\"server-dev:flex-layout\":\"ng serve dev-flex-layout --port 3003\",\"server-dev:link\":\"ng serve dev-link --port 3003\",\"server-dev:list\":\"ng serve dev-list --port 3003\",\"server-dev:modal\":\"ng serve dev-modal --port 3003\",\"server-dev:navbar\":\"ng serve dev-navbar --port 3003\",\"server-dev:number-formatter\":\"ng serve dev-number-formatter --port 3003\",\"server-dev:panel\":\"ng serve dev-panel --port 3003\",\"server-dev:popover\":\"ng serve dev-popover --port 3003\",\"server-dev:progress-bar\":\"ng serve dev-progress-bar --port 3003\",\"server-dev:progress-spinner\":\"ng serve dev-progress-spinner --port 3003\",\"server-dev:radio\":\"ng serve dev-radio --port 3003\",\"server-dev:select\":\"ng serve dev-select --port 3003\",\"server-dev:sidebar\":\"ng serve dev-sidebar --port 3003\",\"server-dev:sidepanel\":\"ng serve dev-sidepanel --port 3003\",\"server-dev:splitter\":\"ng serve dev-splitter --port 3003\",\"server-dev:table\":\"ng serve dev-table --port 3003\",\"server-dev:tabs\":\"ng serve dev-tabs --port 3003\",\"server-dev:tags\":\"ng serve dev-tags --port 3003\",\"server-dev:textarea\":\"ng serve dev-textarea --port 3003\",\"server-dev:toggle\":\"ng serve dev-toggle --port 3003\",\"server-dev:theme-picker\":\"ng serve dev-theme-picker --port 3003\",\"server-dev:tree\":\"ng serve dev-tree --port 3003\",\"server-dev:tree-select\":\"ng serve dev-tree-select --port 3003\",\"server-dev:typography\":\"ng serve dev-typography --port 3003\",\"server-dev:tooltip\":\"ng serve dev-tooltip --port 3003\",\"server-dev:timepicker\":\"ng serve dev-timepicker --port 3003\",\"server-dev:validation\":\"ng serve dev-validation --port 3003\",\"server-dev:vertical-navbar\":\"ng serve dev-vertical-navbar --port 3003\",\"snyk-protect\":\"snyk protect\",\"prepare\":\"yarn run snyk-protect\"},\"husky\":{\"hooks\":{\"commit-msg\":\"commitlint -E HUSKY_GIT_PARAMS\",\"pre-commit\":\"lint-staged\"}},\"collective\":{\"type\":\"opencollective\",\"url\":\"https://opencollective.com/mosaic\",\"logo\":\"https://opencollective.com/mosaic/logo.txt\"},\"lint-staged\":{\"*.yml\":\"yamllint\"},\"snyk\":true}");

/***/ }),

/***/ "kku+":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/shared/example-viewer/example-viewer.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"docs-example-viewer__wrapper\">\n    <div *ngIf=\"exampleData\" class=\"docs-example-viewer__example\">\n        <div class=\"docs-example-viewer-body\">\n            <ng-template [cdkPortalOutlet]=\"selectedPortal\"></ng-template>\n        </div>\n    </div>\n\n    <div *ngIf=\"exampleData; else lostExample\" [class.docs-example-viewer__source]=\"true\"\n         [class.docs-example-viewer__source_hidden]=\"!(isSourceShown || isSwitcherHidden)\">\n        <stackblitz-button [example]=\"example\"></stackblitz-button>\n        <span class=\"docs-example-source-copy\">\n            <span class=\"code-copy__copied\"><i class=\"mc mc-check_16\"></i> Скопировано</span>\n            <i class=\"code-copy__icon mc mc-copy_16\" (click)=\"copyCode($event)\"></i>\n        </span>\n        <mc-tab-group mc-old-tabs (selectedTabChange)=\"setLineNumbers()\">\n            <mc-tab *ngFor=\"let tabName of getExampleTabNames()\" [label]=\"tabName\">\n                <div class=\"docs-example-source-wrapper\">\n                    <pre class=\"docs-example-numbers hljs-line-numbers\">{{lineNumbers}}</pre>\n                    <pre class=\"docs-example-source hljs\">\n                        <doc-viewer #viewer [documentUrl]=\"exampleTabs[tabName]\" class=\"docs-example-source-viewer\"></doc-viewer>\n                        <div class=\"hljs-shadow {{isSourceShown  || isSwitcherHidden ? shadowHide : null}}\"></div>\n                    </pre>\n                </div>\n            </mc-tab>\n        </mc-tab-group>\n        <div [class.docs-example-source__switcher]=\"true\"\n             [class.docs-example-source__switcher_hide]=\"isSwitcherHidden\">\n            <div  [class.docs-example-source__show]=\"true\"\n                  [class.docs-example-source__hide]=\"isSourceShown\">\n                <span mc-link (click)=\"toggleSourceView()\"\n                   [ngClass]=\"{'mc-active' : active, 'mc-focused': focus}\">\n                    <span class=\"mc-link__text\">Показать полностью</span>\n                    <i class=\"mc mc-angle-down-M_16\"></i>\n                </span>\n            </div>\n            <div [class.docs-example-source__show]=\"true\"\n                 [class.docs-example-source__hide]=\"!isSourceShown\">\n                <span mc-link (click)=\"toggleSourceView()\"\n                   [ngClass]=\"{'mc-active' : active, 'mc-focused': focus}\">\n                    <span class=\"mc-link__text\">Свернуть</span>\n                    <i class=\"mc mc-angle-up-M_16\"></i>\n                </span>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #lostExample>\n        <div class=\"mc-alert mc-alert_error mc-alert_dismissible\">\n            <span>Oops, this code example is lost... But you can help us find it!\n                Just send a Pull Request to this repository:\n                <a class=\"docs-markdown__a\" href=\"//github.com/positive-js/mosaic/pulls\"> Mosaic</a>\n            </span>\n        </div>\n    </ng-template>\n</div>\n");

/***/ }),

/***/ "lGal":
/*!******************************************************************!*\
  !*** ./packages/docs/src/app/components/navbar/navbar.module.ts ***!
  \******************************************************************/
/*! exports provided: NavbarModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavbarModule", function() { return NavbarModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/dropdown */ "kGUy");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/link */ "8pH+");
/* harmony import */ var _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/select */ "2nOP");
/* harmony import */ var _navbar_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./navbar.component */ "hiYu");









let NavbarModule = class NavbarModule {
};
NavbarModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
            _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_3__["McButtonModule"],
            _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__["McDropdownModule"],
            _ptsecurity_mosaic_link__WEBPACK_IMPORTED_MODULE_6__["McLinkModule"],
            _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"],
            _ptsecurity_mosaic_select__WEBPACK_IMPORTED_MODULE_7__["McSelectModule"]
        ],
        exports: [_navbar_component__WEBPACK_IMPORTED_MODULE_8__["NavbarComponent"]],
        declarations: [_navbar_component__WEBPACK_IMPORTED_MODULE_8__["NavbarComponent"]]
    })
], NavbarModule);



/***/ }),

/***/ "lRC7":
/*!***********************************************************************************!*\
  !*** ./packages/docs/src/app/components/component-viewer/component-overview.scss ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".title {\n  text-transform: capitalize;\n}\n\n.docs-header-link {\n  padding-top: 24px;\n}\n\n.docs-markdown__p {\n  margin: 0;\n  padding-top: 8px;\n}\n\n.docs-component-overview_hidden {\n  visibility: hidden;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudC1vdmVydmlldy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksMEJBQTBCO0FBQzlCOztBQUVBO0VBQ0ksaUJBQWlCO0FBQ3JCOztBQUdJO0VBQ0ksU0FBUztFQUNULGdCQUFnQjtBQUF4Qjs7QUFJQTtFQUNJLGtCQUFrQjtBQUR0QiIsImZpbGUiOiJjb21wb25lbnQtb3ZlcnZpZXcuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50aXRsZXtcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbn1cblxuLmRvY3MtaGVhZGVyLWxpbmsge1xuICAgIHBhZGRpbmctdG9wOiAyNHB4O1xufVxuXG4uZG9jcy1tYXJrZG93biB7XG4gICAgJl9fcCB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZy10b3A6IDhweDtcbiAgICB9XG59XG5cbi5kb2NzLWNvbXBvbmVudC1vdmVydmlld19oaWRkZW4ge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbiJdfQ== */");

/***/ }),

/***/ "lmR3":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/components/sidenav/sidenav.component.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<nav class=\"main__nav nav\">\n    <div *ngFor=\"let category of categories;\">\n        <button cdkAccordionItem\n            #panel=\"cdkAccordionItem\" (click)=\"panel.toggle()\" expanded=\"true\" class=\"nav__trigger\">\n            {{category.name}} <i [className]=\"panel.expanded ? iconClassExpanded : iconClassCollapsed\"></i>\n        </button>\n        <ul class=\"nav__wrapper\" [@bodyExpansion]=\"panel.expanded ? 'expanded' : 'collapsed'\" >\n            <li *ngFor=\"let component of category.items\" class=\"nav__item\">\n                <a class=\"nav__item-link\" [routerLink]=\"'/' + component.id\"\n                   routerLinkActive=\"nav__item-selected\">\n                    {{component.name}}\n                </a>\n            </li>\n        </ul>\n    </div>\n</nav>\n");

/***/ }),

/***/ "m73n":
/*!***********************************************************************!*\
  !*** ./packages/docs/src/app/components/sidenav/sidenav.component.ts ***!
  \***********************************************************************/
/*! exports provided: ComponentSidenav */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentSidenav", function() { return ComponentSidenav; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_sidenav_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./sidenav.component.html */ "lmR3");
/* harmony import */ var _sidenav_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sidenav.scss */ "kY4w");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/documentation-items/documentation-items */ "rMhK");






let ComponentSidenav = class ComponentSidenav {
    constructor(docItems) {
        this.docItems = docItems;
        this.icon = 'mc mc-angle-up-M_16';
        this.iconClass = 'nav__trigger-icon';
        this.iconClassExpanded = `${this.icon} ${this.iconClass} ${this.iconClass}_expanded`;
        this.iconClassCollapsed = `${this.icon} ${this.iconClass} ${this.iconClass}_collapsed`;
        this.categories = docItems.getCategories('components');
    }
};
ComponentSidenav.ctorParameters = () => [
    { type: _shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_5__["DocumentationItems"] }
];
ComponentSidenav = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'app-sidenav',
        template: _raw_loader_sidenav_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
        animations: [
            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["trigger"])('bodyExpansion', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({ maxHeight: '0', visibility: 'hidden' })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({ maxHeight: '10000px', visibility: 'visible' })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('225ms cubic-bezier(0.4,0.0,0.2,1)')),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('collapsed <=> expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('225ms cubic-bezier(0.4,0.0,0.2,1)'))
            ])
        ],
        styles: [_sidenav_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_shared_documentation_items_documentation_items__WEBPACK_IMPORTED_MODULE_5__["DocumentationItems"]])
], ComponentSidenav);



/***/ }),

/***/ "mYO9":
/*!***********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-popover.js ***!
  \***********************************************************/
/*! exports provided: MC_POPOVER_SCROLL_STRATEGY, MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER, McPopover, McPopoverComponent, McPopoverModule, PopoverVisibility, getMcPopoverInvalidPositionError, mcPopoverAnimations, mcPopoverScrollStrategyFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_POPOVER_SCROLL_STRATEGY", function() { return MC_POPOVER_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER", function() { return MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McPopover", function() { return McPopover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McPopoverComponent", function() { return McPopoverComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McPopoverModule", function() { return McPopoverModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopoverVisibility", function() { return PopoverVisibility; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMcPopoverInvalidPositionError", function() { return getMcPopoverInvalidPositionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcPopoverAnimations", function() { return mcPopoverAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mcPopoverScrollStrategyFactory", function() { return mcPopoverScrollStrategyFactory; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/animations */ "GS7A");













const mcPopoverAnimations = {
    /** Animation that transitions a tooltip in and out. */
    popoverState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["trigger"])('state', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["state"])('initial', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["style"])({
            opacity: 0,
            transform: 'scale(1, 0.8)'
        })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["animate"])('120ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["style"])({
            opacity: 1,
            transform: 'scale(1, 1)'
        }))),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["transition"])('* => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_11__["style"])({ opacity: 0 })))
    ])
};

var PopoverTriggers;
(function (PopoverTriggers) {
    PopoverTriggers["Click"] = "click";
    PopoverTriggers["Focus"] = "focus";
    PopoverTriggers["Hover"] = "hover";
})(PopoverTriggers || (PopoverTriggers = {}));
var PopoverVisibility;
(function (PopoverVisibility) {
    PopoverVisibility["Initial"] = "initial";
    PopoverVisibility["Visible"] = "visible";
    PopoverVisibility["Hidden"] = "hidden";
})(PopoverVisibility || (PopoverVisibility = {}));
class McPopoverComponent {
    constructor(changeDetectorRef, componentElementRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentElementRef = componentElementRef;
        this.positions = [..._ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["EXTENDED_OVERLAY_POSITIONS"]];
        this.popoverVisibility = PopoverVisibility.Initial;
        this.closeOnInteraction = false;
        this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this._mcTrigger = PopoverTriggers.Hover;
        this._mcPlacement = 'top';
        this._mcVisible = new rxjs__WEBPACK_IMPORTED_MODULE_9__["BehaviorSubject"](false);
        this._classList = [];
        /** Subject for notifying that the popover has been hidden from the view */
        this.onHideSubject = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_MAP"];
    }
    get mcTrigger() {
        return this._mcTrigger;
    }
    set mcTrigger(value) {
        this._mcTrigger = value;
    }
    get mcPlacement() {
        return this._mcPlacement;
    }
    set mcPlacement(value) {
        if (value !== this._mcPlacement) {
            this._mcPlacement = value;
            this.positions.unshift(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_MAP"][this.mcPlacement]);
        }
        else if (!value) {
            this._mcPlacement = 'top';
        }
    }
    get mcPopoverSize() {
        return this.popoverSize;
    }
    set mcPopoverSize(value) {
        if (value !== this.popoverSize) {
            this.popoverSize = value;
        }
        else if (!value) {
            this.popoverSize = 'normal';
        }
    }
    get mcVisible() {
        return this._mcVisible.value;
    }
    set mcVisible(value) {
        const visible = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
        if (this._mcVisible.value !== visible) {
            this._mcVisible.next(visible);
            this.mcVisibleChange.emit(visible);
        }
    }
    get classList() {
        return this._classList.join(' ');
    }
    set classList(value) {
        let list = [];
        if (Array.isArray(value)) {
            list = value;
        }
        else {
            list.push(value);
        }
        this._classList = list;
    }
    get getCssClassesList() {
        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;
    }
    get getPlacementClass() {
        return _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_TO_CSS_MAP"][this.mcPlacement];
    }
    get isOpen() {
        return this.popoverVisibility === PopoverVisibility.Visible;
    }
    handleKeydown(e) {
        // tslint:disable-next-line: deprecation
        if (this.isOpen && e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ESCAPE"]) {
            this.hide();
        }
    }
    show() {
        if (this.isNonEmptyContent()) {
            this.closeOnInteraction = true;
            this.popoverVisibility = PopoverVisibility.Visible;
            this._mcVisible.next(true);
            this.mcVisibleChange.emit(true);
            // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyways
            this.markForCheck();
        }
    }
    hide() {
        this.popoverVisibility = PopoverVisibility.Hidden;
        this._mcVisible.next(false);
        this.mcVisibleChange.emit(false);
        // Mark for check so if any parent component has set the
        // ChangeDetectionStrategy to OnPush it will be checked anyways
        this.markForCheck();
    }
    isNonEmptyContent() {
        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));
    }
    /** Returns an observable that notifies when the popover has been hidden from view. */
    afterHidden() {
        return this.onHideSubject.asObservable();
    }
    isVisible() {
        return this.popoverVisibility === PopoverVisibility.Visible;
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
    }
    isTemplateRef(value) {
        return value instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"];
    }
    isNonEmptyString(value) {
        return typeof value === 'string' && value !== '';
    }
    animationStart() {
        this.closeOnInteraction = false;
    }
    animationDone(event) {
        const toState = event.toState;
        if (toState === PopoverVisibility.Hidden && !this.isVisible()) {
            this.onHideSubject.next();
        }
        if (toState === PopoverVisibility.Visible || toState === PopoverVisibility.Hidden) {
            this.closeOnInteraction = true;
        }
    }
    ngOnDestroy() {
        this.onHideSubject.complete();
    }
}
McPopoverComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-popover',
                template: "<div class=\"mc-popover\"\n     [ngClass]=\"classList\"\n     [@state]=\"popoverVisibility\"\n     (@state.start)=\"animationStart()\"\n     (@state.done)=\"animationDone($event)\">\n    <div class=\"mc-popover__container\">\n        <div class=\"mc-popover__header\" *ngIf=\"mcHeader\">\n            <ng-container *ngIf=\"isTemplateRef(mcHeader)\" [ngTemplateOutlet]=\"mcHeader\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString(mcHeader)\">\n                <div [innerHTML]=\"mcHeader\"></div>\n            </ng-container>\n        </div>\n        <div class=\"mc-popover__content\" *ngIf=\"mcContent\">\n            <ng-container *ngIf=\"isTemplateRef(mcContent)\" [ngTemplateOutlet]=\"mcContent\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString(mcContent)\">\n                <div [innerHTML]=\"mcContent\"></div>\n            </ng-container>\n        </div>\n        <div class=\"mc-popover__footer\" *ngIf=\"mcFooter\">\n            <ng-container *ngIf=\"isTemplateRef(mcFooter)\" [ngTemplateOutlet]=\"mcFooter\"></ng-container>\n            <ng-container *ngIf=\"isNonEmptyString(mcFooter)\">\n                <div [innerHTML]=\"mcFooter\"></div>\n            </ng-container>\n        </div>\n    </div>\n    <div class=\"mc-popover__arrow\"\n         [ngClass]=\"{ 'mc-popover__arrow_with-footer': mcFooter }\"></div>\n</div>\n",
                preserveWhitespaces: false,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                animations: [mcPopoverAnimations.popoverState],
                host: {
                    '[class]': 'getCssClassesList',
                    '(keydown)': 'handleKeydown($event)'
                },
                styles: ["@-webkit-keyframes mc-progress{0%{background-position:0 0}to{background-position:29px 0}}@keyframes mc-progress{0%{background-position:0 0}to{background-position:29px 0}}.mc-progress{position:relative}.mc-progress:after{content:\"\";position:absolute;border-radius:inherit;top:0;right:0;bottom:0;left:0;background:linear-gradient(135deg,rgba(0,0,0,.05) 10px,transparent 0,transparent 20px,rgba(0,0,0,.05) 0,rgba(0,0,0,.05) 30px,transparent 0) repeat;background-size:29px 29px;-webkit-animation:mc-progress 1s linear infinite;animation:mc-progress 1s linear infinite}.cdk-overlay-container{pointer-events:none;height:100%;width:100%;position:fixed}.cdk-overlay-backdrop,.cdk-overlay-container{top:0;left:0;z-index:1000;box-sizing:border-box;margin:0;padding:0}.cdk-overlay-backdrop{bottom:0;right:0;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0;position:absolute;pointer-events:auto}.cdk-overlay-pane{pointer-events:auto;max-width:100%;max-height:100%}.cdk-overlay-connected-position-bounding-box,.cdk-overlay-pane{box-sizing:border-box;position:absolute;margin:0;padding:0;z-index:1000}.cdk-overlay-connected-position-bounding-box{display:flex;flex-direction:column;min-width:1px;min-height:1px}.mc-popover{position:relative;display:block;border-radius:var(--mc-popover-size-border-radius,4px);border-width:var(--mc-popover-size-border-width,1px);border-style:solid;box-sizing:border-box;visibility:visible;z-index:1030;list-style:none;white-space:pre-line}.mc-popover-small,.mc-popover-small .mc-popover{max-width:var(--mc-popover-size-small-width,200px)}.mc-popover-normal,.mc-popover-normal .mc-popover{max-width:var(--mc-popover-size-normal-width,400px)}.mc-popover-large,.mc-popover-large .mc-popover{max-width:var(--mc-popover-size-large-width,640px)}.mc-popover__container{border-radius:var(--mc-popover-size-border-radius,4px);overflow:hidden}.mc-popover__header{padding:var(--mc-popover-header-size-padding,10px 16px);border-bottom-width:var(--mc-popover-size-border-width,1px);border-bottom-style:solid}.mc-popover__content{padding:var(--mc-popover-size-padding,16px)}.mc-popover__footer{margin-top:var(--mc-popover-footer-size-margin-top,8px);padding:var(--mc-popover-footer-size-padding,12px 16px);border-top-width:var(--mc-popover-size-border-width,1px);border-top-style:solid}.mc-popover_placement-top-left .mc-popover,.mc-popover_placement-top-right .mc-popover,.mc-popover_placement-top .mc-popover{margin-bottom:calc(var(--mc-popover-size-arrow-width, 4px) * 2)}.mc-popover_placement-right-bottom .mc-popover,.mc-popover_placement-right-top .mc-popover,.mc-popover_placement-right .mc-popover{margin-left:calc(var(--mc-popover-size-arrow-width, 4px) * 2)}.mc-popover_placement-bottom-left .mc-popover,.mc-popover_placement-bottom-right .mc-popover,.mc-popover_placement-bottom .mc-popover{margin-top:calc(var(--mc-popover-size-arrow-width, 4px) * 2)}.mc-popover_placement-left-bottom .mc-popover,.mc-popover_placement-left-top .mc-popover,.mc-popover_placement-left .mc-popover{margin-right:calc(var(--mc-popover-size-arrow-width, 4px) * 2)}.mc-popover__arrow{position:absolute;z-index:-1;width:14px;height:14px;border:1px solid;transform:rotate(45deg)}.mc-popover_placement-top .mc-popover__arrow{bottom:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));left:50%;margin-left:calc(-1 * var(--mc-popover-size-arrow-width, 4px))}.mc-popover_placement-top-left .mc-popover__arrow{bottom:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));left:20px;margin-left:0}.mc-popover_placement-top-right .mc-popover__arrow{bottom:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));right:20px;margin-left:0}.mc-popover_placement-right .mc-popover__arrow{top:50%}.mc-popover_placement-right-top .mc-popover__arrow,.mc-popover_placement-right .mc-popover__arrow{left:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));margin-top:calc(-1 * var(--mc-popover-size-arrow-width, 4px))}.mc-popover_placement-right-top .mc-popover__arrow{top:18px}.mc-popover_placement-right-bottom .mc-popover__arrow{left:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));bottom:14px;margin-top:calc(-1 * var(--mc-popover-size-arrow-width, 4px))}.mc-popover_placement-left .mc-popover__arrow{top:50%}.mc-popover_placement-left-top .mc-popover__arrow,.mc-popover_placement-left .mc-popover__arrow{right:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));margin-top:calc(-1 * var(--mc-popover-size-arrow-width, 4px))}.mc-popover_placement-left-top .mc-popover__arrow{top:18px}.mc-popover_placement-left-bottom .mc-popover__arrow{right:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));bottom:14px;margin-top:calc(-1 * var(--mc-popover-size-arrow-width, 4px))}.mc-popover_placement-bottom .mc-popover__arrow{top:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));left:50%;margin-left:calc(-1 * var(--mc-popover-size-arrow-width, 4px))}.mc-popover_placement-bottom-left .mc-popover__arrow{top:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));left:20px;margin-left:0}.mc-popover_placement-bottom-right .mc-popover__arrow{top:calc(-1 * (var(--mc-popover-size-arrow-width, 4px) + 2px));right:20px;margin-left:0}"]
            },] }
];
/** @nocollapse */
McPopoverComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
];
McPopoverComponent.propDecorators = {
    mcVisibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"], args: ['mcPopoverVisibleChange',] }]
};
const MC_POPOVER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-popover-scroll-strategy');
/** @docs-private */
function mcPopoverScrollStrategyFactory(overlay) {
    return () => overlay.scrollStrategies.reposition({ scrollThrottle: 20 });
}
/** @docs-private */
const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MC_POPOVER_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"]],
    useFactory: mcPopoverScrollStrategyFactory
};
/** Creates an error to be thrown if the user supplied an invalid popover position. */
function getMcPopoverInvalidPositionError(position) {
    return Error(`McPopover position "${position}" is invalid.`);
}
const VIEWPORT_MARGIN = 8;
/* Constant distance between popover container border
*  corner according to popover placement and middle of arrow
* */
const POPOVER_ARROW_BORDER_DISTANCE = 20; // tslint:disable-line
/* Constant value for min height and width of anchor element used for popover.
*  Set as POPOVER_ARROW_BORDER_DISTANCE multiplied by 2
*  plus 2px border for both sides of element. Used in check of position management.
* */
const ANCHOR_MIN_HEIGHT_WIDTH = 44; // tslint:disable-line
class McPopover {
    constructor(overlay, elementRef, ngZone, scrollDispatcher, hostView, scrollStrategy, direction) {
        this.overlay = overlay;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.scrollDispatcher = scrollDispatcher;
        this.hostView = hostView;
        this.scrollStrategy = scrollStrategy;
        this.direction = direction;
        this.isPopoverOpen = false;
        this.isDynamicPopover = false;
        this.backdropClass = 'cdk-overlay-transparent-backdrop';
        this.mcVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this.mcPositionStrategyPlacementChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this._hasBackdrop = false;
        this.$unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        this._disabled = false;
        this._mcTrigger = PopoverTriggers.Click;
        this.popoverSize = 'normal';
        this._mcPlacementPriority = null;
        this._mcPlacement = 'top';
        this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
        this.manualListeners = new Map();
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        this.resizeListener = () => this.updatePosition();
        this.availablePositions = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_MAP"];
        this.defaultPositionsMap = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["DEFAULT_4_POSITIONS_TO_CSS_MAP"];
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(value) {
        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    get mcHeader() {
        return this._mcHeader;
    }
    set mcHeader(value) {
        this._mcHeader = value;
        this.updateCompValue('mcHeader', value);
        if (this.isPopoverOpen) {
            this.updatePosition(true);
        }
    }
    get mcContent() {
        return this._mcContent;
    }
    set mcContent(value) {
        this._mcContent = value;
        this.updateCompValue('mcContent', value);
        if (this.isPopoverOpen) {
            this.updatePosition(true);
        }
    }
    get mcFooter() {
        return this._mcFooter;
    }
    set mcFooter(value) {
        this._mcFooter = value;
        this.updateCompValue('mcFooter', value);
        if (this.isPopoverOpen) {
            this.updatePosition(true);
        }
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    get mcMouseEnterDelay() {
        return this._mcMouseEnterDelay;
    }
    set mcMouseEnterDelay(value) {
        this._mcMouseEnterDelay = value;
        this.updateCompValue('mcMouseEnterDelay', value);
    }
    get mcMouseLeaveDelay() {
        return this._mcMouseLeaveDelay;
    }
    set mcMouseLeaveDelay(value) {
        this._mcMouseLeaveDelay = value;
        this.updateCompValue('mcMouseLeaveDelay', value);
    }
    get mcTrigger() {
        return this._mcTrigger;
    }
    set mcTrigger(value) {
        if (value) {
            this._mcTrigger = value;
            this.updateCompValue('mcTrigger', value);
        }
        else {
            this._mcTrigger = PopoverTriggers.Click;
        }
        this.resetListeners();
    }
    get mcPopoverSize() {
        return this.popoverSize;
    }
    set mcPopoverSize(value) {
        if (value && (value === 'small' || value === 'normal' || value === 'large')) {
            this.popoverSize = value;
            this.updateCompValue('mcPopoverSize', value);
        }
        else {
            this.popoverSize = 'normal';
        }
    }
    get mcPlacementPriority() {
        return this._mcPlacementPriority;
    }
    set mcPlacementPriority(value) {
        if (value && value.length > 0) {
            this._mcPlacementPriority = value;
        }
        else {
            this._mcPlacementPriority = null;
        }
    }
    get mcPlacement() {
        return this._mcPlacement;
    }
    set mcPlacement(value) {
        if (value) {
            this._mcPlacement = value;
            this.updateCompValue('mcPlacement', value);
        }
        else {
            this._mcPlacement = 'top';
        }
    }
    get classList() {
        return this._classList;
    }
    set classList(value) {
        this._classList = value;
        this.updateCompValue('classList', this._classList);
    }
    get mcVisible() {
        return this._mcVisible;
    }
    set mcVisible(externalValue) {
        const value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(externalValue);
        if (this._mcVisible !== value) {
            this._mcVisible = value;
            this.updateCompValue('mcVisible', value);
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    get isOpen() {
        return this.isPopoverOpen;
    }
    /** Create the overlay config and position strategy */
    createOverlay() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        // Create connected position strategy that listens for scroll events to reposition.
        const strategy = this.overlay.position()
            .flexibleConnectedTo(this.elementRef)
            .withTransformOriginOn('.mc-popover')
            .withFlexibleDimensions(false)
            .withViewportMargin(VIEWPORT_MARGIN)
            .withPositions([..._ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["EXTENDED_OVERLAY_POSITIONS"]]);
        const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
        strategy.withScrollableContainers(scrollableAncestors);
        strategy.positionChanges
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed))
            .subscribe((change) => {
            if (this.popover) {
                this.onPositionChange(change);
                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {
                    // After position changes occur and the overlay is clipped by
                    // a parent scrollable then close the popover.
                    this.ngZone.run(() => this.hide());
                }
            }
        });
        this.overlayRef = this.overlay.create({
            direction: this.direction,
            positionStrategy: strategy,
            panelClass: 'mc-popover__panel',
            scrollStrategy: this.scrollStrategy(),
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass
        });
        this.closeSubscription = this.closingActions()
            // need for close popover on trigger click, because popover fire unexpected events: hide and then show
            // todo need fix it
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["delay"])(0))
            .subscribe(() => this.hide());
        this.updatePosition();
        this.overlayRef.detachments()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed))
            .subscribe(() => this.detach());
        return this.overlayRef;
    }
    detach() {
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            this.overlayRef.detach();
        }
        this.popover = null;
    }
    onPositionChange($event) {
        let updatedPlacement = this.mcPlacement;
        Object.keys(this.availablePositions).some((key) => {
            if ($event.connectionPair.originX === this.availablePositions[key].originX &&
                $event.connectionPair.originY === this.availablePositions[key].originY &&
                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&
                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {
                updatedPlacement = key;
                return true;
            }
            return false;
        });
        this.updateCompValue('mcPlacement', updatedPlacement);
        this.mcPositionStrategyPlacementChange.emit(updatedPlacement);
        if (this.popover) {
            this.updateCompValue('classList', this.classList);
            this.popover.markForCheck();
        }
        if (!this.defaultPositionsMap[updatedPlacement]) {
            this.handlePositionUpdate(updatedPlacement);
        }
    }
    handlePositionUpdate(updatedPlacement) {
        if (!this.overlayRef) {
            this.overlayRef = this.createOverlay();
        }
        const currentContainer = this.overlayRef.overlayElement.style;
        const elementHeight = this.hostView.element.nativeElement.clientHeight;
        const elementWidth = this.hostView.element.nativeElement.clientWidth;
        const verticalOffset = Math.floor(elementHeight / 2); // tslint:disable-line
        const horizontalOffset = Math.floor(elementWidth / 2 - 6); // tslint:disable-line
        const offsets = {
            top: verticalOffset,
            bottom: verticalOffset,
            right: horizontalOffset,
            left: horizontalOffset
        };
        const styleProperty = updatedPlacement.split(/(?=[A-Z])/)[1].toLowerCase();
        if (((styleProperty === 'top' || styleProperty === 'bottom') &&
            elementHeight > ANCHOR_MIN_HEIGHT_WIDTH) ||
            ((styleProperty === 'left' || styleProperty === 'right') &&
                elementWidth > ANCHOR_MIN_HEIGHT_WIDTH)) {
            return;
        }
        if (!this.overlayRef.overlayElement.style[styleProperty]) {
            this.overlayRef.overlayElement.style[styleProperty] = '0px';
        }
        this.overlayRef.overlayElement.style[styleProperty] =
            `${parseInt(currentContainer[styleProperty].split('px')[0], 10) +
                offsets[styleProperty] - POPOVER_ARROW_BORDER_DISTANCE}px`;
    }
    // tslint:disable-next-line:no-any
    updateCompValue(key, value) {
        if (this.isDynamicPopover && value) {
            if (this.popover) {
                this.popover[key] = value;
            }
        }
    }
    ngOnInit() {
        this.initElementRefListeners();
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        this.manualListeners.forEach((listener, event) => {
            this.elementRef.nativeElement.removeEventListener(event, listener);
        });
        this.manualListeners.clear();
        this.$unsubscribe.next();
        this.$unsubscribe.complete();
        this.closeSubscription.unsubscribe();
    }
    handleKeydown(e) {
        // tslint:disable-next-line: deprecation
        if (this.isOpen && e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ESCAPE"]) {
            this.hide();
        }
    }
    handleTouchend() {
        this.hide();
    }
    initElementRefListeners() {
        if (this.mcTrigger === PopoverTriggers.Click) {
            this.manualListeners
                .set('click', () => this.show())
                .forEach((listener, event) => {
                this.elementRef.nativeElement.addEventListener(event, listener);
            });
        }
        else if (this.mcTrigger === PopoverTriggers.Hover) {
            this.manualListeners
                .set('mouseenter', () => this.show())
                .set('mouseleave', () => this.hide())
                .forEach((listener, event) => {
                this.elementRef.nativeElement.addEventListener(event, listener);
            });
        }
        else if (this.mcTrigger === PopoverTriggers.Focus) {
            this.manualListeners
                .set('focus', () => this.show())
                .set('blur', () => this.hide())
                .forEach((listener, event) => {
                this.elementRef.nativeElement.addEventListener(event, listener);
            });
        }
    }
    registerResizeHandler() {
        // The resize handler is currently responsible for detecting slider dimension
        // changes and therefore doesn't cause a value change that needs to be propagated.
        this.ngZone.runOutsideAngular(() => {
            window.addEventListener('resize', this.resizeListener);
        });
    }
    deregisterResizeHandler() {
        window.removeEventListener('resize', this.resizeListener);
    }
    resetListeners() {
        if (this.manualListeners.size) {
            this.manualListeners.forEach((listener, event) => {
                this.elementRef.nativeElement.removeEventListener(event, listener);
            });
            this.manualListeners.clear();
            this.initElementRefListeners();
        }
    }
    show() {
        if (this.disabled) {
            return;
        }
        if (!this.popover) {
            this.detach();
            const overlayRef = this.createOverlay();
            this.portal = this.portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["ComponentPortal"](McPopoverComponent, this.hostView);
            this.popover = overlayRef.attach(this.portal).instance;
            this.popover.afterHidden()
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed))
                .subscribe(() => this.detach());
            this.isDynamicPopover = true;
            const properties = [
                'mcPlacement',
                'mcPopoverSize',
                'mcTrigger',
                'mcMouseEnterDelay',
                'mcMouseLeaveDelay',
                'classList',
                'mcVisible',
                'mcHeader',
                'mcContent',
                'mcFooter'
            ];
            properties.forEach((property) => this.updateCompValue(property, this[property]));
            this.popover.mcVisibleChange
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.$unsubscribe), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["distinctUntilChanged"])())
                .subscribe((data) => {
                this.mcVisible = data;
                this.mcVisibleChange.emit(data);
                this.isPopoverOpen = data;
            });
        }
        this.popover.show();
    }
    hide() {
        if (this.popover) {
            this.popover.hide();
        }
    }
    /** Updates the position of the current popover. */
    updatePosition(reapplyPosition = false) {
        if (!this.overlayRef) {
            this.overlayRef = this.createOverlay();
        }
        const position = this.overlayRef.getConfig().positionStrategy;
        position.withPositions(this.getPrioritizedPositions()).withPush(true);
        if (reapplyPosition) {
            setTimeout(() => position.reapplyLastPosition());
        }
    }
    closingActions() {
        const backdrop = this.overlayRef.backdropClick();
        const outsidePointerEvents = this.overlayRef.outsidePointerEvents();
        const detachments = this.overlayRef.detachments();
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(backdrop, outsidePointerEvents, detachments);
    }
    getPriorityPlacementStrategy(value) {
        const result = [];
        const possiblePositions = Object.keys(this.availablePositions);
        if (Array.isArray(value)) {
            value.forEach((position) => {
                if (possiblePositions.includes(position)) {
                    result.push(this.availablePositions[position]);
                }
            });
        }
        else if (possiblePositions.includes(value)) {
            result.push(this.availablePositions[value]);
        }
        return result;
    }
    getPrioritizedPositions() {
        if (this.mcPlacementPriority) {
            return this.getPriorityPlacementStrategy(this.mcPlacementPriority);
        }
        return _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["POSITION_PRIORITY_STRATEGY"][this.mcPlacement];
    }
}
McPopover.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[mcPopover]',
                exportAs: 'mcPopover',
                host: {
                    '(keydown)': 'handleKeydown($event)',
                    '(touchend)': 'handleTouchend()',
                    '[class.mc-popover_open]': 'isOpen'
                }
            },] }
];
/** @nocollapse */
McPopover.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MC_POPOVER_SCROLL_STRATEGY,] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
];
McPopover.propDecorators = {
    backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    mcVisibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"], args: ['mcPopoverVisibleChange',] }],
    mcPositionStrategyPlacementChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"], args: ['mcPopoverPositionStrategyPlacementChange',] }],
    hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    mcHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverHeader',] }],
    mcContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverContent',] }],
    mcFooter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverFooter',] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverDisabled',] }],
    mcMouseEnterDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverMouseEnterDelay',] }],
    mcMouseLeaveDelay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverMouseLeaveDelay',] }],
    mcTrigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverTrigger',] }],
    mcPopoverSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverSize',] }],
    mcPlacementPriority: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverPlacementPriority',] }],
    mcPlacement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverPlacement',] }],
    classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverClass',] }],
    mcVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcPopoverVisible',] }]
};

class McPopoverModule {
}
McPopoverModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                declarations: [McPopoverComponent, McPopover],
                exports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], McPopoverComponent, McPopover],
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_1__["OverlayModule"]],
                providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],
                entryComponents: [McPopoverComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "o9p/":
/*!***********************************!*\
  !*** ./packages/docs/src/main.ts ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "wAiw");
/* harmony import */ var _app___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/ */ "BtfD");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "Swjs");
/* harmony import */ var _polyfills_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyfills.ts */ "BTJx");
/* harmony import */ var _unregister_service_workers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./unregister-service-workers */ "/Wkg");




// tslint:disable-next-line:no-import-side-effect


// Unregister all installed service workers and force reload the page if there was
// an old service worker from a previous version of the docs.
Object(_unregister_service_workers__WEBPACK_IMPORTED_MODULE_5__["unregisterServiceWorkers"])()
    .then((hadServiceWorker) => hadServiceWorker && location.reload());
// tslint:disable-next-line:blank-lines
if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app___WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    // tslint:disable-next-line:no-console
    .catch((err) => console.error(err));


/***/ }),

/***/ "oBJt":
/*!********************************************************************!*\
  !*** ./packages/docs/src/app/components/navbar/navbar-property.ts ***!
  \********************************************************************/
/*! exports provided: NavbarProperty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavbarProperty", function() { return NavbarProperty; });
class NavbarProperty {
    constructor(navbarProperty) {
        this.data = navbarProperty.data;
        this.currentValue = this.data[0];
        this.property = navbarProperty.property;
        this.init();
    }
    setValue(i) {
        this.currentValue = this.data[i];
        localStorage.setItem(this.property, `${i}`);
        if (this.updateTemplate) {
            this.updateTemplate(i);
        }
        if (this.updateSelected) {
            this.updateSelected(i);
        }
    }
    init() {
        const currentValue = +localStorage.getItem(this.property);
        if (currentValue) {
            this.setValue(currentValue);
        }
        else {
            localStorage.setItem(this.property, '0');
        }
    }
    updateTemplate(i) {
        if (this.currentValue) {
            for (const color of this.data) {
                document.body.classList.remove(color.className);
            }
            document.body.classList.add(this.currentValue.className);
        }
    }
    updateSelected(i) {
        if (this.data[i]) {
            this.data.forEach((color) => {
                color.selected = false;
            });
            this.data[i].selected = true;
        }
    }
}


/***/ }),

/***/ "oFbq":
/*!************************************************************************!*\
  !*** ./packages/docs/src/app/shared/stackblitz/stackblitz-button.scss ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".stackblitz__wrapper {\n  position: absolute;\n  right: 0;\n  z-index: 100;\n  padding: 10px;\n}\n\n.stackblitz__icon {\n  width: 9.5px;\n  height: 14px;\n  margin-bottom: -2px;\n}\n\n.stackblitz__link {\n  margin-top: 11px;\n  margin-bottom: 11px;\n  background: none;\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  cursor: pointer;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N0YWNrYmxpdHotYnV0dG9uLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUk7RUFDSSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFlBQVk7RUFFWixhQUFhO0FBRnJCOztBQUtJO0VBQ0ksWUFBWTtFQUNaLFlBQVk7RUFDWixtQkFBbUI7QUFGM0I7O0FBS0k7RUFFUSxnQkFBUztFQUNULG1CQUFZO0VBR2hCLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsY0FBYztFQUNkLGVBQWU7RUFDZixlQUFlO0FBTHZCIiwiZmlsZSI6InN0YWNrYmxpdHotYnV0dG9uLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3RhY2tibGl0eiB7XG5cbiAgICAmX193cmFwcGVyIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgei1pbmRleDogMTAwO1xuXG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgfVxuXG4gICAgJl9faWNvbiB7XG4gICAgICAgIHdpZHRoOiA5LjVweDtcbiAgICAgICAgaGVpZ2h0OiAxNHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAtMnB4O1xuICAgIH1cblxuICAgICZfX2xpbmsge1xuICAgICAgICBtYXJnaW46IHtcbiAgICAgICAgICAgIHRvcDogMTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogMTFweDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgICAgIGJvcmRlci10b3A6IDA7XG4gICAgICAgIGJvcmRlci1sZWZ0OiAwO1xuICAgICAgICBib3JkZXItcmlnaHQ6IDA7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG59XG4iXX0= */");

/***/ }),

/***/ "oznV":
/*!**************************************************!*\
  !*** ./dist/cdk/fesm2015/ptsecurity-cdk-tree.js ***!
  \**************************************************/
/*! exports provided: BaseTreeControl, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, defaultCompareValues, defaultCompareViewValues, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTreeControl", function() { return BaseTreeControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkNestedTreeNode", function() { return CdkNestedTreeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTree", function() { return CdkTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeModule", function() { return CdkTreeModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNode", function() { return CdkTreeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeDef", function() { return CdkTreeNodeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutlet", function() { return CdkTreeNodeOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutletContext", function() { return CdkTreeNodeOutletContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodePadding", function() { return CdkTreeNodePadding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeToggle", function() { return CdkTreeNodeToggle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatTreeControl", function() { return FlatTreeControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedTreeControl", function() { return NestedTreeControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultCompareValues", function() { return defaultCompareValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultCompareViewValues", function() { return defaultCompareViewValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeControlFunctionsMissingError", function() { return getTreeControlFunctionsMissingError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeControlMissingError", function() { return getTreeControlMissingError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeMissingMatchingNodeDefError", function() { return getTreeMissingMatchingNodeDefError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeMultipleDefaultNodeDefsError", function() { return getTreeMultipleDefaultNodeDefsError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeNoValidDataSourceError", function() { return getTreeNoValidDataSourceError; });
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "9gLZ");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "SVse");









/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */
/* tslint:disable-next-line:naming-convention */
class BaseTreeControl {
    constructor() {
        /** A selection model with multi-selection to track expansion status. */
        this.expansionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
        this.filterModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
        this.filterValue = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"]('');
    }
    /** Toggles one single data node's expanded/collapsed state. */
    toggle(dataNode) {
        if (this.filterValue.value) {
            return;
        }
        this.expansionModel.toggle(dataNode);
    }
    /** Expands one single data node. */
    expand(dataNode) {
        if (this.filterValue.value) {
            return;
        }
        this.expansionModel.select(dataNode);
    }
    /** Collapses one single data node. */
    collapse(dataNode) {
        if (this.filterValue.value) {
            return;
        }
        this.expansionModel.deselect(dataNode);
    }
    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */
    isExpanded(dataNode) {
        return this.expansionModel.isSelected(dataNode);
    }
    /** Toggles a subtree rooted at `node` recursively. */
    toggleDescendants(dataNode) {
        this.expansionModel.isSelected(dataNode)
            ? this.collapseDescendants(dataNode)
            : this.expandDescendants(dataNode);
    }
    /** Collapse all dataNodes in the tree. */
    collapseAll() {
        this.expansionModel.clear();
    }
    /** Expands a subtree rooted at given data node recursively. */
    expandDescendants(dataNode) {
        const toBeProcessed = [dataNode];
        toBeProcessed.push(...this.getDescendants(dataNode));
        this.expansionModel.select(...toBeProcessed);
    }
    /** Collapses a subtree rooted at given data node recursively. */
    collapseDescendants(dataNode) {
        const toBeProcessed = [dataNode];
        toBeProcessed.push(...this.getDescendants(dataNode));
        this.expansionModel.deselect(...toBeProcessed);
    }
}

function defaultCompareValues(firstValue, secondValue) {
    return firstValue === secondValue;
}
function defaultCompareViewValues(firstViewValue, secondViewValue) {
    return RegExp(secondViewValue, 'gi').test(firstViewValue);
}
/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */
class FlatTreeControl extends BaseTreeControl {
    /** Construct with flat tree data node functions getLevel, isExpandable, getValue and getViewValue. */
    constructor(getLevel, isExpandable, 
    /** getValue will be used to determine if the tree contains value or not. Used in method hasValue */
    getValue, 
    /** getViewValue will be used for filter nodes. Returned value will be first argument in filterNodesFunction */
    getViewValue, 
    /** compareValues will be used to comparing values. */
    compareValues = defaultCompareValues, 
    /** compareValues will be used to comparing values. */
    compareViewValues = defaultCompareViewValues) {
        super();
        this.getLevel = getLevel;
        this.isExpandable = isExpandable;
        this.getValue = getValue;
        this.getViewValue = getViewValue;
        this.compareValues = compareValues;
        this.compareViewValues = compareViewValues;
    }
    /**
     * Gets a list of the data node's subtree of descendent data nodes.
     *
     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
     * with correct levels.
     */
    getDescendants(dataNode) {
        const startIndex = this.dataNodes.indexOf(dataNode);
        const results = [];
        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.
        // The level of descendants of a tree node must be greater than the level of the given
        // tree node.
        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.
        // If we reach a node whose level is greater than the level of the tree node, we hit a
        // sibling of an ancestor.
        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {
            results.push(this.dataNodes[i]);
        }
        return results;
    }
    /**
     * Expands all data nodes in the tree.
     *
     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
     * data nodes of the tree.
     */
    expandAll() {
        this.expansionModel.select(...this.dataNodes);
    }
    getParents(node, result) {
        if (node.parent) {
            result.unshift(node.parent);
            return this.getParents(node.parent, result);
        }
        else {
            return result;
        }
    }
    hasValue(value) {
        return this.dataNodes.find((node) => this.compareValues(this.getValue(node), value));
    }
    filterNodes(value) {
        this.filterModel.clear();
        const filteredNodes = this.dataNodes.filter((node) => this.compareViewValues(this.getViewValue(node), value));
        const filteredNodesWithTheirParents = new Set();
        filteredNodes.forEach((filteredNode) => {
            this.getParents(filteredNode, []).forEach((node) => filteredNodesWithTheirParents.add(node));
            filteredNodesWithTheirParents.add(filteredNode);
        });
        this.filterModel.select(...Array.from(filteredNodesWithTheirParents));
        this.filterValue.next(value);
    }
}

/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */
class NestedTreeControl extends BaseTreeControl {
    /** Construct with nested tree function getChildren. */
    constructor(getChildren) {
        super();
        this.getChildren = getChildren;
    }
    /**
     * Expands all dataNodes in the tree.
     *
     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
     * data nodes of the tree.
     */
    expandAll() {
        this.expansionModel.clear();
        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);
        this.expansionModel.select(...allNodes);
    }
    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */
    getDescendants(dataNode) {
        const descendants = [];
        this._getDescendants(descendants, dataNode);
        return descendants.splice(1);
    }
    /** A helper function to get descendants recursively. */
    // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants
    /* tslint:disable-next-line:naming-convention */
    _getDescendants(descendants, dataNode) {
        descendants.push(dataNode);
        this.getChildren(dataNode)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1))
            .subscribe((children) => {
            if (children && children.length > 0) {
                children.forEach((child) => this._getDescendants(descendants, child));
            }
        });
    }
}

/**
 * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes
 * inside the outlet.
 */
class CdkTreeNodeOutlet {
    constructor(viewContainer, changeDetectorRef) {
        this.viewContainer = viewContainer;
        this.changeDetectorRef = changeDetectorRef;
    }
}
CdkTreeNodeOutlet.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{ selector: '[cdkTreeNodeOutlet]' },] }
];
/** @nocollapse */
CdkTreeNodeOutlet.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
];

/** Context provided to the tree node component. */
class CdkTreeNodeOutletContext {
    constructor(data) {
        this.$implicit = data;
    }
}
/**
 * Data node definition for the CdkTree.
 * Captures the node's template and a when predicate that describes when this node should be used.
 */
class CdkTreeNodeDef {
    /** @docs-private */
    constructor(template) {
        this.template = template;
    }
}
CdkTreeNodeDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[cdkTreeNodeDef]',
                inputs: [
                    'when: cdkTreeNodeDefWhen'
                ]
            },] }
];
/** @nocollapse */
CdkTreeNodeDef.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] }
];

/**
 * Returns an error to be thrown when there is no usable data.
 * @docs-private
 */
function getTreeNoValidDataSourceError() {
    return Error(`A valid data source must be provided.`);
}
/**
 * Returns an error to be thrown when there are multiple nodes that are missing a when function.
 * @docs-private
 */
function getTreeMultipleDefaultNodeDefsError() {
    return Error(`There can only be one default row without a when predicate function.`);
}
/**
 * Returns an error to be thrown when there are no matching node defs for a particular set of data.
 * @docs-private
 */
function getTreeMissingMatchingNodeDefError() {
    return Error(`Could not find a matching node definition for the provided node data.`);
}
/**
 * Returns an error to be thrown when there are tree control.
 * @docs-private
 */
function getTreeControlMissingError() {
    return Error(`Could not find a tree control for the tree.`);
}
/**
 * Returns an error to be thrown when tree control did not implement functions for flat/nested node.
 * @docs-private
 */
function getTreeControlFunctionsMissingError() {
    return Error(`Could not find functions for nested/flat tree in tree control.`);
}

/**
 * CDK tree component that connects with a data source to retrieve data of type `T` and renders
 * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.
 */
class CdkTree {
    constructor(differs, changeDetectorRef) {
        this.differs = differs;
        this.changeDetectorRef = changeDetectorRef;
        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.
        //     Remove the MAX_VALUE in viewChange
        /**
         * Stream containing the latest information on what rows are being displayed on screen.
         * Can be used by the data source to as a heuristic of what data should be provided.
         */
        this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"]({ start: 0, end: Number.MAX_VALUE });
        /** Subject that emits when the component has been destroyed. */
        this.onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
        /** Level of nodes */
        this.levels = new Map();
    }
    /**
     * Provides a stream containing the latest data array to render. Influenced by the tree's
     * stream of view window (what dataNodes are currently on screen).
     * Data source can be an observable of data array, or a dara array to render.
     */
    get dataSource() {
        return this._dataSource;
    }
    set dataSource(dataSource) {
        if (this._dataSource !== dataSource) {
            this.switchDataSource(dataSource);
        }
    }
    ngOnInit() {
        this.dataDiffer = this.differs.find([]).create(this.trackBy);
        if (!this.treeControl) {
            throw getTreeControlMissingError();
        }
    }
    ngOnDestroy() {
        this.nodeOutlet.viewContainer.clear();
        this.onDestroy.next();
        this.onDestroy.complete();
        // tslint:disable-next-line:no-unbound-method
        if (this._dataSource && typeof this.dataSource.disconnect === 'function') {
            this.dataSource.disconnect(this);
        }
        if (this.dataSubscription) {
            this.dataSubscription.unsubscribe();
            this.dataSubscription = null;
        }
    }
    ngAfterContentChecked() {
        const defaultNodeDefs = this.nodeDefs.filter((def) => !def.when);
        if (defaultNodeDefs.length > 1) {
            throw getTreeMultipleDefaultNodeDefsError();
        }
        this.defaultNodeDef = defaultNodeDefs[0];
        if (this.dataSource && this.nodeDefs && !this.dataSubscription) {
            this.observeRenderChanges();
        }
    }
    /** Check for changes made in the data and render each change (node added/removed/moved). */
    renderNodeChanges(data, dataDiffer = this.dataDiffer, viewContainer = this.nodeOutlet.viewContainer, parentData) {
        const changes = dataDiffer.diff(data);
        if (!changes) {
            return;
        }
        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
            if (item.previousIndex == null) {
                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);
            }
            else if (currentIndex == null) {
                viewContainer.remove(adjustedPreviousIndex);
                this.levels.delete(item.item);
            }
            else {
                const view = viewContainer.get(adjustedPreviousIndex);
                viewContainer.move(view, currentIndex);
            }
        });
        this.changeDetectorRef.detectChanges();
    }
    /**
     * Finds the matching node definition that should be used for this node data. If there is only
     * one node definition, it is returned. Otherwise, find the node definition that has a when
     * predicate that returns true with the data. If none return true, return the default node
     * definition.
     */
    getNodeDef(data, i) {
        if (this.nodeDefs.length === 1) {
            return this.nodeDefs.first;
        }
        const nodeDef = this.nodeDefs.find((def) => def.when && def.when(i, data)) || this.defaultNodeDef;
        if (!nodeDef) {
            throw getTreeMissingMatchingNodeDefError();
        }
        return nodeDef;
    }
    /**
     * Create the embedded view for the data node template and place it in the correct index location
     * within the data node view container.
     */
    insertNode(nodeData, index, viewContainer, parentData) {
        const node = this.getNodeDef(nodeData, index);
        // Node context that will be provided to created embedded view
        const context = new CdkTreeNodeOutletContext(nodeData);
        // If the tree is flat tree, then use the `getLevel` function in flat tree control
        // Otherwise, use the level of parent node.
        if (this.treeControl.getLevel) {
            context.level = this.treeControl.getLevel(nodeData);
            /* tslint:disable-next-line:no-typeof-undefined */
        }
        else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {
            context.level = this.levels.get(parentData) + 1;
        }
        else {
            context.level = 0;
        }
        this.levels.set(nodeData, context.level);
        // Use default tree nodeOutlet, or nested node's nodeOutlet
        const container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;
        container.createEmbeddedView(node.template, context, index);
        // Set the data to just created `CdkTreeNode`.
        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable
        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.
        if (CdkTreeNode.mostRecentTreeNode) {
            CdkTreeNode.mostRecentTreeNode.data = nodeData;
        }
    }
    /** Set up a subscription for the data provided by the data source. */
    observeRenderChanges() {
        let dataStream;
        // Cannot use `instanceof DataSource` since the data source could be a literal with
        // `connect` function and may not extends DataSource.
        // tslint:disable-next-line:no-unbound-method
        if (typeof this._dataSource.connect === 'function') {
            dataStream = this._dataSource.connect(this);
        }
        else if (this._dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
            dataStream = this._dataSource;
        }
        else if (Array.isArray(this._dataSource)) {
            dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(this._dataSource);
        }
        if (dataStream) {
            this.dataSubscription = dataStream
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.onDestroy))
                .subscribe((data) => this.renderNodeChanges(data));
        }
        else {
            throw getTreeNoValidDataSourceError();
        }
    }
    /**
     * Switch to the provided data source by resetting the data and unsubscribing from the current
     * render change subscription if one exists. If the data source is null, interpret this by
     * clearing the node outlet. Otherwise start listening for new data.
     */
    switchDataSource(dataSource) {
        // tslint:disable-next-line:no-unbound-method
        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {
            this.dataSource.disconnect(this);
        }
        if (this.dataSubscription) {
            this.dataSubscription.unsubscribe();
            this.dataSubscription = null;
        }
        // Remove the all dataNodes if there is now no data source
        if (!dataSource) {
            this.nodeOutlet.viewContainer.clear();
        }
        this._dataSource = dataSource;
        if (this.nodeDefs) {
            this.observeRenderChanges();
        }
    }
}
CdkTree.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'cdk-tree',
                exportAs: 'cdkTree',
                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,
                host: {
                    class: 'cdk-tree',
                    role: 'tree'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
CdkTree.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
];
CdkTree.propDecorators = {
    treeControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    trackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [CdkTreeNodeOutlet, { static: true },] }],
    nodeDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [CdkTreeNodeDef,] }],
    dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
/**
 * Tree node for CdkTree. It contains the data in the tree node.
 */
class CdkTreeNode {
    constructor(elementRef, tree) {
        this.elementRef = elementRef;
        this.tree = tree;
        this.role = 'treeitem';
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
        CdkTreeNode.mostRecentTreeNode = this;
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    get isExpanded() {
        return this.tree.treeControl.isExpanded(this._data);
    }
    get level() {
        return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
}
/**
 * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it
 * in `CdkTree` and set the data to it.
 */
CdkTreeNode.mostRecentTreeNode = null;
CdkTreeNode.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'cdk-tree-node',
                exportAs: 'cdkTreeNode',
                host: {
                    class: 'cdk-tree-node',
                    '[attr.aria-expanded]': 'isExpanded',
                    '[attr.aria-level]': 'role === "treeitem" ? level : null',
                    '[attr.role]': 'role'
                }
            },] }
];
/** @nocollapse */
CdkTreeNode.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: CdkTree, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(() => CdkTree),] }] }
];
CdkTreeNode.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};

/**
 * Nested node is a child of `<cdk-tree>`. It works with nested tree.
 * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will
 * be added in the `cdkTreeNodeOutlet` in tree node template.
 * For example:
 *   ```html
 *   <cdk-mested-tree-node>
 *     {{node.name}}
 *     <ng-template cdkTreeNodeOutlet></ng-template>
 *   </cdk-tree-node>
 *   ```
 * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be
 * like this:
 *   ```html
 *   <cdk-nested-tree-node>
 *     {{node.name}}
 *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>
 *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>
 *   </cdk-tree-node>
 *   ```
 */
class CdkNestedTreeNode extends CdkTreeNode {
    constructor(elementRef, tree, differs) {
        super(elementRef, tree);
        this.elementRef = elementRef;
        this.differs = differs;
    }
    ngAfterContentInit() {
        this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);
        if (!this.tree.treeControl.getChildren) {
            throw getTreeControlFunctionsMissingError();
        }
        this.tree.treeControl.getChildren(this.data)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.destroyed))
            .subscribe((result) => {
            this.children = result;
            this.updateChildrenNodes();
        });
        this.nodeOutlet.changes
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.destroyed))
            .subscribe(() => this.updateChildrenNodes());
    }
    ngOnDestroy() {
        this.clear();
        super.ngOnDestroy();
    }
    /** Add children dataNodes to the NodeOutlet */
    updateChildrenNodes() {
        if (this.nodeOutlet.length && this.children) {
            this.tree.renderNodeChanges(this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data);
        }
        else {
            // Reset the data differ if there's no children nodes displayed
            this.dataDiffer.diff([]);
        }
    }
    /** Clear the children dataNodes. */
    clear() {
        if (this.nodeOutlet && this.nodeOutlet.first) {
            this.nodeOutlet.first.viewContainer.clear();
            this.dataDiffer.diff([]);
        }
    }
}
CdkNestedTreeNode.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'cdk-nested-tree-node',
                exportAs: 'cdkNestedTreeNode',
                host: {
                    '[attr.aria-expanded]': 'isExpanded',
                    '[attr.role]': 'role',
                    class: 'cdk-tree-node cdk-nested-tree-node'
                },
                providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]
            },] }
];
/** @nocollapse */
CdkNestedTreeNode.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: CdkTree },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"] }
];
CdkNestedTreeNode.propDecorators = {
    nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [CdkTreeNodeOutlet,] }]
};

/** Regex used to split a string on its CSS units. */
const cssUnitPattern = /([A-Za-z%]+)$/;
/**
 * Indent for the children tree dataNodes.
 * This directive will add left-padding to the node to show hierarchy.
 */
class CdkTreeNodePadding {
    constructor(treeNode, tree, renderer, element, dir) {
        this.treeNode = treeNode;
        this.tree = tree;
        this.renderer = renderer;
        this.element = element;
        this.dir = dir;
        /* tslint:disable-next-line:naming-convention orthodox-getter-and-setter */
        this._indent = 20;
        /** CSS units used for the indentation value. */
        this.indentUnits = 'px';
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
        if (this.dir && this.dir.change) {
            this.dir.change
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this.destroyed))
                .subscribe(() => this.setPadding());
        }
    }
    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */
    get level() { return this._level; }
    set level(value) { this.setLevelInput(value); }
    get indent() { return this._indent; }
    set indent(indent) { this.setIndentInput(indent); }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    /**
     * This has been extracted to a util because of TS 4 and VE.
     * View Engine doesn't support property rename inheritance.
     * TS 4.0 doesn't allow properties to override accessors or vice-versa.
     * @docs-private
     */
    // tslint:disable-next-line:naming-convention
    setLevelInput(value) {
        // Set to null as the fallback value so that _setPadding can fall back to the node level if the
        // consumer set the directive as `cdkTreeNodePadding=""`. We still want to take this value if
        // they set 0 explicitly.
        this._level = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value, null);
        this.setPadding();
    }
    /**
     * This has been extracted to a util because of TS 4 and VE.
     * View Engine doesn't support property rename inheritance.
     * TS 4.0 doesn't allow properties to override accessors or vice-versa.
     * @docs-private
     */
    setIndentInput(indent) {
        let value = indent;
        let units = 'px';
        if (typeof indent === 'string') {
            const parts = indent.split(cssUnitPattern);
            value = parts[0];
            units = parts[1] || units;
        }
        this.indentUnits = units;
        this._indent = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value);
        this.setPadding();
    }
    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */
    paddingIndent() {
        const basicPadding = 12;
        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)
            ? this.tree.treeControl.getLevel(this.treeNode.data)
            : null;
        const level = this._level || nodeLevel;
        return `${level ? (level * this._indent) + basicPadding : basicPadding}px`;
    }
    setPadding() {
        const padding = this.paddingIndent();
        const paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
        this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);
    }
}
CdkTreeNodePadding.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[cdkTreeNodePadding]'
            },] }
];
/** @nocollapse */
CdkTreeNodePadding.ctorParameters = () => [
    { type: CdkTreeNode },
    { type: CdkTree },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
];
CdkTreeNodePadding.propDecorators = {
    level: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePadding',] }],
    indent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePaddingIndent',] }]
};

class CdkTreeNodeToggle {
    constructor(tree, treeNode) {
        this.tree = tree;
        this.treeNode = treeNode;
        this._recursive = false;
    }
    get recursive() {
        return this._recursive;
    }
    set recursive(value) {
        this._recursive = value;
    }
    toggle(event) {
        this.recursive
            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)
            : this.tree.treeControl.toggle(this.treeNode.data);
        event.stopPropagation();
    }
}
CdkTreeNodeToggle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[cdkTreeNodeToggle]',
                host: {
                    '(click)': 'toggle($event)'
                }
            },] }
];
/** @nocollapse */
CdkTreeNodeToggle.ctorParameters = () => [
    { type: CdkTree },
    { type: CdkTreeNode }
];
CdkTreeNodeToggle.propDecorators = {
    recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodeToggleRecursive',] }]
};

const EXPORTED_DECLARATIONS = [
    CdkNestedTreeNode,
    CdkTreeNodeDef,
    CdkTreeNodePadding,
    CdkTreeNodeToggle,
    CdkTree,
    CdkTreeNode,
    CdkTreeNodeOutlet
];
class CdkTreeModule {
}
CdkTreeModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
                exports: EXPORTED_DECLARATIONS,
                declarations: EXPORTED_DECLARATIONS,
                providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"]]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "pNyw":
/*!**********************************************************!*\
  !*** ./packages/docs/src/app/components/navbar/index.ts ***!
  \**********************************************************/
/*! exports provided: NavbarModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _navbar_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./navbar.module */ "lGal");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NavbarModule", function() { return _navbar_module__WEBPACK_IMPORTED_MODULE_0__["NavbarModule"]; });




/***/ }),

/***/ "qvb6":
/*!*********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-input.js ***!
  \*********************************************************/
/*! exports provided: BIG_STEP, MC_INPUT_VALUE_ACCESSOR, McInput, McInputBase, McInputMixinBase, McInputModule, McInputMono, McNumberInput, SMALL_STEP, add, getPrecision, isDigit, isFloat, isInt, normalizeSplitter, ɵa, ɵb, ɵc, ɵd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BIG_STEP", function() { return BIG_STEP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_INPUT_VALUE_ACCESSOR", function() { return MC_INPUT_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McInput", function() { return McInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McInputBase", function() { return McInputBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McInputMixinBase", function() { return McInputMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McInputModule", function() { return McInputModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McInputMono", function() { return McInputMono; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNumberInput", function() { return McNumberInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SMALL_STEP", function() { return SMALL_STEP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPrecision", function() { return getPrecision; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDigit", function() { return isDigit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFloat", function() { return isFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInt", function() { return isInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeSplitter", function() { return normalizeSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return MIN_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return MinValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return MAX_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return MaxValidator; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");











function getMcInputUnsupportedTypeError(inputType) {
    return Error(`Input type "${inputType}" isn't supported by mcInput.`);
}

const BIG_STEP = 10;
const SMALL_STEP = 1;
function normalizeSplitter(value) {
    return value ? value.replace(/,/g, '.') : value;
}
function isFloat(value) {
    return /^-?\d+\.\d+$/.test(value);
}
function isInt(value) {
    return /^-?\d+$/.test(value);
}
function isDigit(value) {
    return isFloat(value) || isInt(value);
}
function getPrecision(value) {
    const arr = value.toString().split('.');
    return arr.length === 1
        ? 1
        // tslint:disable-next-line:no-magic-numbers
        : Math.pow(10, arr[1].length);
}
function add(value1, value2) {
    const precision = Math.max(getPrecision(value1), getPrecision(value2));
    return (value1 * precision + value2 * precision) / precision;
}
class McNumberInput {
    constructor(elementRef, ngControl, step, bigStep, min, max) {
        this.elementRef = elementRef;
        this.ngControl = ngControl;
        this.focused = false;
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        this.step = isDigit(step) ? parseFloat(step) : SMALL_STEP;
        this.bigStep = isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;
        this.min = isDigit(min) ? parseFloat(min) : -Infinity;
        this.max = isDigit(max) ? parseFloat(max) : Infinity;
        if ('valueAsNumber' in this.nativeElement) {
            Object.defineProperty(Object.getPrototypeOf(this.nativeElement), 'valueAsNumber', {
                // tslint:disable-next-line:no-reserved-keywords
                get() {
                    const res = parseFloat(normalizeSplitter(this.value));
                    return isNaN(res) ? null : res;
                }
            });
        }
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    focusChanged(isFocused) {
        if (isFocused !== this.focused) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    onKeyDown(event) {
        // tslint:disable-next-line:deprecation
        const keyCode = event.keyCode;
        const isCtrlA = (e) => e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["A"] && (e.ctrlKey || e.metaKey);
        const isCtrlC = (e) => e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["C"] && (e.ctrlKey || e.metaKey);
        const isCtrlV = (e) => e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["V"] && (e.ctrlKey || e.metaKey);
        const isCtrlX = (e) => e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["X"] && (e.ctrlKey || e.metaKey);
        const isCtrlZ = (e) => e.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["Z"] && (e.ctrlKey || e.metaKey);
        const isFKey = (e) => e.keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["F1"] && e.keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["F12"];
        const isNumber = (e) => (e.keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ZERO"] && e.keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NINE"]) ||
            (e.keyCode >= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NUMPAD_ZERO"] && e.keyCode <= _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NUMPAD_NINE"]);
        const isPeriod = (e) => e.key === '.' || e.key === ',';
        const minuses = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["NUMPAD_MINUS"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DASH"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["FF_MINUS"]];
        const serviceKeys = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DELETE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["BACKSPACE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["TAB"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ESCAPE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ENTER"]];
        const arrows = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["LEFT_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["RIGHT_ARROW"]];
        const allowedKeys = [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["END"]].concat(arrows).concat(serviceKeys).concat(minuses);
        if (allowedKeys.indexOf(keyCode) !== -1 ||
            isCtrlA(event) ||
            isCtrlC(event) ||
            isCtrlV(event) ||
            isCtrlX(event) ||
            isCtrlZ(event) ||
            isFKey(event) ||
            isPeriod(event)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is not a number and stop the keypress
        if (event.shiftKey || !isNumber(event)) {
            event.preventDefault();
            // process steps
            const step = event.shiftKey ? this.bigStep : this.step;
            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["UP_ARROW"]) {
                this.stepUp(step);
            }
            if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DOWN_ARROW"]) {
                this.stepDown(step);
            }
        }
    }
    onPaste(event) {
        if (!isDigit(normalizeSplitter(event.clipboardData.getData('text')))) {
            event.preventDefault();
        }
    }
    stepUp(step) {
        this.elementRef.nativeElement.focus();
        const res = Math.max(Math.min(add(this.nativeElement.valueAsNumber || 0, step), this.max), this.min);
        this.nativeElement.value = res.toString();
        this.viewToModelUpdate(this.nativeElement.valueAsNumber);
    }
    stepDown(step) {
        this.elementRef.nativeElement.focus();
        const res = Math.min(Math.max(add(this.nativeElement.valueAsNumber || 0, -step), this.min), this.max);
        this.nativeElement.value = res.toString();
        this.viewToModelUpdate(this.nativeElement.valueAsNumber);
    }
    viewToModelUpdate(value) {
        if (this.ngControl) {
            this.ngControl.control.setValue(value);
        }
    }
}
McNumberInput.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `input[mcInput][type="number"]`,
                exportAs: 'mcNumericalInput',
                host: {
                    '(blur)': 'focusChanged(false)',
                    '(focus)': 'focusChanged(true)',
                    '(paste)': 'onPaste($event)',
                    '(keydown)': 'onKeyDown($event)'
                }
            },] }
];
/** @nocollapse */
McNumberInput.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"], args: ['step',] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"], args: ['big-step',] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"], args: ['min',] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"], args: ['max',] }] }
];
McNumberInput.propDecorators = {
    bigStep: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    step: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

const MC_INPUT_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MC_INPUT_VALUE_ACCESSOR');

const MC_INPUT_INVALID_TYPES = [
    'button',
    'checkbox',
    'file',
    'hidden',
    'image',
    'radio',
    'range',
    'reset',
    'submit'
];
let nextUniqueId = 0;
class McInputBase {
    constructor(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        this.defaultErrorStateMatcher = defaultErrorStateMatcher;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.ngControl = ngControl;
    }
}
// tslint:disable-next-line:naming-convention
const McInputMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinErrorState"])(McInputBase);
class McInput extends McInputMixinBase {
    // tslint:disable-next-line: naming-convention
    constructor(elementRef, rawValidators, mcValidation, ngControl, numberInput, ngModel, formControlName, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor) {
        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this.elementRef = elementRef;
        this.rawValidators = rawValidators;
        this.mcValidation = mcValidation;
        this.numberInput = numberInput;
        this.ngModel = ngModel;
        this.formControlName = formControlName;
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.focused = false;
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.controlType = 'input';
        this.uid = `mc-input-${nextUniqueId++}`;
        this.neverEmptyInputTypes = [
            'date',
            'datetime',
            'datetime-local',
            'month',
            'time',
            'week'
        ].filter((t) => Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["getSupportedInputTypes"])().has(t));
        this._disabled = false;
        this._required = false;
        // tslint:enable no-reserved-keywords
        this._type = 'text';
        // If no input value accessor was explicitly specified, use the element as the input value
        // accessor.
        this._inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;
        this.previousNativeValue = this.value;
        // Force setter to be called in case id was not specified.
        this.id = this.id;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
        // Browsers may not fire the blur event if the input is disabled too quickly.
        // Reset from here to ensure that the element doesn't become stuck.
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this.uid;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    // tslint:disable no-reserved-keywords
    /** Input type of the element. */
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value || 'text';
        this.validateType();
        // When using Angular inputs, developers are no longer able to set the properties on the native
        // input element. To ensure that bindings for `type` work, we need to sync the setter
        // with the native property. Textarea elements don't support the type property or attribute.
        if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["getSupportedInputTypes"])().has(this._type)) {
            this.elementRef.nativeElement.type = this._type;
        }
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get value() {
        return this._inputValueAccessor.value;
    }
    set value(value) {
        if (value !== this.value) {
            this._inputValueAccessor.value = value;
            this.stateChanges.next();
        }
    }
    ngAfterContentInit() {
        if (!this.ngControl) {
            return;
        }
        if (this.mcValidation.useValidation) {
            Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["setMosaicValidation"])(this);
        }
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
        // We need to dirty-check the native element's value, because there are some cases where
        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
        // updating the value using `emitEvent: false`).
        this.dirtyCheckNativeValue();
    }
    /** Focuses the input. */
    focus() {
        this.elementRef.nativeElement.focus();
    }
    onBlur() {
        this.focusChanged(false);
        if (this.ngControl && this.ngControl.control) {
            const control = this.ngControl.control;
            control.updateValueAndValidity({ emitEvent: false });
            control.statusChanges.emit(control.status);
        }
    }
    /** Callback for the cases where the focused state of the input changes. */
    focusChanged(isFocused) {
        if (isFocused !== this.focused) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    onInput() {
        // This is a noop function and is used to let Angular know whenever the value changes.
        // Angular will run a new change detection each time the `input` event has been dispatched.
        // It's necessary that Angular recognizes the value change, because when floatingLabel
        // is set to false and Angular forms aren't used, the placeholder won't recognize the
        // value changes and will not disappear.
        // Listening to the input event wouldn't be necessary when the input is using the
        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get empty() {
        return !this.isNeverEmpty() && !this.elementRef.nativeElement.value && !this.isBadInput();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    onContainerClick() {
        this.focus();
    }
    /** Does some manual dirty checking on the native input `value` property. */
    dirtyCheckNativeValue() {
        const newValue = this.value;
        if (this.previousNativeValue !== newValue) {
            this.previousNativeValue = newValue;
            this.stateChanges.next();
        }
    }
    /** Make sure the input is a supported type. */
    validateType() {
        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
            throw getMcInputUnsupportedTypeError(this._type);
        }
    }
    /** Checks whether the input type is one of the types that are never empty. */
    isNeverEmpty() {
        return this.neverEmptyInputTypes.indexOf(this._type) > -1;
    }
    /** Checks whether the input is invalid based on the native validation. */
    isBadInput() {
        // The `validity` property won't be present on platform-server.
        const validity = this.elementRef.nativeElement.validity;
        return validity && validity.badInput;
    }
}
McInput.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: `input[mcInput]`,
                exportAs: 'mcInput',
                host: {
                    class: 'mc-input',
                    // Native input properties that are overwritten by Angular inputs need to be synced with
                    // the native input element. Otherwise property bindings for those don't work.
                    '[attr.id]': 'id',
                    '[attr.placeholder]': 'placeholder',
                    '[attr.disabled]': 'disabled || null',
                    '[required]': 'required',
                    '(blur)': 'onBlur()',
                    '(focus)': 'focusChanged(true)',
                    '(input)': 'onInput()'
                },
                providers: [{
                        provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__["McFormFieldControl"], useExisting: McInput
                    }]
            },] }
];
/** @nocollapse */
McInput.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["MC_VALIDATION"],] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: McNumberInput, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgModel"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlName"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["ErrorStateMatcher"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [MC_INPUT_VALUE_ACCESSOR,] }] }
];
McInput.propDecorators = {
    errorStateMatcher: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};
class McInputMono {
}
McInputMono.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: 'input[mcInputMonospace]',
                exportAs: 'McInputMonospace',
                host: { class: 'mc-input_monospace' }
            },] }
];

const MIN_VALIDATOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => MinValidator),
    multi: true
};
/**
 * A directive which installs the {@link MinValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `min` attribute.
 *
 * @experimental
 */
class MinValidator {
    ngOnChanges(changes) {
        if ('min' in changes) {
            this.createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    }
    validate(c) { return this.validator(c); }
    registerOnValidatorChange(fn) { this.onChange = fn; }
    createValidator() { this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].min(parseInt(this.min, 10)); }
}
MinValidator.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[min][formControlName],[min][formControl],[min][ngModel]',
                providers: [MIN_VALIDATOR],
                host: { '[attr.min]': 'min ? min : null' }
            },] }
];
MinValidator.propDecorators = {
    min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};
const MAX_VALIDATOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALIDATORS"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => MaxValidator),
    multi: true
};
/**
 * A directive which installs the {@link MaxValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `min` attribute.
 *
 * @experimental
 */
class MaxValidator {
    ngOnChanges(changes) {
        if ('max' in changes) {
            this.createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    }
    validate(c) { return this.validator(c); }
    registerOnValidatorChange(fn) { this.onChange = fn; }
    createValidator() { this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].max(parseInt(this.max, 10)); }
}
MaxValidator.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                selector: '[max][formControlName],[max][formControl],[max][ngModel]',
                providers: [MAX_VALIDATOR],
                host: {
                    '[attr.max]': 'max ? max : null'
                }
            },] }
];
MaxValidator.propDecorators = {
    max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

class McInputModule {
}
McInputModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"]],
                exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],
                declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "rC5u":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-list.js ***!
  \********************************************************/
/*! exports provided: MC_SELECTION_LIST_VALUE_ACCESSOR, McList, McListItem, McListModule, McListOption, McListSelection, McListSelectionBase, McListSelectionChange, McListSelectionMixinBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SELECTION_LIST_VALUE_ACCESSOR", function() { return MC_SELECTION_LIST_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McList", function() { return McList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListItem", function() { return McListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListModule", function() { return McListModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListOption", function() { return McListOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListSelection", function() { return McListSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListSelectionBase", function() { return McListSelectionBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListSelectionChange", function() { return McListSelectionChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McListSelectionMixinBase", function() { return McListSelectionMixinBase; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "kU1M");












/* tslint:disable:no-empty */
/**
 * Component for list-options of selection-list. Each list-option can automatically
 * generate a checkbox and can put current item into the selectionModel of selection-list
 * if the current item is selected.
 */
class McListOption {
    constructor(elementRef, changeDetector, ngZone, listSelection, group) {
        this.elementRef = elementRef;
        this.changeDetector = changeDetector;
        this.ngZone = ngZone;
        this.listSelection = listSelection;
        this.group = group;
        this.hasFocus = false;
        this.onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        this.onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        /**
         * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`
         * in the first cycle.
         */
        this.inputsInitialized = false;
        this._disabled = false;
        this._selected = false;
    }
    get value() { return this._value; }
    set value(newValue) {
        if (this.selected && newValue !== this.value && this.inputsInitialized) {
            this.selected = false;
        }
        this._value = newValue;
    }
    get disabled() {
        const listSelectionDisabled = this.listSelection && this.listSelection.disabled;
        const groupDisabled = this.group && this.group.disabled;
        return listSelectionDisabled || groupDisabled || this._disabled;
    }
    set disabled(value) {
        const newValue = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this.changeDetector.markForCheck();
        }
    }
    get showCheckbox() {
        return this._showCheckbox !== undefined ? this._showCheckbox : this.listSelection.showCheckbox;
    }
    set showCheckbox(value) {
        this._showCheckbox = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    get selected() {
        return this.listSelection.selectionModel && this.listSelection.selectionModel.isSelected(this) || false;
    }
    set selected(value) {
        const isSelected = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(value);
        if (isSelected !== this._selected) {
            this.setSelected(isSelected);
            this.listSelection.reportValueChange();
        }
    }
    get tabIndex() {
        return this.disabled ? null : -1;
    }
    ngOnInit() {
        const list = this.listSelection;
        if (list._value && list._value.some((value) => list.compareWith(value, this._value))) {
            this.setSelected(true);
        }
        const wasSelected = this._selected;
        // List options that are selected at initialization can't be reported properly to the form
        // control. This is because it takes some time until the selection-list knows about all
        // available options. Also it can happen that the ControlValueAccessor has an initial value
        // that should be used instead. Deferring the value change report to the next tick ensures
        // that the form control value is not being overwritten.
        Promise.resolve().then(() => {
            if (this._selected || wasSelected) {
                this.selected = true;
                this.changeDetector.markForCheck();
            }
        });
        this.inputsInitialized = true;
    }
    ngOnDestroy() {
        if (this.selected) {
            // We have to delay this until the next tick in order
            // to avoid changed after checked errors.
            Promise.resolve().then(() => this.selected = false);
        }
        this.listSelection.removeOptionFromList(this);
    }
    toggle() {
        this.selected = !this.selected;
    }
    getLabel() {
        return this.text ? this.text.nativeElement.textContent : '';
    }
    setSelected(selected) {
        if (this._selected === selected || !this.listSelection.selectionModel) {
            return;
        }
        this._selected = selected;
        if (selected) {
            this.listSelection.selectionModel.select(this);
        }
        else {
            this.listSelection.selectionModel.deselect(this);
        }
        this.changeDetector.markForCheck();
    }
    getHeight() {
        return this.elementRef.nativeElement.getClientRects()[0].height;
    }
    handleClick($event) {
        if (this.disabled) {
            return;
        }
        this.listSelection.setSelectedOptionsByClick(this, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])($event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])($event, 'ctrlKey'));
    }
    focus() {
        if (!this.hasFocus) {
            this.elementRef.nativeElement.focus();
            this.onFocus.next({ option: this });
            Promise.resolve().then(() => {
                this.hasFocus = true;
                this.changeDetector.markForCheck();
            });
        }
    }
    blur() {
        // When animations are enabled, Angular may end up removing the option from the DOM a little
        // earlier than usual, causing it to be blurred and throwing off the logic in the list
        // that moves focus not the next item. To work around the issue, we defer marking the option
        // as not focused until the next time the zone stabilizes.
        this.ngZone.onStable
            .asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1))
            .subscribe(() => {
            this.ngZone.run(() => {
                this.hasFocus = false;
                this.onBlur.next({ option: this });
            });
        });
    }
    getHostElement() {
        return this.elementRef.nativeElement;
    }
}
McListOption.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                exportAs: 'mcListOption',
                selector: 'mc-list-option',
                host: {
                    class: 'mc-list-option mc-no-select',
                    '[class.mc-selected]': 'selected',
                    '[class.mc-focused]': 'hasFocus',
                    '[class.mc-disabled]': 'disabled',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null',
                    '(focus)': 'focus()',
                    '(blur)': 'blur()',
                    '(click)': 'handleClick($event)'
                },
                template: "<div class=\"mc-list-item-content\">\n    <mc-pseudo-checkbox\n        *ngIf=\"showCheckbox\"\n        [state]=\"selected ? 'checked' : 'unchecked'\"\n        [disabled]=\"disabled\">\n    </mc-pseudo-checkbox>\n\n    <div class=\"mc-list-text\" #text>\n        <ng-content></ng-content>\n    </div>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
McListOption.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgZone"] },
    { type: McListSelection, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => McListSelection),] }] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptgroup"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] }
];
McListOption.propDecorators = {
    lines: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLine"],] }],
    text: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: ['text', { static: false },] }],
    checkboxPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    showCheckbox: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};
const MC_SELECTION_LIST_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(() => McListSelection),
    multi: true
};
class McListSelectionChange {
    constructor(source, option) {
        this.source = source;
        this.option = option;
    }
}
class McListSelectionBase {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McListSelectionMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(McListSelectionBase));
class McListSelection extends McListSelectionMixinBase {
    constructor(elementRef, changeDetectorRef, multiple) {
        super(elementRef);
        this.changeDetectorRef = changeDetectorRef;
        this._autoSelect = true;
        this._noUnselectLast = true;
        this.horizontal = false;
        this._tabIndex = 0;
        this.userTabIndex = null;
        // Emits a change event whenever the selected state of an option changes.
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        /** Emits whenever the component is destroyed. */
        this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
        /**
         * Function used for comparing an option against the selected value when determining which
         * options should appear as selected. The first argument is the value of an options. The second
         * one is a value from the selected value. A boolean must be returned.
         */
        this.compareWith = (a1, a2) => a1 === a2;
        // View to model callback that should be called if the list or its options lost focus.
        // tslint:disable-next-line:no-empty
        this.onTouched = () => { };
        // View to model callback that should be called whenever the selected options change.
        this.onChange = (_) => { };
        if (multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX || multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD) {
            this.multipleMode = multiple;
        }
        else if (multiple !== null) {
            this.multipleMode = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
        }
        if (this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX) {
            this.autoSelect = false;
            this.noUnselectLast = false;
        }
        this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["SelectionModel"](this.multiple);
    }
    get autoSelect() {
        return this._autoSelect;
    }
    set autoSelect(value) {
        this._autoSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    get noUnselectLast() {
        return this._noUnselectLast;
    }
    set noUnselectLast(value) {
        this._noUnselectLast = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
    }
    get multiple() {
        return !!this.multipleMode;
    }
    get tabIndex() {
        return this.disabled ? -1 : this._tabIndex;
    }
    set tabIndex(value) {
        this.userTabIndex = value;
        this._tabIndex = value;
    }
    get showCheckbox() {
        return this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
    }
    get optionFocusChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(...this.options.map((option) => option.onFocus));
    }
    get optionBlurChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(...this.options.map((option) => option.onBlur));
    }
    ngAfterContentInit() {
        this.horizontal = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["toBoolean"])(this.horizontal);
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__["FocusKeyManager"](this.options)
            .withTypeAhead()
            .withVerticalOrientation(!this.horizontal)
            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);
        this.keyManager.tabOut
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed))
            .subscribe(() => {
            this._tabIndex = -1;
            setTimeout(() => {
                this._tabIndex = this.userTabIndex || 0;
                this.changeDetectorRef.markForCheck();
            });
        });
        if (this._value) {
            this.setOptionsFromValues(this._value);
        }
        this.selectionModel.changed
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed))
            .subscribe((event) => {
            for (const item of event.added) {
                item.selected = true;
            }
            for (const item of event.removed) {
                item.selected = false;
            }
        });
        this.options.changes
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this.destroyed))
            .subscribe(() => {
            this.resetOptions();
            // Check to see if we need to update our tab index
            this.updateTabIndex();
        });
        this.updateScrollSize();
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    focus() {
        if (this.options.length === 0) {
            return;
        }
        this.keyManager.setFirstItemActive();
    }
    blur() {
        if (!this.hasFocusedOption()) {
            this.keyManager.setActiveItem(-1);
        }
        this.onTouched();
        this.changeDetectorRef.markForCheck();
    }
    selectAll() {
        this.options.forEach((option) => option.setSelected(true));
        this.reportValueChange();
    }
    deselectAll() {
        this.options.forEach((option) => option.setSelected(false));
        this.reportValueChange();
    }
    updateScrollSize() {
        if (this.horizontal || !this.options.first) {
            return;
        }
        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));
    }
    setSelectedOptionsByClick(option, shiftKey, ctrlKey) {
        if (shiftKey && this.multiple) {
            this.setSelectedOptions(option);
        }
        else if (ctrlKey) {
            if (!this.canDeselectLast(option)) {
                return;
            }
            this.selectionModel.toggle(option);
        }
        else if (this.autoSelect) {
            this.selectionModel.clear();
            this.selectionModel.toggle(option);
        }
        else {
            this.selectionModel.toggle(option);
        }
        this.emitChangeEvent(option);
        this.reportValueChange();
    }
    setSelectedOptionsByKey(option, shiftKey, ctrlKey) {
        if (shiftKey && this.multiple) {
            this.setSelectedOptions(option);
        }
        else if (ctrlKey) {
            if (!this.canDeselectLast(option)) {
                return;
            }
        }
        else {
            if (this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD || !this.multiple) {
                this.options.forEach((item) => item.setSelected(false));
                option.setSelected(true);
            }
        }
        this.emitChangeEvent(option);
        this.reportValueChange();
    }
    setSelectedOptions(option) {
        const selectedOptionState = option.selected;
        let fromIndex = this.keyManager.previousActiveItemIndex;
        let toIndex = this.keyManager.previousActiveItemIndex = this.keyManager.activeItemIndex;
        if (toIndex === fromIndex) {
            return;
        }
        if (fromIndex > toIndex) {
            [fromIndex, toIndex] = [toIndex, fromIndex];
        }
        this.options
            .toArray()
            .slice(fromIndex, toIndex + 1)
            .filter((item) => !item.disabled)
            .forEach((renderedOption) => {
            const isLastRenderedOption = renderedOption === this.keyManager.activeItem;
            if (isLastRenderedOption && renderedOption.selected && this.noUnselectLast) {
                return;
            }
            renderedOption.setSelected(!selectedOptionState);
        });
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(values) {
        this._value = values;
        if (this.options) {
            this.setOptionsFromValues(values || []);
        }
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this.onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Implemented as a part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        if (this.options) {
            this.options.forEach((option) => option.disabled = isDisabled);
        }
    }
    getSelectedOptionValues() {
        return this.options.filter((option) => option.selected).map((option) => option.value);
    }
    // Toggles the selected state of the currently focused option.
    toggleFocusedOption() {
        const focusedIndex = this.keyManager.activeItemIndex;
        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {
            const focusedOption = this.options.toArray()[focusedIndex];
            if (focusedOption && this.canDeselectLast(focusedOption)) {
                focusedOption.toggle();
                // Emit a change event because the focused option changed its state through user interaction.
                this.emitChangeEvent(focusedOption);
            }
        }
    }
    canDeselectLast(listOption) {
        return !(this.noUnselectLast && this.selectionModel.selected.length === 1 && listOption.selected);
    }
    getHeight() {
        return this.elementRef.nativeElement.getClientRects()[0].height;
    }
    // Removes an option from the selection list and updates the active item.
    removeOptionFromList(option) {
        if (option.hasFocus) {
            const optionIndex = this.getOptionIndex(option);
            // Check whether the option is the last item
            if (optionIndex > 0) {
                this.keyManager.setPreviousItemActive();
            }
            else if (optionIndex === 0 && this.options.length > 1) {
                this.keyManager.setNextItemActive();
            }
        }
    }
    onKeyDown(event) {
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        switch (keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["SPACE"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ENTER"]:
                this.toggleFocusedOption();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["TAB"]:
                this.keyManager.tabOut.next();
                return;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["DOWN_ARROW"]:
                this.keyManager.setNextItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["UP_ARROW"]:
                this.keyManager.setPreviousItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["HOME"]:
                this.keyManager.setFirstItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["END"]:
                this.keyManager.setLastItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["PAGE_UP"]:
                this.keyManager.setPreviousPageItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["PAGE_DOWN"]:
                this.keyManager.setNextPageItemActive();
                break;
            default:
                return;
        }
        event.preventDefault();
        this.setSelectedOptionsByKey(this.keyManager.activeItem, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["hasModifierKey"])(event, 'ctrlKey'));
    }
    // Reports a value change to the ControlValueAccessor
    reportValueChange() {
        if (this.options) {
            const value = this.getSelectedOptionValues();
            this.onChange(value);
            this._value = value;
        }
    }
    // Emits a change event if the selected state of an option changed.
    emitChangeEvent(option) {
        this.selectionChange.emit(new McListSelectionChange(this, option));
    }
    updateTabIndex() {
        this._tabIndex = this.userTabIndex || (this.options.length === 0 ? -1 : 0);
    }
    resetOptions() {
        this.dropSubscriptions();
        this.listenToOptionsFocus();
    }
    dropSubscriptions() {
        if (this.optionFocusSubscription) {
            this.optionFocusSubscription.unsubscribe();
            this.optionFocusSubscription = null;
        }
        if (this.optionBlurSubscription) {
            this.optionBlurSubscription.unsubscribe();
            this.optionBlurSubscription = null;
        }
    }
    listenToOptionsFocus() {
        this.optionFocusSubscription = this.optionFocusChanges
            .subscribe((event) => {
            const index = this.options.toArray().indexOf(event.option);
            if (this.isValidIndex(index)) {
                this.keyManager.updateActiveItem(index);
            }
        });
        this.optionBlurSubscription = this.optionBlurChanges
            .subscribe(() => this.blur());
    }
    /** Checks whether any of the options is focused. */
    hasFocusedOption() {
        return this.options.some((option) => option.hasFocus);
    }
    // Returns the option with the specified value.
    getOptionByValue(value) {
        return this.options.find((option) => option.value === value);
    }
    // Sets the selected options based on the specified values.
    setOptionsFromValues(values) {
        this.options.forEach((option) => option.setSelected(false));
        values
            .map((value) => this.getOptionByValue(value))
            .filter(Boolean)
            .forEach((option) => option.setSelected(true));
    }
    /**
     * Utility to ensure all indexes are valid.
     * @param index The index to be checked.
     * @returns True if the index is valid for our list of options.
     */
    isValidIndex(index) {
        return index >= 0 && index < this.options.length;
    }
    // Returns the index of the specified list option.
    getOptionIndex(option) {
        return this.options.toArray().indexOf(option);
    }
}
McListSelection.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                exportAs: 'mcListSelection',
                selector: 'mc-list-selection',
                template: '<ng-content></ng-content>',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                inputs: ['disabled'],
                host: {
                    class: 'mc-list-selection',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null',
                    '(focus)': 'focus()',
                    '(blur)': 'blur()',
                    '(keydown)': 'onKeyDown($event)',
                    '(window:resize)': 'updateScrollSize()'
                },
                providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],
                preserveWhitespaces: false,
                styles: [".mc-no-select{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.mc-divider{display:block;margin:0;border-top-width:var(--mc-divider-size-width,1px);border-top-style:solid}.mc-divider.mc-divider_vertical{border-top:0;border-right-width:var(--mc-divider-size-width,1px);border-right-style:solid}.mc-divider.mc-divider_inset{margin-left:var(--mc-divider-size-inset-margin,80px)}[dir=rtl] .mc-divider.mc-divider_inset{margin-left:auto;margin-right:var(--mc-divider-size-inset-margin,80px)}.mc-list,.mc-list-selection{display:block;outline:none}.mc-list-item,.mc-list-option{display:block;height:var(--mc-list-size-item-height,28px);border:2px solid transparent}.mc-list-item .mc-list-item-content,.mc-list-option .mc-list-item-content{position:relative;box-sizing:border-box;display:flex;flex-direction:row;align-items:center;height:100%;padding:0 var(--mc-list-size-horizontal-padding,16px)}.mc-list-item.mc-2-line,.mc-list-option.mc-2-line{height:var(--mc-list-size-two-line-height,72px)}.mc-list-item.mc-3-line,.mc-list-option.mc-3-line{height:var(--mc-list-size-three-line-height,88px)}.mc-list-item.mc-multi-line,.mc-list-option.mc-multi-line{height:auto}.mc-list-item.mc-multi-line .mc-list-item-content,.mc-list-option.mc-multi-line .mc-list-item-content{padding-top:var(--mc-list-size-multi-line-padding,16px);padding-bottom:var(--mc-list-size-multi-line-padding,16px)}.mc-list-item .mc-list-text,.mc-list-option .mc-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mc-list-item .mc-list-text>*,.mc-list-option .mc-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mc-list-item .mc-list-text:empty,.mc-list-option .mc-list-text:empty{display:none}.mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),.mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-right:0}[dir=rtl] .mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),[dir=rtl] .mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-left:0}.mc-list-item .mc-list-icon,.mc-list-option .mc-list-icon{box-sizing:content-box;flex-shrink:0;width:var(--mc-list-size-icon-width,24px);height:var(--mc-list-size-icon-width,24px);border-radius:50%;padding:var(--mc-list-size-icon-padding,4px);font-size:var(--mc-list-size-icon-width,24px)}.mc-list-item .mc-list-icon~.mc-divider_inset,.mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:32pxvar(--mc-list-size-icon-width,24px)8px;width:100%-32pxvar(--mc-list-size-icon-width,24px)8px}[dir=rtl] .mc-list-item .mc-list-icon~.mc-divider_inset,[dir=rtl] .mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:auto;margin-right:32pxvar(--mc-list-size-icon-width,24px)8px}.mc-list-item .mc-divider,.mc-list-option .mc-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mc-list-item .mc-divider,[dir=rtl] .mc-list-option .mc-divider{margin-left:auto;margin-right:0}.mc-list-item .mc-divider.mc-divider_inset,.mc-list-option .mc-divider.mc-divider_inset{position:absolute}.mc-list-item .mc-pseudo-checkbox,.mc-list-option .mc-pseudo-checkbox{margin-right:8px}.mc-list-option:not([disabled]):not(.mc-disabled){cursor:pointer}"]
            },] }
];
/** @nocollapse */
McListSelection.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Attribute"], args: ['multiple',] }] }
];
McListSelection.propDecorators = {
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [McListOption, { descendants: true },] }],
    autoSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    noUnselectLast: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    horizontal: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
    compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
};

// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.
class McList {
}
McList.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-list',
                host: { class: 'mc-list' },
                template: '<ng-content></ng-content>',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                styles: [".mc-no-select{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.mc-divider{display:block;margin:0;border-top-width:var(--mc-divider-size-width,1px);border-top-style:solid}.mc-divider.mc-divider_vertical{border-top:0;border-right-width:var(--mc-divider-size-width,1px);border-right-style:solid}.mc-divider.mc-divider_inset{margin-left:var(--mc-divider-size-inset-margin,80px)}[dir=rtl] .mc-divider.mc-divider_inset{margin-left:auto;margin-right:var(--mc-divider-size-inset-margin,80px)}.mc-list,.mc-list-selection{display:block;outline:none}.mc-list-item,.mc-list-option{display:block;height:var(--mc-list-size-item-height,28px);border:2px solid transparent}.mc-list-item .mc-list-item-content,.mc-list-option .mc-list-item-content{position:relative;box-sizing:border-box;display:flex;flex-direction:row;align-items:center;height:100%;padding:0 var(--mc-list-size-horizontal-padding,16px)}.mc-list-item.mc-2-line,.mc-list-option.mc-2-line{height:var(--mc-list-size-two-line-height,72px)}.mc-list-item.mc-3-line,.mc-list-option.mc-3-line{height:var(--mc-list-size-three-line-height,88px)}.mc-list-item.mc-multi-line,.mc-list-option.mc-multi-line{height:auto}.mc-list-item.mc-multi-line .mc-list-item-content,.mc-list-option.mc-multi-line .mc-list-item-content{padding-top:var(--mc-list-size-multi-line-padding,16px);padding-bottom:var(--mc-list-size-multi-line-padding,16px)}.mc-list-item .mc-list-text,.mc-list-option .mc-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mc-list-item .mc-list-text>*,.mc-list-option .mc-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mc-list-item .mc-list-text:empty,.mc-list-option .mc-list-text:empty{display:none}.mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),.mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-right:0}[dir=rtl] .mc-list-item .mc-list-item-content .mc-list-text:not(:nth-child(2)),[dir=rtl] .mc-list-option .mc-list-item-content .mc-list-text:not(:nth-child(2)){padding-left:0}.mc-list-item .mc-list-icon,.mc-list-option .mc-list-icon{box-sizing:content-box;flex-shrink:0;width:var(--mc-list-size-icon-width,24px);height:var(--mc-list-size-icon-width,24px);border-radius:50%;padding:var(--mc-list-size-icon-padding,4px);font-size:var(--mc-list-size-icon-width,24px)}.mc-list-item .mc-list-icon~.mc-divider_inset,.mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:32pxvar(--mc-list-size-icon-width,24px)8px;width:100%-32pxvar(--mc-list-size-icon-width,24px)8px}[dir=rtl] .mc-list-item .mc-list-icon~.mc-divider_inset,[dir=rtl] .mc-list-option .mc-list-icon~.mc-divider_inset{margin-left:auto;margin-right:32pxvar(--mc-list-size-icon-width,24px)8px}.mc-list-item .mc-divider,.mc-list-option .mc-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mc-list-item .mc-divider,[dir=rtl] .mc-list-option .mc-divider{margin-left:auto;margin-right:0}.mc-list-item .mc-divider.mc-divider_inset,.mc-list-option .mc-divider.mc-divider_inset{position:absolute}.mc-list-item .mc-pseudo-checkbox,.mc-list-option .mc-pseudo-checkbox{margin-right:8px}.mc-list-option:not([disabled]):not(.mc-disabled){cursor:pointer}"]
            },] }
];
class McListItem {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngAfterContentInit() {
        // tslint:disable-next-line:no-unused-expression
        new _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLineSetter"](this.lines, this.elementRef);
    }
    handleFocus() {
        this.elementRef.nativeElement.classList.add('mc-focused');
    }
    handleBlur() {
        this.elementRef.nativeElement.classList.remove('mc-focused');
    }
    getHostElement() {
        return this.elementRef.nativeElement;
    }
}
McListItem.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                selector: 'mc-list-item, a[mc-list-item]',
                host: {
                    class: 'mc-list-item',
                    '(focus)': 'handleFocus()',
                    '(blur)': 'handleBlur()'
                },
                template: "<div class=\"mc-list-item-content\">\n    <ng-content select=\"[mc-list-icon], [mcListIcon]\"></ng-content>\n\n    <div class=\"mc-list-text\">\n        <ng-content select=\"[mc-line], [mcLine]\"></ng-content>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush
            },] }
];
/** @nocollapse */
McListItem.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] }
];
McListItem.propDecorators = {
    lines: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLine"],] }]
};

class McListModule {
}
McListModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McPseudoCheckboxModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McLineModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"]
                ],
                exports: [
                    McList,
                    McListSelection,
                    McListItem,
                    McListOption,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McOptionModule"]
                ],
                declarations: [
                    McList,
                    McListSelection,
                    McListItem,
                    McListOption
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "rMhK":
/*!*********************************************************************************!*\
  !*** ./packages/docs/src/app/shared/documentation-items/documentation-items.ts ***!
  \*********************************************************************************/
/*! exports provided: DocumentationItems */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentationItems", function() { return DocumentationItems; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");

/* tslint:disable:naming-convention */

const COMPONENTS = 'components';
const CDK = 'cdk';
const DOCS = {
    [COMPONENTS]: [
        {
            id: 'indicators',
            name: 'Indicators',
            summary: '',
            items: [
                {
                    id: 'alerts',
                    name: 'Alerts',
                    summary: '',
                    examples: ['alerts-types']
                },
                {
                    id: 'badges',
                    name: 'Badges',
                    summary: '',
                    examples: ['badges-types']
                },
                {
                    id: 'icon',
                    name: 'Icon',
                    summary: '',
                    examples: ['icon-types']
                },
                {
                    id: 'progress-bar',
                    name: 'Progress-bar',
                    summary: '',
                    examples: ['progress-bar-types']
                },
                {
                    id: 'progress-spinner',
                    name: 'Progress-spinner',
                    summary: '',
                    examples: ['progress-spinner-types']
                },
                {
                    id: 'tags',
                    name: 'Tags',
                    summary: '',
                    examples: ['tags-types']
                }
            ]
        },
        {
            id: 'modals',
            name: 'Popups & Modals',
            summary: '',
            items: [
                {
                    id: 'modal',
                    name: 'Modal',
                    summary: '',
                    examples: ['modal-types']
                },
                {
                    id: 'popover',
                    name: 'Popover',
                    summary: '',
                    examples: ['popover-types']
                },
                {
                    id: 'sidepanel',
                    name: 'Sidepanel',
                    summary: '',
                    examples: ['sidepanel-types']
                },
                {
                    id: 'tooltip',
                    name: 'Tooltip',
                    summary: '',
                    examples: ['tooltip-types']
                }
            ]
        },
        {
            id: 'forms',
            name: 'Form Controls',
            summary: 'Controls that collect and validate user input.',
            items: [
                {
                    id: 'checkbox',
                    name: 'Checkbox',
                    summary: '',
                    examples: ['checkbox-types']
                },
                {
                    id: 'datepicker',
                    name: 'Datepicker',
                    summary: '',
                    examples: ['datepicker-types']
                },
                {
                    id: 'dropdown',
                    name: 'Dropdown',
                    summary: '',
                    examples: ['dropdown-types']
                },
                {
                    id: 'input',
                    name: 'Input',
                    summary: '',
                    examples: ['input-types']
                },
                {
                    id: 'textarea',
                    name: 'Textarea',
                    summary: '',
                    examples: ['textarea-types']
                },
                {
                    id: 'radio',
                    name: 'Radio',
                    summary: '',
                    examples: ['radio-types']
                },
                {
                    id: 'timepicker',
                    name: 'Timepicker',
                    summary: '',
                    examples: ['timepicker-types']
                },
                {
                    id: 'select',
                    name: 'Select',
                    summary: '',
                    examples: ['select-types']
                },
                {
                    id: 'tree-select',
                    name: 'Tree-select',
                    summary: '',
                    examples: ['treeSelect-types']
                },
                {
                    id: 'autocomplete',
                    name: 'Autocomplete',
                    summary: '',
                    examples: ['autocomplete-types']
                },
                {
                    id: 'tags-input',
                    name: 'Tags input',
                    summary: '',
                    examples: ['tags-input-types']
                },
                {
                    id: 'tags-autocomplete',
                    name: 'Tags autocomplete',
                    summary: '',
                    examples: ['tags-autocomplete-types']
                }
            ]
        },
        {
            id: 'nav',
            name: 'Navigation',
            summary: 'Menus, toolbars that organise your content.',
            items: [
                {
                    id: 'link',
                    name: 'Link',
                    summary: '',
                    examples: ['link-types']
                },
                {
                    id: 'navbar',
                    name: 'Navbar',
                    summary: '',
                    examples: ['navbar-types']
                }
            ]
        },
        {
            id: 'layout',
            name: 'Layout',
            summary: '',
            items: [
                {
                    id: 'card',
                    name: 'Card',
                    summary: '',
                    examples: ['card-types']
                },
                {
                    id: 'splitter',
                    name: 'Splitter',
                    summary: '',
                    examples: ['splitter-types']
                },
                {
                    id: 'divider',
                    name: 'Divider',
                    summary: '',
                    examples: ['divider-types']
                },
                {
                    id: 'tabs',
                    name: 'Tabs',
                    summary: '',
                    examples: ['tabs-types']
                },
                {
                    id: 'layout-flex',
                    name: 'Layout flex',
                    summary: '',
                    examples: ['layout-flex-types']
                }
            ]
        },
        {
            id: 'buttons',
            name: 'Buttons',
            summary: 'Buttons, toggles.',
            items: [
                {
                    id: 'button',
                    name: 'Button',
                    summary: 'An interactive button with a range of presentation options.',
                    examples: ['button-types']
                },
                {
                    id: 'button-toggle',
                    name: 'Button Toggle',
                    summary: '',
                    examples: ['button-toggle-types']
                },
                {
                    id: 'toggle',
                    name: 'Toggle',
                    summary: '',
                    examples: ['toggle-types']
                }
            ]
        },
        {
            id: 'core/styles',
            name: 'Styles',
            summary: 'styles',
            items: [
                {
                    id: 'typography',
                    name: 'Typography',
                    summary: '',
                    examples: ['typography-types']
                }
            ]
        },
        {
            id: 'core/styles',
            name: 'Data list',
            summary: 'styles',
            items: [
                {
                    id: 'list',
                    name: 'List',
                    summary: '',
                    examples: ['list-types']
                },
                {
                    id: 'tree',
                    name: 'Tree',
                    summary: '',
                    examples: ['tree-types']
                },
                {
                    id: 'tags-list',
                    name: 'Tags list',
                    summary: '',
                    examples: ['tags-list-types']
                },
                {
                    id: 'table',
                    name: 'Table',
                    summary: '',
                    examples: ['table-types']
                }
            ]
        },
        {
            id: 'core/styles',
            name: 'Formatters',
            summary: 'styles',
            items: [
                {
                    id: 'number-formatter',
                    name: 'Number',
                    summary: '',
                    examples: ['number-types']
                },
                {
                    id: 'date-formatter',
                    name: 'Date',
                    summary: '',
                    examples: ['date-types']
                }
            ]
        },
        {
            id: 'core/styles',
            name: 'Validation',
            summary: 'styles',
            items: [
                {
                    id: 'validation',
                    name: 'Validation',
                    summary: '',
                    examples: ['validation-types']
                }
            ]
        }
    ],
    [CDK]: []
};
for (const category of DOCS[COMPONENTS]) {
    for (const doc of category.items) {
        doc.packageName = 'mosaic';
    }
}
for (const category of DOCS[CDK]) {
    for (const doc of category.items) {
        doc.packageName = 'cdk';
    }
}
const ALL_COMPONENTS = DOCS[COMPONENTS].reduce((result, category) => result.concat(category.items), []);
const ALL_CDK = DOCS[CDK].reduce((result, cdk) => result.concat(cdk.items), []);
const ALL_DOCS = ALL_COMPONENTS.concat(ALL_CDK);
const ALL_CATEGORIES = DOCS[COMPONENTS].concat(DOCS[CDK]);
let DocumentationItems = class DocumentationItems {
    getCategories(section) {
        return DOCS[section];
    }
    getItems(section) {
        if (section === COMPONENTS) {
            return ALL_COMPONENTS;
        }
        if (section === CDK) {
            return ALL_CDK;
        }
        return [];
    }
    getItemById(id, section) {
        const sectionLookup = section === 'cdk' ? 'cdk' : 'mosaic';
        return ALL_DOCS.find((doc) => doc.id === id && doc.packageName === sectionLookup);
    }
    getCategoryById(id) {
        return ALL_CATEGORIES.find((c) => c.id === id);
    }
};
DocumentationItems = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
], DocumentationItems);



/***/ }),

/***/ "sOMx":
/*!************************************************************!*\
  !*** ./packages/docs/src/app/containers/homepage/index.ts ***!
  \************************************************************/
/*! exports provided: HomepageComponent, HomepageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _homepage_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./homepage.component */ "I1VR");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HomepageComponent", function() { return _homepage_component__WEBPACK_IMPORTED_MODULE_0__["HomepageComponent"]; });

/* harmony import */ var _homepage_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./homepage.module */ "CYWk");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HomepageModule", function() { return _homepage_module__WEBPACK_IMPORTED_MODULE_1__["HomepageModule"]; });





/***/ }),

/***/ "t/jU":
/*!**********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-navbar.js ***!
  \**********************************************************/
/*! exports provided: McNavbar, McNavbarBrand, McNavbarContainer, McNavbarItem, McNavbarItemBase, McNavbarLogo, McNavbarMixinBase, McNavbarModule, McNavbarTitle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbar", function() { return McNavbar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarBrand", function() { return McNavbarBrand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarContainer", function() { return McNavbarContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarItem", function() { return McNavbarItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarItemBase", function() { return McNavbarItemBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarLogo", function() { return McNavbarLogo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarMixinBase", function() { return McNavbarMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarModule", function() { return McNavbarModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McNavbarTitle", function() { return McNavbarTitle; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "kU1M");








const COLLAPSED_CLASS = 'mc-navbar-collapsed-title';
class McNavbarLogo {
}
McNavbarLogo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-navbar-logo',
                host: {
                    class: 'mc-navbar-logo'
                }
            },] }
];
class McNavbarBrand {
}
McNavbarBrand.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-navbar-brand',
                host: {
                    class: 'mc-navbar-brand'
                }
            },] }
];
class McNavbarTitle {
}
McNavbarTitle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-navbar-title',
                host: {
                    class: 'mc-navbar-title'
                }
            },] }
];
class McNavbarItemBase {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
// tslint:disable-next-line:naming-convention
const McNavbarMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinTabIndex"])(Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinDisabled"])(McNavbarItemBase));
class McNavbarItem extends McNavbarMixinBase {
    constructor(elementRef, _focusMonitor) {
        super(elementRef);
        this.elementRef = elementRef;
        this._focusMonitor = _focusMonitor;
    }
    set collapsedTitle(value) {
        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));
    }
    ngOnInit() {
        this.denyClickIfDisabled();
        this._focusMonitor.monitor(this.elementRef.nativeElement, true);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200
    denyClickIfDisabled() {
        const events = this.elementRef.nativeElement.eventListeners('click');
        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));
        this.elementRef.nativeElement.addEventListener('click', (event) => {
            if (this.elementRef.nativeElement.hasAttribute('disabled')) {
                event.stopImmediatePropagation();
            }
        }, true);
        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));
    }
}
McNavbarItem.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-navbar-item',
                template: `<ng-content></ng-content>`,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                inputs: ['disabled', 'tabIndex'],
                host: {
                    class: 'mc-navbar-item',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null'
                }
            },] }
];
/** @nocollapse */
McNavbarItem.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["FocusMonitor"] }
];
McNavbarItem.propDecorators = {
    collapsedTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
class McNavbarContainer {
    constructor() {
        this.position = 'left';
    }
}
McNavbarContainer.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-navbar-container',
                host: {
                    '[class.mc-navbar-left]': 'this.position === "left"',
                    '[class.mc-navbar-right]': 'this.position !== "left"'
                }
            },] }
];
McNavbarContainer.propDecorators = {
    position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
class CollapsibleItem {
    constructor(element, width) {
        this.element = element;
        this.width = width;
        this.collapsed = false;
    }
    processCollapsed(collapsed) {
        this.collapsed = collapsed;
        this.updateCollapsedClass();
    }
    updateCollapsedClass() {
        if (this.collapsed) {
            this.element.classList.add(COLLAPSED_CLASS);
        }
        else {
            this.element.classList.remove(COLLAPSED_CLASS);
        }
    }
}
class CachedItemWidth {
    constructor(element, width, itemsForCollapse = []) {
        this.element = element;
        this.width = width;
        this.itemsForCollapse = itemsForCollapse;
    }
    get canCollapse() {
        return this.itemsForCollapse.length > 0;
    }
    get collapsedItemsWidth() {
        if (this._collapsedItemsWidth !== undefined) {
            return this._collapsedItemsWidth;
        }
        this.calculateAndCacheCollapsedItemsWidth();
        return this._collapsedItemsWidth;
    }
    processCollapsed(collapsed) {
        if (this.itemsForCollapse.length > 0) {
            this.updateTitle(collapsed);
        }
        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));
    }
    calculateAndCacheCollapsedItemsWidth() {
        this._collapsedItemsWidth = this.itemsForCollapse
            .reduce((acc, item) => acc + item.width, 0);
    }
    getTitle() {
        const computedTitle = this.element.getAttribute('computedTitle');
        return computedTitle
            ? decodeURI(computedTitle)
            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');
    }
    updateTitle(collapsed) {
        if (collapsed) {
            this.element.setAttribute('title', this.getTitle());
        }
        else {
            this.element.removeAttribute('title');
        }
    }
}
class McNavbar {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.forceRecalculateItemsWidth = false;
        this.resizeDebounceInterval = 100;
        this.firstLevelElement = 'mc-navbar-container';
        this.secondLevelElements = [
            'mc-navbar-item',
            'mc-navbar-brand',
            'mc-navbar-title'
        ];
        const resizeObserver = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(window, 'resize')
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["debounceTime"])(this.resizeDebounceInterval));
        this.resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));
    }
    get maxAllowedWidth() {
        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;
    }
    get itemsWidths() {
        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {
            return this._itemsWidths;
        }
        this.calculateAndCacheItemsWidth();
        return this._itemsWidths;
    }
    get totalItemsWidth() {
        if (this.totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {
            return this.totalItemsWidths;
        }
        this.calculateAndCacheTotalItemsWidth();
        return this.totalItemsWidths;
    }
    updateCollapsed() {
        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;
        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {
            const item = this.itemsWidths[i];
            if (!item.canCollapse) {
                continue;
            }
            item.processCollapsed(collapseDelta > 0);
            collapseDelta -= item.collapsedItemsWidth;
        }
    }
    ngAfterViewInit() {
        // Note: this wait is required for loading and rendering fonts for icons;
        // unfortunately we cannot control font rendering
        setTimeout(() => this.updateCollapsed(), 0);
    }
    ngOnDestroy() {
        this.resizeSubscription.unsubscribe();
    }
    calculateAndCacheTotalItemsWidth() {
        this.totalItemsWidths = this.itemsWidths
            .reduce((acc, item) => acc + item.width, 0);
    }
    getOuterElementWidth(element) {
        const baseWidth = element.getBoundingClientRect().width;
        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));
        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));
        return baseWidth + marginRight + marginLeft;
    }
    calculateAndCacheItemsWidth() {
        const allItemsSelector = this.secondLevelElements
            .map((e) => `${this.firstLevelElement}>${e}`);
        const allItems = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));
        this._itemsWidths = allItems
            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));
    }
    getItemsForCollapse(element) {
        const icon = element.querySelector(`[mc-icon],mc-navbar-logo,[mc-navbar-logo]`);
        if (!icon) {
            return [];
        }
        return Array.from(element.querySelectorAll('mc-navbar-title'))
            .map((el) => new CollapsibleItem(el, el.getBoundingClientRect().width));
    }
}
McNavbar.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-navbar',
                template: `
        <nav class="mc-navbar">
            <ng-content select="[mc-navbar-container], mc-navbar-container"></ng-content>
        </nav>
    `,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                styles: [".mc-navbar-left,.mc-navbar-right,mc-navbar-container{flex-shrink:0;height:100%}.mc-navbar,.mc-navbar-left,.mc-navbar-right,mc-navbar-container{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.mc-navbar{position:relative;height:var(--mc-navbar-size-height,48px)}.mc-navbar [mc-icon]+mc-navbar-title{margin-left:var(--mc-navbar-size-icon-margin-left,8px)}.mc-navbar [mc-icon]{min-width:16px;min-height:16px}.mc-navbar mc-navbar-title:not(.mc-navbar-collapsed-title)+[mc-icon]{margin-left:var(--mc-navbar-size-icon-margin-left,8px)}.mc-navbar-brand,.mc-navbar-item,.mc-navbar-title,mc-navbar-brand,mc-navbar-item,mc-navbar-item:first-child{height:100%;position:relative;display:flex;align-items:center;padding-left:var(--mc-navbar-item-size-padding,16px);padding-right:var(--mc-navbar-item-size-padding,16px)}.mc-navbar-brand,mc-navbar-brand{padding-left:0;padding-right:var(--mc-navbar-brand-size-padding,12px);margin-right:var(--mc-navbar-brand-size-margin-right,24px)}.mc-navbar-brand .mc-navbar-title,mc-navbar-brand .mc-navbar-title{padding-left:var(--mc-navbar-brand-size-padding,12px);padding-right:0}.mc-navbar-title{white-space:nowrap}.mc-navbar-item:not([disabled]){cursor:pointer}.mc-navbar-item .mc-navbar-title,mc-navbar-brand{padding:0}mc-navbar-item.mc-progress:not([disabled]){cursor:pointer}.mc-navbar-item[disabled],mc-navbar-item[disabled] .mc-navbar-item{cursor:default}mc-navbar-title.mc-navbar-collapsed-title{display:none}"]
            },] }
];
/** @nocollapse */
McNavbar.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
];

class McNavbarModule {
}
McNavbarModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]
                ],
                exports: [
                    McNavbar,
                    McNavbarContainer,
                    McNavbarTitle,
                    McNavbarItem,
                    McNavbarBrand,
                    McNavbarLogo
                ],
                declarations: [
                    McNavbar,
                    McNavbarContainer,
                    McNavbarTitle,
                    McNavbarItem,
                    McNavbarBrand,
                    McNavbarLogo
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "tVw0":
/*!*************************************************!*\
  !*** ./packages/docs/src/app/docs.component.ts ***!
  \*************************************************/
/*! exports provided: DocsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocsComponent", function() { return DocsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_docs_template_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./docs.template.html */ "W56h");
/* harmony import */ var _docs_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./docs.scss */ "K0rj");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");




let DocsComponent = class DocsComponent {
};
DocsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'docs-app',
        template: _raw_loader_docs_template_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_docs_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], DocsComponent);



/***/ }),

/***/ "toEk":
/*!******************************************************************!*\
  !*** ./packages/docs/src/app/components/navbar/theme.service.ts ***!
  \******************************************************************/
/*! exports provided: Themes, ThemeService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Themes", function() { return Themes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeService", function() { return ThemeService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");



var Themes;
(function (Themes) {
    Themes["Default"] = "theme-default";
    Themes["Dark"] = "theme-dark";
})(Themes || (Themes = {}));
let ThemeService = class ThemeService {
    constructor(ref) {
        this.ref = ref;
        this.currentTheme = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](Themes.Default);
        const isLightTheme = window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches;
        isLightTheme ? this.currentTheme.next(Themes.Default) : this.currentTheme.next(Themes.Dark);
        const prefersColorTheme = window.matchMedia('(prefers-color-scheme: light)');
        try {
            // Chrome & Firefox
            prefersColorTheme.addEventListener('change', (e) => {
                const turnOn = e.matches;
                this.currentTheme.next(turnOn ? Themes.Default : Themes.Dark);
                this.ref.tick();
            });
        }
        catch (err) {
            try {
                // Safari
                prefersColorTheme.addListener((e) => {
                    const turnOn = e.matches;
                    this.currentTheme.next(turnOn ? Themes.Default : Themes.Dark);
                    this.ref.tick();
                });
            }
            catch (errSafari) {
                // tslint:disable-next-line:no-console
                console.error(errSafari);
            }
        }
    }
    setTheme(value) {
        this.currentTheme.next(value);
    }
    getTheme() {
        return this.currentTheme.getValue();
    }
};
ThemeService.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"] }
];
ThemeService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]])
], ThemeService);



/***/ }),

/***/ "vEog":
/*!*************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-sidepanel.js ***!
  \*************************************************************/
/*! exports provided: MC_SIDEPANEL_DATA, MC_SIDEPANEL_DEFAULT_OPTIONS, MC_SIDEPANEL_WITH_INDENT, MC_SIDEPANEL_WITH_SHADOW, McSidepanelConfig, McSidepanelContainerComponent, McSidepanelModule, McSidepanelPosition, McSidepanelRef, McSidepanelService, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_DATA", function() { return MC_SIDEPANEL_DATA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_DEFAULT_OPTIONS", function() { return MC_SIDEPANEL_DEFAULT_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_WITH_INDENT", function() { return MC_SIDEPANEL_WITH_INDENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SIDEPANEL_WITH_SHADOW", function() { return MC_SIDEPANEL_WITH_SHADOW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSidepanelConfig", function() { return McSidepanelConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSidepanelContainerComponent", function() { return McSidepanelContainerComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSidepanelModule", function() { return McSidepanelModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSidepanelPosition", function() { return McSidepanelPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSidepanelRef", function() { return McSidepanelRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McSidepanelService", function() { return McSidepanelService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return mcSidepanelTransformAnimation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return mcSidepanelAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return McSidepanelClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return McSidepanelHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return McSidepanelBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return McSidepanelFooter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return McSidepanelActions; });
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/overlay */ "1O3W");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "1z/I");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ "vttY");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/animations */ "GS7A");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "kU1M");











/** Injection token that can be used to access the data that was passed in to a sidepanel. */
const MC_SIDEPANEL_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('McSidepanelData');
var McSidepanelPosition;
(function (McSidepanelPosition) {
    McSidepanelPosition["Right"] = "right";
    McSidepanelPosition["Left"] = "left";
    McSidepanelPosition["Top"] = "top";
    McSidepanelPosition["Bottom"] = "bottom";
})(McSidepanelPosition || (McSidepanelPosition = {}));
class McSidepanelConfig {
    constructor() {
        /** Data being injected into the child component. */
        this.data = null;
        this.position = McSidepanelPosition.Right;
        /** Whether the sidepanel has a backdrop. */
        this.hasBackdrop = true;
        /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */
        this.requiredBackdrop = false;
        /** Whether the user can use escape or clicking outside to close the sidepanel. */
        this.disableClose = false;
        /** Custom class for the overlay pane. */
        this.overlayPanelClass = '';
    }
}

var McSidepanelAnimationState;
(function (McSidepanelAnimationState) {
    McSidepanelAnimationState["Void"] = "void";
    McSidepanelAnimationState["Visible"] = "visible";
    McSidepanelAnimationState["Hidden"] = "hidden";
})(McSidepanelAnimationState || (McSidepanelAnimationState = {}));
// TODO Find a way to use dynamic keys and avoid error "Expression form not supported."
// tslint:disable-next-line
const mcSidepanelTransformAnimation = {
    right: { in: 'translateX(100%)', out: 'translateX(0%)' },
    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },
    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },
    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }
};
const mcSidepanelAnimations = {
    sidepanelState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["trigger"])('state', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({ transform: '{{transformIn}}' }), { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in } }),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["style"])({ transform: '{{transformOut}}' }), { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out } }),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('visible => void, visible => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(`200ms ${_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["AnimationCurves"].AccelerationCurve}`)),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["transition"])('void => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_6__["animate"])(`200ms ${_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["AnimationCurves"].DecelerationCurve}`))
    ])
};

const MC_SIDEPANEL_WITH_INDENT = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-sidepanel-with-indent');
const MC_SIDEPANEL_WITH_SHADOW = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-sidepanel-with-shadow');
class McSidepanelContainerComponent extends _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["BasePortalOutlet"] {
    constructor(elementRef, changeDetectorRef, sidepanelConfig, withIndent, withShadow) {
        super();
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.sidepanelConfig = sidepanelConfig;
        this.withIndent = withIndent;
        this.withShadow = withShadow;
        /** The state of the sidepanel animations. */
        this.animationState = McSidepanelAnimationState.Void;
        /** Emits whenever the state of the animation changes. */
        this.animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
    }
    ngOnDestroy() {
        this.destroyed = true;
    }
    /** Attach a component portal as content to this sidepanel container. */
    attachComponentPortal(portal) {
        this.validatePortalAttached();
        this.setAnimation();
        this.setPanelClass();
        return this.portalOutlet.attachComponentPortal(portal);
    }
    /** Attach a template portal as content to this sidepanel container. */
    attachTemplatePortal(portal) {
        this.validatePortalAttached();
        this.setAnimation();
        this.setPanelClass();
        return this.portalOutlet.attachTemplatePortal(portal);
    }
    /** Begin animation of the sidepanel entrance into view. */
    enter() {
        if (!this.destroyed) {
            this.animationState = McSidepanelAnimationState.Visible;
            this.changeDetectorRef.detectChanges();
        }
    }
    /** Begin animation of the sidepanel exiting from view. */
    exit() {
        if (!this.destroyed) {
            this.animationState = McSidepanelAnimationState.Hidden;
            this.changeDetectorRef.markForCheck();
        }
    }
    onAnimation(event) {
        this.animationStateChanged.emit(event);
    }
    setAnimation() {
        const position = this.sidepanelConfig.position;
        this.animationTransform = {
            transformIn: mcSidepanelTransformAnimation[position].in,
            transformOut: mcSidepanelTransformAnimation[position].out
        };
    }
    setPanelClass() {
        const element = this.elementRef.nativeElement;
        const position = this.sidepanelConfig.position;
        element.classList.add(`mc-sidepanel-container_${position}`);
        if (this.withShadow) {
            element.classList.add('mc-sidepanel-container_shadowed');
        }
    }
    validatePortalAttached() {
        if (this.portalOutlet.hasAttached()) {
            throw Error('Attempting to attach sidepanel content after content is already attached');
        }
    }
}
McSidepanelContainerComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-sidepanel-container',
                template: "<div class=\"mc-sidepanel-wrapper\">\n\n    <button *ngIf=\"withIndent\"\n            class=\"mc-sidepanel-indent mc-button_transparent\"\n            mc-button\n            mcSidepanelClose>\n        <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" [color]=\"'second'\"></i>\n    </button>\n\n    <div class=\"mc-sidepanel-content\">\n        <ng-template cdkPortalOutlet></ng-template>\n    </div>\n</div>\n\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                animations: [mcSidepanelAnimations.sidepanelState],
                host: {
                    class: 'mc-sidepanel-container',
                    role: 'dialog',
                    'aria-modal': 'true',
                    '[attr.id]': 'id',
                    '[attr.tabindex]': '-1',
                    '[@state]': `{
            value: animationState,
            params: animationTransform
        }`,
                    '(@state.start)': 'onAnimation($event)',
                    '(@state.done)': 'onAnimation($event)'
                },
                styles: [".mc-no-select{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.mc-sidepanel-container{outline:none;display:flex;flex:1;position:fixed;min-height:0}.mc-sidepanel-container .flex{min-height:0}.mc-sidepanel-container_left,.mc-sidepanel-container_right{width:33%;min-width:400px;height:100%;top:0}.mc-sidepanel-container_left .mc-sidepanel-indent,.mc-sidepanel-container_right .mc-sidepanel-indent{width:16px;height:100%}.mc-sidepanel-container_right{right:0;transform:translateX(100%)}.mc-sidepanel-container_right .mc-sidepanel-wrapper{flex-direction:row}.mc-sidepanel-container_left{left:0;transform:translateX(-100%)}.mc-sidepanel-container_left .mc-sidepanel-wrapper{flex-direction:row-reverse}.mc-sidepanel-container_bottom,.mc-sidepanel-container_top{flex-direction:column;height:33%;min-height:400px;width:100%;left:0}.mc-sidepanel-container_bottom .mc-sidepanel-indent,.mc-sidepanel-container_top .mc-sidepanel-indent{height:16px;width:100%}.mc-sidepanel-container_top{top:0;transform:translateY(-100%)}.mc-sidepanel-container_top .mc-sidepanel-wrapper{flex-direction:column-reverse}.mc-sidepanel-container_bottom{bottom:0;transform:translateY(100%)}.mc-sidepanel-container_bottom .mc-sidepanel-wrapper{flex-direction:column}.mc-sidepanel-wrapper{display:flex;flex:1;min-height:0;width:100%}.mc-sidepanel-indent{display:flex;flex:0 0 auto}.mc-sidepanel-indent .mc-sidepanel-close{width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;background:transparent;padding:0}.mc-sidepanel-content{display:flex;flex-direction:column;flex:1;min-height:0;width:100%}.mc-sidepanel-header{padding:var(--mc-sidepanel-header-size-padding,14px 16px);display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:center;flex:0 0 auto}.mc-sidepanel-header .mc-sidepanel-close{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;background:transparent;padding:var(--mc-sidepanel-header-size-close-padding,0 0 0 8px)}.mc-sidepanel-title{flex:1;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mc-sidepanel-body{overflow-y:auto;display:flex;flex:1;flex-direction:column;min-height:0}.mc-sidepanel-footer{padding:var(--mc-sidepanel-footer-size-padding,16px);display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:center;flex:0 0 auto}.mc-sidepanel-footer .mc-sidepanel-actions{display:flex;align-items:center;flex-direction:row;flex:1}.mc-sidepanel-footer .mc-sidepanel-actions[align=left]{justify-content:start}.mc-sidepanel-footer .mc-sidepanel-actions[align=right]{justify-content:flex-end}.mc-sidepanel-footer button+button{margin-left:16px}"]
            },] }
];
/** @nocollapse */
McSidepanelContainerComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
    { type: McSidepanelConfig },
    { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MC_SIDEPANEL_WITH_INDENT,] }] },
    { type: Boolean, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MC_SIDEPANEL_WITH_SHADOW,] }] }
];
McSidepanelContainerComponent.propDecorators = {
    portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["CdkPortalOutlet"], { static: true },] }]
};

// Counter for unique sidepanel ids.
let uniqueId = 0;
class McSidepanelRef {
    constructor(containerInstance, overlayRef, config) {
        this.containerInstance = containerInstance;
        this.overlayRef = overlayRef;
        this.config = config;
        /** Subject for notifying the user that the sidepanel has been closed and dismissed. */
        this.afterClosed$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        /** Subject for notifying the user that the sidepanel has opened and appeared. */
        this.afterOpened$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__["Subject"]();
        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;
        this.containerInstance.id = this.id;
        // Emit when opening animation completes
        containerInstance.animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])((event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(() => {
            this.afterOpened$.next();
            this.afterOpened$.complete();
        });
        // Dispose overlay when closing animation is complete
        containerInstance.animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])((event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(() => {
            overlayRef.dispose();
            this.afterClosed$.next(this.result);
            this.afterClosed$.complete();
        });
        if (!containerInstance.sidepanelConfig.disableClose) {
            Object(rxjs__WEBPACK_IMPORTED_MODULE_8__["merge"])(overlayRef.backdropClick(), overlayRef.keydownEvents().pipe(
            // tslint:disable:deprecation
            // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])((event) => event.keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ESCAPE"]))).subscribe(() => this.close());
        }
    }
    close(result) {
        if (!this.afterClosed$.closed) {
            // Transition the backdrop in parallel to the sidepanel.
            this.containerInstance.animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])((event) => event.phaseName === 'done'), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(() => this.overlayRef.detachBackdrop());
            this.result = result;
            this.containerInstance.exit();
        }
    }
    /** Gets an observable that is notified when the sidepanel is finished closing. */
    afterClosed() {
        return this.afterClosed$.asObservable();
    }
    /** Gets an observable that is notified when the sidepanel has opened and appeared. */
    afterOpened() {
        return this.afterOpened$.asObservable();
    }
}

/** Injection token that can be used to specify default sidepanel options. */
const MC_SIDEPANEL_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('mc-sidepanel-default-options');
class McSidepanelService {
    constructor(overlay, injector, defaultOptions, parentSidepanelService) {
        this.overlay = overlay;
        this.injector = injector;
        this.defaultOptions = defaultOptions;
        this.parentSidepanelService = parentSidepanelService;
        this.openedSidepanelsAtThisLevel = [];
    }
    /** Keeps track of the currently-open sidepanels. */
    get openedSidepanels() {
        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :
            this.openedSidepanelsAtThisLevel;
    }
    ngOnDestroy() {
        // Only close the sidepanels at this level on destroy
        // since the parent service may still be active.
        this.closeSidepanels(this.openedSidepanelsAtThisLevel);
    }
    open(componentOrTemplateRef, config) {
        const fullConfig = Object.assign(Object.assign({}, (this.defaultOptions || new McSidepanelConfig())), config);
        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {
            throw Error(`Sidepanel with id "${fullConfig.id}" exists already. The sidepanel id must be unique.`);
        }
        const overlayRef = this.createOverlay(fullConfig);
        const container = this.attachContainer(overlayRef, fullConfig);
        const ref = new McSidepanelRef(container, overlayRef, fullConfig);
        if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]) {
            container.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](componentOrTemplateRef, null, {
                $implicit: fullConfig.data,
                sidepanelRef: ref
            }));
        }
        else {
            const injector = this.createInjector(fullConfig, ref, container);
            const portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["ComponentPortal"](componentOrTemplateRef, undefined, injector);
            const contentRef = container.attachComponentPortal(portal);
            ref.instance = contentRef.instance;
        }
        this.openedSidepanels.push(ref);
        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));
        container.enter();
        return ref;
    }
    /**
     * Closes all of the currently-open sidepanels.
     */
    closeAll() {
        this.closeSidepanels(this.openedSidepanels);
    }
    /**
     * Finds an open sidepanel by its id.
     * @param id ID to use when looking up the sidepanel.
     */
    getSidepanelById(id) {
        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);
    }
    /**
     * Attaches the sidepanel container component to the overlay.
     */
    attachContainer(overlayRef, config) {
        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);
        // tslint:disable-next-line:deprecation
        const injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalInjector"](this.injector, new WeakMap([
            [McSidepanelConfig, config],
            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],
            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line
        ]));
        const containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["ComponentPortal"](McSidepanelContainerComponent, undefined, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    /**
     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside
     * of a sidepanel to close itself and, optionally, to return a value.
     * @param config Config object that is used to construct the sidepanel.
     * @param sidepanelRef Reference to the sidepanel.
     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.
     * @returns The custom injector that can be used inside the sidepanel.
     */
    createInjector(config, sidepanelRef, 
    // tslint:disable-next-line:deprecation
    sidepanelContainer) {
        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and
        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector
        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly
        // added to the injection tokens.
        const injectionTokens = new WeakMap([
            [McSidepanelContainerComponent, sidepanelContainer],
            [MC_SIDEPANEL_DATA, config.data],
            [McSidepanelRef, sidepanelRef]
        ]);
        // tslint:disable-next-line:deprecation
        return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalInjector"](this.injector, injectionTokens);
    }
    /**
     * Creates a new overlay and places it in the correct location.
     * @param config The user-specified sidepanel config.
     */
    createOverlay(config) {
        const overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayConfig"]({
            hasBackdrop: config.hasBackdrop,
            backdropClass: this.getBackdropClass(config),
            maxWidth: '100%',
            panelClass: config.overlayPanelClass,
            scrollStrategy: this.overlay.scrollStrategies.block(),
            positionStrategy: this.overlay.position().global()
        });
        return this.overlay.create(overlayConfig);
    }
    closeSidepanels(sidepanels) {
        const reversedOpenedSidepanels = [...sidepanels.reverse()];
        reversedOpenedSidepanels.forEach((sidepanelRef) => {
            sidepanelRef.close();
        });
    }
    getBackdropClass(config) {
        const hasOpenedSidepanelWithBackdrop = this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop);
        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :
            'cdk-overlay-transparent-backdrop';
    }
    getOpenedSidepanelsWithSamePosition(config) {
        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);
    }
    /**
     * Removes a sidepanel from the array of open sidepanels.
     * @param sidepanelRef Sidepanel to be removed.
     */
    removeOpenSidepanel(sidepanelRef) {
        const index = this.openedSidepanels.indexOf(sidepanelRef);
        if (index > -1) {
            this.openedSidepanels.splice(index, 1);
        }
    }
}
McSidepanelService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] }
];
/** @nocollapse */
McSidepanelService.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"] },
    { type: McSidepanelConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [MC_SIDEPANEL_DEFAULT_OPTIONS,] }] },
    { type: McSidepanelService, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"] }] }
];

/**
 * Button that will close the current sidepanel.
 */
class McSidepanelClose {
    constructor(sidepanelRef, elementRef, sidepanelService) {
        this.sidepanelRef = sidepanelRef;
        this.elementRef = elementRef;
        this.sidepanelService = sidepanelService;
    }
    ngOnInit() {
        if (!this.sidepanelRef) {
            // When this directive is included in a sidepanel via TemplateRef (rather than being
            // in a Component), the SidepanelRef isn't available via injection because embedded
            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by
            // ID.
            // This must occur in `onInit`, as the ID binding for the sidepanel container won't
            // be resolved at constructor time. We use setTimeout by same reason.
            setTimeout(() => {
                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels);
            });
        }
    }
    ngOnChanges(changes) {
        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;
        if (proxiedChange) {
            this.sidepanelResult = proxiedChange.currentValue;
        }
    }
}
McSidepanelClose.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',
                host: {
                    '(click)': 'sidepanelRef.close(sidepanelResult)',
                    class: 'mc-sidepanel-close'
                }
            },] }
];
/** @nocollapse */
McSidepanelClose.ctorParameters = () => [
    { type: McSidepanelRef, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: McSidepanelService }
];
McSidepanelClose.propDecorators = {
    sidepanelResult: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mc-sidepanel-close',] }],
    mcSidepanelClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['mcSidepanelClose',] }]
};
/**
 * Header of a sidepanel.
 */
class McSidepanelHeader {
}
McSidepanelHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: 'mc-sidepanel-header',
                template: `
        <div class="mc-sidepanel-title">
            <ng-content></ng-content>
        </div>
        <button *ngIf="closeable" mc-sidepanel-close>
            <span class="mc-sidepanel-close-x">
                <i mc-icon="mc-close-L_16" class="mc-icon mc-icon_light" [color]="'second'"></i>
            </span>
        </button>
    `,
                host: {
                    class: 'mc-sidepanel-header'
                }
            },] }
];
McSidepanelHeader.propDecorators = {
    closeable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
/**
 * Scrollable content container of a sidepanel.
 */
class McSidepanelBody {
}
McSidepanelBody.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',
                host: {
                    class: 'mc-sidepanel-body'
                }
            },] }
];
/**
 * Footer of a sidepanel.
 */
class McSidepanelFooter {
}
McSidepanelFooter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',
                host: {
                    class: 'mc-sidepanel-footer'
                }
            },] }
];
/**
 * Actions block of a sidepanel footer.
 */
class McSidepanelActions {
}
McSidepanelActions.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',
                host: {
                    class: 'mc-sidepanel-actions'
                }
            },] }
];
/**
 * Finds the closest McSidepanelRef to an element by looking at the DOM.
 * @param element Element relative to which to look for a sidepanel.
 * @param openSidepanels References to the currently-open sidepanels.
 */
function getClosestSidepanel(element, openSidepanels) {
    let parent = element.nativeElement.parentElement;
    while (parent && !parent.classList.contains('mc-sidepanel-container')) {
        parent = parent.parentElement;
    }
    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent.id) : null;
}

class McSidepanelModule {
}
McSidepanelModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_0__["OverlayModule"],
                    _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["PortalModule"],
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["McCommonModule"],
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__["McIconModule"]
                ],
                providers: [McSidepanelService],
                declarations: [
                    McSidepanelContainerComponent,
                    McSidepanelClose,
                    McSidepanelHeader,
                    McSidepanelBody,
                    McSidepanelFooter,
                    McSidepanelActions
                ],
                entryComponents: [McSidepanelContainerComponent],
                exports: [
                    McSidepanelContainerComponent,
                    McSidepanelClose,
                    McSidepanelHeader,
                    McSidepanelBody,
                    McSidepanelFooter,
                    McSidepanelActions
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "vttY":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-icon.js ***!
  \********************************************************/
/*! exports provided: McIcon, McIconBase, McIconCSSStyler, McIconMixinBase, McIconModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McIcon", function() { return McIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McIconBase", function() { return McIconBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McIconCSSStyler", function() { return McIconCSSStyler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McIconMixinBase", function() { return McIconMixinBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McIconModule", function() { return McIconModule; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");






// tslint:disable-next-line:naming-convention
class McIconCSSStyler {
}
McIconCSSStyler.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: '[mc-icon]',
                host: { class: 'mc mc-icon' }
            },] }
];
class McIconBase {
    // tslint:disable-next-line:naming-convention
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
// tslint:disable-next-line: naming-convention
const McIconMixinBase = Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(McIconBase, _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_4__["ThemePalette"].Empty);
class McIcon extends McIconMixinBase {
    constructor(elementRef, iconName) {
        super(elementRef);
        if (iconName) {
            elementRef.nativeElement.classList.add(iconName);
        }
    }
    getHostElement() {
        return this._elementRef.nativeElement;
    }
}
McIcon.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                selector: `[mc-icon]`,
                template: '<ng-content></ng-content>',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                inputs: ['color'],
                styles: [".mc-icon-rotate_90{transform:rotate(90deg)}.mc-icon-rotate_180{transform:rotate(180deg)}.mc-icon-rotate_270{transform:rotate(270deg)}.mc-icon-flip-h{transform:scaleY(-1)}.mc-icon-flip-v{transform:scaleX(-1)}.mc-icon-flip-vh{transform:scale(-1)}"]
            },] }
];
/** @nocollapse */
McIcon.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Attribute"], args: ['mc-icon',] }] }
];

class McIconModule {
}
McIconModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"]
                ],
                exports: [
                    McIcon,
                    McIconCSSStyler
                ],
                declarations: [
                    McIcon,
                    McIconCSSStyler
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "waD+":
/*!**********************************************************************!*\
  !*** ./packages/docs/src/app/shared/stackblitz/stackblitz-button.ts ***!
  \**********************************************************************/
/*! exports provided: StackblitzButton, StackblitzButtonModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackblitzButton", function() { return StackblitzButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackblitzButtonModule", function() { return StackblitzButtonModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_stackblitz_button_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./stackblitz-button.html */ "werY");
/* harmony import */ var _stackblitz_button_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stackblitz-button.scss */ "oFbq");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic-examples */ "cF3b");
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ "it0a");
/* harmony import */ var _mosaic_link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../mosaic/link */ "fQGt");
/* harmony import */ var _stackblitz_writer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stackblitz-writer */ "wiOn");








let StackblitzButton = class StackblitzButton {
    constructor(stackblitzWriter) {
        this.stackblitzWriter = stackblitzWriter;
        /**
         * The button becomes disabled if the user hovers over the button before the stackblitz form
         * is created. After the form is created, the button becomes enabled again.
         * The form creation usually happens extremely quickly, but we handle the case of the
         * stackblitz not yet being ready for people will poor network connections or slow devices.
         */
        this.isDisabled = false;
    }
    set example(example) {
        const exampleData = new _ptsecurity_mosaic_examples__WEBPACK_IMPORTED_MODULE_4__["ExampleData"](example);
        if (example) {
            this.stackblitzWriter.constructStackblitzForm(exampleData).then((stackblitzForm) => {
                this.stackblitzForm = stackblitzForm;
                this.isDisabled = false;
            });
        }
        else {
            this.isDisabled = true;
        }
    }
    openStackblitz() {
        // When the form is submitted, it must be in the document body. The standard of forms is not
        // to submit if it is detached from the document. See the following chromium commit for
        // more details:
        // https://chromium.googlesource.com/chromium/src/+/962c2a22ddc474255c776aefc7abeba00edc7470%5E!
        document.body.appendChild(this.stackblitzForm);
        this.stackblitzForm.submit();
        document.body.removeChild(this.stackblitzForm);
    }
};
StackblitzButton.ctorParameters = () => [
    { type: _stackblitz_writer__WEBPACK_IMPORTED_MODULE_7__["StackblitzWriter"] }
];
StackblitzButton.propDecorators = {
    example: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
StackblitzButton = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'stackblitz-button',
        template: _raw_loader_stackblitz_button_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        providers: [_stackblitz_writer__WEBPACK_IMPORTED_MODULE_7__["StackblitzWriter"]],
        host: {
            '(mouseover)': 'isDisabled = !stackblitzForm'
        },
        styles: [_stackblitz_button_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_stackblitz_writer__WEBPACK_IMPORTED_MODULE_7__["StackblitzWriter"]])
], StackblitzButton);

let StackblitzButtonModule = class StackblitzButtonModule {
};
StackblitzButtonModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
        imports: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__["McButtonModule"], _mosaic_link__WEBPACK_IMPORTED_MODULE_6__["McLinkModule"]],
        exports: [StackblitzButton],
        declarations: [StackblitzButton],
        providers: [_stackblitz_writer__WEBPACK_IMPORTED_MODULE_7__["StackblitzWriter"]]
    })
], StackblitzButtonModule);



/***/ }),

/***/ "wd6P":
/*!********************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-tree.js ***!
  \********************************************************/
/*! exports provided: MC_SELECTION_TREE_VALUE_ACCESSOR, MC_TREE_OPTION_PARENT_COMPONENT, McTreeFlatDataSource, McTreeFlattener, McTreeModule, McTreeNavigationChange, McTreeNestedDataSource, McTreeNodeDef, McTreeNodePadding, McTreeNodeToggleComponent, McTreeNodeToggleDirective, McTreeOption, McTreeOptionChange, McTreeSelection, McTreeSelectionChange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_SELECTION_TREE_VALUE_ACCESSOR", function() { return MC_SELECTION_TREE_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TREE_OPTION_PARENT_COMPONENT", function() { return MC_TREE_OPTION_PARENT_COMPONENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeFlatDataSource", function() { return McTreeFlatDataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeFlattener", function() { return McTreeFlattener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeModule", function() { return McTreeModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeNavigationChange", function() { return McTreeNavigationChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeNestedDataSource", function() { return McTreeNestedDataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeNodeDef", function() { return McTreeNodeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeNodePadding", function() { return McTreeNodePadding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeNodeToggleComponent", function() { return McTreeNodeToggleComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeNodeToggleDirective", function() { return McTreeNodeToggleDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeOption", function() { return McTreeOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeOptionChange", function() { return McTreeOptionChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeSelection", function() { return McTreeSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTreeSelectionChange", function() { return McTreeSelectionChange; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ptsecurity/cdk/tree */ "oznV");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "kU1M");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/collections */ "CtHx");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ptsecurity/cdk/a11y */ "WPpj");












class McTreeNodeDef extends _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeDef"] {
}
McTreeNodeDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mcTreeNodeDef]',
                inputs: ['when: mcTreeNodeDefWhen'],
                providers: [{ provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeDef"], useExisting: McTreeNodeDef }]
            },] }
];
McTreeNodeDef.propDecorators = {
    data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mcTreeNode',] }]
};

class McTreeNodePadding extends _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodePadding"] {
    constructor() {
        super(...arguments);
        this.baseLeftPadding = 12;
        this.iconWidth = 20;
    }
    get level() { return this._level; }
    set level(value) { this.setLevelInput(value); }
    get indent() { return this._indent; }
    set indent(indent) { this.setIndentInput(indent); }
    get leftPadding() {
        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;
    }
    paddingIndent() {
        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)
            ? this.tree.treeControl.getLevel(this.treeNode.data)
            : 0;
        const level = this.level || nodeLevel;
        return level > 0 ? `${(level * this._indent) + this.leftPadding}px` : `${this.leftPadding}px`;
    }
    ngOnInit() {
        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);
        this.setPadding();
    }
}
McTreeNodePadding.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mcTreeNodePadding]',
                providers: [{ provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodePadding"], useExisting: McTreeNodePadding }]
            },] }
];
McTreeNodePadding.propDecorators = {
    level: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mcTreeNodePadding',] }],
    indent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mcTreeNodePaddingIndent',] }]
};

class McTreeNodeToggleComponent {
    constructor(tree, treeNode) {
        this.tree = tree;
        this.treeNode = treeNode;
        this.disabled = false;
        this._recursive = false;
        this.tree.treeControl.filterValue
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((value) => (value === null || value === void 0 ? void 0 : value.length) > 0))
            .subscribe((state) => this.disabled = state);
    }
    get recursive() {
        return this._recursive;
    }
    set recursive(value) {
        this._recursive = value;
    }
    get iconState() {
        return this.disabled || this.tree.treeControl.isExpanded(this.node);
    }
    toggle(event) {
        this.recursive
            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)
            : this.tree.treeControl.toggle(this.treeNode.data);
        event.stopPropagation();
    }
}
McTreeNodeToggleComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-tree-node-toggle',
                template: `
        <i class="mc mc-icon mc-angle-down-S_16"></i>
    `,
                host: {
                    class: 'mc-tree-node-toggle',
                    '[class.mc-opened]': 'iconState',
                    '[attr.disabled]': 'disabled || null',
                    '(click)': 'toggle($event)'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
            },] }
];
/** @nocollapse */
McTreeNodeToggleComponent.ctorParameters = () => [
    { type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"] },
    { type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"] }
];
McTreeNodeToggleComponent.propDecorators = {
    node: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTreeNodeToggleRecursive',] }]
};
class McTreeNodeToggleDirective {
    constructor(tree, treeNode) {
        this.tree = tree;
        this.treeNode = treeNode;
        this.disabled = false;
        this._recursive = false;
        this.tree.treeControl.filterValue
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((value) => value.length > 0))
            .subscribe((state) => this.disabled = state);
    }
    get recursive() {
        return this._recursive;
    }
    set recursive(value) {
        this._recursive = value;
    }
    toggle(event) {
        this.recursive
            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)
            : this.tree.treeControl.toggle(this.treeNode.data);
        event.stopPropagation();
    }
}
McTreeNodeToggleDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mcTreeNodeToggle]',
                host: {
                    '[attr.disabled]': 'disabled || null',
                    '(click)': 'toggle($event)'
                }
            },] }
];
/** @nocollapse */
McTreeNodeToggleDirective.ctorParameters = () => [
    { type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"] },
    { type: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"] }
];
McTreeNodeToggleDirective.propDecorators = {
    recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTreeNodeToggleRecursive',] }]
};

/**
 * Injection token used to provide the parent component to options.
 */
const MC_TREE_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MC_TREE_OPTION_PARENT_COMPONENT');
class McTreeOptionChange {
    constructor(source, isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
let uniqueIdCounter = 0;
class McTreeOption extends _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"] {
    constructor(elementRef, changeDetectorRef, ngZone, tree) {
        super(elementRef, tree);
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.tree = tree;
        this.onFocus = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this.onBlur = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this._disabled = false;
        this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._selected = false;
        this._id = `mc-tree-option-${uniqueIdCounter++}`;
        this.hasFocus = false;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    get disabled() {
        return this._disabled || (this.tree && this.tree.disabled);
    }
    set disabled(value) {
        const newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
        }
    }
    get showCheckbox() {
        return this._showCheckbox !== undefined ? this._showCheckbox : this.tree.showCheckbox;
    }
    set showCheckbox(value) {
        this._showCheckbox = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        const isSelected = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
        if (isSelected !== this._selected) {
            this.setSelected(isSelected);
        }
    }
    get id() {
        return this._id;
    }
    get multiple() {
        return this.tree.multiple;
    }
    get viewValue() {
        // TODO: Add input property alternative for node envs.
        return (this.getHostElement().textContent || '').trim();
    }
    ngAfterContentInit() {
        this.value = this.tree.treeControl.getValue(this.data);
    }
    toggle() {
        this.selected = !this.selected;
    }
    setSelected(selected) {
        if (this._selected === selected || !this.tree.selectionModel) {
            return;
        }
        this._selected = selected;
        if (selected) {
            this.tree.selectionModel.select(this.data);
        }
        else {
            this.tree.selectionModel.deselect(this.data);
        }
        this.changeDetectorRef.markForCheck();
    }
    focus(focusOrigin) {
        if (focusOrigin === 'program') {
            return;
        }
        if (this.disabled || this.hasFocus) {
            return;
        }
        this.elementRef.nativeElement.focus();
        this.onFocus.next({ option: this });
        Promise.resolve().then(() => {
            this.hasFocus = true;
            this.changeDetectorRef.markForCheck();
        });
    }
    blur() {
        // When animations are enabled, Angular may end up removing the option from the DOM a little
        // earlier than usual, causing it to be blurred and throwing off the logic in the tree
        // that moves focus not the next item. To work around the issue, we defer marking the option
        // as not focused until the next time the zone stabilizes.
        this.ngZone.onStable
            .asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1))
            .subscribe(() => {
            this.ngZone.run(() => {
                this.hasFocus = false;
                this.onBlur.next({ option: this });
            });
        });
    }
    getHeight() {
        const clientRects = this.elementRef.nativeElement.getClientRects();
        if (clientRects.length) {
            return clientRects[0].height;
        }
        return 0;
    }
    select() {
        if (!this._selected) {
            this._selected = true;
            this.changeDetectorRef.markForCheck();
            this.emitSelectionChangeEvent();
        }
    }
    deselect() {
        if (this._selected) {
            this._selected = false;
            this.changeDetectorRef.markForCheck();
        }
    }
    selectViaInteraction($event) {
        if (!this.disabled) {
            this.changeDetectorRef.markForCheck();
            this.emitSelectionChangeEvent(true);
            const shiftKey = $event ? Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])($event, 'shiftKey') : false;
            const ctrlKey = $event ? Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])($event, 'ctrlKey') : false;
            this.tree.setSelectedOptionsByClick(this, shiftKey, ctrlKey);
        }
    }
    emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));
    }
    getHostElement() {
        return this.elementRef.nativeElement;
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
    }
}
McTreeOption.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-tree-option',
                exportAs: 'mcTreeOption',
                template: "<ng-content select=\"[mc-icon]\"></ng-content>\n\n<ng-content select=\"mc-tree-node-toggle\"></ng-content>\n\n<mc-pseudo-checkbox\n    *ngIf=\"showCheckbox\"\n    [state]=\"selected ? 'checked' : 'unchecked'\"\n    [disabled]=\"disabled\">\n</mc-pseudo-checkbox>\n\n<span class=\"mc-option-text mc-no-select\"><ng-content></ng-content></span>\n\n<div class=\"mc-option-overlay\"></div>\n",
                host: {
                    '[attr.id]': 'id',
                    '[attr.tabindex]': '-1',
                    '[attr.disabled]': 'disabled || null',
                    class: 'mc-tree-option',
                    '[class.mc-selected]': 'selected',
                    '[class.mc-focused]': 'hasFocus',
                    '(focus)': 'focus()',
                    '(blur)': 'blur()',
                    '(click)': 'selectViaInteraction($event)'
                },
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                providers: [{ provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"], useExisting: McTreeOption }]
            },] }
];
/** @nocollapse */
McTreeOption.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MC_TREE_OPTION_PARENT_COMPONENT,] }] }
];
McTreeOption.propDecorators = {
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    showCheckbox: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
};

/* tslint:disable:no-empty */
const MC_SELECTION_TREE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(() => McTreeSelection),
    multi: true
};
class McTreeNavigationChange {
    constructor(source, option) {
        this.source = source;
        this.option = option;
    }
}
class McTreeSelectionChange {
    constructor(source, option) {
        this.source = source;
        this.option = option;
    }
}
class McTreeSelection extends _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"] {
    constructor(elementRef, differs, changeDetectorRef, multiple) {
        super(differs, changeDetectorRef);
        this.elementRef = elementRef;
        this.renderedOptions = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]();
        this.resetFocusedItemOnBlur = true;
        this.navigationChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.multipleMode = null;
        this.userTabIndex = null;
        this.sortedNodes = [];
        this._autoSelect = true;
        this._noUnselectLast = true;
        this._disabled = false;
        this._tabIndex = 0;
        this.destroy = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        /** `View -> model callback called when value changes` */
        this.onChange = () => { };
        /** `View -> model callback called when select has been touched` */
        this.onTouched = () => { };
        this.updateRenderedOptions = () => {
            const orderedOptions = [];
            this.sortedNodes.forEach((node) => {
                const found = this.unorderedOptions.find((option) => option.value === this.treeControl.getValue(node));
                if (found) {
                    orderedOptions.push(found);
                }
            });
            this.renderedOptions.reset(orderedOptions);
            this.renderedOptions.notifyOnChanges();
        };
        if (multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX || multiple === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].KEYBOARD) {
            this.multipleMode = multiple;
        }
        else if (multiple !== null) {
            this.multipleMode = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
        }
        if (this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX) {
            this.autoSelect = false;
            this.noUnselectLast = false;
        }
        this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__["SelectionModel"](this.multiple);
    }
    get autoSelect() {
        return this._autoSelect;
    }
    set autoSelect(value) {
        this._autoSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    get optionFocusChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(...this.renderedOptions.map((option) => option.onFocus));
    }
    get optionBlurChanges() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(...this.renderedOptions.map((option) => option.onBlur));
    }
    get multiple() {
        return !!this.multipleMode;
    }
    get noUnselectLast() {
        return this._noUnselectLast;
    }
    set noUnselectLast(value) {
        this._noUnselectLast = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(rawValue) {
        const value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(rawValue);
        if (this._disabled !== value) {
            this._disabled = value;
            this.markOptionsForCheck();
        }
    }
    get tabIndex() {
        return this.disabled ? -1 : this._tabIndex;
    }
    set tabIndex(value) {
        this._tabIndex = value;
        this.userTabIndex = value;
    }
    get showCheckbox() {
        return this.multipleMode === _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"].CHECKBOX;
    }
    ngAfterContentInit() {
        this.unorderedOptions.changes.subscribe(this.updateRenderedOptions);
        this.keyManager = new _ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusKeyManager"](this.renderedOptions)
            .withVerticalOrientation(true)
            .withHorizontalOrientation(null);
        this.keyManager.change
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy))
            .subscribe(() => {
            if (this.keyManager.activeItem) {
                this.emitNavigationEvent(this.keyManager.activeItem);
                // todo need check this logic
                if (this.autoSelect && !this.keyManager.activeItem.disabled) {
                    this.updateOptionsFocus();
                }
            }
        });
        this.keyManager.tabOut
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy))
            .subscribe(() => this.allowFocusEscape());
        this.selectionModel.changed
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy))
            .subscribe(() => {
            this.onChange(this.getSelectedValues());
            this.renderedOptions.notifyOnChanges();
        });
        this.renderedOptions.changes
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.destroy))
            .subscribe((options) => {
            this.resetOptions();
            // Check to see if we need to update our tab index
            this.updateTabIndex();
            // todo need to do optimisation
            options.forEach((option) => {
                option.deselect();
                this.getSelectedValues().forEach((selectedValue) => {
                    if (option.value === selectedValue) {
                        option.select();
                    }
                });
                option.changeDetectorRef.detectChanges();
            });
        });
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
    }
    focus($event) {
        if (this.renderedOptions.length === 0 || this.isFocusReceivedFromNestedOption($event)) {
            return;
        }
        this.keyManager.setFirstItemActive();
    }
    blur() {
        if (!this.hasFocusedOption() && this.resetFocusedItemOnBlur) {
            this.keyManager.setActiveItem(-1);
        }
        this.onTouched();
        this.changeDetectorRef.markForCheck();
    }
    onKeyDown(event) {
        this.keyManager.setFocusOrigin('keyboard');
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        switch (keyCode) {
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["DOWN_ARROW"]:
                this.keyManager.setNextItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["UP_ARROW"]:
                this.keyManager.setPreviousItemActive();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["LEFT_ARROW"]:
                if (this.keyManager.activeItem) {
                    this.treeControl.collapse(this.keyManager.activeItem.data);
                }
                event.preventDefault();
                return;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["RIGHT_ARROW"]:
                if (this.keyManager.activeItem) {
                    this.treeControl.expand(this.keyManager.activeItem.data);
                }
                event.preventDefault();
                return;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["SPACE"]:
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ENTER"]:
                this.toggleFocusedOption();
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["HOME"]:
                this.keyManager.setFirstItemActive();
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["END"]:
                this.keyManager.setLastItemActive();
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["PAGE_UP"]:
                this.keyManager.setPreviousPageItemActive();
                event.preventDefault();
                break;
            case _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["PAGE_DOWN"]:
                this.keyManager.setNextPageItemActive();
                event.preventDefault();
                break;
            default:
                return;
        }
        if (this.keyManager.activeItem) {
            this.setSelectedOptionsByKey(this.keyManager.activeItem, Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])(event, 'shiftKey'), Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["hasModifierKey"])(event, 'ctrlKey'));
        }
    }
    updateScrollSize() {
        if (!this.renderedOptions.first) {
            return;
        }
        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.renderedOptions.first.getHeight()));
    }
    setSelectedOptionsByKey(option, shiftKey, ctrlKey) {
        if (shiftKey && this.multiple) {
            this.setSelectedOptions(option);
        }
        else if (ctrlKey) {
            if (!this.canDeselectLast(option)) {
                return;
            }
        }
        else if (this.autoSelect) {
            this.selectionModel.clear();
            this.selectionModel.toggle(option.data);
        }
        this.emitChangeEvent(option);
    }
    setSelectedOptionsByClick(option, shiftKey, ctrlKey) {
        if (!shiftKey && !ctrlKey) {
            this.keyManager.setActiveItem(option);
        }
        if (shiftKey && this.multiple) {
            this.setSelectedOptions(option);
        }
        else if (ctrlKey) {
            if (!this.canDeselectLast(option)) {
                return;
            }
            this.selectionModel.toggle(option.data);
        }
        else if (this.autoSelect) {
            this.selectionModel.clear();
            this.selectionModel.toggle(option.data);
        }
        else {
            this.selectionModel.toggle(option.data);
        }
        this.emitChangeEvent(option);
    }
    setSelectedOptions(option) {
        const selectedOptionState = option.selected;
        let fromIndex = this.keyManager.previousActiveItemIndex;
        let toIndex = this.keyManager.previousActiveItemIndex = this.keyManager.activeItemIndex;
        if (toIndex === fromIndex) {
            return;
        }
        if (fromIndex > toIndex) {
            [fromIndex, toIndex] = [toIndex, fromIndex];
        }
        this.renderedOptions
            .toArray()
            .slice(fromIndex, toIndex + 1)
            .filter((item) => !item.disabled)
            .forEach((renderedOption) => {
            const isLastRenderedOption = renderedOption === this.keyManager.activeItem;
            if (isLastRenderedOption && renderedOption.selected && this.noUnselectLast) {
                return;
            }
            renderedOption.setSelected(!selectedOptionState);
        });
    }
    setFocusedOption(option) {
        this.keyManager.setActiveItem(option);
    }
    toggleFocusedOption() {
        const focusedOption = this.keyManager.activeItem;
        if (focusedOption && (!focusedOption.selected || this.canDeselectLast(focusedOption))) {
            focusedOption.toggle();
            this.emitChangeEvent(focusedOption);
        }
    }
    renderNodeChanges(data, dataDiffer = this.dataDiffer, viewContainer = this.nodeOutlet.viewContainer, parentData) {
        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);
        this.sortedNodes = this.getSortedNodes(viewContainer);
        this.updateScrollSize();
        this.nodeOutlet.changeDetectorRef.detectChanges();
    }
    getHeight() {
        const clientRects = this.elementRef.nativeElement.getClientRects();
        if (clientRects.length) {
            return clientRects[0].height;
        }
        return 0;
    }
    getItemHeight() {
        return this.renderedOptions.first ? this.renderedOptions.first.getHeight() : 0;
    }
    emitNavigationEvent(option) {
        this.navigationChange.emit(new McTreeNavigationChange(this, option));
    }
    emitChangeEvent(option) {
        this.selectionChange.emit(new McTreeNavigationChange(this, option));
    }
    writeValue(value) {
        if (this.multiple && value && !Array.isArray(value)) {
            throw Object(_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["getMcSelectNonArrayValueError"])();
        }
        if (value) {
            this.setOptionsFromValues(this.multiple ? value : [value]);
        }
        else {
            this.selectionModel.clear();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
     */
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
        this.changeDetectorRef.markForCheck();
    }
    setOptionsFromValues(values) {
        this.selectionModel.clear();
        const valuesToSelect = values.reduce((result, value) => {
            return this.treeControl.hasValue(value) ? [...result, this.treeControl.hasValue(value)] : [...result];
        }, []);
        this.selectionModel.select(...valuesToSelect);
    }
    getSelectedValues() {
        return this.selectionModel.selected.map((selected) => this.treeControl.getValue(selected));
    }
    updateTabIndex() {
        this._tabIndex = this.renderedOptions.length === 0 ? -1 : 0;
    }
    getSortedNodes(viewContainer) {
        const array = [];
        for (let i = 0; i < viewContainer.length; i++) {
            const viewRef = viewContainer.get(i);
            array.push(viewRef.context.$implicit);
        }
        return array;
    }
    allowFocusEscape() {
        if (this._tabIndex !== -1) {
            this._tabIndex = -1;
            setTimeout(() => {
                this._tabIndex = this.userTabIndex || 0;
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    resetOptions() {
        this.dropSubscriptions();
        this.listenToOptionsFocus();
    }
    dropSubscriptions() {
        if (this.optionFocusSubscription) {
            this.optionFocusSubscription.unsubscribe();
            this.optionFocusSubscription = null;
        }
        if (this.optionBlurSubscription) {
            this.optionBlurSubscription.unsubscribe();
            this.optionBlurSubscription = null;
        }
    }
    listenToOptionsFocus() {
        this.optionFocusSubscription = this.optionFocusChanges
            .subscribe((event) => {
            const index = this.renderedOptions.toArray().indexOf(event.option);
            this.renderedOptions
                .filter((option) => option.hasFocus)
                .forEach((option) => option.hasFocus = false);
            if (this.isValidIndex(index)) {
                this.keyManager.updateActiveItem(index);
            }
        });
        this.optionBlurSubscription = this.optionBlurChanges
            .subscribe(() => this.blur());
    }
    /**
     * Utility to ensure all indexes are valid.
     * @param index The index to be checked.
     * @returns True if the index is valid for our list of options.
     */
    isValidIndex(index) {
        return index >= 0 && index < this.renderedOptions.length;
    }
    /** Checks whether any of the options is focused. */
    hasFocusedOption() {
        return this.renderedOptions.some((option) => option.hasFocus);
    }
    markOptionsForCheck() {
        this.renderedOptions.forEach((option) => option.markForCheck());
    }
    updateOptionsFocus() {
        this.renderedOptions
            .filter((option) => option.hasFocus)
            .forEach((option) => option.hasFocus = false);
    }
    canDeselectLast(option) {
        return !(this.noUnselectLast && this.selectionModel.selected.length === 1 && option.selected);
    }
    isFocusReceivedFromNestedOption($event) {
        if (!$event || !$event.relatedTarget) {
            return false;
        }
        return $event.relatedTarget.classList.contains('mc-tree-option');
    }
}
McTreeSelection.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                selector: 'mc-tree-selection',
                exportAs: 'mcTreeSelection',
                template: '<ng-container cdkTreeNodeOutlet></ng-container>',
                host: {
                    class: 'mc-tree-selection',
                    '[attr.tabindex]': 'tabIndex',
                    '[attr.disabled]': 'disabled || null',
                    '(blur)': 'blur()',
                    '(focus)': 'focus($event)',
                    '(keydown)': 'onKeyDown($event)',
                    '(window:resize)': 'updateScrollSize()'
                },
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                providers: [
                    MC_SELECTION_TREE_VALUE_ACCESSOR,
                    { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },
                    { provide: _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"], useExisting: McTreeSelection }
                ],
                styles: [".mc-tree-selection{display:block}.mc-tree-option{display:flex;align-items:center;padding-right:var(--mc-tree-size-padding-right,16px);height:var(--mc-tree-size-node-height,28px);word-wrap:break-word;border:var(--mc-tree-size-border-width,2px) solid transparent}.mc-tree-option>.mc-icon{margin-right:4px;cursor:pointer}.mc-tree-option:focus{outline:none}.mc-tree-option:not([disabled]){cursor:pointer}.mc-tree-option .mc-pseudo-checkbox{margin-right:8px}.mc-tree-node-toggle{margin-right:4px;cursor:pointer}.mc-tree-node-toggle .mc-icon{transform:rotate(-90deg)}.mc-tree-node-toggle.mc-opened .mc-icon{transform:rotate(0)}.mc-tree-node-toggle[disabled]{cursor:default}"]
            },] }
];
/** @nocollapse */
McTreeSelection.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["MultipleMode"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['multiple',] }] }
];
McTreeSelection.propDecorators = {
    nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [_ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeOutlet"], { static: true },] }],
    unorderedOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [McTreeOption,] }],
    treeControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    navigationChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
    autoSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    noUnselectLast: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};

const MC_TREE_DIRECTIVES = [
    McTreeSelection,
    McTreeOption,
    McTreeNodeDef,
    McTreeNodePadding,
    McTreeNodeToggleComponent,
    McTreeNodeToggleDirective
];
class McTreeModule {
}
McTreeModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _ptsecurity_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeModule"], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__["McPseudoCheckboxModule"]],
                exports: MC_TREE_DIRECTIVES,
                declarations: MC_TREE_DIRECTIVES
            },] }
];

/**
 * Tree flattener to convert a normal type of node to node with children & level information.
 * Transform nested nodes of type `T` to flattened nodes of type `F`.
 *
 * For example, the input data of type `T` is nested, and contains its children data:
 *   SomeNode: {
 *     key: 'Fruits',
 *     children: [
 *       NodeOne: {
 *         key: 'Apple',
 *       },
 *       NodeTwo: {
 *        key: 'Pear',
 *      }
 *    ]
 *  }
 *  After flattener flatten the tree, the structure will become
 *  SomeNode: {
 *    key: 'Fruits',
 *    expandable: true,
 *    level: 1
 *  },
 *  NodeOne: {
 *    key: 'Apple',
 *    expandable: false,
 *    level: 2
 *  },
 *  NodeTwo: {
 *   key: 'Pear',
 *   expandable: false,
 *   level: 2
 * }
 * and the output flattened type is `F` with additional information.
 */
class McTreeFlattener {
    constructor(transformFunction, getLevel, isExpandable, getChildren) {
        this.transformFunction = transformFunction;
        this.getLevel = getLevel;
        this.isExpandable = isExpandable;
        this.getChildren = getChildren;
    }
    flattenNode(node, level, resultNodes, parent) {
        const flatNode = this.transformFunction(node, level, parent);
        resultNodes.push(flatNode);
        if (this.isExpandable(flatNode)) {
            const childrenNodes = this.getChildren(node);
            if (childrenNodes) {
                if (Array.isArray(childrenNodes)) {
                    this.flattenChildren(childrenNodes, level, resultNodes, flatNode);
                }
                else {
                    childrenNodes
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1))
                        .subscribe((children) => {
                        this.flattenChildren(children, level, resultNodes, flatNode);
                    });
                }
            }
        }
        return resultNodes;
    }
    flattenChildren(children, level, resultNodes, parent) {
        children.forEach((child) => {
            this.flattenNode(child, level + 1, resultNodes, parent);
        });
    }
    /**
     * Flatten a list of node type T to flattened version of node F.
     * Please note that type T may be nested, and the length of `structuredData` may be different
     * from that of returned list `F[]`.
     */
    flattenNodes(structuredData) {
        const resultNodes = [];
        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, null));
        return resultNodes;
    }
    /**
     * Expand flattened node with current expansion status.
     * The returned list may have different length.
     */
    expandFlattenedNodes(nodes, treeControl) {
        const results = [];
        const currentExpand = [];
        currentExpand[0] = true;
        nodes.forEach((node) => {
            let expand = true;
            for (let i = 0; i <= this.getLevel(node); i++) {
                expand = expand && currentExpand[i];
            }
            if (expand) {
                results.push(node);
            }
            if (this.isExpandable(node)) {
                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);
            }
        });
        return results;
    }
}
var McTreeDataSourceChangeTypes;
(function (McTreeDataSourceChangeTypes) {
    McTreeDataSourceChangeTypes["Expansion"] = "expansion";
    McTreeDataSourceChangeTypes["Filter"] = "filter";
})(McTreeDataSourceChangeTypes || (McTreeDataSourceChangeTypes = {}));
/**
 * Data source for flat tree.
 * The data source need to handle expansion/collapsion of the tree node and change the data feed
 * to `McTree`.
 * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted
 * to type `F` for `McTree` to consume.
 */
class McTreeFlatDataSource extends _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__["DataSource"] {
    constructor(treeControl, treeFlattener, initialData = []) {
        super();
        this.treeControl = treeControl;
        this.treeFlattener = treeFlattener;
        this.flattenedData = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
        this.expandedData = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
        this.filteredData = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
        this._data = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"](initialData);
    }
    get data() {
        return this._data.value;
    }
    set data(value) {
        this._data.next(value);
        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));
        this.treeControl.dataNodes = this.flattenedData.value;
    }
    connect(collectionViewer) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(collectionViewer.viewChange, this.treeControl.expansionModel.changed
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((value) => ({ type: McTreeDataSourceChangeTypes.Expansion, value }))), this.treeControl.filterValue
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((value) => ({ type: McTreeDataSourceChangeTypes.Filter, value }))), this.flattenedData)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])((changeObj) => {
            if (changeObj.type === McTreeDataSourceChangeTypes.Filter) {
                if (changeObj.value && changeObj.value.length > 0) {
                    return this.filterHandler();
                }
                else {
                    return this.expansionHandler();
                }
            }
            return this.expansionHandler();
        }));
    }
    filterHandler() {
        this.filteredData.next(this.treeControl.filterModel.selected);
        return this.filteredData.value;
    }
    expansionHandler() {
        const expandedNodes = this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl);
        this.expandedData.next(expandedNodes);
        return this.expandedData.value;
    }
    disconnect() {
        // no op
    }
}

/**
 * Data source for nested tree.
 *
 * The data source for nested tree doesn't have to consider node flattener, or the way to expand
 * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.
 */
class McTreeNestedDataSource extends _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_8__["DataSource"] {
    constructor() {
        super(...arguments);
        /* tslint:disable-next-line:naming-convention */
        this._data = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"]([]);
    }
    get data() {
        return this._data.value;
    }
    set data(value) {
        this._data.next(value);
    }
    connect(collectionViewer) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(...[collectionViewer.viewChange, this._data])
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(() => this.data));
    }
    disconnect() {
        // no op
    }
}

/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ "werY":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./packages/docs/src/app/shared/stackblitz/stackblitz-button.html ***!
  \**************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"stackblitz__wrapper\">\n\n    <a href=\"#\"\n        mc-link\n        (click)=\"openStackblitz()\"\n        [disabled]=\"isDisabled\">\n        <svg class=\"stackblitz__icon\" width='9.5px' height='14px' viewBox='0 0 23 34' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <desc>Created with Sketch.</desc> <g id='Symbols' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'> <g class='stackblitz__icon-g'> <polygon id='Path' points='0 19.9187087 9.87007874 19.9187087 4.12007874 34 23 13.9612393 13.0846457 13.9612393 18.7893701 0'></polygon> </g> </g> </svg>\n\n        <span class=\"mc-link__text\">Stackblitz</span>\n  </a>\n</div>\n");

/***/ }),

/***/ "wiOn":
/*!**********************************************************************!*\
  !*** ./packages/docs/src/app/shared/stackblitz/stackblitz-writer.ts ***!
  \**********************************************************************/
/*! exports provided: StackblitzWriter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackblitzWriter", function() { return StackblitzWriter; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "IheW");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _version_version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../version/version */ "S/AA");

/* tslint:disable:no-parameter-reassignment */



const STACKBLITZ_URL = 'https://run.stackblitz.com/api/angular/v1';
const COPYRIGHT = `Copyright 2020 Positive Technologies. All Rights Reserved.
    Use of this source code is governed by an MIT-style license.`;
/**
 * Path that refers to the docs-content from the "@ptsecurity/mosaic-examples" package. The
 * structure is defined in the repository, but we include the docs-content as assets in
 * in the CLI configuration.
 */
const DOCS_CONTENT_PATH = 'docs-content/examples-source/';
const TEMPLATE_PATH = 'assets/stackblitz/';
const TEMPLATE_FILES = [
    '.editorconfig',
    '.gitignore',
    'index.html',
    'tsconfig.json',
    'tsconfig.app.json',
    'tsconfig.spec.json',
    'styles.css',
    'polyfills.ts',
    'angular.json',
    'main.ts',
    'mosaic-module.ts'
];
const TAGS = ['angular', 'mosaic', 'example'];
const angularVersion = '^11.0.0';
const dependencies = {
    '@ptsecurity/cdk': _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"],
    '@ptsecurity/mosaic': _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"],
    '@ptsecurity/mosaic-icons': '^5.3.0',
    '@ptsecurity/mosaic-moment-adapter': _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"],
    '@angular/cdk': angularVersion,
    '@angular/animations': angularVersion,
    '@angular/common': angularVersion,
    '@angular/compiler': angularVersion,
    '@angular/core': angularVersion,
    '@angular/forms': angularVersion,
    '@angular/platform-browser': angularVersion,
    '@angular/platform-browser-dynamic': angularVersion,
    '@angular/router': angularVersion,
    'core-js': '^3.6.5',
    rxjs: '^6.5.0',
    messageformat: '^2.0.5',
    tslib: '^2.0.1',
    'zone.js': '~0.10.3',
    moment: '^2.24.0'
};
/**
 * Stackblitz writer, write example files to stackblitz
 *
 * StackBlitz API
 * URL: https://run.stackblitz.com/api/aio/v1/
 * data: {
 *   // File name, directory and content of files
 *   files[file-name1]: file-content1,
 *   files[directory-name/file-name2]: file-content2,
 *   // Can add multiple tags
 *   tags[0]: tag-0,
 *   // Description of stackblitz
 *   description: description,
 *   // Private or not
 *   private: true
 *  // Dependencies
 *  dependencies: dependencies
 * }
 */
let StackblitzWriter = class StackblitzWriter {
    constructor(_http) {
        this._http = _http;
    }
    /**
     * Returns an HTMLFormElement that will open a new stackblitz template with the example data when
     * called with submit().
     */
    constructStackblitzForm(data) {
        const indexFile = `app%2F${data.indexFilename}.ts`;
        const form = this.createFormElement(indexFile);
        TAGS.forEach((tag, i) => this.appendFormInput(form, `tags[${i}]`, tag));
        this.appendFormInput(form, 'private', 'true');
        this.appendFormInput(form, 'description', data.description);
        this.appendFormInput(form, 'dependencies', JSON.stringify(dependencies));
        return new Promise((resolve) => {
            const templateContents = TEMPLATE_FILES
                .map((file) => this.readFile(form, data, file, TEMPLATE_PATH));
            const exampleContents = data.exampleFiles
                .map((file) => this.readFile(form, data, file, DOCS_CONTENT_PATH));
            // TODO: Prevent including assets to be manually checked.
            if (data.selectorName === 'icon-svg-example') {
                this.readFile(form, data, 'assets/img/examples/thumbup-icon.svg', '', false);
            }
            Promise.all(templateContents.concat(exampleContents)).then(() => {
                resolve(form);
            });
        });
    }
    /** Constructs a new form element that will navigate to the stackblitz url. */
    createFormElement(indexFile) {
        const form = document.createElement('form');
        form.action = `${STACKBLITZ_URL}?file=${indexFile}`;
        form.method = 'post';
        form.target = '_blank';
        return form;
    }
    /** Appends the name and value as an input to the form. */
    appendFormInput(form, name, value) {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = name;
        input.value = value;
        form.appendChild(input);
    }
    /**
     * Reads the file and adds its text to the form
     * @param form the html form you are appending to
     * @param data example metadata about the example
     * @param filename file name of the example
     * @param path path to the src
     * @param prependApp whether to prepend the 'app' prefix to the path
     */
    readFile(form, data, filename, path, prependApp = true) {
        this._http.get(path + filename, { responseType: 'text' }).subscribe((response) => this.addFileToForm(form, data, response, filename, path, prependApp), 
        // tslint:disable-next-line:no-console
        (error) => console.log(error));
    }
    /**
     * Adds the file text to the form.
     * @param form the html form you are appending to
     * @param data example metadata about the example
     * @param content file contents
     * @param filename file name of the example
     * @param path path to the src
     * @param prependApp whether to prepend the 'app' prefix to the path
     */
    addFileToForm(form, data, content, filename, path, prependApp = true) {
        if (path === TEMPLATE_PATH) {
            content = this.replaceExamplePlaceholderNames(data, filename, content);
        }
        else if (prependApp) {
            // tslint:disable-next-line:prefer-template
            filename = 'app/' + filename;
        }
        this.appendFormInput(form, `files[${filename}]`, this.appendCopyright(filename, content));
    }
    /**
     * The stackblitz template assets contain placeholder names for the examples:
     * "<mosaic-docs-example>" and "MosaicDocsExample".
     * This will replace those placeholders with the names from the example metadata,
     * e.g. "<basic-button-example>" and "BasicButtonExample"
     */
    replaceExamplePlaceholderNames(data, fileName, fileContent) {
        if (fileName === 'index.html') {
            // Replace the component selector in `index,html`.
            // For example, <mosaic-docs-example></mosaic-docs-example> will be replaced as
            // <button-demo></button-demo>
            fileContent = fileContent.replace(/mosaic-docs-example/g, data.selectorName);
            fileContent = fileContent.replace(/{{version}}/g, _version_version__WEBPACK_IMPORTED_MODULE_3__["mosaicVersion"]);
        }
        else if (fileName === 'main.ts') {
            // Replace the component name in `main.ts`.
            // Replace `import {MosaicDocsExample} from 'mosaic-docs-example'`
            // will be replaced as `import {ButtonDemo} from './button-demo'`
            fileContent = fileContent.replace(/{ MosaicDocsExample }/g, `{ ${data.componentName} }`);
            // Replace `declarations: [MosaicDocsExample]`
            // will be replaced as `declarations: [ButtonDemo]`
            fileContent = fileContent.replace(/declarations: \[MosaicDocsExample\]/g, `declarations: [${data.componentName}]`);
            // Replace `entryComponents: [MosaicDocsExample]`
            // will be replaced as `entryComponents: [DialogContent]`
            fileContent = fileContent.replace(/entryComponents: \[MosaicDocsExample\]/g, `entryComponents: [${data.componentName}]`);
            // Replace `bootstrap: [MosaicDocsExample]`
            // will be replaced as `bootstrap: [ButtonDemo]`
            // This assumes the first component listed in the main component
            const componentList = (data.componentName || '').split(',')[0];
            fileContent = fileContent.replace(/bootstrap: \[MosaicDocsExample\]/g, `bootstrap: [${componentList}]`);
            fileContent = fileContent.replace(/mosaic-docs-example/g, data.indexFilename);
        }
        return fileContent;
    }
    appendCopyright(filename, content) {
        if (filename.indexOf('.ts') > -1 || filename.indexOf('.scss') > -1) {
            content = `${content}\n\n/**  ${COPYRIGHT} */`;
        }
        else if (filename.indexOf('.html') > -1) {
            content = `${content}\n\n<!-- ${COPYRIGHT} -->`;
        }
        return content;
    }
};
StackblitzWriter.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"] }
];
StackblitzWriter = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
], StackblitzWriter);



/***/ }),

/***/ "ypJ8":
/*!**************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-timepicker.js ***!
  \**************************************************************/
/*! exports provided: AM_PM_FORMAT_REGEXP, DEFAULT_TIME_FORMAT, HOURS_MINUTES_REGEXP, HOURS_MINUTES_SECONDS_REGEXP, HOURS_ONLY_REGEXP, HOURS_PER_DAY, MC_TIMEPICKER_VALIDATORS, MC_TIMEPICKER_VALUE_ACCESSOR, MINUTES_PER_HOUR, McTimepicker, McTimepickerModule, SECONDS_PER_MINUTE, TIMEFORMAT_PLACEHOLDERS, TimeFormats, TimeParts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AM_PM_FORMAT_REGEXP", function() { return AM_PM_FORMAT_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_TIME_FORMAT", function() { return DEFAULT_TIME_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOURS_MINUTES_REGEXP", function() { return HOURS_MINUTES_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOURS_MINUTES_SECONDS_REGEXP", function() { return HOURS_MINUTES_SECONDS_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOURS_ONLY_REGEXP", function() { return HOURS_ONLY_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOURS_PER_DAY", function() { return HOURS_PER_DAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TIMEPICKER_VALIDATORS", function() { return MC_TIMEPICKER_VALIDATORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MC_TIMEPICKER_VALUE_ACCESSOR", function() { return MC_TIMEPICKER_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MINUTES_PER_HOUR", function() { return MINUTES_PER_HOUR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTimepicker", function() { return McTimepicker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "McTimepickerModule", function() { return McTimepickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SECONDS_PER_MINUTE", function() { return SECONDS_PER_MINUTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TIMEFORMAT_PLACEHOLDERS", function() { return TIMEFORMAT_PLACEHOLDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeFormats", function() { return TimeFormats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeParts", function() { return TimeParts; });
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "YEUz");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ "SCoL");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "8LU1");
/* harmony import */ var _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/cdk/datetime */ "5vLs");
/* harmony import */ var _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/cdk/keycodes */ "+6St");
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ "4KQ8");
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ "7oHS");
/* harmony import */ var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ptsecurity/mosaic/tooltip */ "YK9X");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "qCKp");













// tslint:disable:naming-convention
var TimeParts;
(function (TimeParts) {
    TimeParts[TimeParts["hours"] = 0] = "hours";
    TimeParts[TimeParts["minutes"] = 1] = "minutes";
    TimeParts[TimeParts["seconds"] = 2] = "seconds";
})(TimeParts || (TimeParts = {}));
var TimeFormats;
(function (TimeFormats) {
    TimeFormats["HHmmss"] = "HH:mm:ss";
    TimeFormats["HHmm"] = "HH:mm";
})(TimeFormats || (TimeFormats = {}));
const TIMEFORMAT_PLACEHOLDERS = {
    [TimeFormats.HHmmss]: 'чч:мм:сс',
    [TimeFormats.HHmm]: 'чч:мм'
};
const DEFAULT_TIME_FORMAT = TimeFormats.HHmm;
const HOURS_MINUTES_SECONDS_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?$/;
const HOURS_MINUTES_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9])?$/;
const HOURS_ONLY_REGEXP = /^([0-1][0-9]|2[0-3]):?$/;
const AM_PM_FORMAT_REGEXP = /^([0-1]?[0-9]):([0-5]?[0-9]) ([ap][m]?$)/i;
const SECONDS_PER_MINUTE = 59;
const MINUTES_PER_HOUR = 59;
const HOURS_PER_DAY = 23;

/** @docs-private */
const MC_TIMEPICKER_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(() => McTimepicker),
    multi: true
};
/** @docs-private */
const MC_TIMEPICKER_VALIDATORS = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALIDATORS"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(() => McTimepicker),
    multi: true
};
let uniqueComponentIdSuffix = 0;
const shortFormatSize = 5;
const fullFormatSize = 8;
class McTimepicker {
    constructor(elementRef, dateAdapter, renderer) {
        this.elementRef = elementRef;
        this.dateAdapter = dateAdapter;
        this.renderer = renderer;
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.focused = false;
        /**
         * Implemented as part of McFormFieldControl.
         * @docs-private
         */
        this.controlType = 'timepicker';
        this._format = DEFAULT_TIME_FORMAT;
        this._min = null;
        this._max = null;
        this.incorrectInput = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this.uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;
        this.lastValueValid = false;
        this.onInput = () => {
            const formattedValue = this.formatUserInput(this.viewValue);
            const newTimeObj = this.getDateFromTimeString(formattedValue);
            this.lastValueValid = !!newTimeObj;
            if (!newTimeObj) {
                this.onChange(null);
                return;
            }
            const selectionStart = this.selectionStart;
            const selectionEnd = this.selectionEnd;
            this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.format));
            this.selectionStart = selectionStart;
            this.selectionEnd = selectionEnd;
            this.createSelectionOfTimeComponentInInput(selectionStart + 1);
            this.value = newTimeObj;
            this.onChange(newTimeObj);
            this.stateChanges.next();
        };
        this.parseValidator = () => {
            return this.focused ||
                this.empty ||
                this.lastValueValid ? null : { mcTimepickerParse: { text: this.viewValue } };
        };
        this.minValidator = (control) => {
            const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return (!this.min || !controlValue || this.compareTime(this.min, controlValue) <= 0) ?
                null :
                { mcTimepickerLowerThenMin: { min: this.min, actual: controlValue } };
        };
        this.maxValidator = (control) => {
            const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return (!this.max || !controlValue || this.compareTime(this.max, controlValue) >= 0) ?
                null :
                { mcTimepickerHigherThenMax: { max: this.max, actual: controlValue } };
        };
        // tslint:disable-next-line:no-empty
        this.validatorOnChange = () => { };
        if (!this.dateAdapter) {
            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +
                `modules at your application root or provide a custom implementation or use exists ones.`);
        }
        this.validator = _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([this.parseValidator, this.minValidator, this.maxValidator]);
        this.onChange = rxjs__WEBPACK_IMPORTED_MODULE_11__["noop"];
        // Force setter to be called in case id was not specified.
        this.id = this.id;
        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
        // Browsers may not fire the blur event if the input is disabled too quickly.
        // Reset from here to ensure that the element doesn't become stuck.
        if (this.focused) {
            this.focused = false;
        }
        this.stateChanges.next();
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this.uid;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value);
    }
    get format() {
        return this._format;
    }
    set format(formatValue) {
        this._format = Object
            .keys(TimeFormats)
            .map((timeFormatKey) => TimeFormats[timeFormatKey])
            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;
        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._format];
        if (this.value) {
            this.updateView();
        }
    }
    get min() {
        return this._min;
    }
    set min(value) {
        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.validatorOnChange();
    }
    get max() {
        return this._max;
    }
    set max(value) {
        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));
        this.validatorOnChange();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        const newValue = this.dateAdapter.deserialize(value);
        this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);
        this._value = this.getValidDateOrNull(newValue);
        this.updateView();
    }
    set mcValidationTooltip(tooltip) {
        if (!tooltip) {
            return;
        }
        tooltip.mcMouseEnterDelay = _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["validationTooltipShowDelay"];
        tooltip.mcTrigger = 'manual';
        tooltip.mcTooltipClass = 'mc-tooltip_warning';
        tooltip.initElementRefListeners();
        this.incorrectInput.subscribe(() => {
            if (tooltip.isTooltipOpen) {
                return;
            }
            tooltip.show();
            setTimeout(() => tooltip.hide(), _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_8__["validationTooltipHideDelay"]);
        });
    }
    get hasSelection() {
        return this.selectionStart !== this.selectionEnd;
    }
    get isFullFormat() {
        return this.format === TimeFormats.HHmmss;
    }
    get isShortFormat() {
        return this.format === TimeFormats.HHmm;
    }
    get viewValue() {
        return this.elementRef.nativeElement.value;
    }
    get ngControl() {
        return this.control;
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    get empty() {
        return !this.viewValue && !this.isBadInput();
    }
    get selectionStart() {
        return this.elementRef.nativeElement.selectionStart;
    }
    set selectionStart(value) {
        this.elementRef.nativeElement.selectionStart = value;
    }
    get selectionEnd() {
        return this.elementRef.nativeElement.selectionEnd;
    }
    set selectionEnd(value) {
        this.elementRef.nativeElement.selectionEnd = value;
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    getSize() {
        return this.isFullFormat ? fullFormatSize : shortFormatSize;
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
    focusChanged(isFocused) {
        if (isFocused !== this.focused) {
            this.focused = isFocused;
            this.onTouched();
            this.stateChanges.next();
        }
    }
    onBlur() {
        this.focusChanged(false);
        this.onInput();
    }
    onPaste($event) {
        $event.preventDefault();
        const value = this.formatUserPaste($event.clipboardData.getData('text'));
        const newTimeObj = this.getDateFromTimeString(value);
        if (!newTimeObj) {
            return;
        }
        this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.format));
        this.value = newTimeObj;
        this.onChange(newTimeObj);
        this.stateChanges.next();
    }
    /**
     * Implemented as part of McFormFieldControl.
     * @docs-private
     */
    onContainerClick() {
        this.focus();
    }
    onKeyDown(event) {
        // tslint:disable-next-line: deprecation
        const keyCode = event.keyCode;
        if (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["isLetterKey"])(event) && !event.ctrlKey && !event.metaKey) {
            event.preventDefault();
            this.incorrectInput.emit();
        }
        else if ((Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["hasModifierKey"])(event) && (Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["isVerticalMovement"])(keyCode) || Object(_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["isHorizontalMovement"])(keyCode))) ||
            event.ctrlKey || event.metaKey ||
            [_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["DELETE"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["BACKSPACE"]].includes(keyCode)) {
            Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["noop"])();
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["SPACE"]) {
            this.spaceKeyHandler(event);
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["HOME"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["PAGE_UP"]].includes(keyCode)) {
            this.createSelectionOfTimeComponentInInput(0);
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["END"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["PAGE_DOWN"]].includes(keyCode)) {
            this.createSelectionOfTimeComponentInInput(this.viewValue.length);
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["UP_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["DOWN_ARROW"]].includes(keyCode)) {
            event.preventDefault();
            this.verticalArrowKeyHandler(keyCode);
        }
        else if ([_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["LEFT_ARROW"], _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["RIGHT_ARROW"]].includes(keyCode)) {
            this.horizontalArrowKeyHandler(keyCode);
        }
        else if (/^\D$/.test(event.key)) {
            event.preventDefault();
            const newValue = this.getNewValue(event.key, this.selectionStart);
            const formattedValue = this.replaceSymbols(newValue);
            if (newValue !== formattedValue) {
                this.setViewValue(formattedValue);
                setTimeout(this.onInput);
            }
            else {
                this.incorrectInput.emit();
            }
        }
        else {
            setTimeout(this.onInput);
        }
    }
    validate(control) {
        this.setControl(control);
        return this.validator ? this.validator(control) : null;
    }
    registerOnValidatorChange(fn) {
        this.validatorOnChange = fn;
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    formatUserPaste(value) {
        var _a;
        if (value.match(AM_PM_FORMAT_REGEXP)) {
            return value;
        }
        const match = value.match(/^(\D+)?(?<hours>\d+)?(\D+)?(\D+)?(?<minutes>\d+)?(\D+)?(\D+)?(?<seconds>\d+)?(\D+)?$/);
        if (!((_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.hours)) {
            this.setViewValue(value);
            return value;
        }
        return this.replaceNumbers(Object.values(match.groups)
            // tslint:disable-next-line:no-magic-numbers
            .map((group) => (group || '').padStart(2, '0'))
            .join(':'));
    }
    formatUserInput(value) {
        return this.replaceNumbers(this.replaceSymbols(value));
    }
    replaceSymbols(value) {
        let formattedValue = value;
        const match = value.match(/^(\d\d:){0,2}(?<number>[0-9])(?<symbol>\W)(:\d\d){0,2}$/);
        if (match === null || match === void 0 ? void 0 : match.groups) {
            const { number, symbol } = match.groups;
            formattedValue = value.replace(number + symbol, `0${number}`);
        }
        return formattedValue;
    }
    replaceNumbers(value) {
        let formattedValue = value;
        const match = value.match(/^(?<hours>\d{0,4}):?(?<minutes>\d{0,4}):?(?<seconds>\d{0,4})$/);
        if (match === null || match === void 0 ? void 0 : match.groups) {
            const { hours, minutes, seconds } = match.groups;
            if (hours.length && parseInt(hours) > HOURS_PER_DAY) {
                formattedValue = formattedValue.replace(hours, HOURS_PER_DAY.toString());
            }
            if (minutes.length && parseInt(minutes) > MINUTES_PER_HOUR) {
                formattedValue = formattedValue.replace(minutes, MINUTES_PER_HOUR.toString());
            }
            if (seconds.length && parseInt(seconds) > SECONDS_PER_MINUTE) {
                formattedValue = formattedValue.replace(seconds, SECONDS_PER_MINUTE.toString());
            }
        }
        return formattedValue;
    }
    /** Checks whether the input is invalid based on the native validation. */
    isBadInput() {
        const validity = this.elementRef.nativeElement.validity;
        return validity && validity.badInput;
    }
    spaceKeyHandler(event) {
        event.preventDefault();
        if (this.selectionStart === this.selectionEnd) {
            const value = this.getNewValue(event.key, this.selectionStart);
            const formattedValue = this.replaceSymbols(value);
            if (value !== formattedValue) {
                this.setViewValue(formattedValue);
                setTimeout(this.onInput);
            }
        }
        else if (this.selectionStart !== this.selectionEnd) {
            let cursorPos = this.selectionStart;
            const nextDividerPos = this.viewValue.indexOf(':', cursorPos);
            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;
            this.createSelectionOfTimeComponentInInput(cursorPos);
        }
    }
    getNewValue(key, position) {
        return [this.viewValue.slice(0, position), key, this.viewValue.slice(position)].join('');
    }
    verticalArrowKeyHandler(keyCode) {
        if (!this.value) {
            return;
        }
        let changedTime;
        const newEditParams = this.getTimeEditMetrics(this.selectionStart);
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["UP_ARROW"]) {
            changedTime = this.incrementTime(this.value, newEditParams.modifiedTimePart);
        }
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["DOWN_ARROW"]) {
            changedTime = this.decrementTime(this.value, newEditParams.modifiedTimePart);
        }
        this.value = changedTime;
        this.selectionStart = newEditParams.cursorStartPosition;
        this.selectionEnd = newEditParams.cursorEndPosition;
        this.onChange(changedTime);
        this.stateChanges.next();
    }
    horizontalArrowKeyHandler(keyCode) {
        if (!this.value) {
            return;
        }
        let cursorPos = this.selectionStart;
        if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["LEFT_ARROW"]) {
            cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;
        }
        else if (keyCode === _ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["RIGHT_ARROW"]) {
            const nextDividerPos = this.viewValue.indexOf(':', cursorPos);
            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;
        }
        this.createSelectionOfTimeComponentInInput(cursorPos);
    }
    createSelectionOfTimeComponentInInput(cursorPos) {
        setTimeout(() => {
            const newEditParams = this.getTimeEditMetrics(cursorPos);
            this.selectionStart = newEditParams.cursorStartPosition;
            this.selectionEnd = newEditParams.cursorEndPosition;
        });
    }
    incrementTime(dateVal, whatToIncrement = TimeParts.seconds) {
        let hours = this.dateAdapter.getHours(dateVal);
        let minutes = this.dateAdapter.getMinutes(dateVal);
        let seconds = this.dateAdapter.getSeconds(dateVal);
        switch (whatToIncrement) {
            case TimeParts.hours:
                hours++;
                break;
            case TimeParts.minutes:
                minutes++;
                break;
            case TimeParts.seconds:
                seconds++;
                break;
            default:
        }
        if (seconds > SECONDS_PER_MINUTE) {
            seconds = 0;
        }
        if (minutes > MINUTES_PER_HOUR) {
            minutes = 0;
        }
        if (hours > HOURS_PER_DAY) {
            hours = 0;
        }
        return this.dateAdapter.createDateTime(this.dateAdapter.getYear(this.value), this.dateAdapter.getMonth(this.value), this.dateAdapter.getDate(this.value), hours, minutes, seconds, this.dateAdapter.getMilliseconds(this.value));
    }
    decrementTime(dateVal, whatToDecrement = TimeParts.seconds) {
        let hours = this.dateAdapter.getHours(dateVal);
        let minutes = this.dateAdapter.getMinutes(dateVal);
        let seconds = this.dateAdapter.getSeconds(dateVal);
        switch (whatToDecrement) {
            case TimeParts.hours:
                hours--;
                break;
            case TimeParts.minutes:
                minutes--;
                break;
            case TimeParts.seconds:
                seconds--;
                break;
            default:
        }
        if (seconds < 0) {
            seconds = SECONDS_PER_MINUTE;
        }
        if (minutes < 0) {
            minutes = MINUTES_PER_HOUR;
        }
        if (hours < 0) {
            hours = HOURS_PER_DAY;
        }
        return this.dateAdapter.createDateTime(this.dateAdapter.getYear(this.value), this.dateAdapter.getMonth(this.value), this.dateAdapter.getDate(this.value), hours, minutes, seconds, this.dateAdapter.getMilliseconds(this.value));
    }
    /**
     * @description Get params for arrow-keys (up/down) time valie edit.
     * @param cursorPosition Current cursor position in timeString
     */
    getTimeEditMetrics(cursorPosition) {
        const timeString = this.viewValue;
        let modifiedTimePart;
        let cursorStartPosition;
        let cursorEndPosition;
        const hoursIndex = 0;
        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);
        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;
        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {
            modifiedTimePart = TimeParts.seconds;
            cursorStartPosition = secondsIndex + 1;
            cursorEndPosition = timeString.length;
        }
        else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {
            modifiedTimePart = TimeParts.minutes;
            cursorStartPosition = minutesIndex + 1;
            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;
        }
        else {
            modifiedTimePart = TimeParts.hours;
            cursorStartPosition = hoursIndex;
            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;
        }
        return { modifiedTimePart, cursorStartPosition, cursorEndPosition };
    }
    /**
     * @description Create time string for displaying inside input element of UI
     */
    getTimeStringFromDate(value, timeFormat) {
        if (!value || !this.dateAdapter.isValid(value)) {
            return '';
        }
        return this.dateAdapter.format(value, timeFormat);
    }
    getDateFromTimeString(timeString) {
        if (!timeString) {
            return null;
        }
        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);
        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);
        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);
        const hoursAndMinutesInAmPm = timeString.match(AM_PM_FORMAT_REGEXP);
        let hours = 0;
        let minutes = 0;
        let seconds = 0;
        // tslint:disable:no-magic-numbers
        if (hoursAndMinutesInAmPm) {
            hours = Number(hoursAndMinutesInAmPm[1]);
            minutes = Number(hoursAndMinutesInAmPm[2]);
            if (/[p]/i.test(hoursAndMinutesInAmPm[3]) || (/[a]/i.test(hoursAndMinutesInAmPm[3]) && hours === 12)) {
                hours += 12;
            }
        }
        else if (hoursAndMinutesAndSeconds) {
            hours = Number(hoursAndMinutesAndSeconds[1]);
            minutes = Number(hoursAndMinutesAndSeconds[2]);
            seconds = Number(hoursAndMinutesAndSeconds[3]);
        }
        else if (hoursAndMinutes) {
            hours = Number(hoursAndMinutes[1]);
            minutes = Number(hoursAndMinutes[2]);
        }
        else if (hoursOnly) {
            hours = Number(hoursOnly[1]);
        }
        else {
            return null;
        }
        // tslint:enable
        const resultDate = this.dateAdapter.createDateTime(this.dateAdapter.getYear(this.value), this.dateAdapter.getMonth(this.value), this.dateAdapter.getDate(this.value), hours, minutes, seconds, this.dateAdapter.getMilliseconds(this.value));
        return this.getValidDateOrNull(resultDate);
    }
    compareTime(first, second) {
        const result = this.dateAdapter.getHours(first) - this.dateAdapter.getHours(second) ||
            this.dateAdapter.getMinutes(first) - this.dateAdapter.getMinutes(second);
        if (TimeFormats.HHmm === this.format) {
            return result;
        }
        else if (TimeFormats.HHmmss === this.format) {
            return result || this.dateAdapter.getSeconds(first) - this.dateAdapter.getSeconds(second);
        }
        else {
            throw Error(`Unknown format: ${this.format}`);
        }
    }
    getValidDateOrNull(obj) {
        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;
    }
    setViewValue(value) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);
    }
    updateView() {
        const formattedValue = this.getTimeStringFromDate(this.value, this.format);
        this.setViewValue(formattedValue);
    }
    setControl(control) {
        if (!this.control) {
            this.control = control;
        }
    }
}
McTimepicker.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                selector: 'input[mcTimepicker]',
                exportAs: 'mcTimepicker',
                host: {
                    class: 'mc-input mc-timepicker',
                    // Native input properties that are overwritten by Angular inputs need to be synced with
                    // the native input element. Otherwise property bindings for those don't work.
                    '[attr.id]': 'id',
                    '[attr.placeholder]': 'placeholder',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.required]': 'required',
                    '[attr.size]': 'getSize()',
                    '[attr.autocomplete]': '"off"',
                    '(blur)': 'onBlur()',
                    '(focus)': 'focusChanged(true)',
                    '(paste)': 'onPaste($event)',
                    '(keydown)': 'onKeyDown($event)'
                },
                providers: [
                    MC_TIMEPICKER_VALIDATORS,
                    MC_TIMEPICKER_VALUE_ACCESSOR,
                    { provide: _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_9__["McFormFieldControl"], useExisting: McTimepicker }
                ]
            },] }
];
/** @nocollapse */
McTimepicker.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
    { type: _ptsecurity_cdk_datetime__WEBPACK_IMPORTED_MODULE_6__["DateAdapter"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] }
];
McTimepicker.propDecorators = {
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    format: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    mcValidationTooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    incorrectInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
};

class McTimepickerModule {
}
McTimepickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"],
                    _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["PlatformModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"]
                ],
                declarations: [McTimepicker],
                exports: [McTimepicker]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */




/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main-es2015.js.map