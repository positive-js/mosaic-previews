{"version":3,"sources":["./dist/packages/mosaic/textarea/textarea.component.ts","./dist/packages/mosaic/textarea/textarea.module.ts","./dist/packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"names":[],"mappings":"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","file":"5-es2015.js","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"sourceRoot":"webpack:///"}