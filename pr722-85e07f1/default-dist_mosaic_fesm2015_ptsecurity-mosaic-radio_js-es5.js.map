{"version":3,"mappings":"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","names":["nextUniqueId","McRadioChange","source","value","McRadioGroupBase","_elementRef","McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","_angular_forms__WEBPACK_IMPORTED_MODULE_1__","useExisting","McRadioGroup","multi","elementRef","_changeDetector","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_name","updateRadioButtonNames","_labelPosition","v","markRadiosForCheck","_value","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","_selected","selected","_disabled","_required","checked","isInitialized","onTouched","change","emit","radios","forEach","radio","markForCheck","fn","controlValueAccessorChangeFn","isDisabled","disabled","name","isAlreadySelected","McRadioButton","selector","exportAs","host","role","providers","labelPosition","required","descendants","McRadioButtonBase","McRadioButtonMixinBase","radioGroup","focusMonitor","_radioDispatcher","id","uniqueId","removeUniqueSelectionListener","listen","_checked","newCheckedState","notify","newDisabledState","monitor","subscribe","focusOrigin","touch","stopMonitoring","inputElement","nativeElement","focus","event","stopPropagation","groupValueChanged","emitChangeEvent","templateUrl","styleUrls","inputs","encapsulation","changeDetection","decorators","ariaLabel","ariaLabelledby","ariaDescribedby","isFocused","McRadioModule","Éµinj","_angular_common__WEBPACK_IMPORTED_MODULE_5__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__","_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_0__","imports","exports","declarations"],"sources":["webpack:///packages/mosaic/radio/radio.component.ts","webpack:///packages/mosaic/radio/radio.component.html","webpack:///packages/mosaic/radio/radio.module.ts","webpack:///packages/mosaic/radio/ptsecurity-mosaic-radio.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(elementRef: ElementRef, private readonly _changeDetector: ChangeDetectorRef) {\n        super(elementRef);\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nabstract class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    abstract disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor & HasTabIndexCtor & typeof McRadioButtonBase = mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-selected]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}