{"version":3,"file":"node_modules_ptsecurity_mosaic-examples_fesm2015_ptsecurity-mosaic-examples-mosaic-button-toggle_js-es2015.js","mappings":"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","sources":["./packages/mosaic/button-toggle/button-toggle.component.ts","./packages/mosaic/button-toggle/button-toggle.module.ts","./packages/mosaic/button-toggle/ptsecurity-mosaic-button-toggle.ts","./node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-button-toggle.js"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any\n    ) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle_vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) { return; }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    exportAs: 'mcButtonToggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-button-toggle',\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, { static: false }) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) { return; }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i1 from '@ptsecurity/mosaic/button-toggle';\nimport { McButtonToggleModule } from '@ptsecurity/mosaic/button-toggle';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\n/**\n * @title Basic button-toggle\n */\nclass ButtonToggleMultipleOverviewExample {\n}\nButtonToggleMultipleOverviewExample.ɵfac = function ButtonToggleMultipleOverviewExample_Factory(t) { return new (t || ButtonToggleMultipleOverviewExample)(); };\nButtonToggleMultipleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ButtonToggleMultipleOverviewExample, selectors: [[\"button-toggle-multiple-overview-example\"]], decls: 13, vars: 5, consts: [[3, \"multiple\"], [\"multipleGroup\", \"mcButtonToggleGroup\"], [3, \"value\"]], template: function ButtonToggleMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", 0, 1);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵproperty(\"multiple\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 2);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 3);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleMultipleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-multiple-overview-example',\n                templateUrl: 'button-toggle-multiple-overview-example.html',\n                styleUrls: ['button-toggle-multiple-overview-example.css']\n            }]\n    }], null, null); })();\n\n/**\n * @title button-toggle\n */\nclass ButtonToggleOverviewExample {\n}\nButtonToggleOverviewExample.ɵfac = function ButtonToggleOverviewExample_Factory(t) { return new (t || ButtonToggleOverviewExample)(); };\nButtonToggleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ButtonToggleOverviewExample, selectors: [[\"button-toggle-overview-example\"]], decls: 15, vars: 5, consts: [[\"group1\", \"mcButtonToggleGroup\"], [3, \"value\"]], template: function ButtonToggleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", null, 0);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(9, \" button 4 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 2);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 3);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 4);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-overview-example',\n                templateUrl: 'button-toggle-overview-example.html',\n                styleUrls: ['button-toggle-overview-example.css']\n            }]\n    }], null, null); })();\n\nconst EXAMPLES = [\n    ButtonToggleOverviewExample,\n    ButtonToggleMultipleOverviewExample\n];\nclass ButtonToggleExamplesModule {\n}\nButtonToggleExamplesModule.ɵfac = function ButtonToggleExamplesModule_Factory(t) { return new (t || ButtonToggleExamplesModule)(); };\nButtonToggleExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ButtonToggleExamplesModule });\nButtonToggleExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            McButtonToggleModule,\n            McIconModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    McButtonToggleModule,\n                    McIconModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ButtonToggleExamplesModule, { declarations: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample], imports: [McButtonToggleModule,\n        McIconModule], exports: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonToggleExamplesModule, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample };\n"],"names":[],"sourceRoot":"webpack:///"}