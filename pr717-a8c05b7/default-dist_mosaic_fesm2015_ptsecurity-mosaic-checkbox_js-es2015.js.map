{"version":3,"file":"default-dist_mosaic_fesm2015_ptsecurity-mosaic-checkbox_js-es2015.js","mappings":"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","sources":["./packages/mosaic/checkbox/checkbox-config.ts","./packages/mosaic/checkbox/checkbox.ts","./packages/mosaic/checkbox/checkbox.html","./packages/mosaic/checkbox/checkbox-required-validator.ts","./packages/mosaic/checkbox/checkbox-module.ts","./packages/mosaic/checkbox/ptsecurity-mosaic-checkbox.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase = mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    exportAs: 'mcCheckbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> = new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', { static: false }) inputElement: ElementRef;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    constructor(\n        elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n        private _clickAction: McCheckboxClickAction\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","<label [attr.for]=\"inputId\" class=\"mc-checkbox-layout\" #label>\n    <div class=\"mc-checkbox-inner-container\"\n         [class.mc-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n        <input #input\n               type=\"checkbox\"\n               class=\"mc-checkbox-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (change)=\"onInteractionEvent($event)\"\n               (click)=\"onInputClick($event)\">\n        <div class=\"mc-checkbox-frame\">\n            <i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n            <i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n        </div>\n    </div>\n\n    <span class=\"mc-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"onLabelTextChange()\">\n    <ng-content></ng-content>\n  </span>\n</label>\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"sourceRoot":"webpack:///"}