"use strict";
(self["webpackChunkmosaic"] = self["webpackChunkmosaic"] || []).push([["node_modules_ptsecurity_mosaic-examples_fesm2015_ptsecurity-mosaic-examples-mosaic-button-toggle_js"],{

/***/ 70214:
/*!*****************************************************************!*\
  !*** ./dist/mosaic/fesm2015/ptsecurity-mosaic-button-toggle.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR": function() { return /* binding */ MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR; },
/* harmony export */   "McButtonToggle": function() { return /* binding */ McButtonToggle; },
/* harmony export */   "McButtonToggleChange": function() { return /* binding */ McButtonToggleChange; },
/* harmony export */   "McButtonToggleGroup": function() { return /* binding */ McButtonToggleGroup; },
/* harmony export */   "McButtonToggleModule": function() { return /* binding */ McButtonToggleModule; }
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 2316);
/* harmony import */ var _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/button */ 80623);
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ 46872);
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/a11y */ 51606);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ 20657);
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ 62604);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/forms */ 1707);









/**
 * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */

const _c0 = ["*"];
const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
  provide: _angular_forms__WEBPACK_IMPORTED_MODULE_0__.NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(() => McButtonToggleGroup),
  multi: true
};
/** Change event object emitted by MсButtonToggle. */

class McButtonToggleChange {
  constructor(
  /** The MсButtonToggle that emits the event. */
  source,
  /** The value assigned to the MсButtonToggle. */
  value) {
    this.source = source;
    this.value = value;
  }

}
/** Exclusive selection button toggle group that behaves like a radio-button group. */


class McButtonToggleGroup {
  constructor(_changeDetector) {
    this._changeDetector = _changeDetector;
    /**
     * Event that emits whenever the value of the group changes.
     * Used to facilitate two-way data binding.
     * @docs-private
     */

    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    /** Event emitted when the group's value changes. */

    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this._vertical = false;
    this._multiple = false;
    this._disabled = false;
    /**
     * The method to be called in order to update ngModel.
     * Now `ngModel` binding is not supported in multiple selection mode.
     */
    // tslint:disable-next-line:no-empty

    this.controlValueAccessorChangeFn = () => {};
    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
    // tslint:disable-next-line:no-empty


    this.onTouched = () => {};
  }
  /** Whether the toggle group is vertical. */


  get vertical() {
    return this._vertical;
  }

  set vertical(value) {
    this._vertical = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  /** Value of the toggle group. */


  get value() {
    const selected = this.selectionModel ? this.selectionModel.selected : [];

    if (this.multiple) {
      return selected.map(toggle => toggle.value);
    }

    return selected[0] ? selected[0].value : undefined;
  }

  set value(newValue) {
    this.setSelectionByValue(newValue);
    this.valueChange.emit(this.value);
  }
  /** Selected button toggles in the group. */


  get selected() {
    const selected = this.selectionModel.selected;
    return this.multiple ? selected : selected[0] || null;
  }
  /** Whether multiple button toggles can be selected. */


  get multiple() {
    return this._multiple;
  }

  set multiple(value) {
    this._multiple = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  /** Whether multiple button toggle group is disabled. */


  get disabled() {
    return this._disabled;
  }

  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);

    if (!this.buttonToggles) {
      return;
    }

    this.buttonToggles.forEach(toggle => toggle.markForCheck());
  }

  ngOnInit() {
    this.selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__.SelectionModel(this.multiple, undefined, false);
  }

  ngAfterContentInit() {
    this.selectionModel.select(...this.buttonToggles.filter(toggle => toggle.checked));
    this.disabled = this._disabled;
  }
  /**
   * Sets the model value. Implemented as part of ControlValueAccessor.
   * @param value Value to be set to the model.
   */


  writeValue(value) {
    this.value = value;

    this._changeDetector.markForCheck();
  } // Implemented as part of ControlValueAccessor.


  registerOnChange(fn) {
    this.controlValueAccessorChangeFn = fn;
  } // Implemented as part of ControlValueAccessor.


  registerOnTouched(fn) {
    this.onTouched = fn;
  } // Implemented as part of ControlValueAccessor.


  setDisabledState(isDisabled) {
    this.disabled = isDisabled;
  }
  /** Dispatch change event with current selection and group value. */


  emitChangeEvent() {
    const selected = this.selected;
    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;
    const event = new McButtonToggleChange(source, this.value);
    this.controlValueAccessorChangeFn(event.value);
    this.change.emit(event);
  }
  /**
   * Syncs a button toggle's selected state with the model value.
   * @param toggle Toggle to be synced.
   * @param select Whether the toggle should be selected.
   * @param isUserInput Whether the change was a result of a user interaction.
   */


  syncButtonToggle(toggle, select, isUserInput = false) {
    // Deselect the currently-selected toggle, if we're in single-selection
    // mode and the button being toggled isn't selected at the moment.
    if (!this.multiple && this.selected && !toggle.checked) {
      this.selected.checked = false;
    }

    if (select) {
      this.selectionModel.select(toggle);
    } else {
      this.selectionModel.deselect(toggle);
    } // Only emit the change event for user input.


    if (isUserInput) {
      this.emitChangeEvent();
    } // Note: we emit this one no matter whether it was a user interaction, because
    // it is used by Angular to sync up the two-way data binding.


    this.valueChange.emit(this.value);
  }
  /** Checks whether a button toggle is selected. */


  isSelected(toggle) {
    return this.selectionModel.isSelected(toggle);
  }
  /** Determines whether a button toggle should be checked on init. */


  isPrechecked(toggle) {
    if (this.rawValue === undefined) {
      return false;
    }

    if (this.multiple && Array.isArray(this.rawValue)) {
      return this.rawValue.some(value => toggle.value != null && value === toggle.value);
    }

    return toggle.value === this.rawValue;
  }
  /** Updates the selection state of the toggles in the group based on a value. */


  setSelectionByValue(value) {
    this.rawValue = value;

    if (!this.buttonToggles) {
      return;
    }

    if (this.multiple && value) {
      if (!Array.isArray(value)) {
        throw Error('Value must be an array in multiple-selection mode.');
      }

      this.clearSelection();
      value.forEach(currentValue => this.selectValue(currentValue));
    } else {
      this.clearSelection();
      this.selectValue(value);
    }
  }
  /** Clears the selected toggles. */


  clearSelection() {
    this.selectionModel.clear();
    this.buttonToggles.forEach(toggle => toggle.checked = false);
  }
  /** Selects a value if there's a toggle that corresponds to it. */


  selectValue(value) {
    const correspondingOption = this.buttonToggles.find(toggle => {
      return toggle.value != null && toggle.value === value;
    });

    if (correspondingOption) {
      correspondingOption.checked = true;
      this.selectionModel.select(correspondingOption);
    }
  }

}
/** @nocollapse */


McButtonToggleGroup.ɵfac = function McButtonToggleGroup_Factory(t) {
  return new (t || McButtonToggleGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef));
};
/** @nocollapse */


McButtonToggleGroup.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
  type: McButtonToggleGroup,
  selectors: [["mc-button-toggle-group"]],
  contentQueries: function McButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, McButtonToggle, 4);
    }

    if (rf & 2) {
      let _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.buttonToggles = _t);
    }
  },
  hostAttrs: ["role", "group", 1, "mc-button-toggle-group"],
  hostVars: 2,
  hostBindings: function McButtonToggleGroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("mc-button-toggle_vertical", ctx.vertical);
    }
  },
  inputs: {
    vertical: "vertical",
    value: "value",
    multiple: "multiple",
    disabled: "disabled"
  },
  outputs: {
    valueChange: "valueChange",
    change: "change"
  },
  exportAs: ["mcButtonToggleGroup"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR])]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](McButtonToggleGroup, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Directive,
    args: [{
      selector: 'mc-button-toggle-group',
      providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],
      host: {
        role: 'group',
        class: 'mc-button-toggle-group',
        '[class.mc-button-toggle_vertical]': 'vertical'
      },
      exportAs: 'mcButtonToggleGroup'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef
    }];
  }, {
    vertical: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    multiple: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    buttonToggles: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ContentChildren,
      args: [(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(() => McButtonToggle)]
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    valueChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
    }],
    change: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
    }]
  });
})();
/** Single button inside of a toggle group. */


class McButtonToggle {
  constructor(buttonToggleGroup, changeDetectorRef, focusMonitor, element) {
    this.buttonToggleGroup = buttonToggleGroup;
    this.changeDetectorRef = changeDetectorRef;
    this.focusMonitor = focusMonitor;
    this.element = element;
    /** Event emitted when the group value changes. */

    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.isSingleSelector = false;
    this._checked = false;
    this._disabled = false;
  }
  /** Whether the button is checked. */


  get checked() {
    return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;
  }

  set checked(value) {
    const newValue = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);

    if (newValue !== this._checked) {
      this._checked = newValue;

      if (this.buttonToggleGroup) {
        this.buttonToggleGroup.syncButtonToggle(this, this._checked);
      }

      this.changeDetectorRef.markForCheck();
    }
  }

  get disabled() {
    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;
  }

  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }

  ngOnInit() {
    this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;
    this.type = this.isSingleSelector ? 'radio' : 'checkbox';

    if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {
      this.checked = true;
    }

    this.focusMonitor.monitor(this.element.nativeElement, true);
  }

  ngOnDestroy() {
    const group = this.buttonToggleGroup;
    this.focusMonitor.stopMonitoring(this.element.nativeElement); // Remove the toggle from the selection once it's destroyed. Needs to happen
    // on the next tick in order to avoid "changed after checked" errors.

    if (group && group.isSelected(this)) {
      Promise.resolve().then(() => group.syncButtonToggle(this, false));
    }
  }
  /** Focuses the button. */


  focus() {
    this.element.nativeElement.focus();
  }
  /** Checks the button toggle due to an interaction with the underlying native button. */


  onToggleClick() {
    if (this.disabled) {
      return;
    }

    const newChecked = this.isSingleSelector ? true : !this._checked;

    if (newChecked !== this._checked) {
      this._checked = newChecked;

      if (this.buttonToggleGroup) {
        this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);
        this.buttonToggleGroup.onTouched();
      }
    } // Emit a change event when it's the single selector


    this.change.emit(new McButtonToggleChange(this, this.value));
  }
  /**
   * Marks the button toggle as needing checking for change detection.
   * This method is exposed because the parent button toggle group will directly
   * update bound properties of the radio button.
   */


  markForCheck() {
    // When the group value changes, the button will not be notified.
    // Use `markForCheck` to explicit update button toggle's status.
    this.changeDetectorRef.markForCheck();
  }

}
/** @nocollapse */


McButtonToggle.ɵfac = function McButtonToggle_Factory(t) {
  return new (t || McButtonToggle)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](McButtonToggleGroup, 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__.FocusMonitor), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef));
};
/** @nocollapse */


McButtonToggle.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: McButtonToggle,
  selectors: [["mc-button-toggle"]],
  viewQuery: function McButtonToggle_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__.McButton, 5);
    }

    if (rf & 2) {
      let _t;

      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.mcButton = _t.first);
    }
  },
  hostAttrs: [1, "mc-button-toggle"],
  hostVars: 2,
  hostBindings: function McButtonToggle_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("mc-button-toggle-standalone", !ctx.buttonToggleGroup);
    }
  },
  inputs: {
    checked: "checked",
    value: "value",
    tabIndex: "tabIndex",
    disabled: "disabled"
  },
  outputs: {
    change: "change"
  },
  exportAs: ["mcButtonToggle"],
  ngContentSelectors: _c0,
  decls: 2,
  vars: 4,
  consts: [["mc-button", "", "type", "button", 3, "disabled", "tabIndex", "click"]],
  template: function McButtonToggle_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "button", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function McButtonToggle_Template_button_click_0_listener() {
        return ctx.onToggleClick();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("mc-active", ctx.checked);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.disabled)("tabIndex", ctx.tabIndex);
    }
  },
  directives: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__.McButton, _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__.McButtonCssStyler],
  styles: [".mc-group{display:flex;flex-direction:row}.mc-group .mc-group_justified>.mc-group-item{width:100%}.mc-group .mc-group-item+.mc-group-item{margin-left:calc(-1 * 1px);margin-left:calc(-1 * var(--mc-button-size-border-width, 1px))}.mc-group>.mc-group-item:first-child:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.mc-group>.mc-group-item:first-child:not(:last-child)>.mc-form-field__container{border-bottom-right-radius:0;border-top-right-radius:0}.mc-group>.mc-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.mc-group>.mc-group-item:last-child:not(:first-child)>.mc-form-field__container{border-bottom-left-radius:0;border-top-left-radius:0}.mc-group>.mc-group-item:not(:first-child):not(:last-child){border-radius:0}.mc-group>.mc-group-item:not(:first-child):not(:last-child)>.mc-form-field__container{border-radius:0}.mc-vertical-group{display:flex;flex-direction:column}.mc-vertical-group>.mc-group-item:first-child:not(:last-child){border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-right-radius:3px;border-top-right-radius:var(--mc-button-size-border-radius, 3px)}.mc-vertical-group>.mc-group-item:first-child:not(:last-child)>.mc-form-field__container{border-bottom-right-radius:0;border-bottom-left-radius:0}.mc-vertical-group>.mc-group-item:last-child:not(:first-child){border-top-right-radius:0;border-top-left-radius:0;border-bottom-left-radius:3px;border-bottom-left-radius:var(--mc-button-size-border-radius, 3px)}.mc-vertical-group>.mc-group-item:last-child:not(:first-child)>.mc-form-field__container{border-top-right-radius:0;border-top-left-radius:0}.mc-vertical-group>.mc-group-item:not(:first-child):not(:last-child){border-radius:0}.mc-vertical-group>.mc-group-item:not(:first-child):not(:last-child)>.mc-form-field__container{border-radius:0}.mc-vertical-group .mc-group-item+.mc-group-item{margin-top:calc(-1 * 1px);margin-top:calc(-1 * var(--mc-button-size-border-width, 1px))}.mc-button-toggle-group{display:flex;flex-direction:row}.mc-button-toggle-group .mc-button-toggle:first-of-type:not(:last-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:first-of-type:not(:last-of-type)>.mc-icon-button{border-bottom-right-radius:0;border-top-right-radius:0;border-bottom-left-radius:3px;border-bottom-left-radius:var(--mc-button-toggle-size-border-radius, 3px);border-top-left-radius:3px;border-top-left-radius:var(--mc-button-toggle-size-border-radius, 3px)}.mc-button-toggle-group .mc-button-toggle:last-of-type:not(:first-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:last-of-type:not(:first-of-type)>.mc-icon-button{border-bottom-left-radius:0;border-top-left-radius:0;border-bottom-right-radius:3px;border-bottom-right-radius:var(--mc-button-toggle-size-border-radius, 3px);border-top-right-radius:3px;border-top-right-radius:var(--mc-button-toggle-size-border-radius, 3px)}.mc-button-toggle-group .mc-button-toggle:not(:first-of-type):not(:last-of-type)>.mc-button,.mc-button-toggle-group .mc-button-toggle:not(:first-of-type):not(:last-of-type)>.mc-icon-button{border-radius:0}.mc-button-toggle-group .mc-button-toggle[disabled]{outline:0}.mc-button-toggle-group:not(.mc-button-toggle_vertical) .mc-button-toggle:not([disabled])+.mc-button-toggle:not([disabled]){margin-left:calc(-1 * 1px);margin-left:calc(-1 * var(--mc-button-toggle-size-border-size, 1px))}.mc-button-toggle_vertical{flex-direction:column}.mc-button-toggle_vertical .mc-button-toggle+.mc-button-toggle{border-left:none;border-right:none}.mc-button-toggle_vertical .mc-button-toggle:not([disabled])+.mc-button-toggle:not([disabled]){margin-top:calc(-1 * 1px);margin-top:calc(-1 * var(--mc-button-toggle-size-border-size, 1px))}.mc-button-toggle_vertical .mc-button-toggle .mc-button,.mc-button-toggle_vertical .mc-button-toggle .mc-icon-button{width:100%}.mc-button-toggle_vertical .mc-button-toggle:first-child:not(:last-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:first-child:not(:last-child)>.mc-icon-button{border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-right-radius:3px;border-top-right-radius:var(--mc-button-toggle-size-border-radius, 3px);border-top-left-radius:3px;border-top-left-radius:var(--mc-button-toggle-size-border-radius, 3px)}.mc-button-toggle_vertical .mc-button-toggle:last-child:not(:first-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:last-child:not(:first-child)>.mc-icon-button{border-top-right-radius:0;border-top-left-radius:0;border-bottom-right-radius:3px;border-bottom-right-radius:var(--mc-button-toggle-size-border-radius, 3px);border-bottom-left-radius:3px;border-bottom-left-radius:var(--mc-button-toggle-size-border-radius, 3px)}.mc-button-toggle_vertical .mc-button-toggle:not(:first-child):not(:last-child)>.mc-button,.mc-button-toggle_vertical .mc-button-toggle:not(:first-child):not(:last-child)>.mc-icon-button{border-radius:0}.mc-button-toggle-standalone{box-shadow:none}\n"],
  encapsulation: 2,
  changeDetection: 0
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](McButtonToggle, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Component,
    args: [{
      selector: 'mc-button-toggle',
      exportAs: 'mcButtonToggle',
      template: `
        <button
            mc-button
            type="button"
            [class.mc-active]="checked"
            [disabled]="disabled"
            [tabIndex]="tabIndex"
            (click)="onToggleClick()">
            <ng-content></ng-content>
        </button>
    `,
      styleUrls: ['button-toggle.scss'],
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.None,
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectionStrategy.OnPush,
      host: {
        class: 'mc-button-toggle',
        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'
      }
    }]
  }], function () {
    return [{
      type: McButtonToggleGroup,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef
    }, {
      type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__.FocusMonitor
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef
    }];
  }, {
    checked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    mcButton: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewChild,
      args: [_ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__.McButton, {
        static: false
      }]
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    tabIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    change: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output
    }]
  });
})();

class McButtonToggleModule {}
/** @nocollapse */


McButtonToggleModule.ɵfac = function McButtonToggleModule_Factory(t) {
  return new (t || McButtonToggleModule)();
};
/** @nocollapse */


McButtonToggleModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: McButtonToggleModule
});
/** @nocollapse */

McButtonToggleModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  imports: [[_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__.McCommonModule, _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__.McButtonModule], _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__.McCommonModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](McButtonToggleModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      imports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__.McCommonModule, _ptsecurity_mosaic_button__WEBPACK_IMPORTED_MODULE_5__.McButtonModule],
      exports: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_6__.McCommonModule, McButtonToggleGroup, McButtonToggle],
      declarations: [McButtonToggleGroup, McButtonToggle]
    }]
  }], null, null);
})();
/**
 * Generated bundle index. Do not edit.
 */




/***/ }),

/***/ 43354:
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-button-toggle.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ButtonToggleExamplesModule": function() { return /* binding */ ButtonToggleExamplesModule; },
/* harmony export */   "ButtonToggleMultipleOverviewExample": function() { return /* binding */ ButtonToggleMultipleOverviewExample; },
/* harmony export */   "ButtonToggleOverviewExample": function() { return /* binding */ ButtonToggleOverviewExample; }
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2316);
/* harmony import */ var _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ptsecurity/mosaic/button-toggle */ 70214);
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ 86463);






/**
 * @title Basic button-toggle
 */
class ButtonToggleMultipleOverviewExample {
}
ButtonToggleMultipleOverviewExample.ɵfac = function ButtonToggleMultipleOverviewExample_Factory(t) { return new (t || ButtonToggleMultipleOverviewExample)(); };
ButtonToggleMultipleOverviewExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: ButtonToggleMultipleOverviewExample, selectors: [["button-toggle-multiple-overview-example"]], decls: 13, vars: 1, consts: [["multiple", ""], ["multipleGroup", "mcButtonToggleGroup"], ["value", "1"], ["value", "2"], ["value", "3"]], template: function ButtonToggleMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-button-toggle-group", 0, 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mc-button-toggle", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, " button 1 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "mc-button-toggle", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5, " button 2 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "mc-button-toggle", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7, " button 3 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](8, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](9, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](10, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "div");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("Selected value: ", _r0.value, "");
    } }, directives: [_ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggleGroup, _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggle], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonToggleMultipleOverviewExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'button-toggle-multiple-overview-example',
                templateUrl: 'button-toggle-multiple-overview-example.html',
                styleUrls: ['button-toggle-multiple-overview-example.css']
            }]
    }], null, null); })();

/**
 * @title button-toggle
 */
class ButtonToggleOverviewExample {
}
ButtonToggleOverviewExample.ɵfac = function ButtonToggleOverviewExample_Factory(t) { return new (t || ButtonToggleOverviewExample)(); };
ButtonToggleOverviewExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: ButtonToggleOverviewExample, selectors: [["button-toggle-overview-example"]], decls: 15, vars: 1, consts: [["group1", "mcButtonToggleGroup"], ["value", "1"], ["value", "2"], ["value", "3"], ["value", "4"]], template: function ButtonToggleOverviewExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-button-toggle-group", null, 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mc-button-toggle", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, " button 1 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "mc-button-toggle", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5, " button 2 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "mc-button-toggle", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7, " button 3 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "mc-button-toggle", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9, " button 4 ");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](10, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](12, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "div");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](14);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("Selected value: ", _r0.value, "");
    } }, directives: [_ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggleGroup, _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggle], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonToggleOverviewExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'button-toggle-overview-example',
                templateUrl: 'button-toggle-overview-example.html',
                styleUrls: ['button-toggle-overview-example.css']
            }]
    }], null, null); })();

const EXAMPLES = [
    ButtonToggleOverviewExample,
    ButtonToggleMultipleOverviewExample
];
class ButtonToggleExamplesModule {
}
ButtonToggleExamplesModule.ɵfac = function ButtonToggleExamplesModule_Factory(t) { return new (t || ButtonToggleExamplesModule)(); };
ButtonToggleExamplesModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: ButtonToggleExamplesModule });
ButtonToggleExamplesModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ imports: [[
            _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggleModule,
            _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__.McIconModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonToggleExamplesModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
        args: [{
                imports: [
                    _ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggleModule,
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__.McIconModule
                ],
                declarations: EXAMPLES,
                exports: EXAMPLES
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ButtonToggleExamplesModule, { declarations: [ButtonToggleOverviewExample,
        ButtonToggleMultipleOverviewExample], imports: [_ptsecurity_mosaic_button_toggle__WEBPACK_IMPORTED_MODULE_1__.McButtonToggleModule,
        _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_2__.McIconModule], exports: [ButtonToggleOverviewExample,
        ButtonToggleMultipleOverviewExample] }); })();

/**
 * Generated bundle index. Do not edit.
 */




/***/ })

}]);
//# sourceMappingURL=node_modules_ptsecurity_mosaic-examples_fesm2015_ptsecurity-mosaic-examples-mosaic-button-toggle_js-es2015.js.map