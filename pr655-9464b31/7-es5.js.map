{"version":3,"sources":["webpack:///dist/packages/mosaic/button-toggle/button-toggle.component.ts","webpack:///dist/packages/mosaic/button-toggle/button-toggle.module.ts","webpack:///dist/packages/mosaic/button-toggle/ptsecurity-mosaic-button-toggle.ts","webpack:///node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-button-toggle.js"],"names":["MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","McButtonToggleGroup","multi","McButtonToggleChange","source","value","_changeDetector","valueChange","change","_vertical","_multiple","_disabled","controlValueAccessorChangeFn","onTouched","selected","selectionModel","multiple","map","toggle","undefined","newValue","setSelectionByValue","emit","buttonToggles","forEach","markForCheck","select","filter","checked","disabled","fn","isDisabled","Array","isArray","length","event","isUserInput","deselect","emitChangeEvent","isSelected","rawValue","some","Error","clearSelection","currentValue","selectValue","clear","correspondingOption","find","McButtonToggle","buttonToggleGroup","changeDetectorRef","focusMonitor","element","isSingleSelector","_checked","syncButtonToggle","type","isPrechecked","monitor","nativeElement","group","stopMonitoring","Promise","resolve","then","focus","newChecked","McButtonToggleModule","ButtonToggleMultipleOverviewExample","ɵfac","ButtonToggleMultipleOverviewExample_Factory","t","ɵcmp","selectors","decls","vars","consts","template","ButtonToggleMultipleOverviewExample_Template","rf","ctx","_r0","directives","styles","ngDevMode","args","selector","templateUrl","styleUrls","ButtonToggleOverviewExample","ButtonToggleOverviewExample_Factory","ButtonToggleOverviewExample_Template","EXAMPLES","ButtonToggleExamplesModule","ButtonToggleExamplesModule_Factory","ɵmod","ɵinj","imports","ngJitMode","declarations","exports"],"mappings":"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","file":"7-es5.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any\n    ) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle_vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) { return; }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    exportAs: 'mcButtonToggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-button-toggle',\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, { static: false }) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) { return; }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i1 from '@ptsecurity/mosaic/button-toggle';\nimport { McButtonToggleModule } from '@ptsecurity/mosaic/button-toggle';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\n/**\n * @title Basic button-toggle\n */\nclass ButtonToggleMultipleOverviewExample {\n}\nButtonToggleMultipleOverviewExample.ɵfac = function ButtonToggleMultipleOverviewExample_Factory(t) { return new (t || ButtonToggleMultipleOverviewExample)(); };\nButtonToggleMultipleOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: ButtonToggleMultipleOverviewExample, selectors: [[\"button-toggle-multiple-overview-example\"]], decls: 13, vars: 1, consts: [[\"multiple\", \"\"], [\"multipleGroup\", \"mcButtonToggleGroup\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"]], template: function ButtonToggleMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", 0, 1);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 3);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 4);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleMultipleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-multiple-overview-example',\n                templateUrl: 'button-toggle-multiple-overview-example.html',\n                styleUrls: ['button-toggle-multiple-overview-example.css']\n            }]\n    }], null, null); })();\n\n/**\n * @title button-toggle\n */\nclass ButtonToggleOverviewExample {\n}\nButtonToggleOverviewExample.ɵfac = function ButtonToggleOverviewExample_Factory(t) { return new (t || ButtonToggleOverviewExample)(); };\nButtonToggleOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: ButtonToggleOverviewExample, selectors: [[\"button-toggle-overview-example\"]], decls: 15, vars: 1, consts: [[\"group1\", \"mcButtonToggleGroup\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"], [\"value\", \"4\"]], template: function ButtonToggleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", null, 0);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 3);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mc-button-toggle\", 4);\n        i0.ɵɵtext(9, \" button 4 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(14);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-overview-example',\n                templateUrl: 'button-toggle-overview-example.html',\n                styleUrls: ['button-toggle-overview-example.css']\n            }]\n    }], null, null); })();\n\nconst EXAMPLES = [\n    ButtonToggleOverviewExample,\n    ButtonToggleMultipleOverviewExample\n];\nclass ButtonToggleExamplesModule {\n}\nButtonToggleExamplesModule.ɵfac = function ButtonToggleExamplesModule_Factory(t) { return new (t || ButtonToggleExamplesModule)(); };\nButtonToggleExamplesModule.ɵmod = i0.ɵɵdefineNgModule({ type: ButtonToggleExamplesModule });\nButtonToggleExamplesModule.ɵinj = i0.ɵɵdefineInjector({ imports: [[\n            McButtonToggleModule,\n            McIconModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ButtonToggleExamplesModule, { declarations: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample], imports: [McButtonToggleModule,\n        McIconModule], exports: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    McButtonToggleModule,\n                    McIconModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonToggleExamplesModule, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample };\n//# sourceMappingURL=ptsecurity-mosaic-examples-mosaic-button-toggle.js.map\n"]}