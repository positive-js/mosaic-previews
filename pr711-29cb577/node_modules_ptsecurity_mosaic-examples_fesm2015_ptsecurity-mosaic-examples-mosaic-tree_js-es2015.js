"use strict";
(self["webpackChunkmosaic"] = self["webpackChunkmosaic"] || []).push([["node_modules_ptsecurity_mosaic-examples_fesm2015_ptsecurity-mosaic-examples-mosaic-tree_js"],{

/***/ 13841:
/*!**********************************************************************!*\
  !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CDK_COPY_TO_CLIPBOARD_CONFIG": function() { return /* binding */ CDK_COPY_TO_CLIPBOARD_CONFIG; },
/* harmony export */   "CKD_COPY_TO_CLIPBOARD_CONFIG": function() { return /* binding */ CKD_COPY_TO_CLIPBOARD_CONFIG; },
/* harmony export */   "CdkCopyToClipboard": function() { return /* binding */ CdkCopyToClipboard; },
/* harmony export */   "Clipboard": function() { return /* binding */ Clipboard; },
/* harmony export */   "ClipboardModule": function() { return /* binding */ ClipboardModule; },
/* harmony export */   "PendingCopy": function() { return /* binding */ PendingCopy; }
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 54364);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2316);



/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A pending copy-to-clipboard operation.
 *
 * The implementation of copying text to the clipboard modifies the DOM and
 * forces a relayout. This relayout can take too long if the string is large,
 * causing the execCommand('copy') to happen too long after the user clicked.
 * This results in the browser refusing to copy. This object lets the
 * relayout happen in a separate tick from copying by providing a copy function
 * that can be called later.
 *
 * Destroy must be called when no longer in use, regardless of whether `copy` is
 * called.
 */

class PendingCopy {
    constructor(text, _document) {
        this._document = _document;
        const textarea = this._textarea = this._document.createElement('textarea');
        const styles = textarea.style;
        // Hide the element for display and accessibility. Set a fixed position so the page layout
        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea
        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.
        styles.position = 'fixed';
        styles.top = styles.opacity = '0';
        styles.left = '-999em';
        textarea.setAttribute('aria-hidden', 'true');
        textarea.value = text;
        this._document.body.appendChild(textarea);
    }
    /** Finishes copying the text. */
    copy() {
        const textarea = this._textarea;
        let successful = false;
        try { // Older browsers could throw if copy is not supported.
            if (textarea) {
                const currentFocus = this._document.activeElement;
                textarea.select();
                textarea.setSelectionRange(0, textarea.value.length);
                successful = this._document.execCommand('copy');
                if (currentFocus) {
                    currentFocus.focus();
                }
            }
        }
        catch (_a) {
            // Discard error.
            // Initial setting of {@code successful} will represent failure here.
        }
        return successful;
    }
    /** Cleans up DOM changes used to perform the copy operation. */
    destroy() {
        const textarea = this._textarea;
        if (textarea) {
            if (textarea.parentNode) {
                textarea.parentNode.removeChild(textarea);
            }
            this._textarea = undefined;
        }
    }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A service for copying text to the clipboard.
 */
class Clipboard {
    constructor(document) {
        this._document = document;
    }
    /**
     * Copies the provided text into the user's clipboard.
     *
     * @param text The string to copy.
     * @returns Whether the operation was successful.
     */
    copy(text) {
        const pendingCopy = this.beginCopy(text);
        const successful = pendingCopy.copy();
        pendingCopy.destroy();
        return successful;
    }
    /**
     * Prepares a string to be copied later. This is useful for large strings
     * which take too long to successfully render and be copied in the same tick.
     *
     * The caller must call `destroy` on the returned `PendingCopy`.
     *
     * @param text The string to copy.
     * @returns the pending copy operation.
     */
    beginCopy(text) {
        return new PendingCopy(text, this._document);
    }
}
Clipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT)); };
Clipboard.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function Clipboard_Factory() { return new Clipboard((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT)); }, token: Clipboard, providedIn: "root" });
Clipboard.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject, args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Clipboard, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
            }] }]; }, null); })();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */
const CDK_COPY_TO_CLIPBOARD_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');
/**
 * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.
 * @breaking-change 13.0.0
 */
const CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;
/**
 * Provides behavior for a button that when clicked copies content into user's
 * clipboard.
 */
class CdkCopyToClipboard {
    constructor(_clipboard, _ngZone, config) {
        this._clipboard = _clipboard;
        this._ngZone = _ngZone;
        /** Content to be copied. */
        this.text = '';
        /**
         * How many times to attempt to copy the text. This may be necessary for longer text, because
         * the browser needs time to fill an intermediate textarea element and copy the content.
         */
        this.attempts = 1;
        /**
         * Emits when some text is copied to the clipboard. The
         * emitted value indicates whether copying was successful.
         */
        this.copied = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
        /** Copies that are currently being attempted. */
        this._pending = new Set();
        if (config && config.attempts != null) {
            this.attempts = config.attempts;
        }
    }
    /** Copies the current text to the clipboard. */
    copy(attempts = this.attempts) {
        if (attempts > 1) {
            let remainingAttempts = attempts;
            const pending = this._clipboard.beginCopy(this.text);
            this._pending.add(pending);
            const attempt = () => {
                const successful = pending.copy();
                if (!successful && --remainingAttempts && !this._destroyed) {
                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.
                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));
                }
                else {
                    this._currentTimeout = null;
                    this._pending.delete(pending);
                    pending.destroy();
                    this.copied.emit(successful);
                }
            };
            attempt();
        }
        else {
            this.copied.emit(this._clipboard.copy(this.text));
        }
    }
    ngOnDestroy() {
        if (this._currentTimeout) {
            clearTimeout(this._currentTimeout);
        }
        this._pending.forEach(copy => copy.destroy());
        this._pending.clear();
        this._destroyed = true;
    }
}
CdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](Clipboard), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };
CdkCopyToClipboard.ɵdir = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: CdkCopyToClipboard, selectors: [["", "cdkCopyToClipboard", ""]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });
    } }, inputs: { text: ["cdkCopyToClipboard", "text"], attempts: ["cdkCopyToClipboardAttempts", "attempts"] }, outputs: { copied: "cdkCopyToClipboardCopied" } });
CdkCopyToClipboard.ctorParameters = () => [
    { type: Clipboard },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }
];
CdkCopyToClipboard.propDecorators = {
    text: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input, args: ['cdkCopyToClipboard',] }],
    attempts: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input, args: ['cdkCopyToClipboardAttempts',] }],
    copied: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output, args: ['cdkCopyToClipboardCopied',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkCopyToClipboard, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
        args: [{
                selector: '[cdkCopyToClipboard]',
                host: {
                    '(click)': 'copy()'
                }
            }]
    }], function () { return [{ type: Clipboard }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone }, { type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]
            }] }]; }, { text: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['cdkCopyToClipboard']
        }], attempts: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
            args: ['cdkCopyToClipboardAttempts']
        }], copied: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
            args: ['cdkCopyToClipboardCopied']
        }] }); })();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class ClipboardModule {
}
ClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };
ClipboardModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: ClipboardModule });
ClipboardModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ClipboardModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
        args: [{
                declarations: [CdkCopyToClipboard],
                exports: [CdkCopyToClipboard]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */





/***/ }),

/***/ 47188:
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-tree.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TreeActionButtonExample": function() { return /* binding */ TreeActionButtonExample; },
/* harmony export */   "TreeExamplesModule": function() { return /* binding */ TreeExamplesModule; },
/* harmony export */   "TreeFilteringExample": function() { return /* binding */ TreeFilteringExample; },
/* harmony export */   "TreeMultipleCheckboxExample": function() { return /* binding */ TreeMultipleCheckboxExample; },
/* harmony export */   "TreeMultipleChecklistExample": function() { return /* binding */ TreeMultipleChecklistExample; },
/* harmony export */   "TreeMultipleKeyboardExample": function() { return /* binding */ TreeMultipleKeyboardExample; },
/* harmony export */   "TreeOverviewExample": function() { return /* binding */ TreeOverviewExample; }
/* harmony export */ });
/* harmony import */ var _angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/clipboard */ 13841);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2316);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 1707);
/* harmony import */ var _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ptsecurity/mosaic/checkbox */ 38265);
/* harmony import */ var _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ptsecurity/mosaic/core */ 46872);
/* harmony import */ var _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ptsecurity/mosaic/dropdown */ 30005);
/* harmony import */ var _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ptsecurity/mosaic/form-field */ 50599);
/* harmony import */ var _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ptsecurity/mosaic/icon */ 86463);
/* harmony import */ var _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ptsecurity/mosaic/input */ 89410);
/* harmony import */ var _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ptsecurity/mosaic/tooltip */ 54360);
/* harmony import */ var _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ptsecurity/mosaic/tree */ 19727);
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/collections */ 62604);
























/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
function TreeActionButtonExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "mc-tree-node-action", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r3 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r3.name === "tests");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r0.treeControl.getViewValue(node_r3), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcPlacement", "right")("mcDropdownTriggerFor", _r2);
} }
function TreeActionButtonExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "mc-tree-node-toggle", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "mc-tree-node-action", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r4 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("node", node_r4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.treeControl.getViewValue(node_r4), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcPlacement", "right")("mcDropdownTriggerFor", _r2);
} }
class FileNode$5 {
}
/** Flat node with expandable and level information */
class FileFlatNode$5 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$5(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$5();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$5(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$5 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeActionButtonExample {
    constructor(clipboard) {
        this.clipboard = clipboard;
        this.modelValue = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$5();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlatDataSource(this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$5(DATA_OBJECT$5, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
    onCopy($event) {
        this.clipboard.copy($event.option.viewValue);
    }
    onSelectAll($event) {
        // tslint:disable-next-line:no-console
        console.log('All items selected', $event);
    }
}
TreeActionButtonExample.ɵfac = function TreeActionButtonExample_Factory(t) { return new (t || TreeActionButtonExample)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__.Clipboard)); };
TreeActionButtonExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: TreeActionButtonExample, selectors: [["tree-action-button-example"]], decls: 11, vars: 5, consts: [[3, "ngModel", "autoSelect", "dataSource", "treeControl", "ngModelChange", "onSelectAll", "onCopy"], ["mcTreeNodePadding", "", 3, "disabled", 4, "mcTreeNodeDef"], ["mcTreeNodePadding", "", 4, "mcTreeNodeDef", "mcTreeNodeDefWhen"], ["dropdown", ""], ["mc-dropdown-item", ""], ["mcTreeNodePadding", "", 3, "disabled"], ["mc-icon", "mc-info-o_16"], [3, "innerHTML"], ["mcTooltip", "Tooltip text", 3, "mcPlacement", "mcDropdownTriggerFor"], ["mcTreeNodePadding", ""], [3, "node"]], template: function TreeActionButtonExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-selection", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeActionButtonExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; })("onSelectAll", function TreeActionButtonExample_Template_mc_tree_selection_onSelectAll_0_listener($event) { return ctx.onSelectAll($event); })("onCopy", function TreeActionButtonExample_Template_mc_tree_selection_onCopy_0_listener($event) { return ctx.onCopy($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TreeActionButtonExample_mc_tree_option_1_Template, 4, 4, "mc-tree-option", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, TreeActionButtonExample_mc_tree_option_2_Template, 5, 4, "mc-tree-option", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "mc-dropdown", null, 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "action 1");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "action 2");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "button", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](10, "action 3");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.modelValue)("autoSelect", false)("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcTreeNodeDefWhen", ctx.hasChild);
    } }, directives: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeSelection, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeDef, _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__.McDropdown, _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__.McDropdownItem, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeOption, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodePadding, _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIcon, _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIconCSSStyler, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeActionComponent, _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__.McTooltipTrigger, _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__.McDropdownTrigger, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeToggleComponent], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeActionButtonExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'tree-action-button-example',
                templateUrl: 'tree-action-button-example.html',
                styleUrls: ['tree-action-button-example.css']
            }]
    }], function () { return [{ type: _angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__.Clipboard }]; }, null); })();

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
function TreeFilteringExample_mc_tree_option_6_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "mcHighlight");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r2.name === "tests");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](2, 2, ctx_r0.treeControl.getViewValue(node_r2), ctx_r0.treeControl.filterValue.value), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
function TreeFilteringExample_mc_tree_option_7_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "mc-tree-node-toggle", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "mcHighlight");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r3 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("node", node_r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 2, ctx_r1.treeControl.getViewValue(node_r3), ctx_r1.treeControl.filterValue.value), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
class FileNode$4 {
}
/** Flat node with expandable and level information */
class FileFlatNode$4 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$4(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$4();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$4(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$4 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeFilteringExample {
    constructor() {
        this.modelValue = '';
        this.filterValue = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$4();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlatDataSource(this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);
    }
    onFilterChange(value) {
        this.treeControl.filterNodes(value);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeFilteringExample.ɵfac = function TreeFilteringExample_Factory(t) { return new (t || TreeFilteringExample)(); };
TreeFilteringExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: TreeFilteringExample, selectors: [["tree-filtering-example"]], decls: 8, vars: 5, consts: [["type", "text", "mcInput", "", 3, "ngModel", "ngModelChange"], [3, "ngModel", "dataSource", "treeControl", "ngModelChange"], ["mcTreeNodePadding", "", 3, "disabled", 4, "mcTreeNodeDef"], ["mcTreeNodePadding", "", 4, "mcTreeNodeDef", "mcTreeNodeDefWhen"], ["mcTreeNodePadding", "", 3, "disabled"], [3, "innerHTML"], ["mcTreeNodePadding", ""], [3, "node"]], template: function TreeFilteringExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-form-field");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "input", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.onFilterChange($event); })("ngModelChange", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.filterValue = $event; });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "mc-tree-selection", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeFilteringExample_Template_mc_tree_selection_ngModelChange_5_listener($event) { return ctx.modelValue = $event; });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, TreeFilteringExample_mc_tree_option_6_Template, 3, 5, "mc-tree-option", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, TreeFilteringExample_mc_tree_option_7_Template, 4, 5, "mc-tree-option", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.filterValue);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.modelValue)("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcTreeNodeDefWhen", ctx.hasChild);
    } }, directives: [_ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__.McFormField, _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__.McInput, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeSelection, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeDef, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeOption, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodePadding, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeToggleComponent], pipes: [_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__.McHighlightPipe], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeFilteringExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'tree-filtering-example',
                templateUrl: 'tree-filtering-example.html',
                styleUrls: ['tree-filtering-example.css']
            }]
    }], function () { return []; }, null); })();

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
function TreeMultipleCheckboxExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r2.name === "tests");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r0.treeControl.getViewValue(node_r2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
function TreeMultipleCheckboxExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "mc-tree-node-toggle", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r3 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("node", node_r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.treeControl.getViewValue(node_r3), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
class FileNode$3 {
}
/** Flat node with expandable and level information */
class FileFlatNode$3 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$3(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$3();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$3(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$3 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeMultipleCheckboxExample {
    constructor() {
        this.modelValue = [];
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$3();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlatDataSource(this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeMultipleCheckboxExample.ɵfac = function TreeMultipleCheckboxExample_Factory(t) { return new (t || TreeMultipleCheckboxExample)(); };
TreeMultipleCheckboxExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: TreeMultipleCheckboxExample, selectors: [["tree-multiple-checkbox-example"]], decls: 3, vars: 4, consts: [["multiple", "checkbox", 3, "ngModel", "dataSource", "treeControl", "ngModelChange"], ["mcTreeNodePadding", "", 3, "disabled", 4, "mcTreeNodeDef"], ["mcTreeNodePadding", "", 4, "mcTreeNodeDef", "mcTreeNodeDefWhen"], ["mcTreeNodePadding", "", 3, "disabled"], ["mc-icon", "mc-info-o_16"], [3, "innerHTML"], ["mcTreeNodePadding", ""], [3, "node"]], template: function TreeMultipleCheckboxExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-selection", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeMultipleCheckboxExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TreeMultipleCheckboxExample_mc_tree_option_1_Template, 3, 2, "mc-tree-option", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, TreeMultipleCheckboxExample_mc_tree_option_2_Template, 4, 2, "mc-tree-option", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.modelValue)("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcTreeNodeDefWhen", ctx.hasChild);
    } }, directives: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeSelection, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeDef, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeOption, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodePadding, _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIcon, _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIconCSSStyler, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeToggleComponent], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeMultipleCheckboxExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'tree-multiple-checkbox-example',
                templateUrl: 'tree-multiple-checkbox-example.html',
                styleUrls: ['tree-multiple-checkbox-example.css']
            }]
    }], function () { return []; }, null); })();

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
function TreeMultipleChecklistExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mc-checkbox", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function TreeMultipleChecklistExample_mc_tree_option_1_Template_mc_checkbox_change_1_listener() { const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4); const node_r2 = restoredCtx.$implicit; const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](); return ctx_r3.fileSelectionToggle(node_r2); });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r2.name === "tests");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r2.name === "tests")("checked", ctx_r0.checklistSelection.isSelected(node_r2));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r0.treeControl.getViewValue(node_r2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
function TreeMultipleChecklistExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "mc-tree-node-toggle", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mc-checkbox", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function TreeMultipleChecklistExample_mc_tree_option_2_Template_mc_checkbox_change_2_listener() { const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7); const node_r5 = restoredCtx.$implicit; const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](); return ctx_r6.fileSelectionToggle(node_r5); });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r5 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("node", node_r5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("checked", ctx_r1.descendantsAllSelected(node_r5))("indeterminate", ctx_r1.descendantsPartiallySelected(node_r5));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.treeControl.getViewValue(node_r5), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
class FileNode$2 {
}
/** Flat node with expandable and level information */
class FileFlatNode$2 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$2(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$2();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$2(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$2 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Checklist tree
 */
class TreeMultipleChecklistExample {
    constructor() {
        this.modelValue = [];
        /** The selection for checklist */
        this.checklistSelection = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_10__.SelectionModel(true /* multiple */);
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$2();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlatDataSource(this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
    /** Whether all the descendants of the node are selected. */
    descendantsAllSelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        return descendants.every((child) => this.checklistSelection.isSelected(child));
    }
    /** Whether part of the descendants are selected */
    descendantsPartiallySelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        const result = descendants.some((child) => this.checklistSelection.isSelected(child));
        return result && !this.descendantsAllSelected(node);
    }
    /** Toggle the to-do item selection. Select/deselect all the descendants node */
    fileSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        const descendants = this.treeControl.getDescendants(node);
        this.checklistSelection.isSelected(node)
            ? this.checklistSelection.select(...descendants)
            : this.checklistSelection.deselect(...descendants);
        // Force update for the parent
        descendants.every((child) => this.checklistSelection.isSelected(child));
        this.checkAllParentsSelection(node);
    }
    /* Checks all the parents when a leaf node is selected/unselected */
    checkAllParentsSelection(node) {
        let parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    }
    /** Check root node checked state and change it accordingly */
    checkRootNodeSelection(node) {
        const nodeSelected = this.checklistSelection.isSelected(node);
        const descendants = this.treeControl.getDescendants(node);
        const descAllSelected = descendants.every((child) => this.checklistSelection.isSelected(child));
        if (nodeSelected && !descAllSelected) {
            this.checklistSelection.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.checklistSelection.select(node);
        }
    }
    /* Get the parent node of a node */
    getParentNode(node) {
        const currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (let i = startIndex; i >= 0; i--) {
            const currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    }
}
TreeMultipleChecklistExample.ɵfac = function TreeMultipleChecklistExample_Factory(t) { return new (t || TreeMultipleChecklistExample)(); };
TreeMultipleChecklistExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: TreeMultipleChecklistExample, selectors: [["tree-multiple-checklist-example"]], decls: 3, vars: 4, consts: [[3, "ngModel", "dataSource", "treeControl", "ngModelChange"], ["mcTreeNodePadding", "", 3, "disabled", 4, "mcTreeNodeDef"], ["mcTreeNodePadding", "", 4, "mcTreeNodeDef", "mcTreeNodeDefWhen"], ["mcTreeNodePadding", "", 3, "disabled"], [1, "tree-example-checkbox", 3, "disabled", "checked", "change"], [3, "innerHTML"], ["mcTreeNodePadding", ""], [3, "node"], [1, "tree-example-checkbox", 3, "checked", "indeterminate", "change"]], template: function TreeMultipleChecklistExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-selection", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeMultipleChecklistExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TreeMultipleChecklistExample_mc_tree_option_1_Template, 3, 4, "mc-tree-option", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, TreeMultipleChecklistExample_mc_tree_option_2_Template, 4, 4, "mc-tree-option", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.modelValue)("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcTreeNodeDefWhen", ctx.hasChild);
    } }, directives: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeSelection, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeDef, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeOption, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodePadding, _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_11__.McCheckbox, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeToggleComponent], styles: [".tree-example-checkbox[_ngcontent-%COMP%]{margin-right:8px}"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeMultipleChecklistExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'tree-multiple-checklist-example',
                templateUrl: 'tree-multiple-checklist-example.html',
                styleUrls: ['tree-multiple-checklist-example.css']
            }]
    }], function () { return []; }, null); })();

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
function TreeMultipleKeyboardExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r2.name === "tests");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r0.treeControl.getViewValue(node_r2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
function TreeMultipleKeyboardExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "mc-tree-node-toggle", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r3 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("node", node_r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.treeControl.getViewValue(node_r3), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
class FileNode$1 {
}
/** Flat node with expandable and level information */
class FileFlatNode$1 {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree$1(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode$1();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree$1(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT$1 = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeMultipleKeyboardExample {
    constructor() {
        this.modelValue = [];
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode$1();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlatDataSource(this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeMultipleKeyboardExample.ɵfac = function TreeMultipleKeyboardExample_Factory(t) { return new (t || TreeMultipleKeyboardExample)(); };
TreeMultipleKeyboardExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: TreeMultipleKeyboardExample, selectors: [["tree-multiple-keyboard-example"]], decls: 3, vars: 4, consts: [["multiple", "keyboard", 3, "ngModel", "dataSource", "treeControl", "ngModelChange"], ["mcTreeNodePadding", "", 3, "disabled", 4, "mcTreeNodeDef"], ["mcTreeNodePadding", "", 4, "mcTreeNodeDef", "mcTreeNodeDefWhen"], ["mcTreeNodePadding", "", 3, "disabled"], [3, "innerHTML"], ["mcTreeNodePadding", ""], [3, "node"]], template: function TreeMultipleKeyboardExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-selection", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeMultipleKeyboardExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TreeMultipleKeyboardExample_mc_tree_option_1_Template, 2, 2, "mc-tree-option", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, TreeMultipleKeyboardExample_mc_tree_option_2_Template, 3, 2, "mc-tree-option", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.modelValue)("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcTreeNodeDefWhen", ctx.hasChild);
    } }, directives: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeSelection, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeDef, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeOption, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodePadding, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeToggleComponent], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeMultipleKeyboardExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'tree-multiple-keyboard-example',
                templateUrl: 'tree-multiple-keyboard-example.html',
                styleUrls: ['tree-multiple-keyboard-example.css']
            }]
    }], function () { return []; }, null); })();

/* tslint:disable:no-reserved-keywords object-literal-key-quotes */
function TreeOverviewExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", node_r2.name === "tests");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r0.treeControl.getViewValue(node_r2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
function TreeOverviewExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-option", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "mc-tree-node-toggle", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
} if (rf & 2) {
    const node_r3 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("node", node_r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.treeControl.getViewValue(node_r3), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
} }
class FileNode {
}
/** Flat node with expandable and level information */
class FileFlatNode {
}
/**
 * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
 * The return value is the list of `FileNode`.
 */
function buildFileTree(value, level) {
    const data = [];
    for (const k of Object.keys(value)) {
        const v = value[k];
        const node = new FileNode();
        node.name = `${k}`;
        if (v === null || v === undefined) {
            // no action
        }
        else if (typeof v === 'object') {
            node.children = buildFileTree(v, level + 1);
        }
        else {
            node.type = v;
        }
        data.push(node);
    }
    return data;
}
const DATA_OBJECT = {
    docs: 'app',
    src: {
        cdk: {
            a11ly: {
                'aria describer': {
                    'aria-describer': 'ts',
                    'aria-describer.spec': 'ts',
                    'aria-reference': 'ts',
                    'aria-reference.spec': 'ts'
                },
                'focus monitor': {
                    'focus-monitor': 'ts',
                    'focus-monitor.spec': 'ts'
                }
            }
        },
        documentation: {
            source: '',
            tools: ''
        },
        mosaic: {
            autocomplete: '',
            button: '',
            'button-toggle': '',
            index: 'ts',
            package: 'json',
            version: 'ts'
        },
        'mosaic-dev': {
            alert: '',
            badge: ''
        },
        'mosaic-examples': '',
        'mosaic-moment-adapter': '',
        README: 'md',
        'tsconfig.build': 'json',
        wallabyTest: 'ts'
    },
    scripts: {
        deploy: {
            'cleanup-preview': 'ts',
            'publish-artifacts': 'sh',
            'publish-docs': 'sh',
            'publish-docs-preview': 'ts'
        },
        'tsconfig.deploy': 'json'
    },
    tests: ''
};
/**
 * @title Basic tree
 */
class TreeOverviewExample {
    constructor() {
        this.modelValue = '';
        this.transformer = (node, level, parent) => {
            const flatNode = new FileFlatNode();
            flatNode.name = node.name;
            flatNode.parent = parent;
            flatNode.type = node.type;
            flatNode.level = level;
            flatNode.expandable = !!node.children;
            return flatNode;
        };
        this.getLevel = (node) => {
            return node.level;
        };
        this.isExpandable = (node) => {
            return node.expandable;
        };
        this.getChildren = (node) => {
            return node.children;
        };
        this.getValue = (node) => {
            return node.name;
        };
        this.getViewValue = (node) => {
            const nodeType = node.type ? `.${node.type}` : '';
            return `${node.name}${nodeType}`;
        };
        this.treeFlattener = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.treeControl = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);
        this.dataSource = new _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeFlatDataSource(this.treeControl, this.treeFlattener);
        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);
    }
    hasChild(_, nodeData) { return nodeData.expandable; }
}
TreeOverviewExample.ɵfac = function TreeOverviewExample_Factory(t) { return new (t || TreeOverviewExample)(); };
TreeOverviewExample.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: TreeOverviewExample, selectors: [["tree-overview-example"]], decls: 3, vars: 4, consts: [[3, "ngModel", "dataSource", "treeControl", "ngModelChange"], ["mcTreeNodePadding", "", 3, "disabled", 4, "mcTreeNodeDef"], ["mcTreeNodePadding", "", 4, "mcTreeNodeDef", "mcTreeNodeDefWhen"], ["mcTreeNodePadding", "", 3, "disabled"], [3, "innerHTML"], ["mcTreeNodePadding", ""], [3, "node"]], template: function TreeOverviewExample_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mc-tree-selection", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function TreeOverviewExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TreeOverviewExample_mc_tree_option_1_Template, 2, 2, "mc-tree-option", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, TreeOverviewExample_mc_tree_option_2_Template, 3, 2, "mc-tree-option", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.modelValue)("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mcTreeNodeDefWhen", ctx.hasChild);
    } }, directives: [_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeSelection, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeDef, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeOption, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodePadding, _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeNodeToggleComponent], styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeOverviewExample, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
        args: [{
                selector: 'tree-overview-example',
                templateUrl: 'tree-overview-example.html',
                styleUrls: ['tree-overview-example.css']
            }]
    }], function () { return []; }, null); })();

const EXAMPLES = [
    TreeActionButtonExample,
    TreeOverviewExample,
    TreeMultipleCheckboxExample,
    TreeMultipleChecklistExample,
    TreeMultipleKeyboardExample,
    TreeFilteringExample
];
class TreeExamplesModule {
}
TreeExamplesModule.ɵfac = function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); };
TreeExamplesModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: TreeExamplesModule });
TreeExamplesModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ imports: [[
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__.FormsModule,
            _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__.McFormFieldModule,
            _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__.McInputModule,
            _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeModule,
            _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIconModule,
            _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__.McHighlightModule,
            _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_11__.McCheckboxModule,
            _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__.McDropdownModule,
            _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__.McToolTipModule,
            _angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__.ClipboardModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TreeExamplesModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
        args: [{
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_3__.FormsModule,
                    _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__.McFormFieldModule,
                    _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__.McInputModule,
                    _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeModule,
                    _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIconModule,
                    _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__.McHighlightModule,
                    _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_11__.McCheckboxModule,
                    _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__.McDropdownModule,
                    _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__.McToolTipModule,
                    _angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__.ClipboardModule
                ],
                declarations: EXAMPLES,
                exports: EXAMPLES
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](TreeExamplesModule, { declarations: [TreeActionButtonExample,
        TreeOverviewExample,
        TreeMultipleCheckboxExample,
        TreeMultipleChecklistExample,
        TreeMultipleKeyboardExample,
        TreeFilteringExample], imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__.FormsModule,
        _ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__.McFormFieldModule,
        _ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__.McInputModule,
        _ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_1__.McTreeModule,
        _ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__.McIconModule,
        _ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_9__.McHighlightModule,
        _ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_11__.McCheckboxModule,
        _ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__.McDropdownModule,
        _ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__.McToolTipModule,
        _angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_2__.ClipboardModule], exports: [TreeActionButtonExample,
        TreeOverviewExample,
        TreeMultipleCheckboxExample,
        TreeMultipleChecklistExample,
        TreeMultipleKeyboardExample,
        TreeFilteringExample] }); })();

/**
 * Generated bundle index. Do not edit.
 */




/***/ })

}]);
//# sourceMappingURL=node_modules_ptsecurity_mosaic-examples_fesm2015_ptsecurity-mosaic-examples-mosaic-tree_js-es2015.js.map