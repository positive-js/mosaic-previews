{"version":3,"sources":["./dist/packages/mosaic/checkbox/checkbox-config.ts","./dist/packages/mosaic/checkbox/checkbox.ts","./dist/packages/mosaic/checkbox/checkbox-required-validator.ts","./dist/packages/mosaic/checkbox/checkbox-module.ts","./dist/packages/mosaic/checkbox/ptsecurity-mosaic-checkbox.ts"],"names":[],"mappings":"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","file":"0-es2015.js","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase = mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    exportAs: 'mcCheckbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> = new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', { static: false }) inputElement: ElementRef;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    constructor(\n        elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n        private _clickAction: McCheckboxClickAction\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"sourceRoot":"webpack:///"}