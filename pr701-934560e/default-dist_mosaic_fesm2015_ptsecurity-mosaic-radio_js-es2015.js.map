{"version":3,"file":"default-dist_mosaic_fesm2015_ptsecurity-mosaic-radio_js-es2015.js","mappings":"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","sources":["./packages/mosaic/radio/radio.component.ts","./packages/mosaic/radio/radio.component.html","./packages/mosaic/radio/radio.module.ts","./packages/mosaic/radio/ptsecurity-mosaic-radio.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(elementRef: ElementRef, private readonly _changeDetector: ChangeDetectorRef) {\n        super(elementRef);\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nabstract class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    abstract disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor & HasTabIndexCtor & typeof McRadioButtonBase = mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-selected]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"sourceRoot":"webpack:///"}