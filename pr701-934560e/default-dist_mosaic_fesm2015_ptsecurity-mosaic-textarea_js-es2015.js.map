{"version":3,"file":"default-dist_mosaic_fesm2015_ptsecurity-mosaic-textarea_js-es2015.js","mappings":"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","sources":["./packages/mosaic/textarea/textarea.component.ts","./packages/mosaic/textarea/textarea.module.ts","./packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit,\n    AfterContentInit\n} from '@angular/core';\nimport { FormGroupDirective, NG_VALIDATORS, NgControl, NgForm, NgModel, Validator } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    setMosaicValidation,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState, AfterContentInit {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() @Self() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.ngControl) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"sourceRoot":"webpack:///"}