{"version":3,"sources":["./node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-tree.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACgB;AACb;AACM;AACK;AACa;AACjB;AACc;AACR;AACc;AACX;AACR;AACU;AACT;AAC8C;AACvC;AACG;;AAE1D;AACA,kEAAkE;AAClE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,cAAc,yDAAc,wFAAwF,4DAAiB;AACtJ,CAAC;AACD,kEAAkE;AAClE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,oDAAS;AACb,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,cAAc,yDAAc,wFAAwF,4DAAiB;AACtJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,uEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,4EAAoB;AAClD;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA,sEAAsE,0CAA0C;AAChH,4BAA4B,+DAAoB,EAAE,kgBAAkgB;AACpjB,QAAQ,4DAAiB;AACzB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,iGAAiG,mCAAmC,EAAE,kGAAkG,iCAAiC,EAAE;AAChS,QAAQ,0DAAe;AACvB,QAAQ,0DAAe;AACvB,QAAQ,uDAAY;AACpB,QAAQ,uDAAY;AACpB,QAAQ,uDAAY;AACpB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,6GAA6G,gCAAgC,EAAE;AACpK,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,KAAK;AACL,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,KAAK,EAAE,eAAe,yEAAc,EAAE,gEAAU,EAAE,mEAAyB,EAAE,8DAAoB,EAAE,sDAAY,EAAE,uEAAoB,EAAE,qEAAkB,EAAE,oEAAiB,EAAE,yEAAsB,EAAE,iFAA8B,WAAW,uEAAkB,iBAAiB;AAClR,cAAc,oDAAoD,+DAAoB;AACtF,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA,yEAAyE;AACzE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD,yEAAyE;AACzE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,uEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,4EAAoB;AAClD;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA,oFAAoF,iDAAiD;AACrI,mCAAmC,+DAAoB,EAAE,gfAAgf;AACziB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,oHAAoH,gCAAgC,EAAE;AAC3K,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,KAAK;AACL,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,KAAK,EAAE,eAAe,uEAAoB,EAAE,8DAAoB,EAAE,sDAAY,EAAE,qEAAkB,EAAE,oEAAiB,EAAE,yEAAsB,EAAE,iFAA8B,iBAAiB;AAC9L,cAAc,oDAAoD,+DAAoB;AACtF,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA,0EAA0E;AAC1E,gBAAgB,8DAAmB;AACnC,IAAI,4DAAiB;AACrB,IAAI,4DAAiB;AACrB,IAAI,wDAAa,4GAA4G,CAAC,2DAAgB,MAAM,+BAA+B,gBAAgB,2DAAgB,GAAG,4CAA4C,EAAE;AACpQ,IAAI,0DAAe;AACnB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD,0EAA0E;AAC1E,gBAAgB,8DAAmB;AACnC,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,4DAAiB;AACrB,IAAI,wDAAa,4GAA4G,CAAC,2DAAgB,MAAM,+BAA+B,gBAAgB,2DAAgB,GAAG,4CAA4C,EAAE;AACpQ,IAAI,0DAAe;AACnB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uEAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,uEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,4EAAoB;AAClD;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,kDAAkD;AACxI,oCAAoC,+DAAoB,EAAE,omBAAomB;AAC9pB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,qHAAqH,gCAAgC,EAAE;AAC5K,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,KAAK;AACL,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,KAAK,EAAE,eAAe,uEAAoB,EAAE,8DAAoB,EAAE,sDAAY,EAAE,qEAAkB,EAAE,oEAAiB,EAAE,yEAAsB,EAAE,sEAAa,EAAE,iFAA8B,uDAAuD,iBAAiB,IAAI;AACxQ,cAAc,oDAAoD,+DAAoB;AACtF,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA,yEAAyE;AACzE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD,yEAAyE;AACzE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,uEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,4EAAoB;AAClD;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA,oFAAoF,iDAAiD;AACrI,mCAAmC,+DAAoB,EAAE,gfAAgf;AACziB,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,oHAAoH,gCAAgC,EAAE;AAC3K,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,KAAK;AACL,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,KAAK,EAAE,eAAe,uEAAoB,EAAE,8DAAoB,EAAE,sDAAY,EAAE,qEAAkB,EAAE,oEAAiB,EAAE,yEAAsB,EAAE,iFAA8B,iBAAiB;AAC9L,cAAc,oDAAoD,+DAAoB;AACtF,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA,iEAAiE;AACjE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD,iEAAiE;AACjE,IAAI,4DAAiB;AACrB,IAAI,uDAAY;AAChB,IAAI,uDAAY;AAChB,IAAI,0DAAe;AACnB,CAAC;AACD;AACA,mBAAmB,2DAAgB;AACnC,IAAI,uDAAY;AAChB,IAAI,wDAAa;AACjB,IAAI,uDAAY;AAChB,IAAI,wDAAa,wDAAwD,4DAAiB;AAC1F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,sBAAsB,UAAU,EAAE,SAAS;AAC3C;AACA,iCAAiC,uEAAe;AAChD,+BAA+B,oEAAe;AAC9C,8BAA8B,4EAAoB;AAClD;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA,oEAAoE,yCAAyC;AAC7G,2BAA2B,+DAAoB,EAAE,+bAA+b;AAChf,QAAQ,4DAAiB;AACzB,QAAQ,wDAAa,4GAA4G,gCAAgC,EAAE;AACnK,QAAQ,wDAAa;AACrB,QAAQ,wDAAa;AACrB,QAAQ,0DAAe;AACvB,KAAK;AACL,QAAQ,wDAAa;AACrB,QAAQ,uDAAY;AACpB,QAAQ,wDAAa;AACrB,KAAK,EAAE,eAAe,uEAAoB,EAAE,8DAAoB,EAAE,sDAAY,EAAE,qEAAkB,EAAE,oEAAiB,EAAE,yEAAsB,EAAE,iFAA8B,iBAAiB;AAC9L,cAAc,oDAAoD,+DAAoB;AACtF,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,wCAAwC;AAC1G,0BAA0B,8DAAmB,EAAE,2BAA2B;AAC1E,0BAA0B,8DAAmB,EAAE;AAC/C,YAAY,0DAAW;AACvB,YAAY,+EAAiB;AAC7B,YAAY,sEAAa;AACzB,YAAY,oEAAY;AACxB,YAAY,oEAAY;AACxB,YAAY,yEAAiB;AAC7B,YAAY,4EAAgB;AAC5B,YAAY;AACZ,cAAc,oDAAoD,gEAAqB,sBAAsB;AAC7G;AACA;AACA;AACA,yCAAyC,0DAAW;AACpD,QAAQ,+EAAiB;AACzB,QAAQ,sEAAa;AACrB,QAAQ,oEAAY;AACpB,QAAQ,oEAAY;AACpB,QAAQ,yEAAiB;AACzB,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,+BAA+B,EAAE,EAAE;AACnC,cAAc,oDAAoD,+DAAoB;AACtF,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,0DAAW;AAC/B,oBAAoB,+EAAiB;AACrC,oBAAoB,sEAAa;AACjC,oBAAoB,oEAAY;AAChC,oBAAoB,oEAAY;AAChC,oBAAoB,yEAAiB;AACrC,oBAAoB,4EAAgB;AACpC;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;;AAEiK;AACjK","file":"40-es2015.js","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i2$1 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@ptsecurity/mosaic/checkbox';\nimport { McCheckboxModule } from '@ptsecurity/mosaic/checkbox';\nimport * as i5 from '@ptsecurity/mosaic/core';\nimport { McHighlightModule } from '@ptsecurity/mosaic/core';\nimport * as i1 from '@ptsecurity/mosaic/form-field';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport * as i2 from '@ptsecurity/mosaic/input';\nimport { McInputModule } from '@ptsecurity/mosaic/input';\nimport * as i1$1 from '@ptsecurity/mosaic/tree';\nimport { McTreeFlattener, McTreeFlatDataSource, McTreeModule } from '@ptsecurity/mosaic/tree';\nimport { FlatTreeControl } from '@ptsecurity/cdk/tree';\nimport { SelectionModel } from '@angular/cdk/collections';\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeFilteringExample_mc_tree_option_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 4);\n    i0.ɵɵelement(1, \"span\", 5);\n    i0.ɵɵpipe(2, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 2, ctx_r0.treeControl.getViewValue(node_r2), ctx_r0.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeFilteringExample_mc_tree_option_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵpipe(3, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(3, 2, ctx_r1.treeControl.getViewValue(node_r3), ctx_r1.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$4 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$4 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$4(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$4();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$4(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$4 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeFilteringExample {\n    constructor() {\n        this.modelValue = '';\n        this.filterValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$4();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);\n    }\n    onFilterChange(value) {\n        this.treeControl.filterNodes(value);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeFilteringExample.ɵfac = function TreeFilteringExample_Factory(t) { return new (t || TreeFilteringExample)(); };\nTreeFilteringExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeFilteringExample, selectors: [[\"tree-filtering-example\"]], decls: 8, vars: 5, consts: [[\"type\", \"text\", \"mcInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeFilteringExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.onFilterChange($event); })(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.filterValue = $event; });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"mc-tree-selection\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_mc_tree_selection_ngModelChange_5_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(6, TreeFilteringExample_mc_tree_option_6_Template, 3, 5, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(7, TreeFilteringExample_mc_tree_option_7_Template, 4, 5, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.filterValue);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McFormField, i2.McInput, i2$1.DefaultValueAccessor, i2$1.NgControlStatus, i2$1.NgModel, i1$1.McTreeSelection, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], pipes: [i5.McHighlightPipe], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeFilteringExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-filtering-example',\n                templateUrl: 'tree-filtering-example.html',\n                styleUrls: ['tree-filtering-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleCheckboxExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleCheckboxExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$3 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$3 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$3(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$3();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$3(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$3 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleCheckboxExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$3();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleCheckboxExample.ɵfac = function TreeMultipleCheckboxExample_Factory(t) { return new (t || TreeMultipleCheckboxExample)(); };\nTreeMultipleCheckboxExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeMultipleCheckboxExample, selectors: [[\"tree-multiple-checkbox-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"checkbox\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleCheckboxExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleCheckboxExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleCheckboxExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleCheckboxExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2$1.NgControlStatus, i2$1.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleCheckboxExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-checkbox-example',\n                templateUrl: 'tree-multiple-checkbox-example.html',\n                styleUrls: ['tree-multiple-checkbox-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleChecklistExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelementStart(1, \"mc-checkbox\", 4);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_1_Template_mc_checkbox_change_1_listener() { i0.ɵɵrestoreView(_r4); const node_r2 = ctx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.fileSelectionToggle(node_r2); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\")(\"checked\", ctx_r0.checklistSelection.isSelected(node_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleChecklistExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelementStart(2, \"mc-checkbox\", 8);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_2_Template_mc_checkbox_change_2_listener() { i0.ɵɵrestoreView(_r7); const node_r5 = ctx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.fileSelectionToggle(node_r5); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r1.descendantsAllSelected(node_r5))(\"indeterminate\", ctx_r1.descendantsPartiallySelected(node_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r5), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$2 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$2 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$2(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$2();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$2(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$2 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Checklist tree\n */\nclass TreeMultipleChecklistExample {\n    constructor() {\n        this.modelValue = [];\n        /** The selection for checklist */\n        this.checklistSelection = new SelectionModel(true /* multiple */);\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$2();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        return descendants.every((child) => this.checklistSelection.isSelected(child));\n    }\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some((child) => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    fileSelectionToggle(node) {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n        // Force update for the parent\n        descendants.every((child) => this.checklistSelection.isSelected(child));\n        this.checkAllParentsSelection(node);\n    }\n    /* Checks all the parents when a leaf node is selected/unselected */\n    checkAllParentsSelection(node) {\n        let parent = this.getParentNode(node);\n        while (parent) {\n            this.checkRootNodeSelection(parent);\n            parent = this.getParentNode(parent);\n        }\n    }\n    /** Check root node checked state and change it accordingly */\n    checkRootNodeSelection(node) {\n        const nodeSelected = this.checklistSelection.isSelected(node);\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.every((child) => this.checklistSelection.isSelected(child));\n        if (nodeSelected && !descAllSelected) {\n            this.checklistSelection.deselect(node);\n        }\n        else if (!nodeSelected && descAllSelected) {\n            this.checklistSelection.select(node);\n        }\n    }\n    /* Get the parent node of a node */\n    getParentNode(node) {\n        const currentLevel = this.getLevel(node);\n        if (currentLevel < 1) {\n            return null;\n        }\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n        for (let i = startIndex; i >= 0; i--) {\n            const currentNode = this.treeControl.dataNodes[i];\n            if (this.getLevel(currentNode) < currentLevel) {\n                return currentNode;\n            }\n        }\n        return null;\n    }\n}\nTreeMultipleChecklistExample.ɵfac = function TreeMultipleChecklistExample_Factory(t) { return new (t || TreeMultipleChecklistExample)(); };\nTreeMultipleChecklistExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeMultipleChecklistExample, selectors: [[\"tree-multiple-checklist-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [1, \"tree-example-checkbox\", 3, \"disabled\", \"checked\", \"change\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"], [1, \"tree-example-checkbox\", 3, \"checked\", \"indeterminate\", \"change\"]], template: function TreeMultipleChecklistExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleChecklistExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleChecklistExample_mc_tree_option_1_Template, 3, 4, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleChecklistExample_mc_tree_option_2_Template, 4, 4, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2$1.NgControlStatus, i2$1.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i3.McCheckbox, i1$1.McTreeNodeToggleComponent], styles: [\".tree-example-checkbox[_ngcontent-%COMP%]{margin-right:8px}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleChecklistExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-checklist-example',\n                templateUrl: 'tree-multiple-checklist-example.html',\n                styleUrls: ['tree-multiple-checklist-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleKeyboardExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleKeyboardExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$1 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$1 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$1(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$1();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$1(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$1 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleKeyboardExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$1();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleKeyboardExample.ɵfac = function TreeMultipleKeyboardExample_Factory(t) { return new (t || TreeMultipleKeyboardExample)(); };\nTreeMultipleKeyboardExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeMultipleKeyboardExample, selectors: [[\"tree-multiple-keyboard-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"keyboard\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleKeyboardExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleKeyboardExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleKeyboardExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleKeyboardExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2$1.NgControlStatus, i2$1.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleKeyboardExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-keyboard-example',\n                templateUrl: 'tree-multiple-keyboard-example.html',\n                styleUrls: ['tree-multiple-keyboard-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeOverviewExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeOverviewExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria-describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus-monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeOverviewExample {\n    constructor() {\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeOverviewExample.ɵfac = function TreeOverviewExample_Factory(t) { return new (t || TreeOverviewExample)(); };\nTreeOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeOverviewExample, selectors: [[\"tree-overview-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeOverviewExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeOverviewExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeOverviewExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McTreeSelection, i2$1.NgControlStatus, i2$1.NgModel, i1$1.McTreeNodeDef, i1$1.McTreeOption, i1$1.McTreeNodePadding, i1$1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-overview-example',\n                templateUrl: 'tree-overview-example.html',\n                styleUrls: ['tree-overview-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\nconst EXAMPLES = [\n    TreeOverviewExample,\n    TreeMultipleCheckboxExample,\n    TreeMultipleChecklistExample,\n    TreeMultipleKeyboardExample,\n    TreeFilteringExample\n];\nclass TreeExamplesModule {\n}\nTreeExamplesModule.ɵfac = function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); };\nTreeExamplesModule.ɵmod = i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\nTreeExamplesModule.ɵinj = i0.ɵɵdefineInjector({ imports: [[\n            FormsModule,\n            McFormFieldModule,\n            McInputModule,\n            McTreeModule,\n            McIconModule,\n            McHighlightModule,\n            McCheckboxModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample], imports: [FormsModule,\n        McFormFieldModule,\n        McInputModule,\n        McTreeModule,\n        McIconModule,\n        McHighlightModule,\n        McCheckboxModule], exports: [TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    FormsModule,\n                    McFormFieldModule,\n                    McInputModule,\n                    McTreeModule,\n                    McIconModule,\n                    McHighlightModule,\n                    McCheckboxModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeExamplesModule, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample };\n//# sourceMappingURL=ptsecurity-mosaic-examples-mosaic-tree.js.map\n"],"sourceRoot":"webpack:///"}