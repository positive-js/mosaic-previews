{"version":3,"mappings":"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","names":["MC_TEXTAREA_VALUE_ACCESSOR","InjectionToken","nextUniqueId","McTextareaBase","constructor","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","elementRef","rawValidators","mcValidation","ngModel","inputValueAccessor","ngZone","Subject","valueAccessor","nativeElement","previousNativeValue","value","id","growObserver","fromEvent","growSubscription","subscribe","grow","bind","disabled","_disabled","coerceBooleanProperty","focused","stateChanges","next","_id","uid","_required","ngOnInit","setTimeout","lineHeight","parseInt","getComputedStyle","paddingTop","paddingBottom","minHeight","freeRowsHeight","ngOnChanges","ngOnDestroy","complete","unsubscribe","ngAfterContentInit","useValidation","setMosaicValidation","ngDoCheck","updateErrorState","dirtyCheckNativeValue","canGrow","runOutsideAngular","textarea","outerHeight","window","height","diff","clientHeight","style","Math","max","scrollHeight","focus","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","i0","NG_VALIDATORS","MC_VALIDATION","i1","ctx","provide","McFormFieldControl","useExisting","Directive","selector","exportAs","host","class","providers","Optional","Self","Inject","Input","errorStateMatcher","placeholder","required","McTextareaModule","CommonModule","A11yModule","McCommonModule","FormsModule","NgModule","imports","exports","declarations"],"sources":["webpack:///packages/mosaic/textarea/textarea.component.ts","webpack:///packages/mosaic/textarea/textarea.module.ts","webpack:///packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit,\n    AfterContentInit\n} from '@angular/core';\nimport { FormGroupDirective, NG_VALIDATORS, NgControl, NgForm, NgModel, Validator } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    setMosaicValidation,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState, AfterContentInit {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() @Self() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.ngControl) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}