{"version":3,"file":"default-dist_mosaic_fesm2020_ptsecurity-mosaic-checkbox_mjs.js","mappings":"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","sources":["./packages/mosaic/checkbox/checkbox-config.ts","./packages/mosaic/checkbox/checkbox.ts","./packages/mosaic/checkbox/checkbox.html","./packages/mosaic/checkbox/checkbox-required-validator.ts","./packages/mosaic/checkbox/checkbox-module.ts","./packages/mosaic/checkbox/ptsecurity-mosaic-checkbox.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase = mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    exportAs: 'mcCheckbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> = new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', { static: false }) inputElement: ElementRef;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    constructor(\n        elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n        private _clickAction: McCheckboxClickAction\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","<label [attr.for]=\"inputId\" class=\"mc-checkbox-layout\" #label>\n    <div class=\"mc-checkbox-inner-container\"\n         [class.mc-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n        <input #input\n               type=\"checkbox\"\n               class=\"mc-checkbox-input cdk-visually-hidden\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"checked\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabIndex]=\"tabIndex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel || null\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"getAriaChecked()\"\n               (change)=\"onInteractionEvent($event)\"\n               (click)=\"onInputClick($event)\">\n        <div class=\"mc-checkbox-frame\">\n            <i class=\"mc-checkbox-checkmark mc mc-check_16\"></i>\n            <i class=\"mc-checkbox-mixedmark mc mc-minus_16\"></i>\n        </div>\n    </div>\n\n    <span class=\"mc-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"onLabelTextChange()\">\n    <ng-content></ng-content>\n  </span>\n</label>\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["MC_CHECKBOX_CLICK_ACTION","InjectionToken","nextUniqueId","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McCheckbox","multi","TransitionCheckState","McCheckboxChange","McCheckboxBase","constructor","_elementRef","McCheckboxMixinBase","mixinTabIndex","mixinColor","mixinDisabled","elementRef","_changeDetectorRef","_focusMonitor","_clickAction","ariaLabel","ariaLabelledby","labelPosition","name","EventEmitter","_checked","_disabled","_indeterminate","currentAnimationClass","Init","id","uniqueId","inputId","required","_required","value","toBoolean","checked","markForCheck","disabled","indeterminate","changed","transitionCheckState","Indeterminate","Checked","Unchecked","indeterminateChange","emit","ngAfterViewInit","monitor","inputElement","nativeElement","subscribe","focusOrigin","onInputFocusChange","ngOnDestroy","stopMonitoring","onLabelTextChange","writeValue","registerOnChange","fn","controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","getAriaChecked","toggle","onInputClick","event","stopPropagation","Promise","resolve","then","emitChangeEvent","focus","focusVia","onInteractionEvent","newState","oldState","currentCheckState","element","length","classList","remove","add","source","change","i0","i1","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","Component","exportAs","host","class","providers","inputs","encapsulation","ViewEncapsulation","None","changeDetection","OnPush","template","styles","Optional","Inject","Input","Output","ViewChild","args","static","NG_VALIDATORS","McCheckboxRequiredValidator","CheckboxRequiredValidator","MC_CHECKBOX_REQUIRED_VALIDATOR","Directive","selector","McCheckboxModule","CommonModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}