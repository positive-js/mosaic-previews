{"version":3,"file":"default-dist_mosaic_fesm2020_ptsecurity-mosaic-textarea_mjs.js","mappings":"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","sources":["./packages/mosaic/textarea/textarea.component.ts","./packages/mosaic/textarea/textarea.module.ts","./packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit,\n    AfterContentInit\n} from '@angular/core';\nimport { FormGroupDirective, NG_VALIDATORS, NgControl, NgForm, NgModel, Validator } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    setMosaicValidation,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState, AfterContentInit {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() @Self() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.ngControl) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["MC_TEXTAREA_VALUE_ACCESSOR","InjectionToken","nextUniqueId","McTextareaBase","constructor","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","elementRef","rawValidators","mcValidation","ngModel","inputValueAccessor","ngZone","canGrow","focused","Subject","controlType","_disabled","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","nativeElement","previousNativeValue","value","id","growObserver","fromEvent","growSubscription","subscribe","grow","bind","disabled","coerceBooleanProperty","stateChanges","next","_id","uid","required","ngOnInit","setTimeout","parseInt","getComputedStyle","paddingTop","paddingBottom","ngOnChanges","ngOnDestroy","complete","unsubscribe","ngAfterContentInit","useValidation","setMosaicValidation","ngDoCheck","updateErrorState","dirtyCheckNativeValue","runOutsideAngular","textarea","outerHeight","window","height","diff","clientHeight","style","Math","max","scrollHeight","focus","focusChanged","isFocused","empty","isBadInput","onContainerClick","newValue","validity","badInput","i0","i1","NG_VALIDATORS","MC_VALIDATION","i2","provide","McFormFieldControl","useExisting","Directive","args","selector","exportAs","host","class","providers","Optional","Self","Inject","Input","errorStateMatcher","placeholder","McTextareaModule","CommonModule","A11yModule","McCommonModule","FormsModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}