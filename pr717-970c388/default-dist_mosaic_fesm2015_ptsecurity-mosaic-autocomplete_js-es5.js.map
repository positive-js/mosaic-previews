{"version":3,"mappings":"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","names":["uniqueAutocompleteIdCounter","McAutocompleteSelectedEvent","source","option","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","_angular_core__WEBPACK_IMPORTED_MODULE_0__","providedIn","factory","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","McAutocomplete","changeDetectorRef","elementRef","defaults","_autoActiveFirstOption","_classList","value","length","split","forEach","className","trim","nativeElement","_isOpen","showPanel","_openOnFocus","keyManager","_ptsecurity_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__","options","setVisibility","scrollTop","panel","markForCheck","event","optionSelected","emit","onKeydown","_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_3__","provide","useExisting","_angular_common__WEBPACK_IMPORTED_MODULE_4__","selector","exportAs","templateUrl","styleUrls","host","encapsulation","changeDetection","providers","template","descendants","optionGroups","displayWith","panelWidth","opened","closed","classList","openOnFocus","McAutocompleteOrigin","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","AUTOCOMPLETE_BORDER_WIDTH","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","_angular_forms__WEBPACK_IMPORTED_MODULE_6__","McAutocompleteTrigger","multi","getMcAutocompleteMissingPanelError","Error","viewContainerRef","zone","scrollStrategy","dir","formField","document","viewportRuler","autocomplete","map","onSelectionChange","onStable","asObservable","pipe","optionSelections","rxjs__WEBPACK_IMPORTED_MODULE_11__","rxjs__WEBPACK_IMPORTED_MODULE_12__","canOpenOnNextFocus","activeElement","panelOpen","window","runOutsideAngular","addEventListener","windowBlurHandler","activeItem","overlayAttached","_autocompleteDisabled","removeEventListener","viewportSubscription","unsubscribe","componentDestroyed","destroyPanel","closeKeyEventStream","complete","attachOverlay","isOpen","overlayRef","hasAttached","detach","closingActionsSubscription","detectChanges","updatePosition","tabOut","getOutsideClickStream","detachments","observableOf","Promise","resolve","then","setTriggerValue","fn","onChange","onTouched","isDisabled","disabled","keyCode","_ptsecurity_cdk_keycodes__WEBPACK_IMPORTED_MODULE_16__","preventDefault","activeOption","selectViaInteraction","resetActiveItem","prevActiveItem","canOpen","openPanel","isArrowKey","scrollToOption","target","type","parseFloat","previousValue","$event","clickTarget","_elementRef","customOrigin","connectedTo","contains","overlayElement","index","activeItemIndex","labelCount","newScrollPosition","getScrollTop","setScrollTop","firstStable","optionChanges","changes","positionStrategy","reapplyLastPosition","wasOpen","panelClosingActions","subscribe","setValueAndClose","closePanel","dispose","toDisplay","inputValue","control","clearPreviousSelectedOption","focus","emitSelectEvent","skip","selected","deselect","portal","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_20__","create","getOverlayConfig","keydownEvents","altKey","next","change","updateSize","width","getPanelWidth","position","getConfig","setOrigin","getConnectedElement","attach","subscribeToClosingActions","getOverlayPosition","direction","flexibleConnectedTo","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","panelClass","getConnectedOverlayOrigin","getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_21__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_23__","ctx","autocompleteAttribute","autocompleteDisabled","McAutocompleteModule","ɵinj","imports","exports","declarations"],"sources":["webpack:///packages/mosaic/autocomplete/autocomplete.component.ts","webpack:///packages/mosaic/autocomplete/autocomplete.html","webpack:///packages/mosaic/autocomplete/autocomplete-origin.directive.ts","webpack:///packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","webpack:///packages/mosaic/autocomplete/autocomplete.module.ts","webpack:///packages/mosaic/autocomplete/ptsecurity-mosaic-autocomplete.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.scss'],\n    host: {\n        class: 'mc-autocomplete'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete\n    }]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    @Input('class')\n    get classList() {\n        return this._classList;\n    }\n\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    @Input()\n    get openOnFocus(): boolean {\n        return this._openOnFocus;\n    }\n\n    set openOnFocus(value: boolean) {\n        this._openOnFocus = value;\n    }\n\n    private _openOnFocus: boolean = true;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","<ng-template>\n    <div class=\"mc-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"classList\" #panel>\n        <ng-content></ng-content>\n    </div>\n</ng-template>\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedPosition,\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen() && this.autocomplete.openOnFocus) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ? this.formField._elementRef.nativeElement : null;\n                const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(\n            index,\n            this.autocomplete.options, this.autocomplete.optionGroups\n        );\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField.control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef<HTMLElement> {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        if (this.autocomplete.autoActiveFirstOption) {\n            this.autocomplete.keyManager.setFirstItemActive();\n        } else {\n            this.autocomplete.keyManager.setActiveItem(-1);\n        }\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}