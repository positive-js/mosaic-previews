{"version":3,"sources":["./dist/packages/mosaic/button-toggle/button-toggle.component.ts","./dist/packages/mosaic/button-toggle/button-toggle.module.ts","./dist/packages/mosaic/button-toggle/ptsecurity-mosaic-button-toggle.ts","./node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-button-toggle.js"],"names":[],"mappings":"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","file":"8-es2015.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any\n    ) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle_vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) { return; }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    exportAs: 'mcButtonToggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-button-toggle',\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, { static: false }) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) { return; }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i1 from '@ptsecurity/mosaic/button-toggle';\nimport { McButtonToggleModule } from '@ptsecurity/mosaic/button-toggle';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\n/**\n * @title Basic button-toggle\n */\nclass ButtonToggleMultipleOverviewExample {\n}\nButtonToggleMultipleOverviewExample.ɵfac = function ButtonToggleMultipleOverviewExample_Factory(t) { return new (t || ButtonToggleMultipleOverviewExample)(); };\nButtonToggleMultipleOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: ButtonToggleMultipleOverviewExample, selectors: [[\"button-toggle-multiple-overview-example\"]], decls: 13, vars: 1, consts: [[\"multiple\", \"\"], [\"multipleGroup\", \"mcButtonToggleGroup\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"]], template: function ButtonToggleMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", 0, 1);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 3);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 4);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleMultipleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-multiple-overview-example',\n                templateUrl: 'button-toggle-multiple-overview-example.html',\n                styleUrls: ['button-toggle-multiple-overview-example.css']\n            }]\n    }], null, null); })();\n\n/**\n * @title button-toggle\n */\nclass ButtonToggleOverviewExample {\n}\nButtonToggleOverviewExample.ɵfac = function ButtonToggleOverviewExample_Factory(t) { return new (t || ButtonToggleOverviewExample)(); };\nButtonToggleOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: ButtonToggleOverviewExample, selectors: [[\"button-toggle-overview-example\"]], decls: 15, vars: 1, consts: [[\"group1\", \"mcButtonToggleGroup\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"], [\"value\", \"4\"]], template: function ButtonToggleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", null, 0);\n        i0.ɵɵelementStart(2, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 3);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mc-button-toggle\", 4);\n        i0.ɵɵtext(9, \" button 4 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(14);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'button-toggle-overview-example',\n                templateUrl: 'button-toggle-overview-example.html',\n                styleUrls: ['button-toggle-overview-example.css']\n            }]\n    }], null, null); })();\n\nconst EXAMPLES = [\n    ButtonToggleOverviewExample,\n    ButtonToggleMultipleOverviewExample\n];\nclass ButtonToggleExamplesModule {\n}\nButtonToggleExamplesModule.ɵfac = function ButtonToggleExamplesModule_Factory(t) { return new (t || ButtonToggleExamplesModule)(); };\nButtonToggleExamplesModule.ɵmod = i0.ɵɵdefineNgModule({ type: ButtonToggleExamplesModule });\nButtonToggleExamplesModule.ɵinj = i0.ɵɵdefineInjector({ imports: [[\n            McButtonToggleModule,\n            McIconModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ButtonToggleExamplesModule, { declarations: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample], imports: [McButtonToggleModule,\n        McIconModule], exports: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    McButtonToggleModule,\n                    McIconModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonToggleExamplesModule, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample };\n//# sourceMappingURL=ptsecurity-mosaic-examples-mosaic-button-toggle.js.map\n"],"sourceRoot":"webpack:///"}