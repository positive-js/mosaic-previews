{"version":3,"mappings":"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","names":["nextUniqueId","McRadioChange","constructor","source","value","McRadioGroupBase","_elementRef","McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McRadioGroup","multi","elementRef","_changeDetector","EventEmitter","_name","updateRadioButtonNames","_labelPosition","v","markRadiosForCheck","_value","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","_selected","selected","_disabled","toBoolean","_required","checked","ngAfterContentInit","isInitialized","touch","onTouched","emitChangeEvent","change","emit","radios","forEach","radio","markForCheck","writeValue","registerOnChange","fn","controlValueAccessorChangeFn","registerOnTouched","setDisabledState","isDisabled","disabled","name","isAlreadySelected","i0","McRadioButton","Directive","selector","exportAs","host","role","class","providers","Input","labelPosition","required","Output","ContentChildren","descendants","McRadioButtonBase","McRadioButtonMixinBase","mixinColor","mixinTabIndex","radioGroup","focusMonitor","_radioDispatcher","id","uniqueId","removeUniqueSelectionListener","listen","_checked","newCheckedState","notify","newDisabledState","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","focus","inputElement","nativeElement","onInputClick","event","stopPropagation","onInputChange","groupValueChanged","Component","templateUrl","styleUrls","inputs","encapsulation","ViewEncapsulation","changeDetection","ChangeDetectionStrategy","decorators","Optional","ariaLabel","ariaLabelledby","ariaDescribedby","ViewChild","static","isFocused","McRadioModule","CommonModule","A11yModule","McCommonModule","NgModule","imports","exports","declarations"],"sources":["webpack:///packages/mosaic/radio/radio.component.ts","webpack:///packages/mosaic/radio/radio.component.html","webpack:///packages/mosaic/radio/radio.module.ts","webpack:///packages/mosaic/radio/ptsecurity-mosaic-radio.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(elementRef: ElementRef, private readonly _changeDetector: ChangeDetectorRef) {\n        super(elementRef);\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nabstract class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    abstract disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor & HasTabIndexCtor & typeof McRadioButtonBase = mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-selected]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}