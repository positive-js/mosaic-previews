{"version":3,"sources":["webpack:///dist/packages/mosaic/checkbox/checkbox-config.ts","webpack:///dist/packages/mosaic/checkbox/checkbox.ts","webpack:///dist/packages/mosaic/checkbox/checkbox-required-validator.ts","webpack:///dist/packages/mosaic/checkbox/checkbox-module.ts","webpack:///dist/packages/mosaic/checkbox/ptsecurity-mosaic-checkbox.ts"],"names":["MC_CHECKBOX_CLICK_ACTION","nextUniqueId","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","McCheckbox","multi","TransitionCheckState","McCheckboxChange","McCheckboxBase","_elementRef","McCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_clickAction","ariaLabel","ariaLabelledby","labelPosition","name","change","indeterminateChange","_checked","_disabled","_indeterminate","uniqueId","currentAnimationClass","currentCheckState","Init","onTouched","controlValueAccessorChangeFn","id","_required","value","checked","markForCheck","disabled","changed","transitionCheckState","Indeterminate","Checked","Unchecked","emit","monitor","inputElement","nativeElement","subscribe","focusOrigin","onInputFocusChange","stopMonitoring","fn","isDisabled","indeterminate","event","stopPropagation","Promise","resolve","then","toggle","emitChangeEvent","focusVia","newState","oldState","element","length","classList","remove","add","source","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","McCheckboxModule"],"mappings":"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","file":"0-es5.js","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase = mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    exportAs: 'mcCheckbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> = new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', { static: false }) inputElement: ElementRef;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    constructor(\n        elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n        private _clickAction: McCheckboxClickAction\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}