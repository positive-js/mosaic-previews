{"version":3,"sources":["webpack:///packages/mosaic/textarea/textarea.component.ts","webpack:///packages/mosaic/textarea/textarea.module.ts","webpack:///packages/mosaic/textarea/ptsecurity-mosaic-textarea.ts"],"names":["MC_TEXTAREA_VALUE_ACCESSOR","nextUniqueId","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","McTextarea","elementRef","rawValidators","mcValidation","ngModel","inputValueAccessor","ngZone","canGrow","focused","stateChanges","controlType","uid","_disabled","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","nativeElement","previousNativeValue","value","id","growObserver","growSubscription","subscribe","grow","bind","disabled","next","_id","setTimeout","parseInt","getComputedStyle","paddingTop","paddingBottom","complete","unsubscribe","useValidation","updateErrorState","dirtyCheckNativeValue","runOutsideAngular","textarea","outerHeight","window","height","diff","clientHeight","style","Math","max","scrollHeight","focus","isFocused","isBadInput","newValue","validity","badInput","selector","exportAs","host","providers","provide","useExisting","McTextareaModule","imports","exports","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqBaA,0BAA0B,GAAG,IAAI,4DAAJ,CAAmC,4BAAnC,C;AAE1C,UAAIC,YAAY,GAAG,CAAnB;;UAGaC,c,GACT,wBACWC,wBADX,EAEWC,UAFX,EAGWC,eAHX,EAIWC,SAJX,EAI+B;AAAA;;AAHpB,aAAAH,wBAAA,GAAAA,wBAAA;AACA,aAAAC,UAAA,GAAAA,UAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACP,O,EAGR;;;UACaC,mBAAmB,GAAoD,gFAAgBL,cAAhB,C;;UAoBvEM,U;;;;;AA6GT,4BACcC,UADd,EAE+BH,SAF/B,EAGgBF,UAHhB,EAIsDM,aAJtD,EAK+CC,YAL/C,EAM+BC,OAN/B,EAOgBP,eAPhB,EAQIF,wBARJ,EAS4DU,kBAT5D,EAUYC,MAVZ,EAU0B;AAAA;;AAAA;;AAEtB,oCAAMX,wBAAN,EAAgCC,UAAhC,EAA4CC,eAA5C,EAA6DC,SAA7D;AAXU,gBAAAG,UAAA,GAAAA,UAAA;AACiB,gBAAAH,SAAA,GAAAA,SAAA;AAEuB,gBAAAI,aAAA,GAAAA,aAAA;AACP,gBAAAC,YAAA,GAAAA,YAAA;AAChB,gBAAAC,OAAA,GAAAA,OAAA;AAInB,gBAAAE,MAAA,GAAAA,MAAA;AApHH,gBAAAC,OAAA,GAAmB,IAAnB;;;;;;AAST,gBAAAC,OAAA,GAAmB,KAAnB;;;;;;AAMS,gBAAAC,YAAA,GAA8B,IAAI,4CAAJ,EAA9B;;;;;;AAMT,gBAAAC,WAAA,GAAsB,UAAtB;AAwEU,gBAAAC,GAAA,yBAAqBlB,YAAY,EAAjC;AAEF,gBAAAmB,SAAA,GAAY,KAAZ;AAEA,gBAAAC,SAAA,GAAY,KAAZ;AAKA,gBAAAC,UAAA,GAAqB,CAArB;AACA,gBAAAC,cAAA,GAAyB,CAAzB;AACA,gBAAAC,SAAA,GAAoB,CAApB,CAYkB,C;;;AAKtB,gBAAKC,aAAL,GAAqBZ,kBAAkB,IAAI,MAAKJ,UAAL,CAAgBiB,aAA3D;AAEA,gBAAKC,mBAAL,GAA2B,MAAKC,KAAhC,CAPsB,C;;AAUtB,gBAAKC,EAAL,GAAU,MAAKA,EAAf;AAEA,cAAMC,YAAY,GAAG,uDAAUrB,UAAU,CAACiB,aAArB,EAAoC,OAApC,CAArB;AAEA,gBAAKK,gBAAL,GAAwBD,YAAY,CAACE,SAAb,CAAuB,MAAKC,IAAL,CAAUC,IAAV,+BAAvB,CAAxB;AAdsB;AAezB;;;;;;;;;eAxGD,eACY;AACR,gBAAI,KAAK5B,SAAL,IAAkB,KAAKA,SAAL,CAAe6B,QAAf,KAA4B,IAAlD,EAAwD;AACpD,qBAAO,KAAK7B,SAAL,CAAe6B,QAAtB;AACH;;AAED,mBAAO,KAAKf,SAAZ;AACH,W;eAED,aAAaQ,KAAb,EAA6B;AACzB,iBAAKR,SAAL,GAAiB,oFAAsBQ,KAAtB,CAAjB;;AAEA,gBAAI,KAAKZ,OAAT,EAAkB;AACd,mBAAKA,OAAL,GAAe,KAAf;AACA,mBAAKC,YAAL,CAAkBmB,IAAlB;AACH;AACJ;;;;;;;;eAMD,eACM;AACF,mBAAO,KAAKC,GAAZ;AACH,W;eAED,aAAOT,KAAP,EAAsB;AAClB,iBAAKS,GAAL,GAAWT,KAAK,IAAI,KAAKT,GAAzB;AACH;;;;;;;;eAYD,eACY;AACR,mBAAO,KAAKE,SAAZ;AACH,W;eAED,aAAaO,KAAb,EAA6B;AACzB,iBAAKP,SAAL,GAAiB,oFAAsBO,KAAtB,CAAjB;AACH;;;;;;;;eAMD,eACS;AACL,mBAAO,KAAKH,aAAL,CAAmBG,KAA1B;AACH,W;eAED,aAAUA,KAAV,EAAyB;AACrB,gBAAIA,KAAK,KAAK,KAAKA,KAAnB,EAA0B;AACtB,mBAAKH,aAAL,CAAmBG,KAAnB,GAA2BA,KAA3B;AACA,mBAAKX,YAAL,CAAkBmB,IAAlB;AACH;AACJ;;;iBA0CD,oBAAW;AAAA;;AACPE,sBAAU,CAAC;AAAA,qBAAM,MAAI,CAACL,IAAL,EAAN;AAAA,aAAD,EAAoB,CAApB,CAAV;AACA,iBAAKX,UAAL,GAAkBiB,QAAQ,CAACC,gBAAgB,CAAC,KAAK/B,UAAL,CAAgBiB,aAAjB,CAAhB,CAAgDJ,UAAjD,EAA8D,EAA9D,CAA1B;AAEA,gBAAMmB,UAAU,GAAGF,QAAQ,CAACC,gBAAgB,CAAC,KAAK/B,UAAL,CAAgBiB,aAAjB,CAAhB,CAAgDe,UAAjD,EAA8D,EAA9D,CAA3B;AACA,gBAAMC,aAAa,GAAGH,QAAQ,CAACC,gBAAgB,CAAC,KAAK/B,UAAL,CAAgBiB,aAAjB,CAAhB,CAAgDgB,aAAjD,EAAiE,EAAjE,CAA9B,CALO,C;;AAQP,iBAAKlB,SAAL,GAAiB,KAAKF,UAAL,GAAkB,CAAlB,GAAsBmB,UAAtB,GAAmCC,aAApD;AACA,iBAAKnB,cAAL,GAAsB,KAAKD,UAA3B;AACH;;;iBAED,uBAAc;AACV,iBAAKL,YAAL,CAAkBmB,IAAlB;AACH;;;iBAED,uBAAc;AACV,iBAAKnB,YAAL,CAAkB0B,QAAlB;AACA,iBAAKZ,gBAAL,CAAsBa,WAAtB;AACH;;;iBAED,8BAAkB;AACd,gBAAI,CAAC,KAAKtC,SAAV,EAAqB;AAAE;AAAS;;AAEhC,gBAAI,KAAKK,YAAL,CAAkBkC,aAAtB,EAAqC;AACjC,kGAAoB,IAApB;AACH;AACJ;;;iBAED,qBAAY;AACR,gBAAI,KAAKvC,SAAT,EAAoB;;;;AAIhB,mBAAKwC,gBAAL;AACH,aANO,C;;;;;AAWR,iBAAKC,qBAAL;AACH;;;;;iBAGD,gBAAO;AAAA;;AACH,gBAAI,CAAC,KAAKhC,OAAV,EAAmB;AACf;AACH;;AAED,iBAAKD,MAAL,CAAYkC,iBAAZ,CAA8B,YAAM;AAChC,kBAAMC,QAAQ,GAAG,MAAI,CAACxC,UAAL,CAAgBiB,aAAjC;AAEA,kBAAMwB,WAAW,GAAGX,QAAQ,CAACY,MAAM,CAACX,gBAAP,CAAwBS,QAAxB,EAAkCG,MAAnC,EAA4C,EAA5C,CAA5B;AACA,kBAAMC,IAAI,GAAGH,WAAW,GAAGD,QAAQ,CAACK,YAApC;AAEAL,sBAAQ,CAACM,KAAT,CAAe/B,SAAf,GAA2B,CAA3B,CANgC,CAMF;;AAE9B,kBAAM4B,MAAM,GAAGI,IAAI,CAACC,GAAL,CAAS,MAAI,CAACjC,SAAd,EAAyB,CAACyB,QAAQ,CAACS,YAAV,GAAyBL,IAAzB,GAAgC,MAAI,CAAC9B,cAA9D,CAAf;AACA0B,sBAAQ,CAACM,KAAT,CAAe/B,SAAf,aAA8B4B,MAA9B;AACH,aAVD;AAWH;;;;;iBAGD,iBAAK;AACD,iBAAK3C,UAAL,CAAgBiB,aAAhB,CAA8BiC,KAA9B;AACH;;;;;iBAGD,sBAAaC,SAAb,EAAiC;AAC7B,gBAAIA,SAAS,KAAK,KAAK5C,OAAvB,EAAgC;AAC5B,mBAAKA,OAAL,GAAe4C,SAAf;AACA,mBAAK3C,YAAL,CAAkBmB,IAAlB;AACH;AACJ;;;;;;;;eAMD,eAAS;AACL,mBAAO,CAAC,KAAK3B,UAAL,CAAgBiB,aAAhB,CAA8BE,KAA/B,IAAwC,CAAC,KAAKiC,UAAL,EAAhD;AACH;;;;;;;;iBAMD,4BAAmB;AACf,iBAAKF,KAAL;AACH;;;;;iBAGS,iCAAwB;AAC9B,gBAAMG,QAAQ,GAAG,KAAKlC,KAAtB;;AAEA,gBAAI,KAAKD,mBAAL,KAA6BmC,QAAjC,EAA2C;AACvC,mBAAKnC,mBAAL,GAA2BmC,QAA3B;AACA,mBAAK7C,YAAL,CAAkBmB,IAAlB;AACH;AACJ;;;;;iBAGS,sBAAU;;AAEhB,gBAAM2B,QAAQ,GAAI,KAAKtD,UAAL,CAAgBiB,aAAhB,CAAsDqC,QAAxE;AAEA,mBAAOA,QAAQ,IAAIA,QAAQ,CAACC,QAA5B;AACH;;;;QAnP2BzD,mB;;;cAlB/B,uD;AAAS,eAAC;AACP0D,kBAAQ,EAAE,sBADH;AAEPC,kBAAQ,EAAE,YAFH;AAGPC,cAAI,EAAE;AACF,qBAAO,aADL;AAEF,6CAAiC,UAF/B;AAIF,yBAAa,IAJX;AAKF,kCAAsB,aALpB;AAMF,mCAAuB,YANrB;AAOF,+BAAmB,kBAPjB;AAQF,+BAAmB,UARjB;AAUF,sBAAU,qBAVR;AAWF,uBAAW;AAXT,WAHC;AAgBPC,mBAAS,EAAE,CAAC;AAAEC,mBAAO,EAAE,gFAAX;AAA+BC,uBAAW,EAAE9D;AAA5C,WAAD;AAhBJ,SAAD;;;;;;gBApCc;;gBAKoB,wD;AAAW,oBAAF;AAAA,kBAgK5C;AAhK4C,aAgKpC;AAAA,kBAAI;AAAJ,WAhKoC;;gBAAE,qD;AAAQ,oBAAF;AAAA,kBAiKpD;AAjKoD;;;;kBAkKpD;aAAQ;AAAA,kBAAI;AAAJ,W,EAAQ;AAAA,kBAAI,oDAAJ;AAAU,mBAAC,4DAAD;AAAV,W;;;;kBAChB;aAAQ;AAAA,kBAAI,oDAAJ;AAAU,mBAAC,qEAAD;AAAV,W;;gBAnK8C,sD;AAAS,oBAAF;AAAA,kBAoK7D;AApK6D,aAoKrD;AAAA,kBAAI;AAAJ,WApKqD;;gBAA7D,iE;AAAoB,oBAAF;AAAA,kBAqKlB;AArKkB;;gBAIvB;;;;kBAmKK;aAAQ;AAAA,kBAAI;AAAJ,W,EAAQ;AAAA,kBAAI,oDAAJ;AAAU,mBAACR,0BAAD;AAAV,W;;gBA1KC;;;;;;gBAuDrB;;;gBAGA;;;gBAwBA;;;gBAsBA;;;gBAaA;;;gBAMA;;;gBAaA;;;;UC9HQuE,gB;;;;;cALZ,sD;AAAQ,eAAC;AACNC,iBAAO,EAAE,CAAC,4DAAD,EAAe,4DAAf,EAA2B,sEAA3B,EAA2C,0DAA3C,CADH;AAENC,iBAAO,EAAE,CAACjE,UAAD,CAFH;AAGNkE,sBAAY,EAAE,CAAClE,UAAD;AAHR,SAAD;;ACTT","file":"common-es5.js","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit,\n    AfterContentInit\n} from '@angular/core';\nimport { FormGroupDirective, NG_VALIDATORS, NgControl, NgForm, NgModel, Validator } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    setMosaicValidation,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState, AfterContentInit {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() @Self() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.ngControl) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}