{"version":3,"mappings":"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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_0__","node_r3","ctx_r0","_r2","node_r4","ctx_r1","FileNode$5","FileFlatNode$5","node","k","data","docs","src","cdk","a11ly","documentation","source","tools","mosaic","autocomplete","button","index","version","alert","badge","README","wallabyTest","scripts","deploy","tests","TreeActionButtonExample","_ptsecurity_mosaic_core__WEBPACK_IMPORTED_MODULE_1__","flatNode","nodeType","_ptsecurity_mosaic_tree__WEBPACK_IMPORTED_MODULE_2__","console","type","selectors","decls","vars","consts","template","TreeActionButtonExample_mc_tree_option_1_Template","TreeActionButtonExample_mc_tree_option_2_Template","ctx","directives","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","_ptsecurity_mosaic_dropdown__WEBPACK_IMPORTED_MODULE_4__","_ptsecurity_mosaic_icon__WEBPACK_IMPORTED_MODULE_5__","_ptsecurity_mosaic_tooltip__WEBPACK_IMPORTED_MODULE_6__","styles","args","selector","templateUrl","styleUrls","node_r2","FileNode$4","FileFlatNode$4","TreeFilteringExample","TreeFilteringExample_mc_tree_option_6_Template","TreeFilteringExample_mc_tree_option_7_Template","_ptsecurity_mosaic_form_field__WEBPACK_IMPORTED_MODULE_7__","_ptsecurity_mosaic_input__WEBPACK_IMPORTED_MODULE_8__","pipes","FileNode$3","FileFlatNode$3","TreeMultipleCheckboxExample","TreeMultipleCheckboxExample_mc_tree_option_1_Template","TreeMultipleCheckboxExample_mc_tree_option_2_Template","_r4","_r7","node_r5","FileNode$2","FileFlatNode$2","TreeMultipleChecklistExample","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_9__","descendants","parent","i","TreeMultipleChecklistExample_mc_tree_option_1_Template","TreeMultipleChecklistExample_mc_tree_option_2_Template","_ptsecurity_mosaic_checkbox__WEBPACK_IMPORTED_MODULE_10__","FileNode$1","FileFlatNode$1","TreeMultipleKeyboardExample","TreeMultipleKeyboardExample_mc_tree_option_1_Template","TreeMultipleKeyboardExample_mc_tree_option_2_Template","FileNode","FileFlatNode","TreeOverviewExample","TreeOverviewExample_mc_tree_option_1_Template","TreeOverviewExample_mc_tree_option_2_Template","TreeExamplesModule","imports","_angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_11__","declarations","exports"],"sources":["webpack:///node_modules/@ptsecurity/mosaic-examples/fesm2015/ptsecurity-mosaic-examples-mosaic-tree.js"],"sourcesContent":["import { ClipboardModule } from '@angular/cdk/clipboard';\nimport * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3$1 from '@ptsecurity/mosaic/checkbox';\nimport { McCheckboxModule } from '@ptsecurity/mosaic/checkbox';\nimport * as i5 from '@ptsecurity/mosaic/core';\nimport { PopUpPlacements, McHighlightModule, McOptionModule } from '@ptsecurity/mosaic/core';\nimport * as i3 from '@ptsecurity/mosaic/dropdown';\nimport { McDropdownModule } from '@ptsecurity/mosaic/dropdown';\nimport * as i1$1 from '@ptsecurity/mosaic/form-field';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport * as i4 from '@ptsecurity/mosaic/icon';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport * as i2$1 from '@ptsecurity/mosaic/input';\nimport { McInputModule } from '@ptsecurity/mosaic/input';\nimport * as i6 from '@ptsecurity/mosaic/tooltip';\nimport { McToolTipModule } from '@ptsecurity/mosaic/tooltip';\nimport * as i1 from '@ptsecurity/mosaic/tree';\nimport { McTreeFlattener, FlatTreeControl, McTreeFlatDataSource, McTreeModule } from '@ptsecurity/mosaic/tree';\nimport { SelectionModel } from '@angular/cdk/collections';\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeActionButtonExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵelement(2, \"span\", 7);\n    i0.ɵɵelement(3, \"mc-option-action\", 8);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"disabled\", node_r3.name === \"tests\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mcTooltip\", \"Tooltip text\")(\"mcPlacement\", ctx_r0.popUpPlacements.Right)(\"mcDropdownTriggerFor\", _r2);\n} }\nfunction TreeActionButtonExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 9);\n    i0.ɵɵelement(1, \"i\", 6);\n    i0.ɵɵelement(2, \"mc-tree-node-toggle\", 10);\n    i0.ɵɵelement(3, \"span\", 7);\n    i0.ɵɵelement(4, \"mc-option-action\", 8);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"node\", node_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r4), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"mcTooltip\", \"Tooltip text\")(\"mcPlacement\", ctx_r1.popUpPlacements.Right)(\"mcDropdownTriggerFor\", _r2);\n} }\nclass FileNode$5 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$5 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$5(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$5();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$5(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$5 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeActionButtonExample {\n    constructor() {\n        this.popUpPlacements = PopUpPlacements;\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$5();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$5(DATA_OBJECT$5, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    onSelectAll($event) {\n        // tslint:disable-next-line:no-console\n        console.log('All items selected', $event);\n    }\n}\nTreeActionButtonExample.ɵfac = function TreeActionButtonExample_Factory(t) { return new (t || TreeActionButtonExample)(); };\nTreeActionButtonExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeActionButtonExample, selectors: [[\"tree-action-button-example\"]], decls: 11, vars: 5, consts: [[3, \"ngModel\", \"autoSelect\", \"dataSource\", \"treeControl\", \"ngModelChange\", \"onSelectAll\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"dropdown\", \"\"], [\"mc-dropdown-item\", \"\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [\"mc-icon\", \"mc-info-o_16\"], [3, \"innerHTML\"], [3, \"mcTooltip\", \"mcPlacement\", \"mcDropdownTriggerFor\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeActionButtonExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeActionButtonExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; })(\"onSelectAll\", function TreeActionButtonExample_Template_mc_tree_selection_onSelectAll_0_listener($event) { return ctx.onSelectAll($event); });\n        i0.ɵɵtemplate(1, TreeActionButtonExample_mc_tree_option_1_Template, 4, 5, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeActionButtonExample_mc_tree_option_2_Template, 5, 5, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mc-dropdown\", null, 3);\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵtext(6, \"action 1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵtext(8, \"action 2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 4);\n        i0.ɵɵtext(10, \"action 3\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"autoSelect\", false)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i3.McDropdown, i3.McDropdownItem, i1.McTreeOption, i1.McTreeNodePadding, i4.McIcon, i4.McIconCSSStyler, i5.McOptionActionComponent, i6.McTooltipTrigger, i3.McDropdownTrigger, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeActionButtonExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-action-button-example',\n                templateUrl: 'tree-action-button-example.html',\n                styleUrls: ['tree-action-button-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeFilteringExample_mc_tree_option_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 4);\n    i0.ɵɵelement(1, \"span\", 5);\n    i0.ɵɵpipe(2, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 2, ctx_r0.treeControl.getViewValue(node_r2), ctx_r0.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeFilteringExample_mc_tree_option_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵpipe(3, \"mcHighlight\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(3, 2, ctx_r1.treeControl.getViewValue(node_r3), ctx_r1.treeControl.filterValue.value), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$4 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$4 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$4(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$4();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$4(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$4 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeFilteringExample {\n    constructor() {\n        this.modelValue = '';\n        this.filterValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$4();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$4(DATA_OBJECT$4, 0);\n    }\n    onFilterChange(value) {\n        this.treeControl.filterNodes(value);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeFilteringExample.ɵfac = function TreeFilteringExample_Factory(t) { return new (t || TreeFilteringExample)(); };\nTreeFilteringExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeFilteringExample, selectors: [[\"tree-filtering-example\"]], decls: 8, vars: 5, consts: [[\"type\", \"text\", \"mcInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeFilteringExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-form-field\");\n        i0.ɵɵelementStart(1, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.onFilterChange($event); })(\"ngModelChange\", function TreeFilteringExample_Template_input_ngModelChange_1_listener($event) { return ctx.filterValue = $event; });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"mc-tree-selection\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeFilteringExample_Template_mc_tree_selection_ngModelChange_5_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(6, TreeFilteringExample_mc_tree_option_6_Template, 3, 5, \"mc-tree-option\", 2);\n        i0.ɵɵtemplate(7, TreeFilteringExample_mc_tree_option_7_Template, 4, 5, \"mc-tree-option\", 3);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.filterValue);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1$1.McFormField, i2$1.McInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i1.McTreeSelection, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent], pipes: [i5.McHighlightPipe], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeFilteringExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-filtering-example',\n                templateUrl: 'tree-filtering-example.html',\n                styleUrls: ['tree-filtering-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleCheckboxExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleCheckboxExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"i\", 4);\n    i0.ɵɵelement(2, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$3 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$3 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$3(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$3();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$3(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$3 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleCheckboxExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$3();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$3(DATA_OBJECT$3, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleCheckboxExample.ɵfac = function TreeMultipleCheckboxExample_Factory(t) { return new (t || TreeMultipleCheckboxExample)(); };\nTreeMultipleCheckboxExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleCheckboxExample, selectors: [[\"tree-multiple-checkbox-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"checkbox\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [\"mc-icon\", \"mc-info-o_16\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleCheckboxExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleCheckboxExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleCheckboxExample_mc_tree_option_1_Template, 3, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleCheckboxExample_mc_tree_option_2_Template, 4, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i4.McIcon, i4.McIconCSSStyler, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleCheckboxExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-checkbox-example',\n                templateUrl: 'tree-multiple-checkbox-example.html',\n                styleUrls: ['tree-multiple-checkbox-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleChecklistExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelementStart(1, \"mc-checkbox\", 4);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_1_Template_mc_checkbox_change_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const node_r2 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.fileSelectionToggle(node_r2); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\")(\"checked\", ctx_r0.checklistSelection.isSelected(node_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleChecklistExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 6);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 7);\n    i0.ɵɵelementStart(2, \"mc-checkbox\", 8);\n    i0.ɵɵlistener(\"change\", function TreeMultipleChecklistExample_mc_tree_option_2_Template_mc_checkbox_change_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const node_r5 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.fileSelectionToggle(node_r5); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r1.descendantsAllSelected(node_r5))(\"indeterminate\", ctx_r1.descendantsPartiallySelected(node_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r5), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$2 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$2 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$2(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$2();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$2(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$2 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Checklist tree\n */\nclass TreeMultipleChecklistExample {\n    constructor() {\n        this.modelValue = [];\n        /** The selection for checklist */\n        this.checklistSelection = new SelectionModel(true /* multiple */);\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$2();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$2(DATA_OBJECT$2, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        return descendants.every((child) => this.checklistSelection.isSelected(child));\n    }\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node) {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some((child) => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    fileSelectionToggle(node) {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n        // Force update for the parent\n        descendants.every((child) => this.checklistSelection.isSelected(child));\n        this.checkAllParentsSelection(node);\n    }\n    /* Checks all the parents when a leaf node is selected/unselected */\n    checkAllParentsSelection(node) {\n        let parent = this.getParentNode(node);\n        while (parent) {\n            this.checkRootNodeSelection(parent);\n            parent = this.getParentNode(parent);\n        }\n    }\n    /** Check root node checked state and change it accordingly */\n    checkRootNodeSelection(node) {\n        const nodeSelected = this.checklistSelection.isSelected(node);\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.every((child) => this.checklistSelection.isSelected(child));\n        if (nodeSelected && !descAllSelected) {\n            this.checklistSelection.deselect(node);\n        }\n        else if (!nodeSelected && descAllSelected) {\n            this.checklistSelection.select(node);\n        }\n    }\n    /* Get the parent node of a node */\n    getParentNode(node) {\n        const currentLevel = this.getLevel(node);\n        if (currentLevel < 1) {\n            return null;\n        }\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n        for (let i = startIndex; i >= 0; i--) {\n            const currentNode = this.treeControl.dataNodes[i];\n            if (this.getLevel(currentNode) < currentLevel) {\n                return currentNode;\n            }\n        }\n        return null;\n    }\n}\nTreeMultipleChecklistExample.ɵfac = function TreeMultipleChecklistExample_Factory(t) { return new (t || TreeMultipleChecklistExample)(); };\nTreeMultipleChecklistExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleChecklistExample, selectors: [[\"tree-multiple-checklist-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [1, \"tree-example-checkbox\", 3, \"disabled\", \"checked\", \"change\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"], [1, \"tree-example-checkbox\", 3, \"checked\", \"indeterminate\", \"change\"]], template: function TreeMultipleChecklistExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleChecklistExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleChecklistExample_mc_tree_option_1_Template, 3, 4, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleChecklistExample_mc_tree_option_2_Template, 4, 4, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i3$1.McCheckbox, i1.McTreeNodeToggleComponent], styles: [\".tree-example-checkbox[_ngcontent-%COMP%]{margin-right:8px}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleChecklistExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-checklist-example',\n                templateUrl: 'tree-multiple-checklist-example.html',\n                styleUrls: ['tree-multiple-checklist-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeMultipleKeyboardExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeMultipleKeyboardExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode$1 {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode$1 {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree$1(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode$1();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree$1(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT$1 = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeMultipleKeyboardExample {\n    constructor() {\n        this.modelValue = [];\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode$1();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree$1(DATA_OBJECT$1, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeMultipleKeyboardExample.ɵfac = function TreeMultipleKeyboardExample_Factory(t) { return new (t || TreeMultipleKeyboardExample)(); };\nTreeMultipleKeyboardExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeMultipleKeyboardExample, selectors: [[\"tree-multiple-keyboard-example\"]], decls: 3, vars: 4, consts: [[\"multiple\", \"keyboard\", 3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeMultipleKeyboardExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeMultipleKeyboardExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeMultipleKeyboardExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeMultipleKeyboardExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMultipleKeyboardExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-multiple-keyboard-example',\n                templateUrl: 'tree-multiple-keyboard-example.html',\n                styleUrls: ['tree-multiple-keyboard-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\n/* tslint:disable:no-reserved-keywords object-literal-key-quotes */\nfunction TreeOverviewExample_mc_tree_option_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 3);\n    i0.ɵɵelement(1, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", node_r2.name === \"tests\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.treeControl.getViewValue(node_r2), i0.ɵɵsanitizeHtml);\n} }\nfunction TreeOverviewExample_mc_tree_option_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mc-tree-option\", 5);\n    i0.ɵɵelement(1, \"mc-tree-node-toggle\", 6);\n    i0.ɵɵelement(2, \"span\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", node_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.treeControl.getViewValue(node_r3), i0.ɵɵsanitizeHtml);\n} }\nclass FileNode {\n}\n/** Flat node with expandable and level information */\nclass FileFlatNode {\n}\n/**\n * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n * The return value is the list of `FileNode`.\n */\nfunction buildFileTree(value, level) {\n    const data = [];\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        const node = new FileNode();\n        node.name = `${k}`;\n        if (v === null || v === undefined) {\n            // no action\n        }\n        else if (typeof v === 'object') {\n            node.children = buildFileTree(v, level + 1);\n        }\n        else {\n            node.type = v;\n        }\n        data.push(node);\n    }\n    return data;\n}\nconst DATA_OBJECT = {\n    docs: 'app',\n    src: {\n        cdk: {\n            a11ly: {\n                'aria describer': {\n                    'aria-describer': 'ts',\n                    'aria-describer.spec': 'ts',\n                    'aria-reference': 'ts',\n                    'aria-reference.spec': 'ts'\n                },\n                'focus monitor': {\n                    'focus-monitor': 'ts',\n                    'focus-monitor.spec': 'ts'\n                }\n            }\n        },\n        documentation: {\n            source: '',\n            tools: ''\n        },\n        mosaic: {\n            autocomplete: '',\n            button: '',\n            'button-toggle': '',\n            index: 'ts',\n            package: 'json',\n            version: 'ts'\n        },\n        'mosaic-dev': {\n            alert: '',\n            badge: ''\n        },\n        'mosaic-examples': '',\n        'mosaic-moment-adapter': '',\n        README: 'md',\n        'tsconfig.build': 'json',\n        wallabyTest: 'ts'\n    },\n    scripts: {\n        deploy: {\n            'cleanup-preview': 'ts',\n            'publish-artifacts': 'sh',\n            'publish-docs': 'sh',\n            'publish-docs-preview': 'ts'\n        },\n        'tsconfig.deploy': 'json'\n    },\n    tests: ''\n};\n/**\n * @title Basic tree\n */\nclass TreeOverviewExample {\n    constructor() {\n        this.modelValue = '';\n        this.transformer = (node, level, parent) => {\n            const flatNode = new FileFlatNode();\n            flatNode.name = node.name;\n            flatNode.parent = parent;\n            flatNode.type = node.type;\n            flatNode.level = level;\n            flatNode.expandable = !!node.children;\n            return flatNode;\n        };\n        this.getLevel = (node) => {\n            return node.level;\n        };\n        this.isExpandable = (node) => {\n            return node.expandable;\n        };\n        this.getChildren = (node) => {\n            return node.children;\n        };\n        this.getValue = (node) => {\n            return node.name;\n        };\n        this.getViewValue = (node) => {\n            const nodeType = node.type ? `.${node.type}` : '';\n            return `${node.name}${nodeType}`;\n        };\n        this.treeFlattener = new McTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable, this.getValue, this.getViewValue);\n        this.dataSource = new McTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.dataSource.data = buildFileTree(DATA_OBJECT, 0);\n    }\n    hasChild(_, nodeData) { return nodeData.expandable; }\n}\nTreeOverviewExample.ɵfac = function TreeOverviewExample_Factory(t) { return new (t || TreeOverviewExample)(); };\nTreeOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TreeOverviewExample, selectors: [[\"tree-overview-example\"]], decls: 3, vars: 4, consts: [[3, \"ngModel\", \"dataSource\", \"treeControl\", \"ngModelChange\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\", 4, \"mcTreeNodeDef\"], [\"mcTreeNodePadding\", \"\", 4, \"mcTreeNodeDef\", \"mcTreeNodeDefWhen\"], [\"mcTreeNodePadding\", \"\", 3, \"disabled\"], [3, \"innerHTML\"], [\"mcTreeNodePadding\", \"\"], [3, \"node\"]], template: function TreeOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-tree-selection\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TreeOverviewExample_Template_mc_tree_selection_ngModelChange_0_listener($event) { return ctx.modelValue = $event; });\n        i0.ɵɵtemplate(1, TreeOverviewExample_mc_tree_option_1_Template, 2, 2, \"mc-tree-option\", 1);\n        i0.ɵɵtemplate(2, TreeOverviewExample_mc_tree_option_2_Template, 3, 2, \"mc-tree-option\", 2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.modelValue)(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mcTreeNodeDefWhen\", ctx.hasChild);\n    } }, directives: [i1.McTreeSelection, i2.NgControlStatus, i2.NgModel, i1.McTreeNodeDef, i1.McTreeOption, i1.McTreeNodePadding, i1.McTreeNodeToggleComponent], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeOverviewExample, [{\n        type: Component,\n        args: [{\n                selector: 'tree-overview-example',\n                templateUrl: 'tree-overview-example.html',\n                styleUrls: ['tree-overview-example.css']\n            }]\n    }], function () { return []; }, null); })();\n\nconst EXAMPLES = [\n    TreeActionButtonExample,\n    TreeOverviewExample,\n    TreeMultipleCheckboxExample,\n    TreeMultipleChecklistExample,\n    TreeMultipleKeyboardExample,\n    TreeFilteringExample\n];\nclass TreeExamplesModule {\n}\nTreeExamplesModule.ɵfac = function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); };\nTreeExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\nTreeExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            FormsModule,\n            McFormFieldModule,\n            McInputModule,\n            McTreeModule,\n            McIconModule,\n            McHighlightModule,\n            McCheckboxModule,\n            McDropdownModule,\n            McToolTipModule,\n            McOptionModule,\n            ClipboardModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    FormsModule,\n                    McFormFieldModule,\n                    McInputModule,\n                    McTreeModule,\n                    McIconModule,\n                    McHighlightModule,\n                    McCheckboxModule,\n                    McDropdownModule,\n                    McToolTipModule,\n                    McOptionModule,\n                    ClipboardModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeActionButtonExample,\n        TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample], imports: [FormsModule,\n        McFormFieldModule,\n        McInputModule,\n        McTreeModule,\n        McIconModule,\n        McHighlightModule,\n        McCheckboxModule,\n        McDropdownModule,\n        McToolTipModule,\n        McOptionModule,\n        ClipboardModule], exports: [TreeActionButtonExample,\n        TreeOverviewExample,\n        TreeMultipleCheckboxExample,\n        TreeMultipleChecklistExample,\n        TreeMultipleKeyboardExample,\n        TreeFilteringExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TreeActionButtonExample, TreeExamplesModule, TreeFilteringExample, TreeMultipleCheckboxExample, TreeMultipleChecklistExample, TreeMultipleKeyboardExample, TreeOverviewExample };\n"]}