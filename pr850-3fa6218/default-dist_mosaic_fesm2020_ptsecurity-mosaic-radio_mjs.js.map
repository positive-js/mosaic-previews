{"version":3,"file":"default-dist_mosaic_fesm2020_ptsecurity-mosaic-radio_mjs.js","mappings":"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","sources":["./packages/mosaic/radio/radio.component.ts","./packages/mosaic/radio/radio.component.html","./packages/mosaic/radio/radio.module.ts","./packages/mosaic/radio/ptsecurity-mosaic-radio.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(elementRef: ElementRef, private readonly _changeDetector: ChangeDetectorRef) {\n        super(elementRef);\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nabstract class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    abstract disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor & HasTabIndexCtor & typeof McRadioButtonBase = mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-selected]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","<label class=\"mc-radio-label\" [attr.for]=\"inputId\" #label>\n    <input type=\"radio\"\n           class=\"mc-radio-input cdk-visually-hidden\"\n           #input\n           [id]=\"inputId\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [tabIndex]=\"tabIndex\"\n           [attr.name]=\"name\"\n           [required]=\"required\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"onInputChange($event)\"\n           (click)=\"onInputClick($event)\">\n\n    <div class=\"mc-radio-label-content\" [class.mc-radio-label-before]=\"labelPosition == 'before'\">\n        <div class=\"mc-radio-button__outer-circle\"></div>\n        <div class=\"mc-radio-button__inner-circle\"></div>\n        <ng-content></ng-content>\n    </div>\n</label>\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["nextUniqueId","McRadioChange","constructor","source","value","McRadioGroupBase","_elementRef","McRadioGroupMixinBase","mixinDisabled","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McRadioGroup","multi","_changeDetector","elementRef","EventEmitter","_value","_selected","isInitialized","_labelPosition","_disabled","_required","name","_name","updateRadioButtonNames","labelPosition","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","selected","disabled","toBoolean","required","checked","ngAfterContentInit","touch","onTouched","emitChangeEvent","change","emit","radios","forEach","radio","markForCheck","writeValue","registerOnChange","fn","controlValueAccessorChangeFn","registerOnTouched","setDisabledState","isDisabled","isAlreadySelected","i0","McRadioButton","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","Directive","args","selector","exportAs","host","role","class","providers","Input","Output","ContentChildren","descendants","McRadioButtonBase","mixinColor","mixinTabIndex","McRadioButtonMixinBase","focusMonitor","_radioDispatcher","isFocused","_checked","id","uniqueId","radioGroup","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","inputId","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","focus","inputElement","nativeElement","onInputClick","event","stopPropagation","onInputChange","groupValueChanged","i1","i2","Component","inputs","encapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","template","styles","decorators","Optional","ariaLabel","ariaLabelledby","ariaDescribedby","ViewChild","static","McRadioModule","CommonModule","A11yModule","McCommonModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}