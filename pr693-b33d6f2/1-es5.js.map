{"version":3,"sources":["webpack:///dist/packages/mosaic/radio/radio.component.ts","webpack:///dist/packages/mosaic/radio/radio.module.ts","webpack:///dist/packages/mosaic/radio/ptsecurity-mosaic-radio.ts"],"names":["nextUniqueId","McRadioChange","source","value","McRadioGroupBase","_elementRef","McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","McRadioGroup","multi","elementRef","_changeDetector","change","_value","_name","_selected","isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","selected","checked","emit","radios","forEach","radio","markForCheck","fn","isDisabled","disabled","name","isAlreadySelected","McRadioButton","descendants","McRadioButtonBase","McRadioButtonMixinBase","radioGroup","focusMonitor","_radioDispatcher","isFocused","uniqueId","_checked","removeUniqueSelectionListener","id","listen","newCheckedState","notify","newDisabledState","required","labelPosition","monitor","subscribe","focusOrigin","touch","stopMonitoring","inputElement","nativeElement","focus","event","stopPropagation","groupValueChanged","emitChangeEvent","McRadioModule"],"mappings":"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","file":"1-es5.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(elementRef: ElementRef, private readonly _changeDetector: ChangeDetectorRef) {\n        super(elementRef);\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nabstract class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    abstract disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor & HasTabIndexCtor & typeof McRadioButtonBase = mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-selected]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}