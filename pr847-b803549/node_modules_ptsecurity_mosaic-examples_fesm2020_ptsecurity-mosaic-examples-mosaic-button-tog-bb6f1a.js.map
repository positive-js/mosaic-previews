{"version":3,"file":"node_modules_ptsecurity_mosaic-examples_fesm2020_ptsecurity-mosaic-examples-mosaic-button-tog-bb6f1a.js","mappings":"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","sources":["./packages/mosaic/button-toggle/button-toggle.component.ts","./packages/mosaic/button-toggle/button-toggle.module.ts","./packages/mosaic/button-toggle/ptsecurity-mosaic-button-toggle.ts","./node_modules/@ptsecurity/mosaic-examples/fesm2020/ptsecurity-mosaic-examples-mosaic-button-toggle.mjs"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any\n    ) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle_vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) { return; }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    exportAs: 'mcButtonToggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-button-toggle',\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, { static: false }) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> = new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) { return; }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","import * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i1 from '@ptsecurity/mosaic/button-toggle';\nimport { McButtonToggleModule } from '@ptsecurity/mosaic/button-toggle';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\n/**\n * @title Basic button-toggle\n */\nclass ButtonToggleMultipleOverviewExample {\n}\nButtonToggleMultipleOverviewExample.ɵfac = function ButtonToggleMultipleOverviewExample_Factory(t) { return new (t || ButtonToggleMultipleOverviewExample)(); };\nButtonToggleMultipleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ButtonToggleMultipleOverviewExample, selectors: [[\"button-toggle-multiple-overview-example\"]], decls: 13, vars: 5, consts: [[3, \"multiple\"], [\"multipleGroup\", \"mcButtonToggleGroup\"], [3, \"value\"]], template: function ButtonToggleMultipleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", 0, 1)(2, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 2);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(8, \"br\")(9, \"br\")(10, \"br\");\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵproperty(\"multiple\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 2);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 3);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleMultipleOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'button-toggle-multiple-overview-example', template: \"<mc-button-toggle-group [multiple]=\\\"true\\\" #multipleGroup=\\\"mcButtonToggleGroup\\\">\\n    <mc-button-toggle [value]=\\\"1\\\">\\n        button 1\\n    </mc-button-toggle>\\n    <mc-button-toggle [value]=\\\"2\\\">\\n        button 2\\n    </mc-button-toggle>\\n    <mc-button-toggle [value]=\\\"3\\\">\\n        button 3\\n    </mc-button-toggle>\\n</mc-button-toggle-group>\\n\\n<br><br><br>\\n\\n<div>Selected value: {{ multipleGroup.value }}</div>\\n\", styles: [\"\"] }]\n    }], null, null); })();\n\n/**\n * @title button-toggle\n */\nclass ButtonToggleOverviewExample {\n}\nButtonToggleOverviewExample.ɵfac = function ButtonToggleOverviewExample_Factory(t) { return new (t || ButtonToggleOverviewExample)(); };\nButtonToggleOverviewExample.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ButtonToggleOverviewExample, selectors: [[\"button-toggle-overview-example\"]], decls: 15, vars: 5, consts: [[\"group1\", \"mcButtonToggleGroup\"], [3, \"value\"]], template: function ButtonToggleOverviewExample_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mc-button-toggle-group\", null, 0)(2, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(3, \" button 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(5, \" button 2 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(7, \" button 3 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mc-button-toggle\", 1);\n        i0.ɵɵtext(9, \" button 4 \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(10, \"br\")(11, \"br\")(12, \"br\");\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 2);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 3);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", 4);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"Selected value: \", _r0.value, \"\");\n    } }, directives: [i1.McButtonToggleGroup, i1.McButtonToggle], styles: [\"\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleOverviewExample, [{\n        type: Component,\n        args: [{ selector: 'button-toggle-overview-example', template: \"<mc-button-toggle-group #group1=\\\"mcButtonToggleGroup\\\">\\n    <mc-button-toggle [value]=\\\"1\\\">\\n        button 1\\n    </mc-button-toggle>\\n    <mc-button-toggle [value]=\\\"2\\\">\\n        button 2\\n    </mc-button-toggle>\\n    <mc-button-toggle [value]=\\\"3\\\">\\n        button 3\\n    </mc-button-toggle>\\n    <mc-button-toggle [value]=\\\"4\\\">\\n        button 4\\n    </mc-button-toggle>\\n</mc-button-toggle-group>\\n\\n<br><br><br>\\n\\n<div>Selected value: {{ group1.value }}</div>\\n\", styles: [\"\"] }]\n    }], null, null); })();\n\nconst EXAMPLES = [\n    ButtonToggleOverviewExample,\n    ButtonToggleMultipleOverviewExample\n];\nclass ButtonToggleExamplesModule {\n}\nButtonToggleExamplesModule.ɵfac = function ButtonToggleExamplesModule_Factory(t) { return new (t || ButtonToggleExamplesModule)(); };\nButtonToggleExamplesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ButtonToggleExamplesModule });\nButtonToggleExamplesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            McButtonToggleModule,\n            McIconModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ButtonToggleExamplesModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    McButtonToggleModule,\n                    McIconModule\n                ],\n                declarations: EXAMPLES,\n                exports: EXAMPLES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ButtonToggleExamplesModule, { declarations: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample], imports: [McButtonToggleModule,\n        McIconModule], exports: [ButtonToggleOverviewExample,\n        ButtonToggleMultipleOverviewExample] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ButtonToggleExamplesModule, ButtonToggleMultipleOverviewExample, ButtonToggleOverviewExample };\n"],"names":["provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McButtonToggleGroup","multi","McButtonToggleChange","constructor","source","value","_changeDetector","EventEmitter","_vertical","_multiple","_disabled","vertical","coerceBooleanProperty","selected","selectionModel","multiple","map","toggle","undefined","newValue","setSelectionByValue","valueChange","emit","disabled","buttonToggles","forEach","markForCheck","ngOnInit","SelectionModel","ngAfterContentInit","select","filter","checked","writeValue","registerOnChange","fn","controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","emitChangeEvent","Array","isArray","length","event","change","syncButtonToggle","isUserInput","deselect","isSelected","isPrechecked","rawValue","some","Error","clearSelection","currentValue","selectValue","clear","correspondingOption","find","i0","McButtonToggle","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","Directive","args","selector","providers","host","role","class","exportAs","Input","ContentChildren","Output","buttonToggleGroup","changeDetectorRef","focusMonitor","element","isSingleSelector","_checked","type","monitor","nativeElement","ngOnDestroy","group","stopMonitoring","Promise","resolve","then","focus","onToggleClick","newChecked","i1","McButton","i2","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","decorators","Optional","mcButton","ViewChild","static","tabIndex","McButtonToggleModule","McCommonModule","McButtonModule","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///"}